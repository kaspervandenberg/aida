<?xml version='1.0' encoding='ISO-8859-1'?>
	<!DOCTYPE uridef[
  <!ENTITY owl "http://www.w3.org/2002/07/owl">
  <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns">
  <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema">
  <!ENTITY xsd "http://www.w3.org/2001/XMLSchema">
]>

<rdf:RDF
  xmlns:owl  ="http://www.w3.org/2002/07/owl#"
  xmlns:rdf  ="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rdfs ="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:xsd  ="http://www.w3.org/2001/XMLSchema#"
  xmlns      =""
 >

  
  
    <owl:Ontology rdf:ID="OpencycStrippedForProtege">
        <owl:versionInfo>$Id: ExportDaml.java,v 1.23 2002/10/25
            23:23:57 stephenreed Exp $</owl:versionInfo>
        <rdfs:comment>Open Cyc Ontology</rdfs:comment>
    </owl:Ontology>

    <owl:FunctionalProperty rdf:ID="guid">
        <rdfs:label xml:lang="en">guid</rdfs:label>
        <rdfs:comment>Permanent Global Unique ID for the associated concept.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    </owl:FunctionalProperty>
    <owl:Class rdf:ID="AbandoningSomething">
        <rdfs:label xml:lang="en">abandoning events</rdfs:label>
        <rdfs:comment>The collection of events in which some #$Agent
            deliberately gives up possession of something, without
            giving it to another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Abbreviation">
        <rdfs:label xml:lang="en">abbreviation</rdfs:label>
        <rdfs:comment>A shortened version of a written word or phrase.
            An #$Acronym is a specific type of abbreviation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProperNameString"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Abhorrence">
        <rdfs:label xml:lang="en">abhorrence</rdfs:label>
        <rdfs:comment>Extreme repugnance felt towards a person or thing,
            typically resulting in strenuous efforts to avoid it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Disgust"/>
        <rdfs:subClassOf rdf:resource="#Hate"/>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="Ablation">
        <rdfs:label xml:lang="en">ablations</rdfs:label>
        <rdfs:comment>A collection of events.  In an #$Ablation, a
            (usually relatively thin) layer of material is removed from
            the surface of an object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AboveGroundLevelInAConstruction">
        <rdfs:label xml:lang="en">above-ground levels</rdfs:label>
        <rdfs:comment>#$AboveGroundLevelInAConstruction is a
            specialization of #$LevelOfAConstruction. Each instance of
            #$AboveGroundLevelInAConstruction is at or above ground
            level.  See also #$BasementLevelInAConstruction and #$BalconyLevelInAConstruction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbradingSomething">
        <rdfs:label xml:lang="en">abrading events</rdfs:label>
        <rdfs:comment>A collection of events.  In an #$AbradingSomething
            event, the surface of some object is gradually worn away by
            scraping or similar physical contact involving friction.
            Devices used in elements of #$AbradingSomething include
            files and sand paper; elements of #$AbradingSomething would
            include the event in which Howard Hughes sanded down the
            Spruce Goose for the last time, the event in which Lucy
            Ricardo filed her fingernails just before her singing debut
            at Rickie&apos;s club, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ablation"/>
        <rdfs:subClassOf rdf:resource="#Rubbing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbstractInformationStructure">
        <rdfs:label xml:lang="en">AIS</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$AbstractInformationStructure is an
            abstract individual comprising abstract symbols and
            relations between them. Important specializations of this
            collection include #$CharacterString and #$Sentence.
            #$AbstractInformationStructure also includes abstract
            diagrams, graphs, and bit strings. The collection can be
            more precisely defined as follows: Each
            #$AbstractInformationStructure is such that each of its
            physical instantiations (see #$instantiationOfAIS) consists
            of instantiations of instances of #$AtomicSymbol-Abstract,
            arranged in a certain way. For example, the abstract
            sentence &apos;The pig flies&apos; is an
            #$AbstractInformationStructure. Each written instantiation
            of it consists of an instantiation of the words (symbols)
            &apos;The&apos;, &apos;pig&apos; and &apos;flies&apos;,
            written in that order. (If the
            #$AbstractInformationStructure &apos;The pig flies&apos;
            were spoken, the same words would appear in the same order,
            i.e. &apos;The&apos; first, etc., but the sequence would be
            determined by the arrangement of the spoken words in time,
            rather than space.) Likewise with abstract diagrams, graphs,
            etc. Each of these is such that its physical instantiations
            consist of arrangements of instantiations of instances of
            #$AtomicSymbol-Abstract. A hard copy of a wiring diagram
            consists of a group of concrete symbols representing various
            circuit components, in which these symbols are spatially
            arranged in a certain in way. The arrangement of the
            concrete symbols in an instantiation of an
            #$AbstractInformationStructure is not always a simple matter
            of arrangement in space or time. The sequence of symbols
            &apos;0010010111011001&apos; can be instantiated in written,
            spoken, or electronic forms. In the last case, the order of
            the symbols is determined by conventions concerning the
            electronic medium in which it is stored, rather than by any
            common criterion for precedence or subsequence in space or time.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbstractInformationalThing">
        <rdfs:label xml:lang="en">AIT</rdfs:label>
        <rdfs:comment>A specialization of #$IntangibleIndividual and
            #$InformationStore. #$AbstractInformationalThing is a
            heterogeneous collection of abstract repositories of
            information. #$AbstractInformationalThing is a
            generalization not only of #$Proposition, but also the
            collections #$Sentence, #$CharacterString,
            #$AtomicSymbol-Abstract, #$Microtheory,
            #$PropositionalInformationThing, and #$ConceptualWork. Each
            instance of #$AbstractInformationalThing is an abstract
            individual and most instances of this collection can have
            multiple concrete  embodiments . For example, a single
            instance of #$Sentence can be written on several pieces of
            paper (see #$instantiationOfAIS); a
            #$PropositionalInformationThing may be the content of
            several concrete documents, such as several instances of
            #$BookCopy (see #$containsInfoPropositional-IBT); and
            several distinct events, such as spoken utterances, may have
            a certain unique #$Proposition as their content (see
            #$containsInformation). Note that some instances of
            #$AbstractInformationalThing have temporal extent.  Examples
            include all instances of #$DevisedPracticeOrWork, such as
            the instances of #$Novel-CW and #$Movie-CW. Other
            specializations of #$AbstractInformationalThing are disjoint
            with #$TemporalThing. Examples include all instances of
            #$Character-Abstract and #$Proposition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbstractNounProducingSuffix">
        <rdfs:label xml:lang="en">abstract noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbstractProgrammingLanguage">
        <rdfs:label xml:lang="en">#$AbstractProgrammingLanguage</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerLanguage,
            #$AbstractProgrammingLanguage is the collection of languages
            invented for the purpose of composing computer programs
            (i.e., instances of #$ComputerProgram-CW), as opposed to
            merely facilitating interaction between pieces of software
            or indicating how to represent pieces of text. Thus,
            #$ComputerLanguages such as #$Lisp are instances of
            #$AbstractProgrammingLanguage, whereas #$ComputerLanguages
            such as #$HypertextMarkupLanguage are not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerLanguage"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AbstractShapeType">
        <rdfs:label xml:lang="en">#$AbstractShapeType</rdfs:label>
        <rdfs:comment>A collection of collections. An instance SHAPE of
            #$ShapeType (q.v.) is also an instance of
            #$AbstractShapeType if and only if SHAPE is a specialization
            of #$GeometricThing-Abstract.  Since all of the instances of
            a given instance of #$AbstractShapeType are abstract, the
            collection #$AbstractShapeType is disjoint with
            #$GenericShapeType (q.v.), which is the collection of those
            collections that are instances of #$ShapeType, some of whose
            instances are abstract, and some of whose instances are
            localized  (note that there is no collection `LocalizedShapeType&apos;).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
    </owl:Class>
    <owl:Class rdf:ID="AcademicProfessional">
        <rdfs:label xml:lang="en">#$AcademicProfessional</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation.  Each
            instance of #$AcademicProfessional is a person whose job is
            to educate and/or  perform research as an affiliate of an
            academic institution.  This includes members of the teaching
            and/or research staffs of schools, colleges, universities,
            and research institutes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AcademicQuarter">
        <rdfs:label xml:lang="en">academic quarters</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            #$TimeInterval defined by some educational institution: one
            quarter of their #$AcademicYear.  Since the start dates, end
            dates, and duration may all vary depending on the
            institution, the year, etc., instances of this collection
            must unfortunately be time intervals like StanfordSpringQuarter1991.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AcademicSemester">
        <rdfs:label xml:lang="en">semesters</rdfs:label>
        <rdfs:comment>A specialization of #$TimeInterval.  Each instance
            of #$AcademicSemester is one of two semesters in some
            educational institution&apos;s academic year (see the
            collection #$AcademicYear). Instances of #$AcademicSemester
            include Boston University&apos;s 1989 Spring Semester and
            the University of Texas at Austin&apos;s 1998 Fall Semester.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AcademicTrimester">
        <rdfs:label xml:lang="en">trimesters</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            #$TimeInterval defined by some educational institution: one
            third of their #$AcademicYear. Since the start dates, end
            dates, and duration may all vary depending on the
            institution and year, instances of this collection must
            unfortunately be time intervals like UCLASpringTrimester1990-91.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AcademicYear">
        <rdfs:label xml:lang="en">school years</rdfs:label>
        <rdfs:comment>Each instance of this collection is an annually
            recurring #$TimeInterval defined by an educational
            institution.  Since the start dates, end dates, and duration
            may all vary depending on the institution, the year, etc.,
            instances of this collection must unfortunately be time
            intervals like Stanford1989-90AcademicYear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Acceleration">
        <rdfs:label xml:lang="en">acceleration</rdfs:label>
        <rdfs:comment>Acceleration is the change in speed of an object
            per unit time.  It is a measurable physical quantity,
            measured in units such as MilesPerHourPerSecond.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="AccessNumber">
        <rdfs:label xml:lang="en">access numbers</rdfs:label>
        <rdfs:comment>A specialization of #$PhoneNumber. Each instance
            of #$AccessNumber is a string that a user with #$Internet
            connections uses to connect to his/her #$InternetServiceProvider.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhoneNumber"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="AccessingAnIBT">
        <rdfs:label xml:lang="en">#$AccessingAnIBT</rdfs:label>
        <rdfs:comment>A specialization of both
            #$InformationTransferEvent and #$PurposefulAction.  Each
            instance of #$AccessingAnIBT is an action by which an agent
            accesses the content of some instance(s) of
            #$InformationBearingThing.  Examples include (getting
            information from) reading a newspaper, watching a film,
            listening to a musical performance, decoding an encrypted
            message, seeing a traffic police officer wave one on, or
            hearing one&apos;s roommate ask one to take out the trash.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AccessingScriptType">
        <rdfs:label xml:lang="en">#$AccessingScriptType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$AccessingScriptType is a type (i.e., a collection) of
            actions by which an agent may come to possess, or gain user
            rights to, some tangible thing.  Instances of
            #$AccessingScriptType include the collections #$Buying,
            #$Renting, and #$BorrowingSomething.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Account">
        <rdfs:label xml:lang="en">accounts</rdfs:label>
        <rdfs:comment>An instance of #$ObjectType and a specialization
            of #$LegalAgreement. Each instance of #$Account is a
            recorded obligation (of some particular type) between
            specified parties, consisting of  funds  (not necessarily
            monetary funds) which typically can be added to and drawn
            upon. Positive examples include instances of
            #$RetirementAccount, #$TravelExpenseAccount, and of the many
            types of #$FinancialAccount. Note that the contents of an
            account need not be monetary; for example, the contents may
            be amounts of time, as in the specializations
            #$VacationAccount and #$SickLeaveAccount. #$Account does not
            include debt obligations of fixed face value that cannot be
            increased or reduced (such as instances of #$Bond-Agreement).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgreement"/>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="AccountSystem">
        <rdfs:label xml:lang="en">account systems</rdfs:label>
        <rdfs:comment>#$AccountSystem is a specialization of
            #$ComputerNetwork.  Each instance of #$AccountSystem is a
            computational system which is such that users must log on to
            it to make use of it.  Instances  of #$AccountSystem can
            consist of one or many nodes (i.e. computers).  Each node in
            an #$AccountSystem shares a given set of accounts with any
            other nodes in that #$AccountSystem (such that someone with
            an account can log in at any node).  See also
            #$nodeInAccountSystem, #$accountForSystem, and #$ComputerAccount.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerNetwork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AccountType">
        <rdfs:label xml:lang="en">types of account</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$ObjectType.  Each instance of #$AccountType is a
            collection of financial accounts of the same type.
            Instances of #$AccountType include #$SavingsAccount,
            #$CreditCardAccount, #$RetirementAccount,
            #$SocialSecurityAccount, and #$TravelExpenseAccount.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Acknowledging-CommunicationAct">
        <rdfs:label xml:lang="en">#$Acknowledging-CommunicationAct</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationAct-Single.
            Each instance of this collection is an action which conveys
            information about the receipt of a prior
            #$CommunicationAct-Single which was #$performedBy another
            agent.  An example: Judy saying, `I hear you&apos; in
            response to Jane&apos;s exclaiming, `This toaster is filthy!&apos;</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Action">
        <rdfs:label xml:lang="en">#$Action</rdfs:label>
        <rdfs:comment>The collection of #$Events (q.v.) that are carried
            out by some  doer  (see #$doneBy).  Instances of #$Action
            include any event in which one or more actors effect some
            change in the (tangible or intangible) state of the world,
            typically by an expenditure of effort or energy.  Note that
            it is not required that any tangible object be moved,
            changed, produced, or destroyed for an action to occur; the
            effects of an action might be intangible (such as a change
            in a bank balance or the intimidation of a subordinate).
            Note also that the doer of an action, though typically an
            #$Agent (q.v.), need not be (e.g. a falling rock that dents
            a car&apos;s roof).  Depending upon the context, doers of
            actions might be animate or inanimate, conscious or
            nonconscious.  For actions that are intentional, see
            #$PurposefulAction and #$performedBy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ActionOnObject">
        <rdfs:label xml:lang="en">actions on an object</rdfs:label>
        <rdfs:comment>A specialization of both #$Action and
            #$PhysicalEvent; the collection  of physical events in which
            some doer acts on an object.  Each instance  of
            #$ActionOnObject is an action in which both the roles of
            #$doneBy  and #$objectActedOn (qq.v.) are filled.  Examples
            include someone  typing on a keyboard and a tornado
            destroying a building.  Non-examples include a person
            dancing and wind blowing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ActionPredicate">
        <rdfs:label xml:lang="en">action predicates</rdfs:label>
        <rdfs:comment>A specialization of #$EventPredicate (q.v.).  Each
            instance of #$ActionPredicate is a predicate used to make an
            assertion about an action performed intentionally by an
            agent.  The first argument to each instance of
            #$ActionPredicate will be the  agentive force  of the
            action, and the remaining arguments will be  objects  that
            the agentive force interacts with in some way.   The
            representation of actions in terms of #$ActionPredicates is
            an alternative to the Davidsonian-style representation of
            actions in which the  participants  in actions  are related
            to the reified individual actions in which they participate
            (for that alternative, see #$Role and #$ActorSlot).
            Important specializations of #$ActionPredicate include
            #$SimpleActionPredicate and #$ComplexActionPredicate (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EventPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ActivityTypeFocusGroup">
        <rdfs:label xml:lang="en">task groups</rdfs:label>
        <rdfs:comment>#$ActivityTypeFocusGroup is a specialization of
            #$Organization.  Each instance of #$ActivityTypeFocusGroup
            is an organization which focuses on some type of activity,
            such as stamp collecting or sailing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ActorSlot">
        <rdfs:label xml:lang="en">predicates describing actors in events</rdfs:label>
        <rdfs:comment>A collection of binary predicates; a
            specialization of #$Role.  Each instance of #$ActorSlot
            relates some instance of #$Event to a temporal thing
            involved in that event (here called a  participant ,
            although the thing in question might not be playing an
            active role in the event).  The first argument of every
            instance of #$ActorSlot is constrained to be an instance of
            some specialization of #$Event, and the second argument is
            constrained to be an instance of some specialization of
            #$SomethingExisting.  All instances of #$ActorSlot have
            #$actors as their #$genlPreds, directly or indirectly, so
            that the actor slots form a kind of hierarchy.  Each
            specialized actor slot indicates _how_ its participant
            participates in the event, i.e., in what role (e.g.,
            #$inputs, #$outputs, #$doneBy).  Actor slots are _not_ used
            to indicate the time of an event&apos;s occurrence, external
            representations of the event, and other more remotely
            related things that are not directly or indirectly  involved
            in the occurrence of the event.  Time and other quantities
            are relevant to events but are not instances of
            #$SomethingExisting; thus, they are related to events by
            some non-#$ActorSlot predicate.  Things which are remotely
            related to the event -- for instance, someone who is
            affected by the event but doesn&apos;t exist when the event
            occurs -- may be related using some instance of #$Role that
            does not belong to #$ActorSlot, such as #$affectedAgent.
            See also #$Role.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryRolePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ActorUseTypeSlot">
        <rdfs:label xml:lang="en">actor predicates describing the
            actor&apos;s fate</rdfs:label>
        <rdfs:comment>Instances of #$ActorUseTypeSlot are actor slots
            which give information about the fate of the actor - whether
            it is destroyed, unchanged, temporarily changed, etc. Which
            #$ActorUseTypeSlot an actor appears on affects whether or
            not the same actor will act in the same role in the same
            kind of event in the future. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActorSlot"/>
    </owl:Class>
    <owl:Class rdf:ID="ActsCommonlyConsideredCriminal">
        <rdfs:label xml:lang="en">acts commonly considered criminal</rdfs:label>
        <rdfs:comment>A collection of actions.  Instances of
            #$ActsCommonlyConsideredCriminal are actions which are
            commonly considered illegal, i.e., in most legal systems.
            The primary purpose of this collection is to group together
            types of actions such as #$Murder and #$Stealing-Generic,
            which are almost universally considered criminal.  However,
            individual instances of this collection are not necessarily
            instances of #$CriminalAct in every context or under every #$GovernmentCOC.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Address-LocationDesignator">
        <rdfs:label xml:lang="en">addresses</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString.  Each
            instance of #$Address-LocationDesignator is a string that
            describes the relatively permanent location of an individual
            or organization.  For example:  President Bill Clinton,
            White House, 1600 Pennsylvania Avenue, Washington, DC .
            Addresses that provide an address suitable for delivery of
            mail are instances of the specialization, #$MailingAddress.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Adjective">
        <rdfs:label xml:lang="en">adjectives</rdfs:label>
        <rdfs:comment>The collecton of all adjectives. Adjectives are
            words which can modify nouns. Many adjectives have
            comparative and superlative forms. Example: `red&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OpenClassWord"/>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Adjective-Ed">
        <rdfs:label xml:lang="en">#$Adjective-Ed</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeverbalAdjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Adjective-Ing">
        <rdfs:label xml:lang="en">#$Adjective-Ing</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeverbalAdjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdjectiveProducingAffix">
        <rdfs:label xml:lang="en">adjective-creating affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdjectiveProducingSuffix">
        <rdfs:label xml:lang="en">adjective producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdjectiveProducingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdministrativeStaffPerson">
        <rdfs:label xml:lang="en">administrative staff people</rdfs:label>
        <rdfs:comment>A specialization of #$DeskWorker.  Each instance
            of #$AdministrativeStaffPerson is a worker whose primary job
            responsibilities are administrative and/or managerial tasks.
            Such jobs can be at any level in an organization&apos;s
            hierarchy, from receptionist/secretary to executive
            assistant to manager.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeskWorker"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Administrator">
        <rdfs:label xml:lang="en">#$Administrator</rdfs:label>
        <rdfs:comment>A specialization of #$AdministrativeStaffPerson.
            Each instance of #$Administrator is an employee of an
            organization who is responsible for managing its
            organizational affairs.  Instances of #$Administrator may or
            may not also be required to manage people.  If so, then they
            are also #$Managers (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdministrativeStaffPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Admiration">
        <rdfs:label xml:lang="en">admiration</rdfs:label>
        <rdfs:comment>A feeling of strong approval.  An intense positive
            attitude towards another person(s) or group.  May be
            accompanied by emulation.  #$Admiration is different than
            #$Respect (qv).  This is a collection --- see #$Happiness
            for an explanation.  Some more specialized #$FeelingTypes
            than #$Admiration are #$Wonder-Admiration, #$Adulation,
            #$Awe, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Respect"/>
    </owl:Class>
    <owl:Class rdf:ID="Adulation">
        <rdfs:label xml:lang="en">adulation</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Admiration"/>
    </owl:Class>
    <owl:Class rdf:ID="AdultAnimal">
        <rdfs:label xml:lang="en">#$AdultAnimal</rdfs:label>
        <rdfs:comment>A specialization of #$Animal. The   collection of
            all adult animals (including adult humans):  animals that
            are at least mature enough to bear offspring.  Cf. #$JuvenileAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdultFemalePerson">
        <rdfs:label xml:lang="en">#$AdultFemalePerson</rdfs:label>
        <rdfs:comment>The collection of all women; i.e., #$Persons who
            are adult and female.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FemalePerson"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
    </owl:Class>
    <owl:Class rdf:ID="AdultMalePerson">
        <rdfs:label xml:lang="en">#$AdultMalePerson</rdfs:label>
        <rdfs:comment>The collection of all men, i.e., #$Persons who are
            adult and male.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
        <rdfs:subClassOf rdf:resource="#MalePerson"/>
    </owl:Class>
    <owl:Class rdf:ID="Adverb">
        <rdfs:label xml:lang="en">adverbs</rdfs:label>
        <rdfs:comment>The collection of all adverbs. Adverbs are words
            which can modify adverbs, verbs, or adjectives. Many adverbs
            are morphologically derived from adjectives. Example: `slowly&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdverbProducingAffix">
        <rdfs:label xml:lang="en">adverb-creating affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdverbProducingSuffix">
        <rdfs:label xml:lang="en">adverb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdverbProducingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Advertising">
        <rdfs:label xml:lang="en">advertising events</rdfs:label>
        <rdfs:comment>A collection of #$CommunicationAct-Singles.  In an
            #$Advertising event, someone is communicating, to potential
            customers of an #$Agent, the desire of that agent to do
            business with those customers (either to `do business&apos;
            in general or to sell them something specific.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
        <rdfs:subClassOf rdf:resource="#MarketingActivity"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AdvocacyOrganization">
        <rdfs:label xml:lang="en">advocacy organization</rdfs:label>
        <rdfs:comment>#$AdvocacyOrganization is a specialization of
            #$Organization.  Each instance of #$AdvocacyOrganization is
            an #$Organization that lobbies or engages in activities with
            the purpose of advocating a particular position on social,
            economic, political, environmental matters.  Many instances
            of #$IdeologicalOrganization are also instances of
            #$AdvocacyOrganization.  Examples of #$AdvocacyOrganization
            include #$AmericanAssociationOfRetiredPersons, #$SierraClub,
            #$AmericanMedicalAssociation, and #$StateBarOfTexas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Affection">
        <rdfs:label xml:lang="en">#$Affection</rdfs:label>
        <rdfs:comment>A feeling of fondness for someone or something.
            Sympathy, liking, warmth, tenderness.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingTypes than
            #$Affection are #$Love, #$Passion, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GoodWill"/>
    </owl:Class>
    <owl:Class rdf:ID="AffixCategory">
        <rdfs:label xml:lang="en">affix category</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="AffixRule">
        <rdfs:label xml:lang="en">affix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AffixRule-Derivational">
        <rdfs:label xml:lang="en">derivational affix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Affixation-WordFormationProcess">
        <rdfs:label xml:lang="en">affixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Synthesis-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Affricative-Consonant">
        <rdfs:label xml:lang="en">affricative - consonant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Consonant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Afternoon">
        <rdfs:label xml:lang="en">afternoons</rdfs:label>
        <rdfs:comment>An #$Afternoon is the daily #$Event where the
            #$Sun moves from its `highest&apos; position in the daily
            cycle and `sets&apos; or becomes a #$MidnightSun, i.e from
            noon till #$Sunset or #$MidnightSun.  A #$Midday overlaps
            the start of an #$Afternoon, and an #$Evening is
            #$contiguousAfter an #$Afternoon (except when there is a
            #$MidnightSun in which case a #$Morning is contiguously
            after the #$Afternoon).  Each #$Afternoon is
            #$temporallyFinishedBy a #$Sunset or #$MidnightSun.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Agent">
        <rdfs:label xml:lang="en">#$Agent</rdfs:label>
        <rdfs:comment>The collection of #$Agent-Generics (q.v.) that are
            not tangible artifacts (cf. #$AgentiveArtifact).  #$Agent
            includes all naturally-occurring agents (e.g. #$Persons and
            #$Animals), any #$SupernaturalBeings (q.v.), and #$Organizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Agent-Generic">
        <rdfs:label xml:lang="en">generic agents</rdfs:label>
        <rdfs:comment>A specialization of #$SomethingExisting.  Each
            instance of #$Agent-Generic is a being that has desires and
            intentions, and the ability to act on those desires and
            intentions.  Instances of #$Agent-Generic may be individuals
            (see the specialization #$IndividualAgent) or they may
            consist of several #$Agent-Generics operating together (see
            the specialization #$MultiIndividualAgent).  Notable
            specializations of #$Agent-Generic include #$Agent and #$AgentiveArtifact.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>

        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AgentPredicate">
        <rdfs:label xml:lang="en">agent predicate</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to
            ascribe characteristics or properties (taken in a very broad
            sense) to individual agents.  As such, each instance of
            #$ObjectPredicate has an #$arity of 2 or greater and has at
            least one argument place (often including the first)
            constrained (see #$argIsa) to instances of #$Agent-Generic
            or some subcollection thereof. Examples include
            #$likesAsFriend and #$beliefs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="AgentTypeByEmotionalState">
        <rdfs:label xml:lang="en">agent types by emotional atate</rdfs:label>
        <rdfs:comment>A collection of collections of
            #$IntelligentAgents. Instances are collections of agents
            characterized by being in certain emotional state. Examples
            include #$Angry, #$Excited, and #$Hopeful.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="AgentiveArtifact">
        <rdfs:label xml:lang="en">agentive artifacts</rdfs:label>
        <rdfs:comment>#$AgentiveArtifact is the collection of all
            artifacts (created by instances of #$Agent) that commonly
            possess (at least) the apparent ability to make decisions
            and commence actions more or less independently of those
            agents.  The distinction here is conventional; a certain
            functional sophistication possessed by instances of
            #$Artifact that are &apos;not really living agents&apos;
            seems to mirror that possessed by &apos;living agents&apos;.
            This sense of agency derives from ability or function the
            artifact possesses, namely the ability to  commence actions,
            independently of agents, based on some internal calculation
            or deliberation.  Subcollections include #$SoftwareAgent and #$Enclave-Computer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AgentiveNoun">
        <rdfs:label xml:lang="en">#$AgentiveNoun</rdfs:label>
        <rdfs:comment>A specialization of #$DeVerbalNoun.  Each instance
            of #$AgentiveNoun is a noun in the agentive form.  Agentive
            nouns usually denote the `doer&apos; or `performer&apos; of
            some action, and often end in `-er&apos; or `-or&apos;.
            Example: `runner&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeVerbalNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AgentiveRole">
        <rdfs:label xml:lang="en">agentive roles</rdfs:label>
        <rdfs:comment>A subcollection of #$ActorSlot.  Each instance
            ROLE of #$AgentiveRole must be an #$ActorSlot that satisfies
            the following conditions: (i) ROLE specifies what an agent
            does (in the strict sense) in an #$Event rather than
            describing what happens to the agent in the #$Event.  That
            is to say, (ROLE AGT EVENT), when true, must describe agency
            rather than a mere happening.  Thus, each #$ActorSlot that
            does not describe agency, such as #$objectActedOn, #$victim,
            #$instrument-Generic, #$bodilyDoer, #$fromLocation and
            #$motionPathway-Partial etc., is not an instance of
            #$AgentiveRole.  (ii) ROLE must be specific enough to
            distinguish itself from other instances of #$AgentiveRole.
            This means, roughly, that if SLOT is a generalization of
            both SLOT1 and SLOT2, where SLOT1 is different from SLOT2,
            then SLOT is not an instance of #$AgentiveRole if both SLOT1
            and SLOT2 are.  Thus, #$interviewee is an instance of
            #$AgentiveRole while #$socialParticipants is not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActorSlot"/>
    </owl:Class>
    <owl:Class rdf:ID="Agreement">
        <rdfs:label xml:lang="en">#$Agreement</rdfs:label>
        <rdfs:comment>A specialization of
            #$PropositionalInformationThing and #$Artifact-Intangible.
            Each instance of this collection involves two or more
            parties who agree that certain propositions (which
            correspond to a small #$Microtheory -- see the shared note
            #$AgreementNote) should be true. Making the propositions
            true may require some action or commitment of resources on
            the part of one or more of the #$agreeingAgents. Thus,
            instances of #$Agreement will usually involve some instances
            of #$Obligation. Instances of #$Agreement and #$Obligation
            differ, however, in that an #$obligatedAgent is responsible
            for the truth of all of the propositions over which the
            obligation holds. In an #$Agreement some agents may not be
            so responsible. For example, in a loan agreement, the
            borrower agrees to give the lender back the money, but the
            borrower is the only #$obligatedAgent for the repayment.
            Note that #$obligatedAgents need not be among the
            #$agreeingAgents in the agreement that involves or generates
            the obligation. Moreover, #$agreeingAgents aren&apos;t
            always #$obligatedAgents; e.g., Wanda and Paul may agree
            that Paul alone is obligated to do some task. Notable
            specializations of #$Agreement include #$PeaceAccord,
            #$LegalAgreement, #$InformalAgreement,
            #$BusinessPartnershipAgreement, #$WorkAgreement,
            #$MaintenanceAgreement, #$Reservation and #$Appointment. For
            assertions about what is  supposed to be  true, given some
            #$Agreement, see #$ist-Agreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="AilmentCondition">
        <rdfs:label xml:lang="en">#$AilmentCondition</rdfs:label>
        <rdfs:comment>The most general collection of ailment events; a
            subcollection of both #$PhysiologicalCondition and
            #$Malfunction.  An instance of #$AilmentCondition is a
            dynamic state of sickness, injury, or physiological
            impairment.  The rationale for construing ailments in this
            way is the obvious fact that to have an ailment is to
            undergo an event: an individual ailment has temporal
            features, it progresses dynamically, and so on.  It is not
            just a matter of being in some static state of  unwellness .
            Subcollections of #$AilmentCondition include
            #$RespiratoryAilment, #$HeartCondition, #$Cancer,
            #$MotionSickness, #$Poisoning, #$Infection, and
            #$InjuryCondition.  If a particular person has an infection,
            that event is an instance of #$AilmentCondition.  An
            #$AilmentCondition does not begin before there is an actual,
            developed sickness or impairment, and thus does not include
            the event of getting sick or becoming impaired.  Also note
            that each type of ailment, such as #$Infection, is the
            collection of all  cases  or  instances  of individuals
            suffering from that condition.  See also #$DiseaseType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Malfunction"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Air">
        <rdfs:label xml:lang="en">#$Air</rdfs:label>
        <rdfs:comment>A specialization of #$GaseousTangibleThing.  Each
            instance of #$Air is one `piece&apos; among all the portions
            of the atmosphere of the Earth, considered as a substance
            present in various places, in various quantities, under
            various pressures, etc.  Examples: the AirInAustin; the
            stuffy air in my office; the thin air atop Annapurna.  See
            also #$TheAtmosphereQuaSinglePieceOfStuff, which is all
            ambient #$Air on the planet taken as a single object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#GaseousTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirBreathingVertebrate">
        <rdfs:label xml:lang="en">air-breathing vertebrates</rdfs:label>
        <rdfs:comment>#$AirBreathingVertebrate is a specialization of
            #$Vertebrate and an instance of
            #$OrganismClassificationType.  Each instance of
            #$AirBreathingVertebrate is a vertebrate that usually
            respires by breathing #$Air during adult life.  Includes
            individual #$Mammals, #$Birds, #$Reptiles, and most
            #$Amphibians.  Most #$AirBreathingVertebrates are
            #$TerrestrialOrganisms, but some #$AquaticOrganisms breathe
            air (#$Whales, etc.).  All #$AirBreathingVertebrates have
            #$Lungs and #$RespiratoryTracts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirForce">
        <rdfs:label xml:lang="en">air forces</rdfs:label>
        <rdfs:comment>A subcollection of #$BranchOfMilitaryService.
            Each instance of #$AirForce is a modern military
            organization composed mainly of airborne forces (such as
            bombers, fighters, torpedo planes, parachute troops,
            surveillance aircraft, etc.) and which has the function of
            defending or attacking air space, ships, or ground targets.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ModernMilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#BranchOfMilitaryService"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirForcePersonnel">
        <rdfs:label xml:lang="en">air force people</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryPerson. Each
            instance of  #$AirForcePersonnel is a person who is a member
            of some instance of #$AirForce.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirRespiration">
        <rdfs:label xml:lang="en">air respiration</rdfs:label>
        <rdfs:comment>A collection of activities constituting a natural
            #$PhysiologicalFunction; #$AirRespiration is the collection
            of all #$Respiration events in which an organism trades some
            of the carbon dioxide in its tissues for oxygen from the atmosphere.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalFunction"/>
        <rdfs:subClassOf rdf:resource="#Respiration"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirTransportationDevice">
        <rdfs:label xml:lang="en">#$AirTransportationDevice</rdfs:label>
        <rdfs:comment>A specialization of #$TransportationDevice.  Each
            instance of #$AirTransportationDevice is a device used for
            transporting either people or cargo through the air.
            Specializations of #$AirTransportationDevice include the
            collections #$Airplane, #$Helicopter, #$HotAirBalloon, and #$GroundToOrbitVehicle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirlineCompany">
        <rdfs:label xml:lang="en">airlines</rdfs:label>
        <rdfs:comment>#$AirlineCompany is a specialization of
            #$TransportationCompany-Provider,
            #$CommercialServiceOrganization, and #$Business.  Each
            instance of #$AirlineCompany is a business that operates
            airplanes to transport goods or people in exchange for money.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationCompany-Provider"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Airplane">
        <rdfs:label xml:lang="en">#$Airplane</rdfs:label>
        <rdfs:comment>A subcollection of #$FixedWingAircraft, each
            instance of which is a heavier-than-air, self-powered flying
            machine (other than a cruise missile) that gets its lift
            while flying from #$AirplaneWings. #$Helicopters are thus
            excluded because their lift is created by rotors. A
            near-borderline (positive) case is a plane that takes-off
            vertically using a turbojet engine, since its initial lift
            is not due to its wings. In flight, however, such a plane
            needs its wings to stay aloft.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedWingAircraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirplaneRunway">
        <rdfs:label xml:lang="en">runways</rdfs:label>
        <rdfs:comment>#$AirplaneRunway is a specialization of
            #$PathForWheeledVehicles.  Each instance of #$AirplaneRunway
            is an airstrip at an airport, on an aircraft carrier, or in
            some field where airplanes taxi, take off, and land.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#PathForWheeledVehicles"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Airport-Physical">
        <rdfs:label xml:lang="en">#$Airport-Physical</rdfs:label>
        <rdfs:comment>A specialization of both #$FixedStructure and
            #$TransportFacility.  Each instance of #$Airport-Physical is
            a facility which includes at least one runway where
            airplanes can take off and land.  Instances of
            #$Airport-Physical may also have terminals and an air
            control tower, in addition to having a runway.  See also the
            related collection #$AirportOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AirportOrganization">
        <rdfs:label xml:lang="en">airports (types of things)</rdfs:label>
        <rdfs:comment>#$AirportOrganization is a specialization of
            #$TravelOrganization.  Each instance of
            #$AirportOrganization is an organization that manages and
            controls particular airports and their appurtenant
            facilities; e.g., #$LaGuardiaAirport-Organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TravelOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Alertness">
        <rdfs:label xml:lang="en">alertness</rdfs:label>
        <rdfs:comment>#$Alertness is an #$AnimalPhysiologicalAttribute
            which specifies how sleepy or alert an animal is.  Levels of
            #$Alertness include #$Asleep, #$Sleepy, and #$Awake.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Algorithm">
        <rdfs:label xml:lang="en">algorithm</rdfs:label>
        <rdfs:comment>A specialization of
            #$MathematicalOrComputationalThing.     An instance of
            #$Algorithm is a particular finite sequence of operations
            that constitutes an effective, or strictly mechanical,
            procedure for      completing some task, computing some
            function, or simply performing a      number of unrelated
            operations.  Instances of #$ComputerProgram-CWIS use
            algorithms (see #$programAlgorithms), and some instances of
            #$Instructions     (e.g. some instances of its
            specializations #$Recipe-CW and
            #$DirectionsToGetSomewhere), if sufficiently explicit,
            involve algorithms.       An algorithm can be viewed as a
            specific way of computing a particular      instance of
            #$Function-MathematicalObject, i.e. a way determining the
            value      of the function for any argument in the
            function&apos;s domain (see     #$algorithmComputes).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#MathematicalOrComputationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AlimentaryCanal">
        <rdfs:label xml:lang="en">alimentary canal</rdfs:label>
        <rdfs:comment></rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="AllergicReaction">
        <rdfs:label xml:lang="en">allergic reactions</rdfs:label>
        <rdfs:comment>A collection of dynamic, physiological states. An
            instance of #$AllergicReaction is an event in which an
            organism which is exposed to a particular substance (e.g.,
            pollen, mold) develops some abnormality or impairment of its
            physiological condition as a result of interacting with the
            substance. Allergic reactions to some types of substances
            occur widely in members of a species; e.g.,
            #$PoisonIvyPoisoning in humans. But other allergic reactions
            affect only a small proportion of a species, such as human
            allergies to penicillin. This concept is the collection of
            events in which allergic reactions are `taking place&apos;,
            not abstract unrealized potential situations such as `John
            is allergic to milk.&apos; I.e., if John were allergic to
            milk, and he drank some, and then proceeded to have a
            whopping bad allergic reaction, that latter event would be
            an instance of #$AllergicReaction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ambulance">
        <rdfs:label xml:lang="en">#$Ambulance</rdfs:label>
        <rdfs:comment>#$Ambulance is a specialization of
            #$RescueVehicle, #$EmergencyVehicle, and
            #$SpecialPurposeVehicle.  Each instance of #$Ambulance is a
            road vehicle equipped primarily for transporting wounded,
            injured, or sick persons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-GasolineEngine"/>
        <rdfs:subClassOf rdf:resource="#EmergencyVehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ambulation">
        <rdfs:label xml:lang="en">ambulation</rdfs:label>
        <rdfs:comment>The collection of all locomotion events on solid
            surfaces in which the locomotor moves by lifting its feet,
            moving them through the air, and setting them down in a new
            location. Includes walking, running, skipping, trotting, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Locomotion-SolidSurface"/>
        <rdfs:subClassOf rdf:resource="#LocomotionProcess-Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AmorphousThing">
        <rdfs:label xml:lang="en">amorphous thing</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing.  Each
            instance of #$AmorphousThing is a spatial object that has no
            well-defined  shape.  Of course, what counts as a
            well-defined shape  can vary from  context to context.
            Contrast with #$ShapedThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Amphibian">
        <rdfs:label xml:lang="en">#$Amphibian</rdfs:label>
        <rdfs:comment>A specialization of #$Poikilotherm and
            #$Vertebrate.  Each instance of #$Amphibian isa a
            cold-blodded and smooth-skinned vertebrate that hatches from
            an egg to form an aquatic larva (see #$Larva), which then
            metamorphoses into an air-breathing adult (see
            #$AirBreathingVertebrate).  Important subcollections include
            #$Frog and #$Salamander.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#Poikilotherm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Amusement-Feeling">
        <rdfs:label xml:lang="en">amusement - feeling</rdfs:label>
        <rdfs:comment>The emotion experienced when one finds something
            funny.  Usually people laugh when they are amused.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Entertained-Emotion"/>
    </owl:Class>
    <owl:Class rdf:ID="AnatomicalVessel">
        <rdfs:label xml:lang="en">anatomical vessel</rdfs:label>
        <rdfs:comment>The collection of all anatomical vessels in
            #$Animals.  Instances of this collection are tubular animal
            tissue which acts as a conduit for body fluids or substances
            passing into or out of the body.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pipe-GenericConduit"/>
        <rdfs:subClassOf rdf:resource="#CordlikeObject"/>
        <rdfs:subClassOf rdf:resource="#InternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Anesthesia">
        <rdfs:label xml:lang="en">anesthesia</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$DrugTherapy (q.v.).  In an instance of #$Anesthesia, a
            #$BiologicalLivingObject undergoes the effect of some
            instance of #$Anesthetic, the effect of which is to
            eliminate the perception of pain.  #$Anesthesia events occur
            in connection with other medical care events, so that a
            patient will not feel the pain or discomfort that would
            otherwise be associated with those medical procedures.
            #$Anesthetics are of various chemical kinds, work in various
            ways, and can be administered in various ways.  They may
            topically numb an area, they may poison the central nervous
            system to the point where the animal loses consciousness,
            etc.  The resulting anesthetic therapies thus may differ,
            according to the type of anesthetic used; for example, the
            patient may or may not be conscious during an instance of
            #$Anesthesia.  See also #$AdministeringADrug.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DrugTherapy"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Anger">
        <rdfs:label xml:lang="en">rages</rdfs:label>
        <rdfs:comment>Intense feeling of displeasure and usually of
            antagonism.  This is a #$Collection --- for an explanation
            of that, see #$Happiness.  Some more specialized
            #$FeelingTypes than #$Anger include #$Belligerence, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Frustration"/>
    </owl:Class>
    <owl:Class rdf:ID="Angle">
        <rdfs:label xml:lang="en">angles</rdfs:label>
        <rdfs:comment>A specialization of
            #$GeometricallyDescribableThing.  Each instance of #$Angle
            is formed by two lines diverging from the same point, or two
            surfaces diverging from the same line. Examples include
            spatially localized objects, such as the angle formed by the
            intersection of two walls, and abstract objects, such as the
            angle formed by the intersection of two (abstract) lines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Angry">
        <rdfs:label xml:lang="en">people who is angry</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being angry.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Frustrated"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Anguish">
        <rdfs:label xml:lang="en">anguish</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Distress"/>
        <rdfs:subClassOf rdf:resource="#Despair"/>
    </owl:Class>
    <owl:Class rdf:ID="AngularAccelerationRate">
        <rdfs:label xml:lang="en">angular acceleration rates</rdfs:label>
        <rdfs:comment>A specialization of #$Rate.  Each instance of
            #$AngularAccelerationRate is a rate at which the rate of
            rotation (see the collection #$RateOfRotation) of some
            object changes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="AngularDistance">
        <rdfs:label xml:lang="en">angular distances</rdfs:label>
        <rdfs:comment>#$AngularDistance is a measure of the separation
            between the rays defined by two points and a fixed center.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="Animal">
        <rdfs:label xml:lang="en">#$Animal</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalKingdom, and a
            specialization of #$Organism-Whole.  Instances of #$Animal
            are typically motile, living, whole organisms; they are
            instances of #$Heterotroph (q.v.), and thus incapable of
            performing instances of #$Photosynthesis-Generic.  Animal
            cells contain cholesterol and lack cell walls made of
            cellulose.  #$Person is a specialization of #$Animal; see
            also #$NonPersonAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PerceptualAgent"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Heterotroph"/>
        <rdfs:subClassOf rdf:resource="#EukaryoticOrganism"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalActivity">
        <rdfs:label xml:lang="en">#$AnimalActivity</rdfs:label>
        <rdfs:comment>A specialization of #$Action.   Each instance of
            #$AnimalActivity is a spatially-localized action, each of
            whose  doers  (see #$doneBy) is either an #$Animal or a
            group of animals (i.e. a #$Group all of whose members are #$Animals).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Event-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalBLO">
        <rdfs:label xml:lang="en">animals or body part</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalLivingObject that
            includes all living animals, body parts of living animals,
            and body regions of living animals.  #$AnimalBLO is thus the
            union  (see #$collectionUnion) of #$Animal,
            #$AnimalBodyPart, and #$AnimalBodyRegion (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalBodyPart">
        <rdfs:label xml:lang="en">body parts</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyRegion.  Each
            instance of #$AnimalBodyPart is an anatomical part of some
            living animal, and thus is itself an instance of
            #$BiologicalLivingObject (q.v).  #$AnimalBodyPart includes
            both highly localized organs (for example, hearts) and
            physical systems composed of parts distributed throughout an
            animal&apos;s body (such as an animal&apos;s circulatory
            system and nervous system).  Note that severed limbs and
            removed organs are _not_ instances of this collection, since
            they are not _parts_ of some living animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyRegion"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalBodyPartType">
        <rdfs:label xml:lang="en">animal body part types</rdfs:label>
        <rdfs:comment>A collection of specializations of
            #$AnimalBodyRegion.  Each instance of #$AnimalBodyPartType
            is a collection of body parts, where the parts in question
            are differentiated from other body parts according to
            structure or function.  Instances of #$AnimalBodyPartType
            include #$SpinalColumn, #$Eyelash, #$NervousSystem,
            #$Urethra, #$Wing-AnimalBodyPart, and #$HeelOfPalm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPartType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalBodyRegion">
        <rdfs:label xml:lang="en">animal body region</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBLO. Each  instance of
            #$AnimalBodyRegion is a significant spatial subdivision of
            the body of some animal, where the subdivision in question
            is usually contiguous, and has some more or less clear
            boundary. Instances of this collection include anatomical
            parts (see the specialization #$AnimalBodyPart) , such as a
            person&apos;s head, beard, or right arm. In addition, this
            collection includes      body regions that are not
            anatomical parts, such as a blister, a puncture wound, or a bruise.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalCapabilityType">
        <rdfs:label xml:lang="en">#$AnimalCapabilityType</rdfs:label>
        <rdfs:comment>This is the collection of types of action which
            can be #$doneBy all normal adult animals in typical
            circumstances.  They are animal capabilities in the sense
            that we expect any normal adult animal to be able to do
            them, as opposed to the sense that some animal can do them.
            Also, this is not the collection of actions which must be
            done by an animal, for which see #$AnimalActivity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MammalCapabilityType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalMigration">
        <rdfs:label xml:lang="en">migrations</rdfs:label>
        <rdfs:comment>The collection of regular, species-linked
            movements of an animal or group of animals from one place to
            another, usually with a return to the starting point after a
            certain period of time.  In some species, the migration
            cycle occurs once in a lifetime, while others migrate
            annually on a seasonal basis.   Migration is typically
            linked with an animal&apos;s reproductive cycle (as in
            salmon), but may also involve seasonal relocation to a more
            hospitable climate and/or more plentiful food supply. For
            example, many birds exhibit seasonal migration; e.g., native
            Northeastern U.S. birds that spend their winters in the
            Southern U.S.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent-Animal"/>
        <rdfs:subClassOf rdf:resource="#Translation-RoundTrip"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalPartRegionFunction">
        <rdfs:label xml:lang="en">animal part region function</rdfs:label>
        <rdfs:comment>A collection of functions that map from an
            #$AnimalBodyRegion to another #$AnimalBodyRegion that is a
            subregion of the first and whose location is indicated by
            the direction.  For example, (#$DorsalRegionFn LIVER) yields
            as a result the part of LIVER closest to the backside of the
            organism that LIVER is a part of.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnaryFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalPhysiologicalAttribute">
        <rdfs:label xml:lang="en">animal physiological attribute</rdfs:label>
        <rdfs:comment>The broadest collection of attributes of #$Animals
            that describe the physiological aspects of an animal,
            including its physiological (1) capacities, (2) conditions,
            and (3) states.  Examples include: (1) Capacities:
            #$Fertile, #$HearingImpaired, #$Paraplegic; (2) Conditions:
            #$Anemic, #$AthleticPhysicalBuild; (3) States:
            #$Intoxicated, #$Injured, #$Inflamed.
            #$PlantPhysiologicalAttributes, such as #$InBloom, are excluded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalAttributeOfTangibleOnly"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalSound">
        <rdfs:label xml:lang="en">animal noises</rdfs:label>
        <rdfs:comment>A specialization of
            #$InformationBearingWavePropagation.  Each instance of
            #$AnimalSound is a sound of a type which originally was, and
            typically is, made by an animal using just its body parts
            (though such a sound may subsequently have been reproduced
            by imitation or recording).  Examples of #$AnimalSounds
            include instances of #$Birdsong, #$NeighingSound,
            #$PurringSound, #$BarkingSound, and #$BrayingSound.  Note
            that the restriction to sounds produced by body parts alone
            excludes noises produced by moving external objects;
            consequently, #$AnimalSound does _not_ include rustling the
            leaves underfoot, splashing water, or playing a musical
            instrument. Note that this collection is not a
            specialization of #$Action, or #$BodyMovementEvent, since it
            refers to animal sounds themselves, not to the activity of
            making animal sounds (though events of both types usually
            accompany one another. See #$EmittingSound for the latter.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalTypeByGender">
        <rdfs:label xml:lang="en">#$AnimalTypeByGender</rdfs:label>
        <rdfs:comment>The collection consisting of the collections
            #$FemaleAnimal and #$MaleAnimal. One of the #$facets-Strict
            of #$Animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalTypeByMaturity">
        <rdfs:label xml:lang="en">#$AnimalTypeByMaturity</rdfs:label>
        <rdfs:comment>The collection consisting of #$AdultAnimal and
            #$JuvenileAnimal. One of the #$facets-Strict of #$Animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalUtterance-IBT">
        <rdfs:label xml:lang="en">#$AnimalUtterance-IBT</rdfs:label>
        <rdfs:comment>A specialization of both #$AnimalSound and
            #$Utterance-IBT.  Each instance of #$AnimalUtterance-IBT is
            a sound initially generated by some #$Animal speaking or
            making some sound with his/her/its mouth (note that the
            sound may or may not have propositional content - i.e.
            instantiate some #$PropositionalInformationThing).  If such
            a sound is recorded and played back, the sound generated is
            still considered an instance of #$AnimalUtterance-IBT.
            Examples: one&apos;s spouse&apos;s `Good morning&apos;; a
            child&apos;s scream at a playmate; Humphrey Bogart&apos;s
            `Here&apos;s looking at you&apos; on the set of
            _Casablanca_. Note that only the sounds themselves are
            instances of this collection -- not the activities of making
            them. This collection is not a specialization of #$Action
            (for that, see #$CommunicationAct-Single and its specializations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalSound"/>
        <rdfs:subClassOf rdf:resource="#Utterance-IBT"/>
        <rdfs:subClassOf rdf:resource="#SoundInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnimalWalkingProcess">
        <rdfs:label xml:lang="en">animal walking processes</rdfs:label>
        <rdfs:comment>The collection of instances of #$Walking-Generic
            in which the locomotor is an #$Animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocomotionProcess-Animal"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#SimpleWholeBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#PhysicalContactSituation"/>
        <rdfs:subClassOf rdf:resource="#Walking-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnnualClimateCycle">
        <rdfs:label xml:lang="en">climates</rdfs:label>
        <rdfs:comment>A specialization of #$WeatherEvent.  Each instance
            of #$AnnualClimateCycle is an extended event, one year in
            length, which encompasses sub-events marking the changing of
            the seasons (see the collection #$SeasonOfYear and its
            specializations).  Specializations of #$AnnualClimateCycle
            include #$TemperateClimateCycle and
            #$HumidSubtropicalClimateCycle (qq.v).  See also
            #$ClimateCycleType and #$hasClimateType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AnnualTemporalObjectType">
        <rdfs:label xml:lang="en">types of annual event</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$AnnualTemporalObjectType is a specialization of
            #$TemporalThing, instances of which occur once per year
            according to some calendar. Furthermore, the occurrence of
            instances of each such type of event is tied to a specific
            time (for example, a specific date) in the calendar year.
            For example, #$ChristmasHoliday is an instance of
            #$AnnualTemporalObjectType, because one occurs on a specific
            date (namely, December 25) each year.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="AnthraxInfection">
        <rdfs:label xml:lang="en">#$AnthraxInfection</rdfs:label>
        <rdfs:comment>An instance of #$InfectionTypeByPathogenType, and
            a specialization of #$BacterialInfection.  Each instance of
            #$AnthraxInfection is an infection caused by the bacterium
            Bacillus anthracis (see the collection #$Anthrax-Bacterium).
            Important specializations of #$AnthraxInfection include the
            collections #$InhalationalAnthrax and #$CutaneousAnthrax.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BacterialInfection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AntiSymmetricBinaryPredicate">
        <rdfs:label xml:lang="en">antisymmetric binary predicates</rdfs:label>
        <rdfs:comment>A collection of predicates; the specialization of
            #$BinaryPredicate whose instances are antisymmetric
            relations.  Each instance of #$AntiSymmetricBinaryPredicate
            is a binary predicate PRED with the following property: For
            every X and Y that satisfy the argument constraints for both
            argument positions of PRED (see #$admittedArgument), if both
            (PRED X Y) and (PRED Y X) hold, then X=Y.  Note that a
            predicate PRED can be an instance of
            #$AntiSymmetricBinaryPredicate only if each argument
            constraint for its first argument position (its #$arg1Isa,
            and its #$arg1Genl, if PRED is a type-level predicate) is
            not disjoint with the respective constraint for its second
            argument position (its #$arg2Isa, and its #$arg2Genl, if
            PRED is a type-level predicate).  Notable instances of
            #$AntiSymmetricBinaryPredicate include
            #$greaterThanOrEqualTo, #$parts, and #$subEvents. See also
            the shared #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="AntiTransitiveBinaryPredicate">
        <rdfs:label xml:lang="en">#$AntiTransitiveBinaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$IrreflexiveBinaryPredicate.
            Each instance of #$AntiTransitiveBinaryPredicate is a binary
            predicate PRED with the following property: For every X, Y,
            and Z that satisfy the (single-argument) argument-type
            constraints (see #$admittedArgument) for the relevant
            argument positions of PRED (i.e. arg1 for X, arg1 and arg2
            for Y, and arg2 for Z), (#$not (#$and (PRED X Y)(PRED Y
            Z)(PRED X Z))).  Note that PRED must also be such that any
            argument-type constraint on its first (or  arg1 )
            argument-place _not_ be disjoint with the corresponding
            argument-type constraint on its second (or  arg2 )
            argument-place.  That is, the collections to which PRED is
            constrained via #$arg1Isa and #$arg2Isa must not be
            disjoint; and, if PRED is a  type-level  predicate, the
            collections to which PRED is constrained via #$arg1Genl and
            #$arg2Genl must not be disjoint.  Instances of
            #$AntiTransitiveBinaryPredicate include #$capitalCity,
            #$contiguousAfter, and #$biologicalFather. See also the
            shared #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IrreflexiveBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Anticipation-Feeling">
        <rdfs:label xml:lang="en">#$Anticipation-Feeling</rdfs:label>
        <rdfs:comment>Emotion accompanying an expectation of something
            pleasant in the foreseeable future.  This is a collection;
            for an explanation of a typical #$FeelingType, see
            #$Happiness. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Appendage-AnimalBodyPart">
        <rdfs:label xml:lang="en">#$Appendage-AnimalBodyPart</rdfs:label>
        <rdfs:comment>An #$AnimalBodyPartType and a specialization of
            both #$ExternalAnatomicalPart and #$AnimalBodyPart.
            #$Appendage-AnimalBodyPart is the collection of all
            appendages of #$Animals.  An appendage is a body part that
            is connected to,  and extends from, an animal&apos;s #$Torso
            (or from another of the animal&apos;s appendages,  such as a
            hand extending from an arm).  Each appendage is used by the
            #$Animal  for one or more functions.  Altogether, appendages
            serve a wide variety of  functions, including locomotion,
            manipulation, sensing, fighting, scratching,  heat
            dissipation, and balance.  Note that appendages are not
            crucial for the  life of the animal; thus a
            #$Neck-AnimalBodyPart or #$Head-AnimalBodyPart is  not
            considered to be an appendage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Protrusion"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ApplicationProgram">
        <rdfs:label xml:lang="en">application programs</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerProgram-CW.  Each
            instance of #$ApplicationProgram is a program whose running
            copies perform specific functions either directly for users
            or as background processes.  #$ApplicationProgram is
            disjoint with #$OperatingSystem and #$OperatingSystemKernel.
            Together, these three collections partition #$ComputerProgram-CW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerProgram-CW"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ApplyingAForce">
        <rdfs:label xml:lang="en">#$ApplyingAForce</rdfs:label>
        <rdfs:comment>The collection of processes of applying a force to
            an object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ApplyingSomethingToSurface">
        <rdfs:label xml:lang="en">#$ApplyingSomethingToSurface</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$ApplyingSomethingToSurface event, something is applied to
            a surface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#PuttingSomethingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ApplyingStuffToSurface">
        <rdfs:label xml:lang="en">applying stuff to surface</rdfs:label>
        <rdfs:comment>A collection of events. In each
            #$ApplyingStuffToSurface event, some stuff is applied to a
            surface so that it covers [#$covers-Generic] it.  This may
            be done in different ways, for example by dipping an object
            into the stuff being applied, spraying the stuff onto the
            surface, or #$SpreadingStuffOntoSurface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SomethingAppearingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#ApplyingSomethingToSurface"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AppropriatingSomething">
        <rdfs:label xml:lang="en">appropriating events</rdfs:label>
        <rdfs:comment>A specialization of #$TakingSomething.  In each
            instance of #$AppropriatingSomething, an agent takes
            something that no one else has user rights over, such as air
            for breathing, or some object which at that time belongs to
            no one (for example,a dime lying in the street).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Approval">
        <rdfs:label xml:lang="en">sanctions</rdfs:label>
        <rdfs:comment>The emotion of viewing positively a state of
            affairs or other agent&apos;s actions.  This is a
            collection; for an explanation of a typical #$FeelingType,
            see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Satisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="April">
        <rdfs:label xml:lang="en">April</rdfs:label>
        <rdfs:comment>The collection of all Aprils,   the fourth month
            of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AquaticOrganism">
        <rdfs:label xml:lang="en">aquatic organisms</rdfs:label>
        <rdfs:comment>A specialization of #$Organism-Whole.  Each
            specialization of #$AquaticOrganism is a type of organism
            adapted to life underwater, whose instances spend all or
            most of their time immersed in water.  A notable
            specialization of #$AquaticOrganism is #$Fish.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Arc">
        <rdfs:label xml:lang="en">arc</rdfs:label>
        <rdfs:comment>A specialization of #$Line. Each instance of #$Arc
            is a continuous part of a curved line. Examples include
            spatially localized objects, such as the equator, and
            abstract objects, such as a part of an (abstract) ellipse.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear-Planar"/>
        <rdfs:subClassOf rdf:resource="#Line"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Area">
        <rdfs:label xml:lang="en">area (type)</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$Area is an amount of two-dimensional space.
            Instances of #$Area may be either a fixed interval, such as
            the area of a rectangle 5 cm x 10 cm, or a range, such as
            the area of a city lot.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgCardinalityPredicate">
        <rdfs:label xml:lang="en">argument cardinality predicates</rdfs:label>
        <rdfs:comment>The collection of   those
            #$ArgConstraintPredicates used to put cardinality-based
            argument constraints on predicates.  An argument-cardinality
            constraint is a kind of restriction on a predicate regarding
            the maximum number of things the predicate holds of with
            respect to a given one of its argument-places.  More
            precisely: given any particular way of fixing the arguments
            in the rest of the predicate&apos;s argument-places (perhaps
            together with some further specified condition), the
            cardinality constraint states the maximum number of
            different   things that can occupy the given argument-place
            such that the   relation holds of those arguments.  That is,
            supposing the   given argument-place is the Nth, the
            cardinality constraint   gives the maximum number of
            different sequences of arguments   of which the predicate
            holds and that differ from each other   only in their Nth
            items (and, where relevant, that meet some   further
            specified condition).  Instances of
            #$ArgCardinalityPredicate include #$argCardinality,
            #$interArgCardinality, and #$assertedArgCardinality.  Note
            that, in contrast with what #$ArgTypePredicates (q.v.)   are
            used for, putting an argument-cardinality constraint on   a
            predicate does _not_ impose a necessary condition for
            semantic well-formedness on closed atomic sentences built
            from that predicate.  A violation of a cardinality
            constraint   with respect to the Cyc Knowledge Base normally
            involves   multiple such sentences, where at least one them
            must be   _untrue_ (or otherwise unsuited for assertion in
            the   KB); but there is no implication that any of them is malformed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgConstraintPredicate">
        <rdfs:label xml:lang="en">arg constraint predicate</rdfs:label>
        <rdfs:comment>The collection of #$MetaRelations whose instances
            are used to put semantic well-formedness or entry-format
            constraints on one or more argument-places of a given
            #$Relation.  Such a constraint might concern an
            argument&apos;s _type_, an argument-place&apos;s #$Format
            (q.v.), a conditional relationship between two
            argument(-place)s&apos; types or formats, or some other sort
            of relationship between two arguments.  For a fuller
            account, see the various specializations of #$ArgConstraintPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CanonicalizerDirectivePredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgFormatBinaryPredicate">
        <rdfs:label xml:lang="en">binary argument-format predicates</rdfs:label>
        <rdfs:comment>The collection of binary predicates used to
            specify the required #$Format (q.v.) for a particular
            argument-place of a given #$Predicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgFormatPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgFormatPredicate">
        <rdfs:label xml:lang="en">argument-format predicates</rdfs:label>
        <rdfs:comment>The collection of those #$ArgConstraintPredicates
            used to specify an entry-format for a certain argument-place
            of a given #$Predicate.  An argument entry-format is a kind
            of restriction on a predicate regarding how many things, or
            the range of things, that the predicate holds of with
            respect to a given one of its argument-places.  More
            precisely: given any particular way of fixing the arguments
            in the rest of  the predicate&apos;s argument-places, the
            entry-format tells us something about  the number of
            different things, or the range of things, that can occupy
            the  given argument-place such that the relation holds of
            those arguments.  That is, supposing the given
            argument-place is the Nth, the entry-format tells us
            something about the number or range of different sequences
            of arguments  of which the predicate holds and that differ
            from each other only in their Nth items.  Two important
            specializations of #$ArgFormatPredicate are
            #$SpecificEntryFormatPredicate and
            #$GeneralEntryFormatPredicate  (qq.v.).  Instances of
            #$SpecificEntryFormatPredicate each have to do with a
            specific format (see e.g. #$singleEntryFormatInArgs).
            Instances of #$GeneralEntryFormatPredicate are comparatively
            higher-order , and are used to relate any given
            #$SpecificEntryFormatPredicate to a (fixed or given)
            argument-place of a given predicate (see e.g. #$arg1Format
            and #$argFormat).  Note that in some of the later cases the
            specified format constraint will be an  inter-argument  one
            that depends in some way upon one of the predicate&apos;s
            other argument-places (or upon another, non-format, feature
            of the same argument-place); see #$InterArgFormatPredicate.
            Note also that, in contrast with what #$ArgTypePredicates
            (q.v.) are used for, specifying an argument entry-format for
            a predicate does _not_ impose any sort of necessary
            condition for semantic well-formedness.  A violation of a
            legitimate entry-format constraint necessarily involves two
            or more statements, and at least one them must be _untrue_;
            but there is no implication that any of them  is malformed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlAttributeBinaryPredicate">
        <rdfs:label xml:lang="en">#$ArgGenlAttributeBinaryPredicate</rdfs:label>
        <rdfs:comment>Those instances of both #$ArgTypeBinaryPredicate
            and #$ArgGenlAttributePredicate used to specify the required
            attribute of an argument of #$Relation.  Each instance PRED
            of this collection is a binary predicate with the following
            properties: ARG1 is an instance of #$Relation, and ARG2 is
            an instance of #$AttributeValue.  (PRED ARG1 ARG2) means
            that some argument of ARG1 is constrained to be a spec
            attribute of ARG2, where PRED determines the argument place
            in question.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgGenlAttributePredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlAttributePredicate">
        <rdfs:label xml:lang="en">#$ArgGenlAttributePredicate</rdfs:label>
        <rdfs:comment>The subcollection of #$ArgTypePredicate used to
            specify the required attribute of an argument of a #$Relation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlAttributeTernaryPredicate">
        <rdfs:label xml:lang="en">#$ArgGenlAttributeTernaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$ArgTypeTernaryPredicate
            and #$ArgGenlAttributePredicate.  Each instance of
            #$ArgGenlAttributeTernaryPredicate is a ternary predicate
            used to place a  #$genlAttributes  constraint on (and
            thereby specify an argument-type for) one or more
            argument-places of a relation.  To be more precise, each
            instance PRED of #$ArgGenlAttributeTernaryPredicate takes a
            #$Relation RELN as its first argument, a
            #$NonNegativeInteger N as its second argument, and an
            #$AttributeValue ATTR as its third argument. PRED places a
            #$genlAttributes  constraint on RELN&apos;s Nth
            argument-place that is based on ATTR, so that a ground
            atomic sentence (GAF) of the form (RELN ARG1..ARGN..) is
            semantically well-formed only if ARGN is a specialization of
            ATTR (in the sense that (#$genlAttributes ARGN ATTR) holds).
            An important instance of #$ArgGenlAttributeTernaryPredicate
            is #$argGenlAttribute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgGenlAttributePredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlBinaryPredicate">
        <rdfs:label xml:lang="en">#$ArgGenlBinaryPredicate</rdfs:label>
        <rdfs:comment>Those instances of both #$BinaryPredicate and
            #$ArgGenlPredicate used to specify the required #$genls of
            an argument of a #$Relation; the arg1 is the #$Relation; the
            arg2 is the required #$genls #$Collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgGenlPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlPredicate">
        <rdfs:label xml:lang="en">#$ArgGenlPredicate</rdfs:label>
        <rdfs:comment>Those instance of #$ArgTypePredicate used to
            specify the required #$genls of an argument of a #$Relation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DefinitionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgGenlTernaryPredicate">
        <rdfs:label xml:lang="en">#$ArgGenlTernaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$ArgTypeTernaryPredicate and
            #$ArgGenlPredicate.  Each instance of
            #$ArgGenlTernaryPredicate is used to specify that a certain
            collection is required to stand in the #$genls relation to
            anything that is acceptable in a particular argument slot of
            a given instance of #$Relation.  With each instance of
            #$ArgGenlTernaryPredicate, the first argument is the
            relation constrained; the second argument is the argument
            constrained; and the third argument is the required
            collection that the relation&apos;s specified argument is
            required to be a specialization of.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgGenlPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgIsaBinaryPredicate">
        <rdfs:label xml:lang="en">#$ArgIsaBinaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$ArgTypeBinaryPredicate
            and #$ArgIsaPredicate.  Each instance of
            #$ArgIsaBinaryPredicate takes a #$Relation RELN as its first
            argument, and a #$Collection COL as its second argument, and
            places a constraint based on COL on at least one of the
            argument-places of RELN.  To be more precise, suppose that
            PRED is an #$ArgIsaBinaryPredicate that specifies an
            argument-type for the Nth argument-place of RELN.  Then a
            sentence of the form (PRED RELN COL) entails that a closed
            formula of the form (RELN ... ARGN ...) is semantically
            well-formed only if  ARGN is an instance of COL.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgIsaPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgIsaPredicate">
        <rdfs:label xml:lang="en">argument-type specifying predicates</rdfs:label>
        <rdfs:comment>The collection of #$ArgTypePredicates (q.v.) that
            specify argument-types directly (by referencing certain
            collections) and impose constraints that require a
            thing&apos;s being an instance of a collection thus
            specified.  More precisely, each instance of
            #$ArgIsaPredicate PRED takes a #$Relation RELN as its first
            argument (or  arg1 ), and has at least one other
            argument-place (say the Mth) for specifying an argument-type
            for one of RELN&apos;s argument-places (say the Nth).  (The
            value of N might be fixed or might be given by yet another
            of PRED&apos;s arguments.)  Suppose M=2 and N=1.  PRED then
            takes a #$Collection as its second argument, and a closed
            atomic sentence (or  GAF ) of the form (PRED RELN COL ..)
            puts an  #$isa  constraint on RELN&apos;s first
            argument-place that is based on COL.  If PRED is a
            single-argument  constraint predicate, the GAF entails that
            a closed formula of the form (RELN ARG1 ..) is semantically
            well-formed only if ARG1 is an instance of (i.e. #$isa) COL.
            If PRED is an  inter-argument  constraint predicate, the GAF
            expresses a slightly more complicated, conditional #$isa
            constraint on a pair of RELN&apos;s argument-places (see #$InterArgIsaPredicate).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DefinitionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgIsaTernaryPredicate">
        <rdfs:label xml:lang="en">ternary argument-type specifying predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$ArgTypeTernaryPredicate
            and #$ArgIsaPredicate (q.v.).  Each instance of
            #$ArgIsaTernaryPredicate is a ternary predicate used to
            place an  #$isa  constraint on (and thereby specify an
            argument-type for) one or more argument-places of a
            relation.  To be more precise, each instance PRED of
            #$ArgIsaTernaryPredicate takes a #$Relation RELN as its
            first argument, a #$NonNegativeInteger N as its second
            argument, and a #$Collection COL as its third argument.
            PRED places an  #$isa  constraint on RELN&apos;s Nth
            argument-place that is based on COL, so that a ground atomic
            sentence (GAF) of the form (RELN ARG1..ARGN..) is
            semantically well-formed only if ARGN is an instance of COL.
            (Note that (i) if N = 0 then this same constraint is placed
            on _all_ of RELN&apos;s argument-places and (ii) if PRED is
            #$argAndRestIsa then this constraint is placed on all of
            RELN&apos;s argument-places whose ordinal positions are
            greater than or equal to the Nth.)  An important instance of
            #$ArgIsaTernaryPredicate is #$argIsa.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgIsaPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgTypeBinaryPredicate">
        <rdfs:label xml:lang="en">#$ArgTypeBinaryPredicate</rdfs:label>
        <rdfs:comment>Those instances of both #$BinaryPredicate and
            #$ArgTypePredicate used to specify the required #$isa or
            #$genls or #$genlAttributes of an argument of a #$Relation;
            the arg1 is the #$Relation; the arg2 is the required type, a
            #$Collection or #$AttributeValue.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgTypePredicate">
        <rdfs:label xml:lang="en">arg type predicate</rdfs:label>
        <rdfs:comment>The collection of #$ArgConstraintPredicates used
            to put semantic well-formedness constraints on the type of
            argument(s) appropriate for a given argument-place (or
            -places) of a given relation.  A  type  of argument can be
            specified in terms of #$isa or #$genls or #$genlAttributes;
            see the various specializations of #$ArgTypePredicate for
            more detail. Violation of such a constraint results in an
            expression that is semantically malformed.  For an general
            explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DefinitionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ArgTypeTernaryPredicate">
        <rdfs:label xml:lang="en">arg type ternary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$TernaryPredicate and
            #$ArgTypePredicate used to specify the required #$isa or
            #$genls or #$genlAttributes of an argument of a #$Relation;
            the arg1 is the Relation; the arg2 is the argument
            constrained; the arg3 is the required type: a #$Collection
            or an #$AttributeValue.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Arm">
        <rdfs:label xml:lang="en">arms (types of things)</rdfs:label>
        <rdfs:comment>The collection of all animal arms.  An #$Arm of an
            animal is one of its #$AnimalBodyParts, more particularly
            one of its appendages, a limb which it uses for manipulation
            moreso than for locomotion.  A #$Hand is considered part of
            an #$Arm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HolderGripper"/>
        <rdfs:subClassOf rdf:resource="#Limb-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArmMovement">
        <rdfs:label xml:lang="en">arm movements</rdfs:label>
        <rdfs:comment>A specialization of #$BodyMovementEvent.  Each
            instance of #$ArmMovement is a movement of an animal&apos;s
            arm, where the movement in question is generated by the
            animal, and involves movement of the upper arm or elbow in
            relation to the animal&apos;s body.  Specializations of
            #$ArmMovement include #$RaisingAnArm and #$Reaching.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArmoredVehicle">
        <rdfs:label xml:lang="en">armored vehicles</rdfs:label>
        <rdfs:comment>#$ArmoredVehicle is a specialization of
            #$TransportationDevice-Vehicle and
            #$LandTransportationDevice.  Each instance of
            #$ArmoredVehicle is a land vehicle protected by armor.  This
            collection includes  both tracked and wheeled vehicles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArmoredVehicle-Heavy">
        <rdfs:label xml:lang="en">heavy armored vehicles</rdfs:label>
        <rdfs:comment>#$ArmoredVehicle-Heavy is a specialization of
            #$ArmoredVehicle and #$MilitaryVehicle.  Each instance of
            #$ArmoredVehicle-Heavy is designed  to sustain tank,
            artillery, and small-arm fire while engaging in combat.  The
            light-armored vehicles, on the other hand, only sustain
            small-arm fire and shrapnel.  This collection is disjoint
            with #$ArmoredVehicle-Light.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryVehicle"/>
        <rdfs:subClassOf rdf:resource="#ArmoredVehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Army-BranchOfService">
        <rdfs:label xml:lang="en">regular armies</rdfs:label>
        <rdfs:comment>The collection of all modern nation-states&apos;
            armies (i.e. the whole branch of service).  This sense of
            `army&apos; is different from that of `Army&apos; or `Army
            Group&apos; as sometimes applied to certain military units,
            e.g. the American 5th Army in the European Theater in WWII.
            Use #$Army-UnitDesignation for the latter meaning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BranchOfMilitaryService"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArmyPersonnel">
        <rdfs:label xml:lang="en">army people</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryPerson. Each
            instance of #$ArmyPersonnel is a person who is a member of
            some instance of #$Army-BranchOfService.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Soldier"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArrangementOfLikeObjects">
        <rdfs:label xml:lang="en">#$ArrangementOfLikeObjects</rdfs:label>
        <rdfs:comment>A collection of groups of #$PartiallyTangibles.
            Each instance of #$ArrangementOfLikeObjects is a group of
            partially tangible objects, all of the same type (see
            #$arrangementObjectTypes and
            #$arrangementNearestObjectTypes), having a specified set of
            spatial relations holding among them (see
            #$arrangementPredicates and #$arrangementNearestPredicates).
            See also #$Group.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArrangingForSomething">
        <rdfs:label xml:lang="en">#$ArrangingForSomething</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction.  Each
            instance of #$ArrangingForSomething is an event in which
            some action or set of actions is arranged or facilitated.
            Note that events in which objects are arranged (e.g.,
            instances of #$FlowerArranging) _not_ usually instances of #$ArrangingForSomething.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Array-DataStructure">
        <rdfs:label xml:lang="en">array - data structure</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerDataStructure.  Each
            instance of #$Array-DataStructure arranges a group of data
            elements in a continuous block of memory.   Individual
            elements are accessed by index using integers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerDataStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArrestingSomeone">
        <rdfs:label xml:lang="en">#$ArrestingSomeone</rdfs:label>
        <rdfs:comment>A specialization of #$SocialOccurrence and
            #$CapturingAnimal.  In each instance of #$ArrestingSomeone,
            a law enforcement officer arrests another person, who is
            then taken into custody (see the related constant #$HeldCaptive).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#CapturingAnimal"/>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArtObject">
        <rdfs:label xml:lang="en">#$ArtObject</rdfs:label>
        <rdfs:comment>A specialization of both #$HumanAccessibleIBO and
            #$Artifact.  Each instance of #$ArtObject is a physical
            object that is a work, or a reproduction of a work, in one
            of the representational or plastic arts, such as a painting,
            sculpture, quilt, or stained glass composition.  #$ArtObject
            does not include as instances plays, movies, music,
            performance art, or other activities.  #$ArtObject is a
            specialization of #$InformationBearingObject, but its
            instances need not have any propositional content.  Examples
            of #$ArtObject include the #$StatueOfLiberty, the Mona Lisa,
            a poster reproduction of Van Gogh&apos;s `Starry
            Night&apos;, Rodin&apos;s `Burghers of Calais&apos;, a piece
            of Ju ware from the Sung Dynasty, the windows of Chartres
            Cathedral. See also #$Artist, #$artisticWorksCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Arthropod">
        <rdfs:label xml:lang="en">arthropods</rdfs:label>
        <rdfs:comment>A #$BiologicalPhylum and a specialization of
            #$Invertebrate.  Each instance of  #$Arthropod is a member
            of a species whose members are typically chitin-armored
            invertebrates with jointed bodies and limbs.
            Specializations include #$Insect,  #$Crustacean, and #$Arachnid.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Invertebrate"/>
        <rdfs:subClassOf rdf:resource="#MulticellularOrganism"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Artifact">
        <rdfs:label xml:lang="en">#$Artifact</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing.  Each
            instance of #$Artifact is an at least partially tangible
            thing which was intentionally created by an #$Agent (or a
            group of #$Agents working together) to serve some purpose or
            perform some function.  In order to create an instance of
            #$Artifact, it is not necessary that an #$Agent create the
            matter out of which the #$Artifact is composed; rather, an
            #$Agent can create an instance of #$Artifact by assembling
            or modifying existing matter.  Examples of #$Artifacts
            include a wooden flute that&apos;s been whittled from a tree
            branch, a sawhorse that&apos;s been put together out of
            boards and nails, and a coin that&apos;s been minted by
            embossing or by melting liquid silver into a mold.  In
            addition to the obvious human artifacts (buildings, tools,
            textiles, power lines), the collection #$Artifact also
            includes certain sorts of things made by #$Animals, such as
            bird nests, termite mounds, and beaver dams. Artifacts
            without any tangible parts are excluded from the collection
            #$Artifact; they are included in the collection #$Artifact-Intangible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-NonNatural"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Artifact-Generic">
        <rdfs:label xml:lang="en">generic artifacts</rdfs:label>
        <rdfs:comment>A collection of things created by #$Agents.  These
            creations may be either tangible (like a hammer, a bowl, or
            a bridge) or intangible (like a set of laws, a
            #$KnowledgeBase, or Beethoven&apos;s Ninth Symphony).  Thus,
            the collection of #$Artifact-Generics is partitioned into
            #$Artifact and #$Artifact-Intangible (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Artifact-Intangible">
        <rdfs:label xml:lang="en">intangible artifacts</rdfs:label>
        <rdfs:comment>A specialization of both #$IntangibleIndividual
            and #$Artifact-Generic.  Each instance of
            #$Artifact-Intangible is an intangible thing intentionally
            created by an agent or agents.  Important specializations of
            #$Artifact-Intangible include #$ComputerLanguage,
            #$ConceptualWork, and #$Agreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Artifact-NonAgentive">
        <rdfs:label xml:lang="en">non-agentive artifacts</rdfs:label>
        <rdfs:comment>#$Artifact-NonAgentive is the collection of all
            artifacts that in no plausible, literal sense may be
            considered to have a kind of agency in ordinary,
            non-fictional, straightforward contexts -- i.e. they are not
            instances of #$Agent-Generic.  (Exceptions within
            metaphorical, fanciful, or fictional context could supersede
            membership in this collection: when someone says,  My
            hairdryer hates me , the hairdryer would not be an instance
            of #$Artifact-NonAgentive in that special context.)  Example
            subcollections: #$Balloon, #$CookedFood, and #$Shaft.
            #$AgentiveArtifacts like #$Robots are excluded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ArtificialMaterial">
        <rdfs:label xml:lang="en">artificial substances</rdfs:label>
        <rdfs:comment>A collection of substances; a subcollection of
            #$Artifact.  An instance of #$ArtificialMaterial is a
            portion of artificial stuff that was intentionally made by
            some agent(s), such as #$Plastic or #$SweetNLow. Since
            #$ArtificialMaterials are intentionally produced, this class
            does not normally include materials which are merely
            #$byProducts or #$wasteProducts of an intentional process.
            However, what is a by-product at one time or in one context
            may be a useful material that would count as an instance of
            #$ArtificialMaterial in another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Artist">
        <rdfs:label xml:lang="en">artist</rdfs:label>
        <rdfs:comment>A specialization of #$Person. Each instance of
            this collection is a person who produces or performs works
            of art.  This includes performing artists (whose works are
            transitory unless recorded) as well as visual artists,
            literary writers, and composers (whose works are intended to
            last for a significant length of time and be viewed or
            otherwise appreciated after the artist finishes them). A
            notable specialization of this collection is
            #$Artist-Visual. See also #$ArtObject, #$artisticWorksCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EntertainmentOrArtsProfessional"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AssociativeRelation">
        <rdfs:label xml:lang="en">associative relations</rdfs:label>
        <rdfs:comment>The collection of #$Relations having the property
            of associativity.  Roughly put, an associative relation is
            such that, when it is applied recursively to a list of
            arguments (whose length is greater than the relation&apos;s
            arity, and with each item in the list being used exactly
            once), the _order_ of application does not matter.   Though
            not restricted to #$BinaryRelations, most of the familiar
            examples of associative relations are binary (or
            variable-arity and used with two arguments).  Where RELN is
            binary, it is an instance of #$AssociativeRelation if and
            only if (for any appropriate arguments A,B, and C) the
            corresponding expressions of the forms (RELN A (RELN B C))
            and (RELN (RELN A B) C) both have the same value: if RELN is
            a #$Predicate or #$LogicalConnective they both have the same
            truth value, while if RELN is a #$Function-Denotational they
            both have the same denotatum (or both have no denotatum).
            Where RELN has a higher arity than two, the definition is
            similar, but with the relevant expression-forms
            appropriately rewritten.  Where RELN is variable-arity (see
            #$VariableArityRelation), it is an #$AssociativeRelation if
            and only of it behaves associatively with respect to each of
            the particular arities it  covers  (see #$arityMax and
            #$arityMin).  Examples of #$AssociativeRelations include
            #$PlusFn, #$TimesFn, #$JoinListsFn, #$or, and #$and.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="AstronomicalObject">
        <rdfs:label xml:lang="en">astronomical objects</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing-Natural.  The
            collection of all things  of the types studied by
            astronomers.  Each instance of #$AstronomicalObject  is a
            (usually quite large) natural, inanimate object that is
            located in the  physical universe and is not on the surface
            of the Earth.  (But note that  #$PlanetEarth itself _is_ an
            instance of this collection.)  An  #$AstronomicalObject
            might be either an individual heavenly body (see
            #$AstronomicalBody) or a group or system made up of such
            bodies (see e.g.  #$Galaxy and #$PlanetarySystem).  See also
            the specialization  #$CelestialObject, instances of which
            are visible from the Earth.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateObject-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AsymmetricBinaryPredicate">
        <rdfs:label xml:lang="en">asymmetric binary predicates</rdfs:label>
        <rdfs:comment>An instance of
            #$BinaryPredicateTypeByLogicalFeature and a specialization
            of #$AntiSymmetricBinaryPredicate (q.v.).  A binary
            predicate BINPRED is an  instance of
            #$AsymmetricBinaryPredicate if and only if (i) for any
            THING1  and THING2, (BINPRED THING1 THING2) implies (#$not
            (BINPRED THING2 THING1)) and (ii) the single-argument
            argument type (i.e. #$argIsa and #$argGenl)  constraints on
            BINPRED&apos;s two respective argument-places are jointly
            satisfiable (see
            #$NoteOnArgumentTypingAndPropertiesOfRelations).  Examples
            of asymmetric binary predicates include #$northOf,
            #$children, #$greaterThan,  and #$overrides.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AntiSymmetricBinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#IrreflexiveBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="AtLeastPartiallyMentalEvent">
        <rdfs:label xml:lang="en">mental events</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$AtLeastPartiallyMentalEvent is an event involving the
            mental functions of  a participant or group of participants
            (see #$actors) in that event.  The collection includes such
            things as dreaming, perceiving, sensing, theorizing about
            something, having a realization, making a decision, building
            something, designing something, and consciously carrying out
            a task.  Note that the above list includes both purposeful
            events and non-purposeful events that involve mental
            functions.  Note also that any event that has a mental
            component is also an instance of this collection, so that
            events like preparing lunch would be classified as instances
            of #$AtLeastPartiallyMentalEvent.  In entering knowledge, it
            is almost always possible and preferable to use one of the
            specializations of #$AtLeastPartiallyMentalEvent.  If an
            event seems mostly mental in nature, modulo neurons firing
            and related brain activity, use #$StrictlyMentalEvent or one
            of its specializations.  If it essentially involves both
            mental and physical activity, see
            #$CompositePhysicalAndMentalEvent or
            #$PurposefulPhysicalAction.  For mental events that are
            intentionally and purposefully performed, see the
            specialization #$PurposefulMentalActivity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#MentalSituation"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AtemporalNecessarilyEssentialCollectionType">
        <rdfs:label xml:lang="en">#$AtemporalNecessarilyEssentialCollectionType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance COL of
            #$AtemporalNecessarilyEssentialCollectionType (ANECT) is a
            collection satisfying three conditions: (1) COL is disjoint
            with (see #$disjointWith) #$TemporalThing, (2) every
            instance INST of COL is an instance of COL essentially (i.e.
            INST is an instance of COL, and could not exist without
            being an instance of COL), and (3) condition (2) is a
            necessary truth about COL.  Positive examples include
            #$Collection, #$Integer, and #$Relation (each of which is a
            collection of atemporals and is such that, necessarily, all
            of its instances are in it essentially).  Negative examples
            include #$SpatialThing (though arguably it is necessary that
            all of its instances are essentially instances of it, it is
            not disjoint with #$TemporalThing) and
            #$UniqueAnatomicalPartType (which, though disjoint with
            #$TemporalThing, has instances, such as #$Heart, that could
            exist even if they weren&apos;t instances of it; e.g. it
            might have been the case that every creature with a heart
            had at least two hearts).  There are no known examples of
            Cyc-reified collections satisfying conditions (1) and (2)
            but not (3), but one can be contrived.  Suppose that all of
            today&apos;s winning lottery numbers were primes.  Now
            consider the collection (#$CollectionUnionFn (#$TheSet
            #$PrimeNumber TodaysWinningLotteryNumbers)).  This
            collection is clearly disjoint with #$TemporalThing and, by
            hypothesis, all of its instances are in it essentially (as
            each prime number is essentially a prime number).  But this
            last fact is not _necessarily_ true of this collection: the
            collection might have had instances that belonged to it only
            contingently (i.e. not essentially), as it might have been
            the case that one of today&apos;s winning lottery numbers
            was non-prime, and no number is such that it is essentially
            one of today&apos;s winning lottery numbers.  When asserting
            that something is an instance or specialization of a given
            instance of ANECT, it is appropriate to do so in the
            #$UniversalVocabularyMt (q.v.).  Indeed, ANECT was specially
            defined to facilitate the movement of appropriate assertions
            to that microtheory. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="Athlete">
        <rdfs:label xml:lang="en">#$Athlete</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$Athlete is a person who trains to compete in contests
            involving physical agility, stamina, or strength.  Note that
            in the #$JobMt, #$Athlete is a subcollection of
            #$PersonWithOccupation (q.v.), and hence in that microtheory
            represents the collection of professional athletes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>

        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Entertainer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AthleticActivity">
        <rdfs:label xml:lang="en">althetic activities</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PurposefulPhysicalAction and #$HumanActivity. Each
            instance of #$AthleticActivity is a purposeful, physical
            human activity  that is related to the playing of some
            sport, involves physical exertion, and  tends to require
            strength and stamina.  This collection is not limited  to
            competitive sports events, but also includes non-competitive
            sports  activities and exercising (e.g. spelunking, going
            for a jog, or shooting  a few hoops).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Atom">
        <rdfs:label xml:lang="en">atoms (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$ChemicalObject. Each
            instance of #$Atom is a microscopic-scale object with
            exactly one atomic nucleus (see #$AtomicNucleus) and some
            number of electrons (see #$Electron).  A typical instance of
            #$Atom has no net charge, i.e., it has as many instances of
            #$Electron as it does of #$Proton.  For the collection of
            atoms that do have non-zero charges, see #$AtomicIon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChemicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AtomicNucleus">
        <rdfs:label xml:lang="en">#$AtomicNucleus</rdfs:label>
        <rdfs:comment>A specialization of #$MicroscopicScaleObject.
            Each instance of #$AtomicNucleus is an object composed of
            some definite number of instances of #$Proton and some
            definite number of instances of #$Neutron.  Each instance of
            #$Atom has exactly one instance of #$AtomicNucleus as a part.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AtomicSymbol-Abstract">
        <rdfs:label xml:lang="en">abstract atomic symbols</rdfs:label>
        <rdfs:comment>The collection of all abstract symbols which are
            not composed of further symbols. By &apos;abstract
            symbol&apos; we mean any abstract object whose concrete
            instantiations have meaning, broadly construed, according to
            some convention. For example, the letter A is an
            #$AtomicSymbol-Abstract, whereas its concrete instantiations
            (such as you see in this note) are not. The character string
            &apos;ABC&apos; is not an #$AtomicSymbol-Abstract, because
            it is composed of more than one symbol. An arbitrary
            abstract object (such as the abstract structure of carbon
            dioxide) is not #$AtomicSymbol-Abstract unless its
            instantiations have a meaning, according to some convention.
            Other examples include all instances of
            #$Character-Abstract, punctuation marks, words (but not
            their corresponding character strings) and symbols of
            diagram types (e.g. the symbols used in wiring diagrams).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AttachmentEvent">
        <rdfs:label xml:lang="en">attaching</rdfs:label>
        <rdfs:comment>The collection of events in which one object
            becomes attached to another.  This may involve fasteners of
            some sort in which case one should use the specialization
            #$ConnectingTogether or processes in which no fasteners are
            used, e.g. magnets moving together, two objects rusting
            together, chemical bonding.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Incorporation-Physical"/>
        <rdfs:subClassOf rdf:resource="#ConfiguringEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AttackByComputerOperation">
        <rdfs:label xml:lang="en">attack by computer operations</rdfs:label>
        <rdfs:comment>A specialization of #$AttackOnObject,
            #$ActsCommonlyConsideredCriminal and #$ComputerActivity.
            Each instance of #$AttackByComputerOperation an attack
            executed using computer operations as weapons.  Commonly,
            instances of this collection are called  electronic attacks
            or  cyber attacks . This collection includes as
            specializations #$AttackByComputerOperation-DenialOfService,
            #$AttackByComputerOperation-CorruptionOfInformation and many
            others.  Note that #$AttackByComputerOperation is not a
            specialization of #$AttackOnIBT, because many instances of
            #$AttackByComputerOperation do not involve an attempt to
            change the information content of their targets.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttackOnObject"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#ActsCommonlyConsideredCriminal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AttackOnObject">
        <rdfs:label xml:lang="en">#$AttackOnObject</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulPhysicalAction and
            #$AttackOnObject.  Each instance of #$AttackOnObject is an
            action intentionally performed by an actor or actors (see
            #$performedBy) with the goal (see #$purposeInEvent) that the
            action damages (see #$damages) the object attacked (see
            #$objectAttacked).  The object that is attacked in an
            instance of #$AttackOnObject need not be a tangible object
            -- for example, it could be a web site or a person&apos;s
            character.  For attacks against tangible objects, see the
            more specialized collection, #$AttackOnTangible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AttitudePrefix">
        <rdfs:label xml:lang="en">attitude prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AttributeDenotingFunction">
        <rdfs:label xml:lang="en">attribute-denoting functions</rdfs:label>
        <rdfs:comment>The collection of denotational functions that
            return only #$AttributeValues. The attributes thus returned
            will often be #$RelativeAttributes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="AttributePointValue">
        <rdfs:label xml:lang="en">attribute point value</rdfs:label>
        <rdfs:comment>A specialization of #$AttributeValue.
            #$AttributePointValue is the collection of attribute values
            VAL which are minimal in the sense that there is no other
            attribute value VAL2 different from VAL such that
            (#$genlAttributes VAL2 VAL).  The instances of
            #$ScalarPointValue, such as the #$RealNumber pi, are
            instances of #$AttributePointValue as well.  In addition,
            #$AttributePointValue has elements that are not
            #$ScalarPointValues; an example would be a specific shade of
            color of a precise hue, saturation, and lightness.
            #$ScalarIntervals that are not #$ScalarPointValues, such as
            the real number interval (#$Unity 3 4), are also not
            #$AttributePointValues.  Another example of an attribute
            value that is not an #$AttributePointValue is the color
            #$RedColor, which encompasses different shades of red.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="AttributePredicate">
        <rdfs:label xml:lang="en">attribute predicates</rdfs:label>
        <rdfs:comment>The subcollection of #$Predicates that relate
            attributes to things that hold them or are perceived as
            holding them. More formally, PRED is an instance of this
            collection if (#$argIsa PRED N ATT-VAL-SPEC) holds for some
            N and some collection ATT-VAL-SPEC that is a subcollection
            of #$AttributeValue and the attributes represented by
            instances of ATT-VAL-SPEC are related by PRED to some thing
            or things holding this attribute or perceived as holding it.
            For example, #$levelOfEfficiencyWithRespectTo is an instance
            of this collection since (#$argIsa
            #$levelOfEfficiencyWithRespectTo 2 #$Efficiency) holds,
            #$Efficiency is a specification of #$AttributeValue and
            #$levelOfEfficiencyWithRespectTo relates an instance EFF of
            #$Efficiency to an instance SYS of #$System-Generic in those
            situations in which EFF is an attribute of SYS.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="AttributeValue">
        <rdfs:label xml:lang="en">attribute values</rdfs:label>
        <rdfs:comment>A specialization of #$IntangibleIndividual.  Each
            instance of #$AttributeValue is a property (in a broad sense
            of &apos;property&apos;) of some instance of #$Thing.
            #$AttributeValue includes as instances quantities, such as 5
            inches (i.e., (#$Inch 5)) or 1000 dollars per year (i.e.,
            (#$DollarsPerYear 1000)), as well as qualities like #$Hilly,
            #$Rough, #$DeviceOn, etc., which can be used to make
            assertions about the state of some tangible object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>

    </owl:Class>
    <owl:Class rdf:ID="AudibleSound">
        <rdfs:label xml:lang="en">#$AudibleSound</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sound"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AudioCommunicating">
        <rdfs:label xml:lang="en">audio-communicating events</rdfs:label>
        <rdfs:comment>A specialization of #$Communicating.  Each
            instance of #$AudioCommunicating is a transmission of
            sound-borne information between two (or more) agents.
            Specializations of #$AudioCommunicating include
            #$SpokenCommunicating and #$MusicalCommunicating.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="August">
        <rdfs:label xml:lang="en">August</rdfs:label>
        <rdfs:comment>The collection of all Augusts,   the eighth month
            of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AuthorizedAgreement">
        <rdfs:label xml:lang="en">authorized agreements</rdfs:label>
        <rdfs:comment>A specialization of #$Agreement.  Each instance of
            #$Agreement is a generic agreement that is authorized by one
            of the agreeing parties (typically by the issuer of the
            document embodying the agreement).  #$AuthorizedAgreements
            are generic in the sense that their authorizing agents are
            party to many similar agreements; for that reason, an
            #$AuthorizedAgreement is typically given a unique
            identification number.  Notable positive examples include
            bank accounts, driver&apos;s licenses, and stock certificates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="AutoDealership">
        <rdfs:label xml:lang="en">car dealerships</rdfs:label>
        <rdfs:comment>#$AutoDealership is a specialization of
            #$RetailStore, #$Business, and #$TransportationOrganization.
            Each instance of #$AutoDealership is an establishment (an
            organization located at one site) that sells automobiles and
            other types of road vehicles to consumers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#RetailStore"/>
        <rdfs:subClassOf rdf:resource="#TransportationOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Automobile">
        <rdfs:label xml:lang="en">#$Automobile</rdfs:label>
        <rdfs:comment>A specialization of #$RoadVehicle.  Each instance
            of #$Automobile is a four-wheeled road vehicle designed for
            carrying about two to eight passengers.  Notable
            specializations of #$Automobile include #$SportsCar,
            #$PickupTruck and #$Van.  This collection does _not_ include
            motorcycles or tractor-trailers (since both motorcycles and
            tractor-trailers are not four-wheeled vehicles), nor does it
            include buses (since buses are designed to carry more
            passengers than instances of #$Automobile are designed to carry).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#SinglePurposeDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Autotroph">
        <rdfs:label xml:lang="en">autotrophic organisms</rdfs:label>
        <rdfs:comment>The collection of organisms capable of
            manufacturing organic nutrients from inorganic raw
            materials.  Photosynthetic plants fall into this category,
            as do certain bacteria.  See #$Photosynthesis-Generic.  Cf. #$Heterotroph.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Aux-Negated">
        <rdfs:label xml:lang="en">#$Aux-Negated</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all auxiliary verbs negated by contraction.
            Example: &apos;hadn&apos;t&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuxVerb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="AuxVerb">
        <rdfs:label xml:lang="en">#$AuxVerb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of auxiliary verbs, including &apos;have&apos;,
            &apos;be&apos;, and &apos;do&apos;, as well as the modal
            verbs.  All of these can be inverted in questions, and have
            other distributional peculiarities.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Verb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Awe">
        <rdfs:label xml:lang="en">awe</rdfs:label>
        <rdfs:comment>Emotion inspired by something which arouses
            one&apos;s deep respect, veneratioon and wonder. Implies a
            sense of being overwhelmed or overcome by great superiority
            or impressiveness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Reverence"/>
    </owl:Class>
    <owl:Class rdf:ID="Axis">
        <rdfs:label xml:lang="en">axes</rdfs:label>
        <rdfs:comment>A specialization of #$Line-Straight-Directed. Each
            instance of #$Axis is a straight line about which a
            three-dimensional figure is oriented or rotates.  The
            orientation is between specified sides or points of the
            object or according to the right-hand rule for a rotational
            axis. Examples include spatially localized objects, such as
            the Earth&apos;s axis of rotation, as well as abstract
            objects, such as the axis of rotation for some abstract
            three-dimensional figure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear-Straight"/>
        <rdfs:subClassOf rdf:resource="#Line"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BackSide">
        <rdfs:label xml:lang="en">#$BackSide</rdfs:label>
        <rdfs:comment>The collection of all the entire back sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces in the backwards direction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Side"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BacterialInfection">
        <rdfs:label xml:lang="en">#$BacterialInfection</rdfs:label>
        <rdfs:comment>An instance of #$InfectionTypeByPathogenType, and
            a specialization of #$Infection.  Each instance of
            #$BacterialInfection is an infection caused by bacteria (see
            the constant #$Bacterium).  Notable specializations of
            #$BacterialInfection include #$AnthraxInfection,
            #$Diphtheria, #$Acne, and #$Leprosy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Infection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BakingFood">
        <rdfs:label xml:lang="en">baking</rdfs:label>
        <rdfs:comment>A specialization of #$CookingFood.  Each instance
            of #$BakingFood is an event during which which food is baked
            in an instance of #$RegularOven.  After an event of
            #$BakingFood occurs, the food involved has been baked (see #$Baked).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationProcess"/>
        <rdfs:subClassOf rdf:resource="#HeatingProcess"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BalconyLevelInAConstruction">
        <rdfs:label xml:lang="en">balconies</rdfs:label>
        <rdfs:comment>#$BalconyLevelInAConstruction is a specialization
            of #$LevelOfAConstruction.  Each instance of
            #$BalconyLevelInAConstruction is a balcony in the style of
            those overhanging levels sometimes found in churches,
            theatres, etc.  Such balconies are often approximately
            one-third the size of the floor or level below them, and
            therefore can be considered legitimate levels themselves.
            They usually contain a mob of seats.  Note that this
            collection does _not_ include the kind of balcony that
            protrudes from a window or door on an already existing
            level.   See also #$AboveGroundLevelInAConstruction and #$BasementLevelInAConstruction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Balloon">
        <rdfs:label xml:lang="en">balloons</rdfs:label>
        <rdfs:comment>#$Balloon is a specialization of
            #$Artifact-NonAgentive, #$BilateralObject, and
            #$PhysicalDevice.  Each instance of #$Balloon is a physical
            device made from an elastic and flexible material and filled
            with gas or air. The #$Balloon tends to be light (sometimes
            lighter than air).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#BilateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BankDebitCard">
        <rdfs:label xml:lang="en">bank cards</rdfs:label>
        <rdfs:comment>A specialization of #$Card and #$TenderObject.
            Each instance of #$BankDebitCard is a plastic card that
            enables the holder to access the #$BankAccount with which
            the card is associated. It is typically used to withdraw
            funds from the account. See also #$CreditCard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Bartering">
        <rdfs:label xml:lang="en">#$Bartering</rdfs:label>
        <rdfs:comment>The collection of transactions between two
            #$Agents in which one #$Agent gives items or services to
            another #$Agent, and the other #$Agent gives items or
            services in return, and neither of the items or services is
            money, credit, or payment of money.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#ExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordForm">
        <rdfs:label xml:lang="en">base word forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WordConstituent"/>
        <rdfs:subClassOf rdf:resource="#LexicalItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByEndingLetters">
        <rdfs:label xml:lang="en">base word form types by ending letter</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByEndingPhonemeType">
        <rdfs:label xml:lang="en">base word form types by ending phoneme type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByEtymology">
        <rdfs:label xml:lang="en">base word form types by etymology</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByPhonology">
        <rdfs:label xml:lang="en">base word form types by phonology</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByStartingLetters">
        <rdfs:label xml:lang="en">base word form types by starting letter</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BaseWordFormTypeByStartingPhonemeType">
        <rdfs:label xml:lang="en">base word form types by starting
            phoneme type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="BasementLevelInAConstruction">
        <rdfs:label xml:lang="en">basements</rdfs:label>
        <rdfs:comment>#$BasementLevelInAConstruction is a specialization
            of #$LevelOfAConstruction.  Each instance of
            #$BasementLevelInAConstruction is a level in a construction
            that is below ground level.  See also
            #$AboveGroundLevelInAConstruction and #$BalconyLevelInAConstruction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Battle">
        <rdfs:label xml:lang="en">battles</rdfs:label>
        <rdfs:comment>A specialization of #$HostileSocialAction.  Each
            instance of #$Battle is an event in which two or more large
            groups of people meet and fight one another, each group
            seeking to vanquish (some of) the others.  Instances of
            #$Battle are often conducted by instances of
            #$MilitaryOrganization (q.v.), and they may influence the
            outcomes of instances of #$WagingWar (q.v.).  Each instance
            of #$Battle will have as sub-events at least two
            #$PhysicallyAttackingAnAgent events, in which one of the
            fighting groups attacks the other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Fight-Physical"/>
        <rdfs:subClassOf rdf:resource="#HostileSocialAction"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BayesDiscreteOutcome">
        <rdfs:label xml:lang="en">bayes discrete outcome</rdfs:label>
        <rdfs:comment>The type collection of all Bayesian Network
            variable Outcomes intended for probability reasoning.
            Instances of #$BayesDiscreteOutcomes are collections that
            characterize a possible outcome state of a #$BayesVariable.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="BayesNet">
        <rdfs:label xml:lang="en">bayes net</rdfs:label>
        <rdfs:comment>The collection of all Bayesian Networks intended
            for probability reasoning.  A #$BayesNet is a network of
            nodes in which the nodes are random variables that each
            typically represent the likelihood of a proposition being
            true (expressed as a real number between zero and one, where
            zero means certainly false and one means certainly true).
            See #$bayesNetOfMicrotheory.  Each #$BayesNet interconnects
            a set of propositions (or symbols associated with
            propositions) together forming a #$DirectedAcyclicGraph in
            which the links (the #$bayesParent link) represent a
            probabilistic conditional dependence between the directly
            linked nodes.  Such a network may be established by
            asserting (or concluding) #$bayesParent predications linking
            pairs of propositions.  There is a &apos;closed-world
            assumption&apos; for every #$BayesNet, in that pairs of
            propositions not explicitly linked with #$bayesParent are
            assumed to be not linked.  In addition, a node is
            #$conditionallyIndependent-Given the truth values of its
            #$bayesParents (and no other nodes) - from all nodes other
            than its &apos;descendants&apos; in the #$BayesNet.  A
            #$BayesNet is a representation of the entire (strictly
            positive) joint probability distribution over the random
            variables.   The #$derivedProbability of a node can be
            calculated from the probabilities of its #$bayesParents.
            (There are always one or more &apos;source&apos; nodes with
            no #$bayesParents.)  Theoretically, viewed as evidential
            links based on the joint probability distribution, the
            #$bayesParent links are bidirectional.   The direction of
            the links is obtained formally due to an asymmetry between
            &apos;parents&apos; and &apos;children&apos;: the truth of a
            node induces a conditional dependence among its
            #$bayesParents (the &apos;explaining away&apos; effect),
            which does not seem to apply to its Bayesian
            &apos;child&apos; nodes.  Most Bayesian network theorists
            consider that the directions on the links correspond to the
            direction of causal influence, and hence to the direction of
            time. The name &apos;Bayesian&apos; is due to the Reverend
            Thomas Bayes, whose inversion rule was published
            posthumously in 1763, and later developed by Laplace.
            Bayesian Networks were devised chiefly by Judea Pearl in the 1980s.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectedAcyclicGraph"/>
        <rdfs:subClassOf rdf:resource="#DirectedMultigraph"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BayesVariable">
        <rdfs:label xml:lang="en">bayes variable</rdfs:label>
        <rdfs:comment>The collection of all Bayesian Network Variables
            intended for probability reasoning.  #$BayesVariables are
            random variables that each typically represent the
            likelihood of a proposition being true (expressed as a real
            number between zero and one, where zero means certainly
            false and one means certainly true).  See #$BayesNet.</rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="BeAux">
        <rdfs:label xml:lang="en">the auxiliary &apos;Be&apos;</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            auxiliary verb &apos;be&apos;. It has unique syntactic
            functions, for example, in forming compound tenses, so it is
            treated as a separate part of speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuxVerb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BeliefSystem">
        <rdfs:label xml:lang="en">belief systems</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$BeliefSystem is an ideology (systems of
            belief) in terms of which an agent characterizes (i.e.,
            makes sense of) the world.  Instances of #$BeliefSystem
            include: #$VegetarianBeliefs, #$GermanNaziIdeology,
            #$RepublicanPartyIdeology, #$CommunistIdeology,
            #$PacifistIdeology, #$Atheism, etc. See also #$ClassificationSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BeliefSystemType">
        <rdfs:label xml:lang="en">belief system types</rdfs:label>
        <rdfs:comment>The collection of all the kinds of #$BeliefSystems
            -- religious, philosophical, political, ethical, cultural,
            and scientific.  Some elements of this collection include
            #$Religion, #$PhilosophyBeliefs, etc.  The most general
            member of this set is #$BeliefSystems (qv).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="Belligerence">
        <rdfs:label xml:lang="en">belligerence</rdfs:label>
        <rdfs:comment>Hostility. Aggressive and unfriendly attitude or
            disposition. Enmity. Ill will; positive hatred</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Contempt"/>
        <rdfs:subClassOf rdf:resource="#Anger"/>
    </owl:Class>
    <owl:Class rdf:ID="Bicycle">
        <rdfs:label xml:lang="en">#$Bicycle</rdfs:label>
        <rdfs:comment>#$Bicycle is a specialization of
            #$WheeledTransportationDevice, #$MountableTransporter,
            #$Device-UserPowered, and #$Device-UserControlled.  Each
            instance of #$Bicycle is a personal wheeled transport device
            powered by human peddling.   Most bicycles have two main
            wheels arranged in-line, but some tandem bicycles have more
            than two wheels.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#MountableTransporter"/>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Device-UserControlled"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BidirectedPathSystem">
        <rdfs:label xml:lang="en">#$BidirectedPathSystem</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural  and a
            specialization of #$Semi-DirectedPathSystem.  Each instance
            of #$BidirectedPathSystem is such that every link in it has
            two directions  (see #$linkFromToInSystem).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Semi-DirectedPathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="BilateralObject">
        <rdfs:label xml:lang="en">bilateral objects</rdfs:label>
        <rdfs:comment>A #$BilateralObject is an  object that has an
            intrinsic front and back, or an intrinsic bottom  and top,
            or an intrinsic left and right.  The &apos;or&apos;s&apos;
            are of course  inclusive.  See also the comments for
            #$FrontAndBackSidedObject,  #$LeftAndRightSidedObject,
            #$TopAndBottomSidedObject, #$HexalateralObject A  perfectly
            smooth ball bearing is a negative exemplar of a
            #$BilateralObject.  On the other hand a ball bearing with a
            dot  painted on one side, could be considered to have a well
            defined front  if, for example, the dotted were designated
            as the front side (see  also #$NoteAboutSidedObject).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BilaterallySymmetricObject">
        <rdfs:label xml:lang="en">bilaterally symmetric objects</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing. Each instance
            of #$BilaterallySymmetricObject is an object which is
            symmetric on both sides of a bisecting axis.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Bill-PaymentRequest">
        <rdfs:label xml:lang="en">#$Bill-PaymentRequest</rdfs:label>
        <rdfs:comment>A specialization of #$TextualMaterial.  Each
            instance of #$Bill-PaymentRequest is a written notification
            of a demand or request made by a creditor (or its agent) to
            a debtor, for payment of a debt (see #$PaymentObligation)
            previously incurred for some loan, goods, or services.
            Instances of #$Bill-PaymentRequest include telephone bills,
            tax bills, department store bills, cleaning bills, and fuel
            bills. Note that this collection includes only actual
            physical copies of bills -- for the information contained in
            a given bill (which might be reproduced in more than one
            physical copy of it), see #$Bill-PaymentRequest-PIT. Nor is
            this mere piece of paper to be construed as the actual
            request (or demand) for money (for which see  collections
            such as #$Requesting-CommunicationAct). See also the
            predicate #$owesDebts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BillingLocation">
        <rdfs:label xml:lang="en">billing locations</rdfs:label>
        <rdfs:comment>A  specialization of #$MailingLocation.  Each
            instance of #$BillingLocation is a location to which
            invoices are sent.  For most private individuals, their
            billing location is their home address.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MailingLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryAttributePredicate">
        <rdfs:label xml:lang="en">binary attribute predicates</rdfs:label>
        <rdfs:comment>The subcollection of #$BinaryPredicates that
            relate attributes to things that have them or are perceived
            as having them.  More formally, PRED is an instance of this
            collection if (#$arg2Isa PRED ATT-VAL-SPEC) holds for some
            subcollection ATT-VAL-SPEC of #$AttributeValue, and the
            attributes represented by instances of ATT-VAL-SPEC are
            related by PRED to some thing or things having this
            attribute or perceived as having it.  For example,
            #$colorHasChroma is an instance of this collection since
            (#$arg2Isa #$colorHasChroma #$MunsellChroma) holds,
            #$MunsellChroma is a specialization of #$AttributeValue and
            #$colorHasChroma relates instances of #$MunsellChroma to
            instances of #$Color.  #$genlAttributes is *not* an instance
            of this collection since, even though (#$arg2Isa
            #$genlAttributes #$AttributeValue) holds, since
            #$genlAttributes relates two instances of #$AttributeValue
            in such a way that it cannot be said to represent the
            attribution of one property to another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributePredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryFunction">
        <rdfs:label xml:lang="en">#$BinaryFunction</rdfs:label>
        <rdfs:comment>A specialization of both #$BinaryRelation and
            #$Function-Denotational.  An instance of
            #$Function-Denotational FUNC is an instance of
            #$BinaryFunction if and only if FUNC has an #$arity of 2.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#BinaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryPredicate">
        <rdfs:label xml:lang="en">#$BinaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$BinaryRelation and
            #$Predicate.  #$BinaryPredicate is the collection of all
            predicates whose arity (see #$arity) is 2.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryPredicateTypeByLogicalFeature">
        <rdfs:label xml:lang="en">logical features of binary predicates</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$PredicateCategory. Each instance of
            #$BinaryPredicateTypeByLogicalFeature is a collection of
            #$BinaryPredicates whose instances all share some
            significant logical feature, such as reflexivity or
            asymmetry.  Examples include  #$TransitiveBinaryPredicate,
            #$AntiSymmetricBinaryPredicate, and  #$EquivalenceRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationTypeByLogicalFeature"/>
        <rdfs:subClassOf rdf:resource="#PredicateCategory"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryProgramOperator">
        <rdfs:label xml:lang="en">binary program operator</rdfs:label>
        <rdfs:comment>This is the collection of operators found in
            programming languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryRelation">
        <rdfs:label xml:lang="en">#$BinaryRelation</rdfs:label>
        <rdfs:comment>The collection of all fixed-arity relations of
            arity 2 (see #$arity).  The most notable specializations of
            #$BinaryRelation are #$BinaryPredicate and #$BinaryFunction (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="BinaryRolePredicate">
        <rdfs:label xml:lang="en">binary role predicates</rdfs:label>
        <rdfs:comment>A specialization of #$Role.  An instance ROLE of
            #$Role is also an instance of #$BinaryRolePredicate just in
            case ROLE is an instance of #$BinaryPredicate.  In other
            words, ROLE is a binary predicate that relates a situation
            to some component of that situation, e.g. #$subEvents or  participants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Role"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalCatabolismEvent">
        <rdfs:label xml:lang="en">#$BiologicalCatabolismEvent</rdfs:label>
        <rdfs:comment>A collection of events.  Each
            #$BiologicalCatabolismEvent involve the destruction of
            larger molecules.  E.g., the degradation of glucose into
            carbon dioxide and water, which releases energy used to make
            ATP (adenosine triphosphate).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalMetabolismEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalClass">
        <rdfs:label xml:lang="en">#$BiologicalClass</rdfs:label>
        <rdfs:comment>The collection of taxonomic subdivisions directly
            under #$BiologicalPhylum (for animals and for the
            animal-like organisms in the #$ProtistaKingdom), or
            #$BiologicalDivision (for the plants and for the plant-like
            organisms within the #$ProtistaKingdom).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalDecompositionEvent">
        <rdfs:label xml:lang="en">#$BiologicalDecompositionEvent</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$BiologicalDecompositionEvent, some living structures are decomposed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DecompositionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalDestructionEvent">
        <rdfs:label xml:lang="en">biological destruction</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PhysicalDestructionEvent and #$BiologicalEvent.  In each
            instance  of #$BiologicalDestructionEvent, some instance(s)
            of  #$BiologicalLivingObject (q.v.) are destroyed.  Notable
            specializations of #$BiologicalDestructionEvent include
            #$BiologicalCatabolismEvent, #$DigestionEvent, and #$BiologicalDecompositionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalDevelopmentEvent">
        <rdfs:label xml:lang="en">developing (type)</rdfs:label>
        <rdfs:comment>A collection of events, and a subcollection of
            #$IntrinsicStateChangeEvent.  In each instance of
            #$BiologicalDevelopmentEvent, one or more living things
            undergo biological changes in which they progress from one
            developmental stage to another.  For example, the
            germination of a seed, the opening of a flower, the pupating
            of a caterpillar, a teenager reaching puberty.  Some
            borderline non-examples include: Groucho Marx being born,
            Groucho Marx dying.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalDivision">
        <rdfs:label xml:lang="en">#$BiologicalDivision</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalTaxon.  Each
            instance of #$BiologicalDivision is a main taxonomic
            subdivision of some instance of #$BiologicalKingdom (or
            #$BiologicalSubkingdom) for the members of the
            #$MoneraKingdom (i.e., prokaryotes), #$Fungus Kingdom,
            #$Plant Kingdom, and for the plant-like organisms within the
            #$ProtistaKingdom.  In the #$Animal Kingdom, however, the
            main taxonomic subdivisions are instances of
            #$BiologicalPhylum (q.v.), rather than #$BiologicalDivision.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalEvent">
        <rdfs:label xml:lang="en">biological events</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalProcess (q.v.)
            instances of  which are non-deliberately  done by
            biological organisms.   Each instance of #$BiologicalEvent
            is a biological process that  has an instance of
            #$Organism-Whole as a  bodily doer  (see #$bodilyDoer).
            Note that not all physical events that have  bodily doers
            are #$BiologicalEvents; they might (e.g.) be
            #$PhysiologicalConditions that are not biological events.
            Thus, having a bodily doer is a necessary but not a
            sufficient condition for being an instance of #$BiologicalEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalFamily">
        <rdfs:label xml:lang="en">#$BiologicalFamily</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalOrder (or
            #$BiologicalSuborder) and above #$BiologicalGenus.
            Especially important in Botanical classification.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalGenus">
        <rdfs:label xml:lang="en">#$BiologicalGenus</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions (see #$BiologicalTaxon) created below
            #$BiologicalFamily and above #$BiologicalSpecies.
            Sometimes, hybrids are possible between different instances
            of #$BiologicalSpecies that belong to the same #$BiologicalGenus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalIntakeEvent">
        <rdfs:label xml:lang="en">biological intake events</rdfs:label>
        <rdfs:comment>A specialization of
            #$BiologicalTransportationEvent.  In each instance of
            #$BiologicalIntakeEvent, some object(s) are taken into some
            living structure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TranslationAlongInternalLivingStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalKingdom">
        <rdfs:label xml:lang="en">kingdoms</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$BiologicalKingdom is a sub-collection of #$Organism-Whole
            whose instances all belong to one of the highest, most
            general taxonomic divisions of organisms.  Notable instances
            of #$BiologicalKingdom include #$Animal, #$Plant,
            #$ProtistaKingdom, and #$MoneraKingdom.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalLivingObject">
        <rdfs:label xml:lang="en">living things</rdfs:label>
        <rdfs:comment>The collection of all structures that are composed
            of one or more living cells (see #$Cell).  Biological living
            objects (or  BLO s) might either be instances of
            #$Organism-Whole (like dogs or pine trees) or components of
            such whole living organisms (like noses, tails, and pine
            needles).  The healthy leg of a living person is a BLO (as
            is the person), but an amputated leg is not a BLO.  Every
            instance of #$BiologicalLivingObject is either capable of
            biological reproduction itself or has components which are
            capable of biological reproduction (such as the cells in a
            living arm).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComplexPhysicalObject"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>

        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalMetabolismEvent">
        <rdfs:label xml:lang="en">metabolism</rdfs:label>
        <rdfs:comment>A specialization of
            #$BiologicalProcess-CellularLevel.  Each instance of
            #$BiologicalMetabolismEvent is a biological process in which
            substrates are converted into metabolites.  The metabolites
            may be more or less complex than the substrates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChemicalReaction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalOrder">
        <rdfs:label xml:lang="en">#$BiologicalOrder</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions (see #$BiologicalTaxon) defined below
            #$BiologicalClass (or #$BiologicalSubclass) and above #$BiologicalFamily.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalPhylum">
        <rdfs:label xml:lang="en">#$BiologicalPhylum</rdfs:label>
        <rdfs:comment>The collection of main taxonomic subdivisions of
            #$BiologicalKingdom (or #$BiologicalSubkingdom if present)
            for the #$Animal kingdom and for the animal-like organisms
            within the #$ProtistaKingdom.  The other elements of
            #$BiologicalKingdom have divisions belonging to
            #$BiologicalDivision instead of Phyla (Phyla is the plural
            of Phylum).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalProductionEvent">
        <rdfs:label xml:lang="en">#$BiologicalProductionEvent</rdfs:label>
        <rdfs:comment>A specialization of both #$PhysicalCreationEvent
            and #$BiologicalEvent.  In each instance of
            #$BiologicalProductionEvent, raw materials are combined to
            produce a product, and at least one instance of
            #$BiologicalLivingObject (q.v.) is the producer.
            Specializations of #$BiologicalProductionEvent include
            #$SecretionEvent and #$BiologicalReproductionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#Production-Generic"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalReproductionEvent">
        <rdfs:label xml:lang="en">#$BiologicalReproductionEvent</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalProductionEvent.
            Each instance of #$BiologicalReproductionEvent is an event
            in which one or more instances of #$BiologicalLivingObject
            (q.v.) (related to the event by #$parentActors) produce at
            least one new instance of #$BiologicalLivingObject (related
            to the event by #$offspringActors), generally of the same
            kind as the parents.  Notable specializations of
            #$BiologicalReproductionEvent include
            #$AsexualReproductionEvent and #$SexualReproductionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalProductionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSpecies">
        <rdfs:label xml:lang="en">#$BiologicalSpecies</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalTaxonType. Each
            instance of #$BiologicalSpecies is the most general taxon
            from which two breeding organisms of appropriate genders can
            conceivably produce fertile offspring, or, in the case of
            asexual reproduction, is conventionally defined.  Members of
            different species of animals cannot produce fertile
            offspring by interbreeding.  If there are only two breeds of
            a given species and one breed becomes extinct, the second
            breed by virtue of that fact becomes an instance of
            #$BiologicalSpecies -- since the only organisms instances
            can breed with to produce fertile offspring are, at that
            point, members of that collection.  An instance of
            #$BiologicalSpecies has members who all have significant
            traits in common, and members of each biological species
            have other members as parents.  Exceptions occur when a
            species is conventionally defined to start since parenthood
            could conceivably be traced back billions of years, yet new
            species came into existance.  In biological taxonomy,
            related species are grouped into a particular instance of
            #$BiologicalGenus.  Some genera have only a single species,
            but they remain different taxons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSubclass">
        <rdfs:label xml:lang="en">#$BiologicalSubclass</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions more specific than #$BiologicalClass but more
            general than #$BiologicalOrder.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSubfamily">
        <rdfs:label xml:lang="en">biological subfamily</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalFamily and above #$BiologicalGenus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSubkingdom">
        <rdfs:label xml:lang="en">#$BiologicalSubkingdom</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalTaxon.  Each
            instance of #$BiologicalSubkingdom is an immediate taxonomic
            subdivision of some instance of #$BiologicalKingdom (q.v.).
            Instances of #$BiologicalSubkingdom include #$Protozoan,
            #$EmbryophyteSubkingdom, and #$AlgaeSubkingdom.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSuborder">
        <rdfs:label xml:lang="en">biological suborder</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalTaxon.  Each
            instance of #$BiologicalSuborder is an immediate taxonomic
            subdivision of some instance of #$BiologicalOrder.
            Instances of #$BiologicalSuborder include #$Crocodile and #$Lizard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSubphylum">
        <rdfs:label xml:lang="en">biological subphylum</rdfs:label>
        <rdfs:comment>A collection of #$BiologicalTaxons that is more
            restrictive than #$BiologicalPhylum.  All instances of a
            particular #$BiologicalSubspecies have significant traits or
            collections of traits in common which are not shared by all
            other members of the same #$BiologicalPhylum.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalSubspecies">
        <rdfs:label xml:lang="en">#$BiologicalSubspecies</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalTaxon whose
            instances are more restrictive  than those of
            #$BiologicalSpecies.  Each instance of
            #$BiologicalSubspecies  is a specialization of some instance
            of #$BiologicalSpecies.  Members of  different subspecies of
            the same species can produce fertile offspring by
            interbreeding; but such offspring are not members of either
            of the parental  subspecies, although they are members of
            the common species.  All instances  of a given biological
            subspecies have significant traits or collections of  traits
            in common that are not shared by all other members of the
            subsuming  species.    A #$BiologicalSubspecies is formed by
            inbreeding of a restricted group of  members of the same
            species.  This can happen naturally through geographic
            isolation or intentionally through controlled reproduction
            to create, for  example, dog breeds or crop strains.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalTaxon">
        <rdfs:label xml:lang="en">taxonomic groups</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$OrganismClassificationType (q.v.).  Instances of
            #$BiologicalTaxon correspond to ranked categories  accepted
            by biologists for the classification of  organisms according
            to their suspected evolutionary  relationships.  Such
            categories change as biologists learn more about the
            organisms involved and determine that existing
            classifications are more or less useful.  They include all
            levels of taxons.   Specializations of #$BiologicalTaxon
            include  #$BiologicalOrder and #$BiologicalSpecies;
            instances  include #$Marsupial and #$Person.  See also  #$BiologicalTaxonType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismClassificationType"/>
    </owl:Class>
    <owl:Class rdf:ID="BiologicalTaxonType">
        <rdfs:label xml:lang="en">#$BiologicalTaxonType</rdfs:label>
        <rdfs:comment>An instance of #$CollectionTypeType and a
            specialization of #$DisjointCollectionType (q.v.).  Each
            instance of #$BiologicalTaxonType is a specialization of
            #$BiologicalTaxon (q.v.). Notable instances of
            #$BiologicalTaxonType include #$BiologicalSpecies,
            #$BiologicalClass, and #$BiologicalFamily.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SecondOrderCollection"/>
        <rdfs:subClassOf rdf:resource="#DisjointCollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Bird">
        <rdfs:label xml:lang="en">#$Bird</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass, and a
            specialization of #$Vertebrate.  Each instance of #$Bird is
            an air-breathing, warm-blooded, winged animal covered with
            feathers.  Members of most, but not all, species of bird can fly.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Homeotherm"/>
        <rdfs:subClassOf rdf:resource="#OviparousAnimal"/>
        <rdfs:subClassOf rdf:resource="#AirBreathingVertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BirthEvent">
        <rdfs:label xml:lang="en">#$BirthEvent</rdfs:label>
        <rdfs:comment>The collection of events in which one animal
            (prototypically, a #$Mammal) gives birth to another.  The
            mother is the #$birthParent and the child is the
            #$birthChild.  Both are #$objectOfStateChange; the mother
            goes from being pregnant to not pregnant (therefore a
            #$BirthEvent is an instance of #$PregnancyEndingEvent),
            while the child changes from being inside the mother and
            relying on the mother for nutritional, respiratory, and
            excretory needs (called in CYC the #$Embryo life stage,
            although different English terms apply to different stages
            of in utero development in mammals and not all of these
            terms apply to live-born #$Fish) to the #$JuvenileAnimal
            life stage (see #$BiologicalStageOfDevelopment).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalDevelopmentEvent"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#SomethingAppearingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#PregnancyEndingEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BlimpTheAirship">
        <rdfs:label xml:lang="en">blimps</rdfs:label>
        <rdfs:comment>#$BlimpTheAirship is a specialization of
            #$LighterThanAirCraft, #$TransportationDevice-Vehicle, and
            #$Balloon.  Each instance of #$BlimpTheAirship is a
            dirigible, motorized, and lighter-than-air craft (airships).
            Each generally consists of a gas-filled gas-sack from which
            a control and passenger cabin hangs (the gas-sack may or may
            not have rigid reinforcement such as ribs).  A
            #$BlimpTheAirship flies more slowly than an #$Airplane.
            They are also called blimps, dirigibles and Zeppelins.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LighterThanAirCraft"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Balloon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BlueCollarWorker">
        <rdfs:label xml:lang="en">workmen</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation and an
            instance of #$PersonTypeByOccupation.  Each instance of
            #$BlueCollarWorker is a person whose occupation is
            manual-labor intensive, sometimes demanding physical
            strength and, in some jobs, considerable skill, practical
            judgment, and work experience.  Types of blue-collar workers
            include miners, truck drivers, steelworkers, construction
            workers, agricultural workers, laborers, mechanics, garbage
            collectors, assembly line workers, janitorial workers, etc.
            Their jobs may require some specialized training or
            apprenticeship but don&apos;t require a college degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BodilyFunctionEvent">
        <rdfs:label xml:lang="en">bodily function events</rdfs:label>
        <rdfs:comment>A specialization of both #$AnimalActivity and
            #$PhysiologicalProcess.  Each specialization of
            #$BodilyFunctionEvent is a type of action done by an animal
            that can be (and often is) done without the doer&apos;s
            conscious volition.  Specializations of
            #$BodilyFunctionEvent include #$Breathing, #$Swallowing, and
            #$DigestionEvent.  If an instance of #$BodilyFunctionEvent
            involves the doer moving all or part of its body, either
            volitionally or as a reflex, it is also an instance of #$BodyMovementEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalProcess"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BodilyFunctionEvent-Involuntary">
        <rdfs:label xml:lang="en">involuntary bodily functions</rdfs:label>
        <rdfs:comment>A specialization of #$BodilyFunctionEvent.  Each
            specialization of #$BodilyFunctionEvent-Involuntary is a
            type of event each instance of which is done without
            conscious volition.  Consequently, in each instance of
            #$BodilyFunctionEvent-Involuntary, the `doer&apos; of the
            event is a non-deliberate actor in that event (see the
            predicate #$nonDeliberateActors).  Specializations of
            #$BodilyFunctionEvent-Involuntary include
            #$InvoluntaryBodyMovement, #$Bleeding, and #$ExperiencingHunger.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BodyMovementEvent">
        <rdfs:label xml:lang="en">body movements</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalActivity.  Each
            instance of #$BodyMovementEvent is an event in which an
            #$Animal moves a part of its own body, whether intentionally
            or reflexively.  Specializations of this collection include
            #$TakingAStep, #$BlockingAPunch, #$Hiccoughing, and #$BlinkingOnesEyes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementOrShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BodyOfWater">
        <rdfs:label xml:lang="en">body of water</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            instance of #$BodyOfWater is a natural or artificial body of
            water.  Instances may belong to specializations as #$Lake,
            #$Stream, and #$Ocean. #$BodyOfWater includes #$Reservoirs,
            #$Canals, and navigation channels that are developed and/or
            enlarged by humans.  However, it does not include smaller
            purely-artificial bodies of water such as #$SwimmingPools or
            tanks of water. #$Glaciers and snowpacks are not included,
            but lakes and ponds that are sometimes liquid are included,
            even if they have an ice crust or are solidly frozen.
            Examples of #$BodyOfWater include #$HudsonBay,
            #$PanamaCanal, #$AdriaticSea, #$BayOfBengal, and #$NiagaraFalls.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#TopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Water"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BodyOfWater-Large">
        <rdfs:label xml:lang="en">body of water - large</rdfs:label>
        <rdfs:comment>Bodies of water which are substantial in some
            sense. For example, a #$Puddle or a small #$Creek are not
            substantial bodies of water, but #$Oceans and many #$Lakes
            are. A #$BodyOfWater-Large tends to be permanent, not
            seasonal (though there are exceptions). Large bodies of
            water count as water area in geographical calculations,
            while non-large bodies of water do not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Boiling">
        <rdfs:label xml:lang="en">boiling events</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Boiling, a
            piece of liquid matter is raised to its #$boilingPoint and
            is thereby changed from being in the #$Liquid-StateOfMatter
            to being in the #$Gaseous-StateOfMatter.  Note:  this is not
            intended to cover the cases of heat/evacuation causing a
            solid to sublime directly into a gas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Book-CW">
        <rdfs:label xml:lang="en">books</rdfs:label>
        <rdfs:comment>A specialization of #$PropositionalConceptualWork
            and #$BookGeneric-CW. Each instance of #$Book-CW is an
            abstract work intended to be instantiated as a book of some
            sort.  Instances of #$Book-CW may be intended to be
            instantiated in any book format: hardcopy (see #$BookCopy),
            electronic, audio tape, etc.  Instances of #$Book-CW are
            usually also instances of #$TextualPCW, but some may be
            comprised of mainly non-propositional information, such as
            images.  Note that books with no propositional information
            (such as certain coloring books) would not be instances of
            this specialization of #$BookGeneric-CW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BookGeneric-CW"/>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BookGeneric-CW">
        <rdfs:label xml:lang="en">book generic</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork. Each
            instance of the collection #$BookGeneric-CW is an abstract
            work intended to be instantiated as a book of some sort
            (hardcopy, electronic, audio tape or compact disc, etc.).
            An important specialization is #$Book-CW, instances of which
            are books that contain propositional information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BookkeepingPredicate">
        <rdfs:label xml:lang="en">#$BookkeepingPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates used to make assertions
            about the creation and internal representation of particular
            CycL constants in the Cyc system.  Bookkeeping predicates
            neither specify nor constrain the semantics of CycL
            constants.  Examples include  #$myCreator, #$myCreationTime,
            #$termOfUnit, #$multiplicationUnits, and #$defnSufficient.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Border">
        <rdfs:label xml:lang="en">#$Border</rdfs:label>
        <rdfs:comment>The collection of all lines, linear regions, or
            dividing planes or surfaces--physical or abstract--that each
            constitutes the boundary between (#$formsBorderBetween) two
            regions (i.e., two instances of #$SpatialThing).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
    </owl:Class>
    <owl:Class rdf:ID="Bored">
        <rdfs:label xml:lang="en">agents who is bored</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being bored.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Listless"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Boredom">
        <rdfs:label xml:lang="en">#$Boredom</rdfs:label>
        <rdfs:comment>The attribute-type associated with
            dissatisfaction, weariness, or restlessness accompanied by a
            felt lack of interest in what is going on around one.  A
            specialization of #$Listlessness.  (For the rationale behind
            treating feelings as types -- i.e. collections -- of
            attributes, see the comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Listlessness"/>
    </owl:Class>
    <owl:Class rdf:ID="BorrowingSomething">
        <rdfs:label xml:lang="en">borrowing events</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$TemporaryChangeOfUserRights.  In an instance of
            #$BorrowingSomething, an #$Agent takes temporary control of
            something, usually with the permission of its owner(s).
            Generally, the lending agent expects the borrowing agent to
            use the object for one of its normal functions (see #$intendedBehaviorCapable).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BotanicalOrgan">
        <rdfs:label xml:lang="en">botanical organs</rdfs:label>
        <rdfs:comment>A specialization of #$PlantPart.  Each instance of
            #$BotanicalOrgan is a major morphological and functional
            feature of an individual plant.  Notable specializations of
            #$BotanicalOrgan include #$Flower-BotanicalPart, #$Leaf, and #$Stem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PlantPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BottomSide">
        <rdfs:label xml:lang="en">#$BottomSide</rdfs:label>
        <rdfs:comment>The collection of all the entire bottom sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces down.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Side"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Brain">
        <rdfs:label xml:lang="en">#$Brain</rdfs:label>
        <rdfs:comment>A specialization of #$InternalOrgan.  Each
            instance of #$Brain is an organ that controls most bodily
            movement and receives sensory input from the body and
            objects outside the body.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BranchOfMilitaryService">
        <rdfs:label xml:lang="en">branch of military service</rdfs:label>
        <rdfs:comment>A specialization of
            #$ModernMilitaryOrganization.  Each instance of
            #$BranchOfMilitaryService is one of the main overarching
            organizations in a modern military command structure.  Thus,
            for any given modern nation-state, its army, navy, and air
            force will each be instances of #$BranchOfMilitaryService.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ModernMilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#GovernmentMilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Breathing">
        <rdfs:label xml:lang="en">breathing events</rdfs:label>
        <rdfs:comment>A collection of activities constituting a natural
            #$PhysiologicalFunction; #$Breathing is the collection of
            #$AirRespiration events in which the respiring organism
            takes air into its internal #$Lungs, where the gas exchange
            occurs.  See also #$Respiration.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalFunction"/>
        <rdfs:subClassOf rdf:resource="#AirRespiration"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BroadMicrotheory">
        <rdfs:label xml:lang="en">broad microtheory</rdfs:label>
        <rdfs:comment>The collection of those microtheories that contain
            so many assertions that they are not useful for
            `relevance&apos; focusing during inference.  (A
            #$BroadMicrotheory is not used internally in Cyc&apos;s
            indexing scheme during inference.)  Examples: #$BaseKB and #$EnglishMt.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Building">
        <rdfs:label xml:lang="en">#$Building</rdfs:label>
        <rdfs:comment>A specialization of both #$FixedStructure and
            #$HumanShelterConstruction.  Each instance of #$Building is
            a (usually large) fixed structure with walls and a roof, and
            with some inside area or areas designed to be occupied by
            humans (but not necessarily as a residence).  Examples
            include the #$EmpireStateBuilding, Hearst Castle, an
            #$AircraftHangar at O&apos;Hare, a #$Lighthouse in the
            Mediterranean sea, the #$SydneyOperaHouse, and the #$WashingtonMonumentInWashingtonDC.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BuildingMaterial">
        <rdfs:label xml:lang="en">building materials</rdfs:label>
        <rdfs:comment>#$BuildingMaterial is a specialization of
            #$Artifact-NonAgentive and #$PartiallyTangibleProduct.  Each
            instance of #$BuildingMaterial is a material thing typically
            used in making new structures.  Instances of
            #$BuildingMaterial include a piece of lumber, a brick, a
            slab of concrete, a roof shingle, a copper nail, a
            double-paned storm window, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Bus-RoadVehicle">
        <rdfs:label xml:lang="en">buses (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$RoadVehicle.  Each instance
            of #$Bus-RoadVehicle is a ground transportation vehicle
            designed to carry many  passengers (instances of
            #$Bus-RoadVehicle typically have capacities ranging from 20
            to 80 passengers).  Instances of #$Bus-RoadVehicle are often
            used as a means of public transportation (see the constant
            #$PublicTransportationDevice); instances used for public
            transportation are usually driven by professional drivers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
        <rdfs:subClassOf rdf:resource="#PublicTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-DieselEngine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Bush">
        <rdfs:label xml:lang="en">#$Bush</rdfs:label>
        <rdfs:comment>A specialization of #$Plant-Woody.  Each instance
            of #$Bush is a woody plant of branching growth habit that
            lacks a substantial trunk and is not usually taller than an
            adult person (and is typically re shorter than most
            specimens of #$Tree-ThePlant).   This is a commonsense
            collection without distinct boundaries.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Business">
        <rdfs:label xml:lang="en">#$Business</rdfs:label>
        <rdfs:comment>A specialization of #$CommercialOrganization
            (q.v.).  Each instance of #$Business is an organization
            intended to make profits, i.e. to make money for agents who
            own them.  Note that not all #$CommercialOrganizations are
            #$Businesses.  For example, in a franchise #$Organization,
            while the parent company (see #$parentCompany) is regarded
            as a business, the sub-organizations  are commercial
            organizations but not businesses.  Also, #$Businesses are
            typically #$LegalAgents, while #$CommercialOrganizations
            need not be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BusinessEvent">
        <rdfs:label xml:lang="en">business events</rdfs:label>
        <rdfs:comment>A specialization of both #$SocialOccurrence and
            #$HumanActivity.  Each instance  of #$BusinessEvent is a
            purposeful activity that is closely associated with,  and
            either helps or hinders, the business purpose of some agent.
            Examples  include the development of General Motors&apos;
            business plan for 2003, an individual  sales call on a
            particular customer, printing the 2003 Yellow Pages
            directory for  the Los Angeles area, selling a newspaper,
            and designing and manufacturing a new  memory chip.
            #$BusinessEvent does _not_ include any purely social or
            recreational events.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BusinessPerson">
        <rdfs:label xml:lang="en">#$BusinessPerson</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation. Each
            instance of #$BusinessPerson is someone whose occupation
            primarily consists in the ownership or operation of a business.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BusinessRelationshipActivity">
        <rdfs:label xml:lang="en">activities in a business relationship</rdfs:label>
        <rdfs:comment>A specialization of #$BusinessEvent.  Each
            instance of #$BusinessRelationshipActivity is a (usually
            long-term, and often complex) social activity whose
            participants are in some type of business relationship.  An
            instance of #$BusinessRelationshipActivity is typically
            carried out over multiple social occasions, and may consist
            of many sub-events. The social events constituting an
            instance of #$BusinessRelationshipActivity further, either
            directly or indirectly, the (usually mutual) business
            interests of the participants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Buying">
        <rdfs:label xml:lang="en">#$Buying</rdfs:label>
        <rdfs:comment>A specialization of #$MonetaryExchangeOfUserRights
            and #$BuyingActivity.  Each instance of #$Buying is an event
            in which an agent voluntarily pays to acquire something
            tangible or intangible, or for the performance of a service,
            which another agent sells in the event.  Payment may be in
            money or other exchange of assets.  Instances of #$Buying
            may include #$subEvents of negotiation, the act of paying,
            and the transfer of the purchased thing to the buyer.
            Examples of #$Buying include: purchasing fighter jets for
            the Navy; buying a Pepsi from a vending machine; ordering
            dinner at a restaurant; acquiring a personal life insurance
            policy for oneself; mail-ordering clothes from Sears;
            shopping at a farmers&apos; market.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BuyingActivity"/>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="BuyingActivity">
        <rdfs:label xml:lang="en">buying activities</rdfs:label>
        <rdfs:comment>A specialization of #$SelectingSomething and
            #$CommercialActivity.  #$BuyingActivity is a collection of
            events that are very generally related to purchasing goods
            or services.  Each instance of #$BuyingActivity is an event
            that is either (i) a common prelude to buying (i.e., the
            kinds of activities that contribute to their doers becoming
            buyers), or (ii) an instance of #$Buying itself.  Examples
            of #$BuyingActivity include shopping for, or ordering,
            something very specific, and also general expressions of
            interest in purchasing something, such as placing an `Item
            Wanted&apos; ad in a newspaper.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
        <rdfs:subClassOf rdf:resource="#SelectingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CGSUnitOfMeasure">
        <rdfs:label xml:lang="en">centimeter-gram-second units of measure</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of #$CGSUnitOfMeasure is either one of three basic
            units of measure - (#$Centi #$Meter), #$Gram, and
            #$SecondsDuration - or is derived from one or more of these
            basic units of measure.  For example, #$CubicCentimeter,
            #$Dyne, and #$Barye-UnitOfPressure are all instances of
            #$CGSUnitOfMeasure, since they are units of measure derived
            from (one or more of) (#$Centi #$Meter), #$Gram, and #$SecondsDuration.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="CHeaderFile">
        <rdfs:label xml:lang="en">c header file</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerProgramModule-CW.
            Each member of           this collection is a header file
            that can be included in a           C program with an
            #include directive.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ApplicationProgram"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarAutumn">
        <rdfs:label xml:lang="en">#$CalendarAutumn</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarSeason.  Each
            instance of #$CalendarAutumn is a time interval that begins
            on a day considered to begin an autumn season, and ends on a
            day considered to end an autumn season. For example,
            according to mainstream culture in the U.S.A., instances of
            this collection begin each year on the #$AutumnalEquinox
            (about September 21) and end on the #$DecemberSolstice
            (about December 21st) (see #$CalendarAutumn-US), whereas
            according to mainstream Australasian culture, instances of
            this collection begin March 1st and end on the last day of
            May (see #$CalendarAutumn-Australasian).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarCentury">
        <rdfs:label xml:lang="en">#$CalendarCentury</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of
            #$CalendarCentury is a century on a particular calendar.
            Instances of #$CalendarCentury include
            #$TheNineteenthCenturyCE and #$TheTwentiethCenturyCE.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarCoveringType">
        <rdfs:label xml:lang="en">#$CalendarCoveringType</rdfs:label>
        <rdfs:comment>#$CalendarCoveringType is a collection of
            collections.  Each instance CC of #$CalendarCoveringType is
            itself a collection, a type of time interval, such that a
            sequence of all the instances of CC would completely cover
            all of time without overlap.  Thus, #$CalendarYear is a
            #$CalendarCoveringType because all of time consists of a
            sequence of non-overlapping #$CalendarYears.  Similarly
            #$CalendarMonth, #$CalendarDay, and #$CalendarHour are
            instances of #$CalendarCoveringType.  #$Monday and
            #$December are _not_ instances of #$CalendarCoveringType,
            because all of time is not a sequence of Mondays, or
            Decembers.  Also notice that a collection Week -- defined as
            the collection of all seven-day-long-periods-of-time --
            would not be an instance of #$CalendarCoveringType, since
            several different Weeks could overlap; e.g., the week
            beginning today and the week beginning yesterday and the
            week beginning tomorrow.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarDay">
        <rdfs:label xml:lang="en">calendar days</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of #$CalendarDay is
            a day on some particular calendar.  Instances of
            #$CalendarDay include (#$DayFn 1 (#$MonthFn #$July (#$YearFn
            1646))) and (#$DayFn 8 (#$MonthFn #$November (#$YearFn 1848))).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarDecade">
        <rdfs:label xml:lang="en">#$CalendarDecade</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of #$CalendarDecade
            is a decade on a particular calendar.  For the example, the
            nineteen eighties is an instance of #$CalendarDecade.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarHalfCentury">
        <rdfs:label xml:lang="en">half centuries</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of
            #$CalendarHalfCentury is a  half-century on a particular
            calendar, and thus will be either the first half or the
            second half of some century (see the constant
            #$CalendarCentury) on that calendar.  Instances of
            #$CalendarHalfCentury include #$FirstHalfOf20thCenturyCE and #$LastHalfOf20thCenturyCE.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarHour">
        <rdfs:label xml:lang="en">calendar hours</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of #$CalendarHour
            is an hour in some particular calendar.  Instances of
            #$CalendarHour include (#$HourFn 12 (#$DayFn 20 (#$MonthFn
            #$January (#$YearFn 1965)))) and (#$HourFn 13 (#$DayFn 13
            (#$MonthFn #$July (#$YearFn 2000)))).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarMinute">
        <rdfs:label xml:lang="en">calendar minutes</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of #$CalendarMinute
            is a minute on a particular calendar. For example, the first
            minute of the year 2000 is an instance of #$CalendarMinute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarMonth">
        <rdfs:label xml:lang="en">#$CalendarMonth</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of #$CalendarMonth
            is a month in a particular calendar.  An example
            sub-collection of #$CalendarMonth is #$February , the
            collection of all months of February.  One instance of the
            collection #$February (and thus one instance of the
            collection #$CalendarMonth) is (#$MonthFn #$February
            (#$YearFn 1992)), February of 1992.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarQuarter">
        <rdfs:label xml:lang="en">calendar quarters</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType, and a
            specialization of #$Date.  Each instance of
            #$CalendarQuarter is a quarter of a year on a particular
            calendar, and thus will be either the first, second, third,
            or fourth quarter of some year (see the collection
            #$CalendarYear) on that calendar. Example instances of
            #$CalendarQuarter include (#$QuarterFn 1 (#$YearFn 1996))
            and (#$QuarterFn 4 (#$YearFn 1929)).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarSeason">
        <rdfs:label xml:lang="en">calendar seasons</rdfs:label>
        <rdfs:comment>A specialization of #$Date and an instance of
            #$ConventionallyClassifiedSuccessiveTimeIntervalType. Each
            instance of #$CalendarSeason is a time interval that is
            thought of by a significant group of people (often an entire
            culture -- see #$CalendarSeasonTypeByCulture) as
            significantly intersecting the instances of #$SeasonOfYear
            to which those people are typically exposed.  For example,
            one specialization of #$CalendarSeason (#$CalendarWinter-US)
            is the collection of time intervals that people in
            mainstream U.S. culture consider to be co-temporal with the
            cold winter season (each of these intervals begins on the
            December solstice of a given year and ends on the Vernal
            equinox of that year).  For more on the difference between
            #$CalendarSeason and #$SeasonOfYear see the
            #$SharedNoteOnHemispheresAndCalendars.  Important
            specializations of #$CalendarSeason include
            #$CalendarWinter, #$CalendarSpring, #$CalendarSummer, and #$CalendarAutumn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarSeasonType">
        <rdfs:label xml:lang="en">seasons (types of things)</rdfs:label>
        <rdfs:comment>A specialization of
            #$ConventionallyClassifiedDisjointTimeIntervalType and
            #$AnnualTemporalObjectType.  Each instance of
            #$CalendarSeasonType is a specialization of #$CalendarSeason
            -- #$CalendarWinter, #$CalendarSpring, #$CalendarSummer, and #$CalendarAutumn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnnualTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionallyClassifiedDisjointTimeIntervalType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarSecond">
        <rdfs:label xml:lang="en">#$CalendarSecond</rdfs:label>
        <rdfs:comment>A subcollection of #$Date (q.v.) and an instance
            of #$CalendarCoveringType (q.v.).  #$CalendarSecond is the
            collection of seconds that make up the calendar.  Each
            #$CalendarMinute (q.v.) is divided into sixty contiguous
            calendar-seconds.  Note that (as with any instance of an
            instance of  calendar-covering-type) a given calendar-second
            is a temporally-continuous individual that occurs only
            _once_; e.g. it is not something that recurs each hour or
            each year.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarSpring">
        <rdfs:label xml:lang="en">#$CalendarSpring</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarSeason.  Each
            instance of #$CalendarSpring is a time interval that begins
            on a day considered to begin a spring season, and ends on a
            day considered to end a spring season. For example,
            according to mainstream culture in the U.S.A., instances of
            this collection begin each year on the #$VernalEquinox
            (about March 21) and end on the #$JuneSolstice (about June
            21st) (see #$CalendarSpring-US), whereas according to
            mainstream Australasian culture, instances of this
            collection begin September 1st and end November 30th (see #$CalendarSpring-Australasian).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarSummer">
        <rdfs:label xml:lang="en">#$CalendarSummer</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarSeason.  Each
            instance of #$CalendarSummer is a time interval that begins
            on a day considered to begin a summer season, and ends on a
            day considered to end a summer season. For example,
            according to mainstream culture in the U.S.A., instances of
            this collection begin each year on the #$JuneSolstice (about
            June 21) and end on the #$AutumnalEquinox (about September
            21st) (see #$CalendarSummer-US), whereas according to
            mainstram Australasian culture, instances of this collection
            begin December 1st and end on the last day of February (see #$CalendarSummer-Australasian).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarWeek">
        <rdfs:label xml:lang="en">#$CalendarWeek</rdfs:label>
        <rdfs:comment>An instance of #$CalendarCoveringType and a
            specialization of #$Date.  Each instance of #$CalendarWeek
            is a particular week on some particular calendar.  Instances
            of #$CalendarWeek include the first week  (i.e. the initial
            seven-day-long #$TimeInterval) of December, 2001.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarWinter">
        <rdfs:label xml:lang="en">calendar winters</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarSeason. Each
            instance of #$CalendarWinter is a time interval that begins
            on a day considered to begin a winter season, and ends on a
            day considered to end a winter season.  For example,
            according to mainstream culture in the U.S.A., instances of
            this collection begin each year on the #$DecemberSolstice
            (about December 21) and end on the #$VernalEquinox (about
            March 21) each year (see #$CalendarWinter-US), whereas
            according to mainstram Australasian culture, instances of
            this collection begin June 1st and end August 31st (see #$CalendarWinter-Australasian).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CalendarYear">
        <rdfs:label xml:lang="en">#$CalendarYear</rdfs:label>
        <rdfs:comment>A subcollection of #$Date (q.v.) and an instance
            of #$CalendarCoveringType (q.v.).  Each instance of
            #$CalendarYear is a year in some particular calendar.
            Examples include (#$TheYear1972) and (#$YearFn 2001).  Note
            that (as with any instance of an instance of
            calendar-covering-type) a given calendar-year is a
            temporally-continuous individual that occurs only _once_;
            e.g. it is not something that recurs each century or each millenium.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Calm">
        <rdfs:label xml:lang="en">people who is calm</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being calm.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relaxed"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Calmness-Feeling">
        <rdfs:label xml:lang="en">#$Calmness-Feeling</rdfs:label>
        <rdfs:comment>The attribute-type associated with the feeling of
            calmness or serenity, being free from disturbance. (For the
            rationale behind treating feelings as types -- i.e.
            collections -- of attributes, see #$FeelingAttribute and the
            comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relaxed-Feeling"/>
    </owl:Class>
    <owl:Class rdf:ID="Canal">
        <rdfs:label xml:lang="en">canals</rdfs:label>
        <rdfs:comment>The collection of all canals, artificial waterways
            created to be paths for boats, or for irrigation (e.g., the #$PanamaCanal).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#FlowPath"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cancer">
        <rdfs:label xml:lang="en">Cancer</rdfs:label>
        <rdfs:comment>An instance of #$DiseaseType, and a specialization
            of #$AilmentCondition.  Instances of #$Cancer may belong to
            any one of the many different types of disease that are
            studied and treated by oncologists.  Instances of #$Cancer
            are characterized by abnormal (and usually rapid) growth of
            cells in some organ or system of the body; these growths are
            then prone to dispersal (metastasis) into other body
            regions.  See also #$CancerFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#TerminalPhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CanineAnimal">
        <rdfs:label xml:lang="en">#$CanineAnimal</rdfs:label>
        <rdfs:comment>A specialization of #$CarnivoreOrder.  Each
            instance of #$CanineAnimal is a member of a dog-like species
            belonging to the #$CarnivoreOrder.  The collection
            #$CanineAnimal includes the specializations #$Dog, #$Wolf,
            and #$Fox (qq.v.).  Canine animals constitute an instance of
            #$BiologicalFamily, the Canidae.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CarnivoreOrder"/>
        <rdfs:subClassOf rdf:resource="#Carnivore"/>
        <rdfs:subClassOf rdf:resource="#Eutheria"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Canoe">
        <rdfs:label xml:lang="en">canoes</rdfs:label>
        <rdfs:comment>#$Canoe is a specialization of #$Watercraft-Small
            and #$Device-UserPowered.  Each instance of #$Canoe is a
            small and narrow watercraft powered by human paddling,
            poling, or by a small boat-engine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft-Small"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CanonicalizerDirective">
        <rdfs:label xml:lang="en">canonicalizer directive</rdfs:label>
        <rdfs:comment>The collection of directives (i.e. commands) which
            can be used to control the behavior of the
            #$CycCanonicalizer during asserts and queries.  See
            #$canonicalizerDirectiveForArg for more information on how
            to use these directives.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
    </owl:Class>
    <owl:Class rdf:ID="CanonicalizerDirectivePredicate">
        <rdfs:label xml:lang="en">#$CanonicalizerDirectivePredicate</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which can affect
            the behavior of the #$CycCanonicalizer or its submodules.
            When canonicalizer directive GAFs are asserted, they are
            only relevant to the canonicalizer when it is canonicalizing
            expressions in the microtheory in which the directive is
            asserted, or a specMt thereof.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CapabilityPredicate">
        <rdfs:label xml:lang="en">capability predicates</rdfs:label>
        <rdfs:comment>This is a collection of #$TernaryPredicates which
            assert capabilities of different sorts, and all of which can
            be generalized in the same way on their second and third
            argument places.  See the antecedent rule.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CapabilityPredicate-InstanceLevel">
        <rdfs:label xml:lang="en">instance-level capability predicates</rdfs:label>
        <rdfs:comment>This is the subcollection of those
            #$CapabilityPredicates whose  first argument #$isa #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CapabilityPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CapabilityPredicate-TypeLevel">
        <rdfs:label xml:lang="en">type-level capability predicates</rdfs:label>
        <rdfs:comment>This is the subcollection of those
            #$CapabilityPredicates whose first argument is a
            specialization of #$Individual.  These predicates are
            &apos;type-level&apos; because they assert something about
            the capabilities of a type of thing, rather than an
            individual.  Contrast #$CapabilityPredicate-InstanceLevel.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#KindLevelPredicate"/>
        <rdfs:subClassOf rdf:resource="#CapabilityPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CapitalCityOfRegion">
        <rdfs:label xml:lang="en">capitals</rdfs:label>
        <rdfs:comment>A specialization of #$City.  Each instance of
            #$CapitalCityOfRegion is a city that is the capital of its
            surrounding region.  This includes capitals of countries as
            well as capitals of subregions of countries, such as states,
            provinces, and counties.  Examples include
            #$CityOfRomeItaly, #$CityOfCardiffWales, #$CityOfAustinTX,
            #$CityOfAbidjanIvoryCoast, #$CityOfLhasaTibet, and
            #$CityOfColumbusOH.  See also #$capitalCity and #$capitalCityOfThisState.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#City"/>
    </owl:Class>
    <owl:Class rdf:ID="CapturingAnimal">
        <rdfs:label xml:lang="en">#$CapturingAnimal</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulPhysicalAction.
            In  each instance of #$CapturingAnimal, an agent takes
            physical control of a (human or non-human) animal.  Notable
            specializations of #$CapturingAnimal include #$Trapping and #$ArrestingSomeone.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#HarmingAnAgent"/>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Card">
        <rdfs:label xml:lang="en">cards</rdfs:label>
        <rdfs:comment>An instance of #$ExistingObjectType, and a
            specialization of #$HardcopyInformationBearingObject.  Each
            instance of #$Card is a small, sturdy sheet of stuff --
            usually cardstock paper, although it could be plastic or
            thin metal -- bearing some kind of information.
            Specializations of #$Card include #$CreditCard,
            #$BusinessCard, and #$PostCard.  Note that electronic
            objects that perform the same functions as some instances of
            #$Card (for example, electronic greeting cards) are not
            instances of #$Card.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cardinal-Mathematical">
        <rdfs:label xml:lang="en">cardinal numbers</rdfs:label>
        <rdfs:comment>The collection of all cardinals, finite and
            infinite.  This collection includes #$NonNegativeInteger as
            well as all the infinite cardinals such as
            &apos;aleph-1&apos; (or &apos;omega-1&apos; as called sometimes).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarPointValue"/>
    </owl:Class>
    <owl:Class rdf:ID="CargoShip">
        <rdfs:label xml:lang="en">cargo vessels</rdfs:label>
        <rdfs:comment>#$CargoShip is a specialization of #$Ship.  Each
            instance of #$CargoShip is a ship that is designed to
            transport a large amount of goods.  See also #$TankerShip.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ship"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Carnivore">
        <rdfs:label xml:lang="en">#$Carnivore</rdfs:label>
        <rdfs:comment>A #$Collection of organisms classified by their
            typical source of food.  Elements of #$Carnivore feed on
            animals.  Note: #$Carnivore is not an instance of
            #$BiologicalTaxon; e.g., #$Carnivore contains #$Dog as a
            subset but is not its biological taxon.  Note that a
            #$Carnivore is not necessarily a #$Heterotroph, as
            carnivorous plants both digest insects and produce food
            using #$Chlorophyll.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CarnivoreOrder">
        <rdfs:label xml:lang="en">members of the carnivore order</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalOrder, and a
            specialization of #$Mammal. Instances of #$CarnivoreOrder
            are mammals whose teeth are adapted for efficient cutting of
            meat and tendon. Although instances of #$CarnivoreOrder have
            teeth adapted for eating meat, not all instances of
            #$CarnivoreOrder are meat-eaters; #$Bears are omnivorous,
            while #$PandaBears are usually vegetarians. See also the
            collection #$Carnivore.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mammal"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Carnivore"/>
        <rdfs:subClassOf rdf:resource="#Eutheria"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CarryingWhileLocomoting">
        <rdfs:label xml:lang="en">#$CarryingWhileLocomoting</rdfs:label>
        <rdfs:comment>Events in which something moves by locomotion,
            while holding some object, so that the object also moves.
            Examples include a person carrying a baby.  A negative
            example is a propeller plane towing a glider.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CategoryChangingAffix">
        <rdfs:label xml:lang="en">category changing affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WordConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CategoryChangingPrefix">
        <rdfs:label xml:lang="en">category changing prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CausingAnotherObjectsTranslationalMotion">
        <rdfs:label xml:lang="en">#$CausingAnotherObjectsTranslationalMotion</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$CausingAnotherObjectsTranslationalMotion, one object
            causes another object to undergo a translational motion.
            The object causing the motion is the
            #$providerOfMotiveForce.  The object which is caused to move
            is the #$objectActedOn (and also the #$objectMoving) in the
            event.  One way to cause another object&apos;s motion is to
            carry it along with oneself (see the specialization
            #$CarryingWhileLocomoting); other ways include throwing it,
            kicking it, or knocking it away.  Some instances  of
            #$CausingAnotherObjectsTranslationalMotion may also be
            instances of #$Translation-Complete (such as instances of
            #$CarryingWhileLocomoting) whereas others (such as instances
            of #$PumpingFluid) may be instances of #$Translation-Flow.
            Examples include a train transporting passengers, a person
            pushing a coin into a vending machine, the release of a
            bowstring which propels an arrow, and a magnet attracting a nail.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cavity">
        <rdfs:label xml:lang="en">#$Cavity</rdfs:label>
        <rdfs:comment>The collection of all cavities, including
            instances of #$Crevice, deep concavities or holes, and
            cavities of containers (for example,  the interior of a
            box).  Instances of #$Cavity can include walls as parts, in
            which case they are instances of #$CavityWithWalls.
            Instances of #$Cavity, unlike instances of #$Container, do
            not have well defined outside walls.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CavityOrContainer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CavityInterior-Generic">
        <rdfs:label xml:lang="en">#$CavityInterior-Generic</rdfs:label>
        <rdfs:comment>A subcollection of #$SpatialThing-Localized whose
            instances are  cavity interiors , which might be either the
            intangible space region inside a cavity&apos;s walls (see
            #$CavityInteriorRegion) or the (partially) tangible material
            that occupies this region (see #$CavityInteriorContent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CavityInteriorContent">
        <rdfs:label xml:lang="en">cavity interior content</rdfs:label>
        <rdfs:comment>The collection of pieces of matter that fill or
            occupy the space inside cavities (i.e. instances of
            #$CavityInteriorRegion).  Instances of
            #$CavityInteriorContent can be solid (like a gold filling in
            a tooth) or fluid (like air in a cave or water in a pot-hole).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#CavityInterior-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CavityInteriorRegion">
        <rdfs:label xml:lang="en">interiors</rdfs:label>
        <rdfs:comment>The collection of space regions that constitute
            cavities inside the walls or boundaries of solid objects.
            Such regions need not be completely sealed off.  As a space
            region, an instance of  #$CavityInteriorRegion is
            intangible, and thus not to be confused with the partially
            tangible matter that might fill or occupy it (see
            #$CavityInteriorContent).  See also #$Cavity, whose
            instances, unlike those of #$CavityInteriorRegion, can
            include walls (in which cases they are also instances of #$CavityWithWalls).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CavityInterior-Generic"/>
        <rdfs:subClassOf rdf:resource="#SpaceRegion-Empirical"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CavityOrContainer">
        <rdfs:label xml:lang="en">cavity or containers</rdfs:label>
        <rdfs:comment>The collection of all cavities, containers, and
            hollow  objects. An instance of #$CavityOrContainer
            spatially subsumes a hollow space region, and might include
            as #$physicalParts either no enclosing walls
            (#$CavityInteriorRegion), just the inside surface of the
            walls (#$CavityWithWalls), or the complete walls
            (#$ContainerShapedObject).  #$Containers, such as coffee
            cups, buildings or stomachs, have well-defined outside
            walls.  Instances of #$Cavity such as caves  and rooms do
            not have well-defined outside walls. #$CavityOrContainer
            was reified since certain properties hold true of both
            instances of  #$Container and of #$Cavity, and since we wish
            to use certain  predicates interchangeably. For example, we
            wish to use the same  predicate, #$pipeEndsAtCavity for
            talking about relationships holding  between esophagi and
            stomachs in addition to that which holds between  hallways
            and rooms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CavityWithWalls">
        <rdfs:label xml:lang="en">walled cavities</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible and
            #$Cavity.  Each instance of #$CavityWithWalls is an
            individual that spatially subsumes both the intangible space
            region  inside  a cavity (see #$CavityInteriorRegion) and
            the surfaces that constitute the inner walls of the cavity.
            Compare #$CavityWithWalls to the collection #$Cavity -- some
            instances of #$Cavity have their walls as parts, and some do not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CeilingOfARoom">
        <rdfs:label xml:lang="en">ceilings</rdfs:label>
        <rdfs:comment>#$CeilingOfARoom is a specialization of
            #$PartOfRoomInAConstruction. Each instance of
            #$CeilingOfARoom is a ceiling of some #$RoomInAConstruction.
            Note that, unlike walls, ceilings are conventionally
            considered to be &apos;one-sided&apos; objects.  The other
            side of a #$CeilingOfARoom may be a #$RoofOfAConstruction,
            or in a #$ModernShelterConstruction, more probably the
            #$FloorInAConstruction in another room.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PartOfRoomInAConstruction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Celebratory-Emotion">
        <rdfs:label xml:lang="en">#$Celebratory-Emotion</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Delight"/>
        <rdfs:subClassOf rdf:resource="#Excitement"/>
        <rdfs:subClassOf rdf:resource="#PrideOfAccomplishment"/>
    </owl:Class>
    <owl:Class rdf:ID="CelestialBody">
        <rdfs:label xml:lang="en">celestial objects</rdfs:label>
        <rdfs:comment>A specialization of both #$CelestialObject and
            #$AstronomicalBody (qq.v.).   Each instance of
            #$CelestialBody is an celestial object that is an
            individual body, as opposed to a group or system of such
            bodies.  In other  words, celestial bodies are astronomical
            bodies that can be seen in the  heavens from the surface of
            the Earth without the aid of artificial optical instruments.
            Instances include #$Sun, #$MoonOfEarth, and #$PlanetMars.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AstronomicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CelestialObject">
        <rdfs:label xml:lang="en">celestial object (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of #$AstronomicalObject (q.v.).
            Each instance of #$CelestialObject is an astronomical object
            that is visible in the  heavens from the surface of the
            Earth, without the aid of artificial  optical instruments.
            A #$CelestialObject might be either an individual  heavenly
            body (see the specialization #$CelestialBody) or a group or
            system made up of such bodies (e.g. a #$Constellation).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#AstronomicalObject"/>
    </owl:Class>
    <owl:Class rdf:ID="Cell">
        <rdfs:label xml:lang="en">#$Cell</rdfs:label>
        <rdfs:comment>The collection of living cells; a specialization
            of #$BiologicalLivingObject.  Each instance of #$Cell is one
            of the basic structural units of nearly all living things,
            consisting (at least) of cytoplasm bounded by a cell
            membrane. Only the living structures viruses, mitochondria,
            and plastids are not composed of cells.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CellPart">
        <rdfs:label xml:lang="en">#$CellPart</rdfs:label>
        <rdfs:comment>The collection of structures which are typically
            found and formed as parts of #$Cells. This covers components
            of both #$EukaryoticCells and #$ProkaryoticCells.  It
            includes organelles, vesicles, cell walls, extracellular
            matrix, plasma membranes, receptors, cellular humours,
            microtubules, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CerealFood">
        <rdfs:label xml:lang="en">cereals</rdfs:label>
        <rdfs:comment>A specialization of #$EdibleStuff and an instance
            of #$FoodGroup.  Each instance of #$CerealFood is food that
            consists of a significant amount of grain products, such as
            breads and cereals.  Note that #$CerealFood is not a
            specialization of #$VegetableMatter because some breads and
            grains (such as #$Muffins) contain non-plant constituents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CerealPlant">
        <rdfs:label xml:lang="en">cereal plants</rdfs:label>
        <rdfs:comment>A specialization of both #$CropPlant and
            #$GrassFamily.  Each sub-collection of #$CerealPlant is a
            type of grain-bearing plant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-NonWoody"/>
        <rdfs:subClassOf rdf:resource="#CropPlant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChainOrganization">
        <rdfs:label xml:lang="en">chain businesses</rdfs:label>
        <rdfs:comment>A specialization of #$LargeIncorporatedBusiness.
            Each instance of #$ChainOrganization is a parent business
            which comes into contact with its customers or clients
            primarily through its geographically dispersed
            sub-organizations, which typically are (mostly) homogeneous
            in product line, style of physical quarters, and local
            organizational structure.  Examples include the parent
            organizations of McDonald&apos;s and Starbuck&apos;s.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LargeIncorporatedBusiness"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChangeInUserRights">
        <rdfs:label xml:lang="en">changes in user rights</rdfs:label>
        <rdfs:comment>A collection of events and a specialization of
            #$GeneralizedTransfer.  Each instance of
            #$ChangeInUserRights is an event in which some instance of
            #$Agent either gains or loses possession of something.
            `Possession&apos; means having some right to use a thing
            that one has in hand or otherwise has access to.  Different
            types of possession (e.g. ownership, rental, borrowings) can
            be specified by using the appropriate instance(s) of
            #$UserRightsAttribute (q.v.).  Changes in an agent&apos;s
            user rights can come about in various ways: through buying
            and selling, renting, borrowing or lending, giving,
            repossession, etc.  Specializations of this collection
            include #$LosingUserRights, #$GainingUserRights, and
            #$ExchangeOfUserRights; in the latter collection, there is
            an alteration in the rights of two (or more) agents to use
            two (or more) items -- as in a purchase, when one agent gets
            full use rights to an object by turning over a sum of money
            to the object&apos;s previous owner.  In addition, some
            changes in user rights are classified explicitly in
            #$TemporaryChangeOfUserRights (e.g. borrowing, renting),
            while others are permanent.   Events that involve such
            changes in user rights all belong in the collection of
            events, #$ChangeInUserRights.   In any particular
            #$ChangeInUserRights event, the item which is changing hands
            is identified as the #$objectOfPossessionTransfer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChangeOfStatusEvent">
        <rdfs:label xml:lang="en">changes of status</rdfs:label>
        <rdfs:comment>Elements of #$ChangeOfStatusEvent are events in
            which the status of a person, group, or organization changes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChangingDeviceState">
        <rdfs:label xml:lang="en">changes of device state</rdfs:label>
        <rdfs:comment>The collection of actions in which a device goes
            from one state (the #$fromState) to another state (the
            #$toState).  A change of #$DeviceState may be due to an
            outside #$Agent adjusting a device, or it may happen
            automatically due to the behavior of a device.  The two most
            general state changes (for powered devices) are from
            #$DeviceOn to #$DeviceOff, and vice versa.  Many other
            states peculiar to specific devices can be identified; for
            example, the states of a #$Dishwasher include
            #$DeviceState-Washing and #$DeviceState-Rinsing; or the
            states that a trapping device may be in include #$TrapArmed,
            #$TrapTripped, #$TrapIdle.  Note that a change in the state
            of a device is an intrinsic change in the device; i.e.,
            #$ChangingDeviceState is a subcollection of #$IntrinsicStateChangeEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Character-Abstract">
        <rdfs:label xml:lang="en">abstract characters</rdfs:label>
        <rdfs:comment>An abstract character from some
            #$characterSetForWritingSystem,  which may occur in a
            #$CharacterString; a letter, numeral, space,
            punctuation-mark, ideograph, dingbat, hieroglyphic or the
            like.  These may be concatenated to form #$CharacterString
            s.  A #$Character-Abstract is not any particular physical,
            tangible representation of the character, nor a particular
            encoding of it.  A #$Character-Abstract is taken from a
            fixed #$characterSetForWritingSystem, which depends in part
            on the language involved.  A character is a unit of
            information and cannot contain other characters.  Some
            characters are printing-characters in text, but others may
            be line-feeds, beeps, etc.  A character can be represented
            digitally with 32 or fewer bits, usually from 5 to 16 bits.
            A character may be represented visually by a mark; it may
            represent one or more phonemes in speech.  Some phonemes may
            be represented by strings of more than one character.  By
            convention, a character may have attributes like Upper Case,
            Nonprinting, Numeric, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtomicSymbol-Abstract"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CharacterObject">
        <rdfs:label xml:lang="en">character object</rdfs:label>
        <rdfs:comment>This is the character data type in C-like
            programming languages. Normally the char is stored in memory
            as one byte (8 bits).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="CharacterString">
        <rdfs:label xml:lang="en">character string</rdfs:label>
        <rdfs:comment>A specialization of
            #$AbstractInformationStructure.  Each instance of
            #$CharacterString is a string of characters or an abstract
            sequence of symbols.  Note that an instance of
            #$CharacterString is _not_ any particular physical, tangible
            representation, since different encodings may represent the
            same string of characters.  An instance of #$CharacterString
            is a list (see the collection #$List) of characters
            (instances of #$Character-Abstract) from some fixed
            character set. An instance of #$CharacterString may be any
            finite length, including zero (the zero-length string is the
            empty string, which has no characters).  Notable
            specializations of #$CharacterString include #$EMailAddress,
            #$AreaCode, #$PhoneNumber, and #$TelephoneCountryCode.  Note
            that a #$CharacterString is ordered formally as a #$List
            (rather than physically left-to-right or top-to-bottom);
            thus the &apos;first&apos; character in the
            #$CharacterString for an Arabic word happens to be the
            rightmost (first pronounced) character, not the leftmost
            character, due to the letter-order and word-order convention
            for Arabic writing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Charm">
        <rdfs:label xml:lang="en">charm</rdfs:label>
        <rdfs:comment>Fascination, allurement, delight; physical grace
            with compelling attractiveness</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Delight"/>
    </owl:Class>
    <owl:Class rdf:ID="ChatterBot">
        <rdfs:label xml:lang="en">chatter bot</rdfs:label>
        <rdfs:comment>The collection of all #$SoftwareAgent that exhibit
            a conversational behavior via natural langage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Check-TenderObject">
        <rdfs:label xml:lang="en">#$Check-TenderObject</rdfs:label>
        <rdfs:comment>A specialization of #$TenderObject.  Each instance
            of #$Check-TenderObject is a financial instrument, drawn on
            a particular #$CheckingAccount at some instance of
            #$FinancialOrganization (q.v.), which is redeemable for a
            monetary value by the agent who is the payee.  The financial
            organization pays the payee funds from the account, upon
            proper presentation of the check. See also #$SaleByCheck.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Form-StandardizedIBO"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#FinancialAccountTenderObject"/>
        <rdfs:subClassOf rdf:resource="#Paper-IBO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cheerfulness">
        <rdfs:label xml:lang="en">cheerfulness</rdfs:label>
        <rdfs:comment>The emotion characterized by having a spontaneous
            flow of good spirits as a result of feeling glad or happy or
            as a result of an equable disposition or of temperament</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Happiness"/>
    </owl:Class>
    <owl:Class rdf:ID="ChemicalInteraction">
        <rdfs:label xml:lang="en">chemical interaction</rdfs:label>
        <rdfs:comment>This is the class of chemical interactions, events
            in which molecules of two or more types come into proximity
            and react in ways determined by their structure. Note that
            this collection is more general that #$ChemicalReaction
            since these interactions may not amount to #$PhysicalTransformationEvents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChemicalObject">
        <rdfs:label xml:lang="en">chemical objects</rdfs:label>
        <rdfs:comment>A specialization of #$MicroscopicScaleObject.
            Each instance of #$ChemicalObject is an object whose
            behavior is typically described in terms of its outer cloud
            of #$Electrons.  Specializations of #$ChemicalObject include
            the collections #$Atom, #$Molecule, and #$Ion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChemicalReaction">
        <rdfs:label xml:lang="en">#$ChemicalReaction</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$PhysicalTransformationEvent.  Each instance of
            #$ChemicalReaction is an event in which two or more
            substances undergo a chemical change, i.e., some portions of
            the substances involved are transformed into different
            #$ChemicalCompoundTypes.  The transformations are brought
            about by purely chemical (including biochemical) means which
            affect chemical bonds between atoms in the molecules of
            stuff, rather than by physical means, biological means, or
            purposeful planning, etc.  Examples of #$ChemicalReaction :
            instances of #$CombustionProcess; instances of #$Photosynthesis-Generic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChemicalInteraction"/>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChemicalSubstanceType">
        <rdfs:label xml:lang="en">chemical substances</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$TangibleStuffCompositionType.  Each instance of
            #$ChemicalSubstanceType is a specialization of
            #$PartiallyTangible whose instances are defined _only_ by
            their chemical composition -- not by their physical state or
            any other property. Instances of #$ChemicalSubstanceType can
            be of two varieties:  (1) Collections whose instances are
            completely uniform with each other in terms of chemical
            composition; this includes (a) the chemical elements -- such
            as #$Carbon, #$Oxygen, and #$Hydrogen -- which are instances
            of #$ElementStuffTypeByNumberOfProtons (thus, the latter is
            a specialization of #$ChemicalSubstanceType), and (b)
            chemical compounds constituted of more than one substance
            chemically bonded, e.g., #$Water, #$Caffeine, and
            #$IronOxide, which are instances of
            #$ChemicalCompoundTypeByChemicalSpecies (2) Substances which
            have a general chemical specification, that is, whose
            instances do not have exactly the same chemical composition
            but fall within certain specifications, e.g., #$DNAStuff.
            Note that collections that are _not_ instances of
            #$ChemicalSubstanceType include collections of substances
            which have some component which is of overriding
            significance in some context, so that in everyday language
            such substances are frequently referred to by the name of
            their important component (e.g.,  penicillin  applied to a
            tablet containing penicillin), but which have significant
            admixtures of other substances. Thus, #$Penicillin is an
            instance of #$ChemicalSubstanceType, but the collection of
            tablets containing penicillin and including other
            ingredients is not.  Also, specializations of #$Mixture,
            such as #$Lemonade, are _not_ instances of
            #$ChemicalSubstanceType, because mixtures are determined by
            their physical state rather than solely by their chemical composition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TangibleStuffCompositionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Chest-BodyPart">
        <rdfs:label xml:lang="en">#$Chest-BodyPart</rdfs:label>
        <rdfs:comment>The collection of the chests of #$Animals.  The
            animal&apos;s chest is its #$AnimalBodyPart region located
            between its neck and its abdomen.  For people and many other
            types of animals, the chest is bounded by (defined by, given
            shape by) the animal&apos;s ribcage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChinesePerson">
        <rdfs:label xml:lang="en">#$ChinesePerson</rdfs:label>
        <rdfs:comment>The collection of people who are #$citizens of #$China-PeoplesRepublic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChordataPhylum">
        <rdfs:label xml:lang="en">chordates</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalPhylum within the
            #$BiologicalKingdom #$Animal, the #$ChordataPhylum contains
            the many chordate taxa.  All chordate taxa have members who
            have a notochord (a flexible rod running the length of the
            body) at some stage of development and pharyngeal gills at
            some stage of development.  The #$ChordataPhylum has as
            #$taxonMembers all the specializations of #$Vertebrate
            (including #$Person), as well as some non-vertebrate
            chordates like Amphioxus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#MulticellularOrganism"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ChronicCondition">
        <rdfs:label xml:lang="en">chronic conditions</rdfs:label>
        <rdfs:comment>A collection of ailments.  An instance of
            #$ChronicCondition is an ailment that lingers or recurs in
            an organism throughout its life.  In some cases, the
            symptoms of a chronic condition may abate with treatment.
            The condition may never go away completely.  #$Asthma is an
            example of a subcollection of #$ChronicCondition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Circle">
        <rdfs:label xml:lang="en">#$Circle</rdfs:label>
        <rdfs:comment>A specialization of #$PlaneFigure-Geometrical.
            Each instance of #$Circle is a region of space bounded by a
            closed curve, with each point on the curve equidistant from
            a single point (the center). Examples include spatially
            localized objects, such as the region bounded by the Arctic
            Circle, as well as abstract circles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ellipse"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CirculatorySystem">
        <rdfs:label xml:lang="en">circulatory systems</rdfs:label>
        <rdfs:comment>A specialization of both #$AnimalBodyPart and
            #$ConnectedPathSystem.  Each instance of #$CirculatorySystem
            is a system of organs and body parts, found in #$Vertebrates
            and some other animals, which function together to circulate
            the animal&apos;s blood throughout its body, supplying
            needed substances to its cells and removing waste products
            from them.  An instance of #$CirculatorySystem is typically
            composed of blood vessels, heart, spleen, etc., considered
            as an interrelated functional system of each animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PipingSystem-Generic"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#InternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="City">
        <rdfs:label xml:lang="en">#$City</rdfs:label>
        <rdfs:comment>#$City is a specialization of #$GeopoliticalEntity
            and #$UrbanArea.  Each instance of #$City is a local human
            settlement which has its own government.  This includes
            cities, towns, suburbs, villages, hamlets, and townships, as
            long as they have their own governments.  A city government
            is usually mostly autonomous from the governments of its
            surrounding regions, rather than being a sub-organization of them.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
    </owl:Class>
    <owl:Class rdf:ID="ClassificationSystem">
        <rdfs:label xml:lang="en">conventional classification systems</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$ClassificationSystem is an agreed-upon or
            conventional classification system consisting of several
            #$ConventionalClassificationTypes (q.v.).  In such a system,
            a change or reclassification is possible by a decision of an
            authority, or by a changed social agreement, without
            changing the intrinsic natures of the actual objects in the
            classificatory categories.  #$ClassificationSystems include
            biological taxonomies, standard classifications, data
            dictionaries, thesauri, cultural taboo systems, military
            doctrinal systems, and calendar systems.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClausalComplementFrame">
        <rdfs:label xml:lang="en">clausal complement frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            frame is used for words that take a clausal complement,
            possibly in addition to other complements.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cleaning">
        <rdfs:label xml:lang="en">#$Cleaning</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Cleaning event,
            dirt (or other unwanted substances) is removed from the
            #$objectOfStateChange of that event.  If a #$Cleaning event
            is successful, then the #$Dirtiness level of the object will
            have been lowered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CleaningDevice">
        <rdfs:label xml:lang="en">cleaning tools</rdfs:label>
        <rdfs:comment>#$CleaningDevice is a specialization of
            #$PhysicalDevice and #$SolidTangibleProduct.  Each instance
            of #$CleaningDevice is a device, manually powered or
            otherwise, whose #$primaryFunction is to be used in cleaning
            things.  Specializations of #$CleaningDevice include #$Mop,
            #$Dishwasher, #$ShoeBrush, and #$ClothesWasher.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CleaningImplement">
        <rdfs:label xml:lang="en">cleaning implements</rdfs:label>
        <rdfs:comment>A specialization of both #$HandTool and
            #$CleaningDevice.  Each instance of #$CleaningImplement is a
            hand-held tool used for cleaning something.  Notable
            specializations of #$CleaningImplement include #$Mop,
            #$DentalPick, #$WashCloth, #$FacialTissue, and #$ShoeBrush.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#CleaningDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClientProgram">
        <rdfs:label xml:lang="en">#$ClientProgram</rdfs:label>
        <rdfs:comment>A specialization of #$LocalProgram and an instance
            of #$ComputerProgramTypeByFunction.  Copies of
            #$ClientProgram are run by computers on a network with
            connections to computers running copies of #$ServerProgram.
            Copies of #$ClientProgram request information or processing
            services from the copies of #$ServerProgram, which the
            server then provides to the client. See, for instance,
            #$DatabaseClientProgram. For relating client to their server
            programs, see the predicate #$client-Software.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocalProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClimateCycleType">
        <rdfs:label xml:lang="en">#$ClimateCycleType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ClimateCycleType is a specialization of
            #$AnnualClimateCycle (q.v.), and thus is a collection of
            extended weather events of a certain type.  Instances of
            #$ClimateCycleType include #$TemperateClimateCycle and #$SteppeClimateCycle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="ClimaticTerrainType">
        <rdfs:label xml:lang="en">#$ClimaticTerrainType</rdfs:label>
        <rdfs:comment>The collection of all types of (normally
            extensive) #$GeographicalRegion distinguised by the type of
            surface growth.  See #$FixedTerrainGeologicalRegion</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="ClosedClassWord">
        <rdfs:label xml:lang="en">#$ClosedClassWord</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all words that are members of closed lexical
            classes such as #$Prepositions, #$Determiners, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cloth">
        <rdfs:label xml:lang="en">#$Cloth</rdfs:label>
        <rdfs:comment>#$Cloth is a specialization of #$TextileProduct.
            Each instance of #$Cloth is a piece of textile sheet woven
            or knitted or pressed out of fibers.  Instances of #$Cloth
            are commonly used as material inputs to the manufacture of
            such things as clothing items, towels, sails for sailing
            craft, parachutes, and draperies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#Surface-Open"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#TextileProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Clothing-Bottom">
        <rdfs:label xml:lang="en">#$Clothing-Bottom</rdfs:label>
        <rdfs:comment>#$Clothing-Bottom is a specialization of
            #$Garment.  Each instance of #$Clothing-Bottom is a clothing
            item that covers at least the #$LowerTorso, but does not
            significantly cover the #$Chest-BodyPart.  Instances of
            #$Clothing-Bottom are outerwear, in the sense that in modern
            western cultures someone wearing a #$Clothing-Bottom only
            needs a #$Clothing-Top and shoes to be considered
            #$FullyClothed.  #$Overalls are a marginal case, in that
            they do cover some of the chest, but are normally worn with
            a #$Clothing-Top.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Garment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Clothing-Generic">
        <rdfs:label xml:lang="en">apparel</rdfs:label>
        <rdfs:comment>A specialization of #$SomethingToWear.  Each
            instance of #$Clothing-Generic is something that a person
            wears as a protective and/or decorative covering or
            ornament.  Instances of #$Clothing-Generic are usually made
            of flexible materials, such as cloth, leather, or yarn.
            Important specializations of #$Clothing-Generic include
            #$ClothingOutfit and #$ClothingItem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Covering-Object"/>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#SomethingToWear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Clothing-Top">
        <rdfs:label xml:lang="en">tops (types of things)</rdfs:label>
        <rdfs:comment>#$Clothing-Top is a specialization of #$Garment.
            Each instance of #$Clothing-Top is a #$Garment that extends
            from the shoulders to the #$Waist or #$Hips.
            #$Clothing-Tops are outerwear, in the sense that in modern
            western culture someone wearing a #$Clothing-Top with
            trousers, shorts, or a skirt and shoes is considered #$FullyClothed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Garment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Clothing-WholeBody">
        <rdfs:label xml:lang="en">#$Clothing-WholeBody</rdfs:label>
        <rdfs:comment>#$Clothing-WholeBody is a specialization of
            #$Garment.  Each instance of #$Clothing-WholeBody is a
            #$Garment that covers the whole body. Someone wearing one
            would only require #$Shoes to be considered #$FullyClothed
            in modern western culture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Garment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClothingAccessory">
        <rdfs:label xml:lang="en">#$ClothingAccessory</rdfs:label>
        <rdfs:comment>A specialization of #$ClothingItem.  Each instance
            of #$ClothingAccessory is something that is worn as an
            accessory with other clothing items.  Notable
            specializations of #$ClothingAccessory include #$Hat,
            #$Cufflinks, #$Purse, #$Scarf, and #$Wallet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClothingItem">
        <rdfs:label xml:lang="en">clothing items</rdfs:label>
        <rdfs:comment>A specialization of #$Clothing-Generic.  Each
            instance of #$ClothingItem is something that a person wears
            as a protective and/or decorative covering or ornament.
            Items of clothing are usually made of flexible materials,
            such as cloth, leather, or yarn.  The collection
            #$ClothingItem contains primarily individual garments (e.g.,
            instances of the collections #$Pants, #$Shirt, #$Coat,
            #$Shoe), together with pairs of shoes, socks, and gloves
            (since each wearer needs a pair).  Jewelry, suspenders,
            belts, etc., are in the specialization #$ClothingAccessory.
            Note: outfits (esp. specialized outfits) made up of several
            individual items worn together belong to the collection
            #$ClothingOutfit, which is _not_ a specialization of
            #$ClothingItem but _is_ a specialization of the broader
            collection, #$SomethingToWear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Generic"/>
        <rdfs:subClassOf rdf:resource="#BilaterallySymmetricObject"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ClothingOutfit">
        <rdfs:label xml:lang="en">#$ClothingOutfit</rdfs:label>
        <rdfs:comment>A specialization of both #$Clothing-Generic and
            #$Group.  Each instance of #$ClothingOutfit is a group of
            clothing items (see the collection #$ClothingItem) that are
            intended to be worn together.  An instance of
            #$ClothingOutfit may include some accessories, as well as
            garments. The different parts of an instance of
            #$ClothingOutfit are often sold together, rather than
            separately.  Specializations of #$ClothingOutfit include
            #$MensSuit, #$Uniform, and #$Bikini.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Generic"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CloudInSky">
        <rdfs:label xml:lang="en">clouds (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$CloudOfH2O.  Each instance
            of #$CloudInSky is a cloud located in the sky over some
            instance of #$GeographicalRegion.  Since #$CloudInSky is a
            specialization of #$CloudOfH2O, each instance of
            #$CloudInSky must be primarily composed of water particles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#CloudOfH2O"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CloudOfH2O">
        <rdfs:label xml:lang="en">#$CloudOfH2O</rdfs:label>
        <rdfs:comment>A cloud of particles of liquid or solid water in
            the atmosphere covering a #$GeographicalRegion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CloudlikeObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cloudless">
        <rdfs:label xml:lang="en">cloudless</rdfs:label>
        <rdfs:comment>An instance of #$OutdoorLocationByWeatherType and
            specialization of #$OutdoorLocation. Each instance is an
            #$OutdoorLocation that has no cloud cover.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CloudlikeObject">
        <rdfs:label xml:lang="en">clouds (types of things)</rdfs:label>
        <rdfs:comment>A cloud is a kind of #$Suspension that has air as
            the suspending fluid.  It is of #$ObjectType. Things like
            clouds of locusts are metaphorical, and are not treated as
            clouds in the kb.  See #$Suspension for the structure of the
            material out of which clouds are made.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Suspension"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cloudy">
        <rdfs:label xml:lang="en">cloudy</rdfs:label>
        <rdfs:comment>An instance of #$OutdoorLocationByWeatherType and
            a specialization of #$OutdoorLocation. Each instance of
            #$Cloudy is an #$OutdoorLocation that has at least some
            cloud cover, and this cloud  cover is not located
            exclusively at ground-level (in which case the  location
            would be an instance of #$Foggy instead.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CoEquivalenceBinaryPredicate">
        <rdfs:label xml:lang="en">co-equivalence binary predicates</rdfs:label>
        <rdfs:comment>A #$CoEquivalenceBinaryPredicate is a combined
            #$IrreflexiveBinaryPredicate and #$SymmetricBinaryPredicate
            such that (=&gt; (&amp; (PRED A B) (PRED B C) (different A
            C)) (PRED A C)).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SymmetricBinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#IrreflexiveBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CodeOfConduct">
        <rdfs:label xml:lang="en">#$CodeOfConduct</rdfs:label>
        <rdfs:comment>An instance of #$MicrotheoryType, and a
            specialization of #$Obligation.  Each instance of
            #$CodeOfConduct is a microtheory containing rules and/or
            expectations governing the behavior of those agents subject
            to it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Obligation"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="CognitiveAwarenessPredicate">
        <rdfs:label xml:lang="en">cognitive awareness predicates</rdfs:label>
        <rdfs:comment>A collection of binary predicates that reveal
            information about the epistemological state of the ARG1.
            Examples include #$awareOf and #$knowsAbout, both of which
            indicate cognitive properties of the ARG1 with respect to
            ARG2.  A necessary condition for membership in this
            collection is that the predicate is non-modal.  This means
            that coreferential substitution into the ARG2 positions of
            these predicates preserves truth.  This non-modal constraint
            amounts to the following: if (#$knowsAbout Joe
            #$GeorgeWashington) holds then so does (#$knowsAbout Joe
            &apos;the first U.S. president&apos;) and (#$knowsAbout Joe
            &apos;the Valley Forge commander buried in Baltimore,
            Maryland.&apos;) even though Joe might not know this last
            piece of information.  In contrast, modal predicates,
            including instances of #$PropositionalAttitudeSlot, do not
            permit coreferential substitution.  In some cases a modal
            predicate may have a non-modal counterpart (e.g. #$knows and
            #$knowsAbout), but only the non-modal sense will be a member
            of this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MentalSlot"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CognitiveCycFort">
        <rdfs:label xml:lang="en">cognitive cyc fort</rdfs:label>
        <rdfs:comment>The KB subset collection of terms related to
            Cyc&apos;s active cognitive behavior.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CohabitationUnit">
        <rdfs:label xml:lang="en">#$CohabitationUnit</rdfs:label>
        <rdfs:comment>A specialization of #$Group.  Each instance of
            #$CohabitationUnit is a group of humans or other animals all
            living together in the same place at the same time, where
            the place in question may be a house, nest, warren, or other
            dwelling.  A notable specialization of #$CohabitationUnit is #$FamilyCohabitationUnit.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ColdSeason">
        <rdfs:label xml:lang="en">cold seasons</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear.  Each instance
            of #$ColdSeason is the cooler part of an annual climate
            cycle for a region (see #$AnnualClimateCycle).  If a place
            has a Winter (see #$WinterSeason), the cold season generally
            includes the Winter.  Note that #$WinterSeason is _not_ a
            specialization of #$CalendarSeason (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Collection">
        <rdfs:label xml:lang="en">types of things</rdfs:label>
        <rdfs:comment>The collection of all Cyc collections.  Cyc
            collections are natural kinds or classes, as opposed to
            mathematical sets; their instances have some common
            attribute(s).  Each Cyc collection is like a set in so far
            as it may have elements, subsets, and supersets, and may not
            have parts or spatial or temporal properties.  Sets,
            however, differ from collections in that a mathematical set
            may be an arbitrary set of things which have nothing in
            common (see #$Set-Mathematical).  In contrast, the instances
            of a collection will all have in common some feature(s),
            some `intensional&apos; qualities.  In addition, two
            instances of #$Collection can be co-extensional (i.e., have
            all the same instances) without being identical, whereas if
            two arbitrary sets had the same elements, they would be
            considered equal.   As with any Cyc constant, an instance of
            #$Collection should be created only if it is expected to
            have some purpose or utility.  Moreover, the `best&apos;
            collections to create are the ones which are impossible to
            define precisely, yet about which there are rules and other
            things to say.  E.g., `WhiteCat&apos; is not a good element
            of #$Collection to create, because it&apos;s easy to define
            with other Cyc concepts, and there&apos;s not much to say
            about the collection of white cats; but
            `WhiteCollarWorker&apos; could be a good instance of
            #$Collection, because it is hard to define exactly, yet
            there are many things to say about it.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#SetOrCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectionDenotingFunction">
        <rdfs:label xml:lang="en">collection-denoting functions</rdfs:label>
        <rdfs:comment>The subcollection of #$Function-Denotational whose
            instances return instances of #$Collection.  Examples
            include #$SwimmingEventFn, #$GroupFn, and #$MoleculeFn.  For
            example, (#$MoleculeFn #$Oxygen) denotes the collection of
            all oxygen molecules.  See also the collections
            #$IndividualDenotingFunction and #$SetDenotingFunction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectionEvent">
        <rdfs:label xml:lang="en">collections</rdfs:label>
        <rdfs:comment>A specialization of #$TransferIn.  Each instance
            of #$CollectionEvent is an event in which tangible or
            intangible objects are collected together at a single  place
            .  The objects might come from various sources, and might be
            gathered via some collection network.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectionPredicate">
        <rdfs:label xml:lang="en">intensional representation predicate</rdfs:label>
        <rdfs:comment>A collection of predicates used to relate
            collections to other things and thereby ascribe
            characteristics or properties (taken in a broad sense)
            either to the collections themselves or to each of the
            instances of those collections.  As such, each instance of
            #$CollectionPredicate has an #$arity (q.v.) of 2 or greater
            and has at least one argument place (often including the
            first, or  arg1 , place) constrained to instances (see
            #$argIsa) of either #$Collection or some specialization of
            #$Collection. For example, #$hasDepartmentTypes is a
            collection-predicate that relates a given organization to a
            type (i.e. collection) of departments such that the former
            has an instance of the latter as a suborganization; the
            relevant argument constraint here is (#$arg2Isa
            #$hasDepartmentTypes #$ExistingObjectType), and
            #$ExistingObjectType is a specialization of #$Collection.
            Other instances of #$CollectionPredicate include
            #$granuleOfTemporalStuff, #$objectTypeTransported, and
            #$contraryFeelings.  See also #$ObjectPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectionType">
        <rdfs:label xml:lang="en">#$CollectionType</rdfs:label>
        <rdfs:comment>A collection of collections of collections.
            #$CollectionType is the collection of all (and only) types
            of #$Collections.  More precisely, a thing COLLTYPE is an
            instance of #$CollectionType if and   only if COLLTYPE is a
            non-empty collection all of whose instances are collections.
            Example: #$PersonTypeByCulture, each of whose instances is
            the collection of all persons who participate in some
            particular human culture, is an instance of
            #$CollectionType.  Important specializations of
            #$CollectionType include #$DisjointCollectionType,
            #$SiblingDisjointCollectionType, and #$CollectionTypeType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SetOrCollectionType"/>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectionTypeType">
        <rdfs:label xml:lang="en">#$CollectionTypeType</rdfs:label>
        <rdfs:comment>The collection of all collections of collections
            of collections.  (The collection of all third order (or
            higher) collections.)  #$CollectionTypeType is a fourth
            order collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="CollectorMicrotheory">
        <rdfs:label xml:lang="en">collector microtheory</rdfs:label>
        <rdfs:comment>The collection of all microtheories which collect
            as #$genlMts a (possibly large) set of other microtheories,
            but do not have any (non-derived) assertions of their own.
            A #$CollectorMicrotheory may collect as #$genlMts a set of
            VocabularyMicrotheories, TopicMicrotheories, or
            DataMicrotheories, but should not have a mixture of these
            types as direct #$genlMts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="ColorTingeAttribute">
        <rdfs:label xml:lang="en">color tinge attribute</rdfs:label>
        <rdfs:comment>A collection of attributes. Each instance is an
            attribute characteristic of objects having a tinge of a
            certain color. For example, #$Purplish is the attribute
            common to all purplish things, or things that have a tinge
            of purple color.  Every instance of #$Color has some
            instance of #$ColorTingeAttribute one of its
            #$genlAttributes. Having a tinge of a certain color must not
            be confused with being a shade of that color. More
            precisely, possessing some #$ColorTingeAttribute, XISH, does
            not imply having the color X. For instance, an object can
            have the attribute #$Reddish, without having the attribute
            #$RedColor. Anything which has the attribute
            #$GrayishReddishBrown-Color has the attribute #$Reddish but
            lacks the attribute #$RedColor. Many colors have more than
            one #$ColorTingeAttribute as #$genlAttributes.
            #$GrayishPink-Color has both #$Grayish and #$Pinkish as #$genlAttributes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="CombatAircraft">
        <rdfs:label xml:lang="en">combat aircraft</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryAircraft.  Each
            instance of #$CombatAircraft is an aircraft designed for use
            in combat, rather than (for example) for transport or reconnaissance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalWeapon"/>
        <rdfs:subClassOf rdf:resource="#MilitaryAircraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CombustionProcess">
        <rdfs:label xml:lang="en">#$CombustionProcess</rdfs:label>
        <rdfs:comment>A collection of events.  Each #$CombustionProcess
            is an event in which rapid oxidation is taking place.  These
            always have heat as an output and often involve emission of
            light as well (typically, flames).  The #$objectActedOn in a
            #$CombustionProcess is at least partly consumed.  See also #$Flammability.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnergyConversionProcess"/>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommercialActivity">
        <rdfs:label xml:lang="en">commercial activities</rdfs:label>
        <rdfs:comment>This is a large collection of events.  As can be
            seen from its specializations, it embraces all types of
            buying, selling, offering to sell, offering to buy,
            requesting bids, performing services for hire, advertising,
            manufacturing for sale, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#EconomicAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommercialFishingBoat">
        <rdfs:label xml:lang="en">commercial fishing boats</rdfs:label>
        <rdfs:comment>A specialization of #$Watercraft-Surface.  Each
            instance of #$CommercialFishingBoat is a watercraft designed
            to be used in catching fish or other water-dwelling life for
            some commercial purpose.  Some instances of
            #$CommercialFishingBoat are ocean-going craft, while others
            are used in rivers and lakes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft-Surface"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommercialOrganization">
        <rdfs:label xml:lang="en">commercial organizations</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$CommercialOrganization is an organization whose primary
            goal is to generate a profit for its owners, usually through
            the buying and selling of goods or services.  A given
            instance of #$CommercialOrganization may also be an instance
            of #$Business, or it may merely be a sub-organization of
            some instance of #$Business.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </owl:Class>
    <owl:Class rdf:ID="CommercialServiceOrganization">
        <rdfs:label xml:lang="en">service companies</rdfs:label>
        <rdfs:comment>A specialization of #$CommercialOrganization.
            Each instance of #$CommercialServiceOrganization is a
            commercial organization which sells some service(s), rather
            than tangible goods, as its main product.  Some tangible
            goods may accompany or supplement the main service sold, but
            only as side products; for example, some instances of
            #$HairSalon sell hair care products.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommissionedWorker">
        <rdfs:label xml:lang="en">commissioned worker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and
            specialization of #$Employee. The collection of all
            instances of #$Employee that are paid on a commission basis
            for work done.  See also #$HourlyWorker and #$SalariedWorker.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommissiveIllocutionaryForce">
        <rdfs:label xml:lang="en">commissive illocutionary forces</rdfs:label>
        <rdfs:comment>A collection of illocutionary forces.  If a
            communication act has an instance of this collection as an
            attribute, then the communication explains or refers
            directly to some prospective action that the communication
            act compels the information sender (see #$senderOfInfo) to
            perform.  Obligation on the information sender
            (#$senderOfInfo) may depend upon acceptance or confirmation
            by the communication target (see #$communicationTarget or
            #$recipientOfInfo) in the communication act.  Whether this
            is the case depends upon which instance of the collection is
            an attribute of the communication act.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="CommodityProduct">
        <rdfs:label xml:lang="en">#$CommodityProduct</rdfs:label>
        <rdfs:comment>Commodities are those products for which the only
            relevant data are the quantity and the price (and possibly
            the location).  That is, their quality is completely
            specified or describable in standardized terminology.  Thus,
            fashion clothing is not a commodity, since opinions on it
            vary, whereas grade A extra large eggs are.  The collection
            of all eggs is covered by various collections that are
            commodities, but is not itself an instance of commodity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Communicating">
        <rdfs:label xml:lang="en">#$Communicating</rdfs:label>
        <rdfs:comment>A specialization of #$Action and
            #$InformationTransferEvent.  Each instance of
            #$Communicating is an event in which the transfer of
            information between or among agents is a focal action;
            communicating is the main purpose and/or goal in the event.
            That may be contrasted with events which involve
            communication but wherein the focus is different, e.g.,
            playing cards (wherein the progressive actions -- and
            winning -- of the game are focal).  Since #$Communicating is
            a specialization of  #$PurposefulAction, each
            #$Communicating event must be intentional on the part of the
            #$senderOfInfo; it may or may not be intentional on the part
            of the #$recipientOfInfo.  Hence, a speaker on a soapbox
            haranguing an indifferent crowd is performing an instance of
            #$Communicating.  In contrast, Juliet soliloquizing on her
            balcony, unaware that Romeo is listening to her, is not
            #$Communicating; this #$InformationTransferEvent would be an
            instance of #$Eavesdropping. Communicating may be either a
            one-way or a two-way transfer of  information (cf.
            #$CommunicationAct-Single, #$MultiDirectionalCommunication).
            Every event belonging to #$Communicating contains at least
            one transfer of information between at least two agents who
            participate in the event.  (Note that the latter requirement
            excludes reading and writing from #$Communicating,  when
            those events are just the private accessing or generating of
            information.)  Communicating may be specialized in various
            ways, such as, by the method or medium used (e.g.,
            #$AudioCommunicating, #$NonVerbalCommunicating,
            #$FaceToFacePresenceCommunicating); by the type of
            information involved (e.g., #$MakingAnAgreement); by the
            purpose of the communication (e.g., #$Teaching,
            #$Negotiating); by the agents involved (e.g.,
            #$IntraOrganizationCommunication,  #$StageProduction).
            Examples of #$Communicating include a symphony performance,
            an email message, a telephone call, a speech, a handshake,
            issuing a traffic ticket -- all of which normally, and
            focally, involve communication between two or more agents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommunicationAct-Single">
        <rdfs:label xml:lang="en">communication acts</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            specialization of #$Communicating.  Each instance of
            #$CommunicationAct-Single is a single-source transmission of
            information from _one_ sender (see the predicate
            #$senderOfInfo) to one or more recipients (see the predicate
            #$recipientOfInfo).  Every instance of
            #$CommunicationAct-Single has a transmission sub-event
            (which is an instance of #$IBTGeneration) and one or more
            reception sub-events (which are instances of
            #$AccessingAnIBT).  An instance of #$CommunicationAct-Single
            starts when its transmission sub-event starts and ends when
            its accessing sub-event(s) end.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommunicationConvention">
        <rdfs:label xml:lang="en">communication conventions</rdfs:label>
        <rdfs:comment>The collection of conventions used to encode and
            interpret things which bear information; a syntax together
            with a semantic mapping.  Instances include natural
            languages like French or English, database data formats, and
            computer languages or idiosyncratic systems of gestures or
            symbols known only by a small group of people.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommunityOrganization">
        <rdfs:label xml:lang="en">community groups</rdfs:label>
        <rdfs:comment>#$CommunityOrganization is a specialization of
            both #$LocalOrganization and #$OrganizationOfPeopleOnly.
            Each instance of #$CommunityOrganization is a group that
            consists of residents of a #$Neighborhood (q.v.) or
            apartment building or condominium complex, and which is
            concerned with issues affecting the #$Neighborhood or complex.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationOfPeopleOnly"/>
        <rdfs:subClassOf rdf:resource="#LocalOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CommutativeRelation">
        <rdfs:label xml:lang="en">commutative relations</rdfs:label>
        <rdfs:comment>A collection of #$Relations and an instance of
            #$RelationTypeByLogicalFeature (q.v.).  Each instance of
            #$CommutativeRelation COMREL is a predicate or function that
            is commutative in all of its argument-places.  That is, if
            COMREL is a predicate (function) that holds among (has the
            value VAL for) a given sequence of arguments, then  COMREL
            also holds among (has the same value VAL for) any
            permutation of that  sequence.  Instances include #$PlusFn,
            #$or, #$bordersOn,  #$temporallyIntersects, and #$teammates.
            Specialization include #$SymmetricBinaryPredicate.  Note
            that most relations are _not_ commutative. See also #$PartiallyCommutativeRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="Companionship-Feeling">
        <rdfs:label xml:lang="en">#$Companionship-Feeling</rdfs:label>
        <rdfs:comment>The collection of feelings of comradery, companionship</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Friendliness"/>
    </owl:Class>
    <owl:Class rdf:ID="ComparisonPredicate">
        <rdfs:label xml:lang="en">#$ComparisonPredicate</rdfs:label>
        <rdfs:comment>#$ComparisonPredicates are predicates used to
            represent comparisons between things. Although the
            distinction between relationships that compare and those
            that do not is not a sharp one, there are a large number of
            cases where people would agree that things are being
            compared when they stand in such-and-such relations, and
            there are a large number of cases where people would agree
            that things are not being compared when they stand in
            thus-and-so other relations. For example, GAFs using
            #$similarTo in arg0 represent a comparison between the
            things in arg1 and arg2, whereas GAFs using #$doneBy do not
            represent a comparison between the things in arg1 and arg2.
            One use for this distinction might be to narrow the range of
            appropriate predicates used to parse expressions such as
            &apos;&lt;type&gt; is ____er than &lt;type&gt;&apos;. An
            important subcollection is #$ComparisonWRTPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ComparisonWRTPredicate">
        <rdfs:label xml:lang="en">#$ComparisonWRTPredicate</rdfs:label>
        <rdfs:comment>The instances of #$ComparisonWRTPredicate are
            designed to represent English sentences in which at least
            two things are explicitly compared with respect to some
            feature in virtue of which these two things are similar,
            different, greater, lesser, etc. The respect of comparison
            serves as an explanation of why/how the two things being
            compared are similar, different, etc. If it makes no sense
            to ask for this sort of explanation of a comparison
            relation, then it is not an instance of
            #$ComparisonWRTPredicate. For example, #$NumericComparisons
            such as #$greaterThan are not #$ComparisonWRTPredicates
            because it doesn&apos;t make sense to ask why/how
            (#$greaterThan 5 3). A positive example is
            #$similarWRTTypeViaBinRel because it is used to represent
            the fact that two things are similar in virtue of the fact
            that they bear the same relation to similar instances of a
            given collection. #$similarTo and #$different are negative
            examples because they do not specify any respect in virtue
            of which the things in arg1 and arg2 are similar or
            different. The collection #$ComparisonWRTPredicate can be
            used to constrain Asks designed to return assertions that
            represent known comparisons between two specified things.
            Two important subcollections are #$SimilarityWRTPredicate
            and #$DifferenceWRTPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComparisonPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Competition">
        <rdfs:label xml:lang="en">#$Competition</rdfs:label>
        <rdfs:comment>A specialization of #$ConflictEvent.  An instance
            of #$Competition is a conflict event that typically involves
            one or more agents who are each striving to attain  a
            certain goal uniquely or to outdo the other competitors with
            respect to some  game or task.  Examples include arm
            wrestling contests, football games, fighting  for prey,
            competitive courting, racing events, and spelling bees.
            Note that it  is possible for the competitors in a
            competition to be unaware that a competition has been going
            on until after it is over (e.g. the first year a  Best
            Restaurant in Town  award is given out in a particular
            city).  See also #$competingAgents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConflictEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Complementizer">
        <rdfs:label xml:lang="en">complementizer</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all complementizers. In English, this is only
            the word &apos;that&apos;. Complementizers introduce a
            tensed clauses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CompletelyCloudCovered">
        <rdfs:label xml:lang="en">completely cloud covered</rdfs:label>
        <rdfs:comment>A instance of #$DegreeOfCloudiness and a
            specialization of #$OutdoorLocation. Each instance is an
            #$OutdoorLocation that is so clouded over with a uniform
            layer grey or white clouds that direct sunlight is blocked
            out.  There are no shadows, the shape or exact location of
            the sun or moon is impossible to identify.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cloudy"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComplexActionPredicate">
        <rdfs:label xml:lang="en">complex action predicates</rdfs:label>
        <rdfs:comment>A specialization of #$ActionPredicate (q.v.).
            Each instance of #$ComplexActionPredicate is such that a
            task specification formed with it may decompose into further
            actions, in contrast to specifications formed with instances
            of #$SimpleActionPredicate (q.v.).  By convention,
            expressions that denote relations that are typically
            instances of #$ComplexActionPredicate  are characterized by
            having the prefix  do , whereas expressions that denote
            relations that are typically instances of
            #$SimpleActionPredicate lack this prefix.  Note, however,
            that whether a predicate is an instance of
            #$SimpleActionPredicate or #$ComplexActionPredicate depends
            on context.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ComplexNumber">
        <rdfs:label xml:lang="en">#$ComplexNumber</rdfs:label>
        <rdfs:comment>A specialization of both #$Number-General and
            #$NTupleOfIntervals.  Each instance of #$ComplexNumber can
            be thought of as a vector of two numbers, which are usually
            called the real part and the imaginary part of the complex
            number.  Complex numbers may also be considered as
            corresponding to points in the real plane, where the x axis
            determines the real component of a complex number and the y
            axis the imaginary component.  The unit value on the real
            number line is 1, the unit value on the imaginary number
            line is the square root of -1, generally written `i&apos; in
            mathematics and `j&apos; in engineering.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Number-General"/>
        <rdfs:subClassOf rdf:resource="#NTupleOfIntervals"/>
    </owl:Class>
    <owl:Class rdf:ID="ComplexPhysicalObject">
        <rdfs:label xml:lang="en">complex physical objects</rdfs:label>
        <rdfs:comment>Complex physical objects are divisible into
            (usually well-defined) parts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComplexTemporalPredicate">
        <rdfs:label xml:lang="en">complex temporal predicates</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalPredicate (q.v.)
            whose instances  relate temporal things other than (but
            possibly including) individual time points.  Thus, each
            instance of #$ComplexTemporalPredicate has  both its
            argument-places constrained to instances (see #$argIsa) of
            #$TemporalThing or some specialization thereof (and at least
            one of  these constraints must be broader than #$TimePoint).
            A complex  temporal predicate might be used to relate
            events, tangible objects,  proper time intervals, and so
            forth.  Instances include  #$temporallyIntersects and
            #$startsAfterStartingOf.  Compare #$PrimitiveTemporalPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ComplexWord">
        <rdfs:label xml:lang="en">complex words</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CompositeDataType">
        <rdfs:label xml:lang="en">composite data types</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerDataType.   The
            collection of all data types that are compositional in
            nature, usually  consisting of several named data fields.
            Examples include structs in   #$C-ComputerLanguage and
            objects in #$JavaProgrammingLanguage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#ComputerDataType"/>
    </owl:Class>
    <owl:Class rdf:ID="CompositePhysicalAndMentalEvent">
        <rdfs:label xml:lang="en">#$CompositePhysicalAndMentalEvent</rdfs:label>
        <rdfs:comment>A specialization of both
            #$AtLeastPartiallyMentalEvent and #$PhysicalEvent.  Each
            instance of #$CompositePhysicalAndMentalEvent is an event
            that involves some mental event(s), as well as some
            interaction between physical objects.  Examples include a
            news broadcast program, a court trial, someone inheriting
            property,  someone writing a letter, a physical examination,
            and a charity ball.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CompositeScalarInterval">
        <rdfs:label xml:lang="en">composite scalar intervals</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$CompositeScalarInterval is an attribute that
            is essentially a vector with many dimensions.  Instances of
            #$Color are good examples; colors have intensity, hue, and
            saturation as independent dimensions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="CompositeScalarIntervalType">
        <rdfs:label xml:lang="en">#$CompositeScalarIntervalType</rdfs:label>
        <rdfs:comment>A collection of collections.  Every instance of
            #$CompositeScalarIntervalType is a specialization of
            #$CompositeScalarInterval (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="CompositeTangibleAndIntangibleObject">
        <rdfs:label xml:lang="en">#$CompositeTangibleAndIntangibleObject</rdfs:label>
        <rdfs:comment>The collection of individuals that have both a
            tangible and an intangible component.  Instances include
            people (who have bodies and minds), information bearing
            objects (which consist of intangible information encoded in
            a tangible object, such as the music on a CD or the text in
            a book), and many other things.  Each instance of
            #$CompositeTangibleAndIntangibleObject, being partially
            tangible, exists in time (see #$TemporalThing).  Although
            occasionally it can be useful to reify separately the
            tangible and intangible components of a composite object
            (e.g. to state certain things about Lenin&apos;s body as
            opposed to his mind), in most cases it is sufficient simply
            to reify the composite.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CompoundWord">
        <rdfs:label xml:lang="en">compound words</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivedWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Compounding-WordFormationProcess">
        <rdfs:label xml:lang="en">compounding - word formation process</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputationalObject">
        <rdfs:label xml:lang="en">computational objects</rdfs:label>
        <rdfs:comment>A specialization of both
            #$MathematicalOrComputationalThing and
            #$IntangibleIndividual.  Each instance of
            #$ComputationalObject is a syntactically structured form,
            such as a Cyc system expression, a Lisp string, a C variable
            name, or an equation in a particular canonical form format.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#MathematicalOrComputationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputationalSystem">
        <rdfs:label xml:lang="en">computational systems</rdfs:label>
        <rdfs:comment>A specialization of #$InformationBearingObject and
            #$PoweredDevice. Each instance of this collection is a
            system used for computing purposes.  It includes as
            specializations both #$Computer and #$ComputerNetwork.
            Anything that can be said about both collections can more
            efficiently be stated about this collection.  For example,
            instead of saying that system administrators maintain
            instances of #$Computer and #$ComputerNetwork, one can
            simply say that system administrators maintain instances of #$ComputationalSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Computer">
        <rdfs:label xml:lang="en">computer</rdfs:label>
        <rdfs:comment>A specialization of #$ComputationalSystem,
            #$ElectronicDevice, and #$ComputerHardwareItem.  Each
            instance of #$Computer is an electronic device that acts on
            input according to some set of instructions (often in the
            form of software -- see #$ComputerProgram-CW) producing some
            output.  Instances of #$Computer have specialized parts to
            handle input and output (sometimes peripherals like screens
            and keyboards, sometimes just input-output terminals on a
            chip), storage (internal memory and external storage such as
            disk drives), and reasoning (see #$CentralProcessingUnit).
            The more specialized collection #$PersonalComputer is the
            collection of the popular archetypes of what a computer is
            (e.g., desktop, laptop, and palm computers); however,
            instances of #$Computer are incorporated into many devices
            (e.g., cars, cameras, and VCRs).  Hydraulic computers,
            analog computers, biological computers, etc. are not
            instances of this collection because #$Computer is a
            specialization of #$ElectronicDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerHardwareItem"/>
        <rdfs:subClassOf rdf:resource="#ComputationalSystem"/>
        <rdfs:subClassOf rdf:resource="#AccountSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerActivity">
        <rdfs:label xml:lang="en">#$ComputerActivity</rdfs:label>
        <rdfs:comment>A collection of events, and a specialization of
            both #$Action and #$PhysicalEvent. In each instance of
            #$ComputerActivity, at least one instance of #$Computer is
            somehow involved. An instance of #$Person may or may not be
            involved. (Instances of #$ComputerActivity where no #$Person
            is involved fall under the more specialized collection
            #$ComputerProcessRunning.) A wide variety of activities
            falls into this collection - from sending an email (see the
            more specialized collection #$EMailSending), to scanning a
            set of ports (see #$PortScan), to a computer crash (see
            #$ComputerCrashing). A situation where someone took to a
            computer with an axe would also fulfil the requirements for
            being an instance of #$ComputerActivity, though (hopefully)
            in an unusual and &apos;degenerate&apos; sense.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerArchitectureAttribute">
        <rdfs:label xml:lang="en">computer architecture attribute</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerHardwareAttribute.
            Each instance of this collection is a variety of  computer
            processor architecture -- for instance
            #$X86ProcessorArchitecture. Notable specializations of this
            collection are #$RISCArchitecture and #$CISCArchitecture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerCode-Source">
        <rdfs:label xml:lang="en">source code</rdfs:label>
        <rdfs:comment>The collection of all computer source code written
            in any computer language.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerDataStructure">
        <rdfs:label xml:lang="en">data structures</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerAIS.  Each instance
            of #$ComputerDataStructure is data structured in such a way
            that when it is stored a computer can use it efficiently.
            Important specializations include #$Array-DataStructure and #$HashTable-DataStructure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerDataType">
        <rdfs:label xml:lang="en">computer data types</rdfs:label>
        <rdfs:comment>The collection of all data types found in
            programming languages. Every instance  of this collection
            should be a specialization of #$ProgramObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerFile-Abstract">
        <rdfs:label xml:lang="en">computer file</rdfs:label>
        <rdfs:comment>In some respects and in some domains (notably,
            #$ComputerSecurityMt) it is sometimes more convenient and
            more natural to represent computer files as instances of
            #$ConceptualWork.  This enables #$Cyclists to adapt
            existing, program-(#$ConceptualWork) oriented vocabulary to
            represent files.  On the other hand, in some respects
            (notably when dealing with encryption) it is sometimes more
            convenient and natural to represent computer files as
            instances of #$AbstractInformationStructure.  Thus we have
            two collections, #$ComputerFile-AIS and #$ComputerFile-CW.
            This collection, #$ComputerFile-Abstract, serves as the
            union of these two collections in order that there might be
            some vocabulary which can apply to both collections (e.g., #$fileFoundOnComputer).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerFile-CW">
        <rdfs:label xml:lang="en">computer file - c w</rdfs:label>
        <rdfs:comment>#$ComputerFile-CW is a collection of conceptual
            works. Each instance of #$ComputerFile-CW is abstract
            information that was created at a particular time to be
            stored on a computer or on media that is readable by a
            computer.  Commonly, files are either programs or data or
            both.  Instances of this collection have associated
            #$ComputerFile-AISes and #$fileCopies.  A physical
            instantiation of a #$ComputerFile-CW is a #$ComputerFileCopy
            which is an #$InformationBearingThing.  Notable
            specializations include #$ComputerProgram-CW and #$FileDirectory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerFile-Abstract"/>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerFileCopy">
        <rdfs:label xml:lang="en">computer file copy</rdfs:label>
        <rdfs:comment>A specialization of #$InformationBearingThing.
            Each instance of #$ComputerFileCopy is an IBT that contains
            digitally coded information readable by a computer. Examples
            include individual image files, text files, sound files and
            executables (instances of #$ComputerProgramCopy) that are
            stored on some #$ComputerStorageDevice.  Instances of
            #$ComputerFileCopy are actual physical objects or events
            (e.g., the magnetic domains, holes in a piece of paper, or
            voltage fluctuations in a device corresponding to bits or
            bytes) which encode information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerHardwareItem">
        <rdfs:label xml:lang="en">computer hardware</rdfs:label>
        <rdfs:comment>A specialization of #$ElectronicDevice and
            #$ComputerProduct. Each instance of this collection is
            either an entire #$Computer, or a device used with or in
            computers to accomplish some computing-related task (for
            instance, computer terminals, printers, keyboards, etc.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectronicDevice"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerInterfaceDevice">
        <rdfs:label xml:lang="en">computer interface devices</rdfs:label>
        <rdfs:comment>A specialization of #$ElectronicDevice. Each
            instance of this collection is a device that allows a user
            to communicate with a #$Computer.  One sigificant
            specialization of #$ComputerInterfaceDevices is
            #$ComputerInputDevice -- with its subsets
            #$ComputerKeyboard, #$Scanner-Optical, #$ComputerMouse, etc.
            Another is #$ComputerOutputDevice -- with its subsets
            #$MonitorPort, #$ComputerMonitor-Color, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerHardwareItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerLanguage">
        <rdfs:label xml:lang="en">computer languages (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$ConstructedLanguage and
            #$FormalLanguage.  Each instance of #$ComputerLanguage is
            designed expressly for the purpose of creating expressions
            that are in some sense interpretable by computers. This may
            mean that the expressions are used to program computers (for
            which, see the specialization
            #$AbstractProgrammingLanguage), to facilitate interaction
            between pieces of software, or to indicate how to represent
            pieces of text (for which, see #$MarkupLanguage). Machine
            and assembly languages are also included in this category.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Language"/>
        <rdfs:subClassOf rdf:resource="#DevisedStructuredActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerMemoryCapacity">
        <rdfs:label xml:lang="en">computer memory capacity</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity. Each
            instance of #$ComputerMemoryCapacity is a measure (for the
            range of possible units of this measure, see the collection
            #$UnitOfComputerStorageCapacity) of the amount of
            information that can be stored on some computer. It includes
            measures of #$RAM, #$ROM and #$VirtualMemory. For making
            assertions of a particular #$Computer that it has a
            particular #$ComputerMemoryCapacity, see the predicates
            #$physicalMemorySize and #$virtualMemorySize.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerNetwork">
        <rdfs:label xml:lang="en">computer networks</rdfs:label>
        <rdfs:comment>A specialization of #$ConnectedPathSystem and
            #$ComputationalSystem. Each instance of this collection is a
            network used to link computational systems together to allow
            them to transfer information between each other. This is
            typically done using  packets  of information (see
            #$Packet-Network) exchanged according to certain
            well-defined protocols (see #$NetworkProtocol). A
            particularly large and notable instance of this collection
            is #$Internet. Networks may be structured according to
            certain specific topologies, the most notable of which are
            #$BusNetwork, #$StarNetwork and #$RingNetwork.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathArtifactSystem"/>
        <rdfs:subClassOf rdf:resource="#ComputationalSystem"/>
        <rdfs:subClassOf rdf:resource="#CustomarySystemOfLinks"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerPeripheralDevice">
        <rdfs:label xml:lang="en">computer peripheral devices</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerHardwareItem. Each
            instance of this collection is an electronic device intended
            to be used with (but not in) some computer. Examples include
            #$ComputerKeyboard and #$ComputerPrinter. An external floppy
            drive is a positive exemplar, but an internal floppy drive
            is a negative exemplar.  Notable specializations of this
            collection include #$ComputerInputDevice and #$ComputerOutputDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerHardwareItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerProgram-CW">
        <rdfs:label xml:lang="en">#$ComputerProgram-CW</rdfs:label>
        <rdfs:comment>A specialization of #$PropositionalConceptualWork,
            #$ComputerFile-CW and #$SoftwareObject-Individual. Each
            instance of #$ComputerProgram-CW is a deliberately created
            abstract object comprised of propositions that together
            constitute a list of instructions for computers to execute.
            Example instances include #$Emacs-TheProgram and
            #$LinuxKernel-TheProgram. Instances of this collection are
            distinct from computer code and from both running and
            installed programs. The instructions that comprise an
            instance of #$ComputerProgram-CW can be expressed as
            abstract computer code (see #$ComputerCode), but no list of
            instructions expressed in code constitutes an instance of
            #$ComputerProgram-CW.  Rather, the code in which an instance
            of #$ComputerProgram-CW is expressed constitutes an instance
            of #$AbstractInformationStructure that can be related to the
            program it expresses using the predicate #$programCode.
            More than one instance of #$ComputerCode can express the
            same instance of #$ComputerProgram-CW; for example,  a
            single instance of #$ComputerProgram-CW can be written in
            source code (see #$ComputerCode-Source) in several different
            computer languages, or it can be complied as a binary
            executable (see #$ComputerCode-Binary).  A physical
            instantiation of a #$ComputerProgram-CW is a
            #$ComputerProgramCopy which is an #$InformationBearingThing
            and is related to its #$ComputerProgram-CW by the predicate
            #$programCopies.  An instance of #$ComputerProgram-CW that
            is being executed is a #$ComputerProcessRunning, related to
            its #$ComputerProgram-CW by the predicate #$programOfProcess.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerFile-CW"/>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#SoftwareObject-Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerProgrammer">
        <rdfs:label xml:lang="en">#$ComputerProgrammer</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerUser.  Each instance
            of this collection is an agent (usually a #$Person) who
            programs computers in some capacity -- professional or
            otherwise. See also #$programsIn, #$ComputerLanguage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#ComputerUser"/>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerServer">
        <rdfs:label xml:lang="en">#$ComputerServer</rdfs:label>
        <rdfs:comment>A specialization of #$Computer. Each instance of
            this collection provides some service for other computers
            connected to it via a #$ComputerNetwork, by running
            instances of #$ServerProgram.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Computer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ComputerUser">
        <rdfs:label xml:lang="en">computer user</rdfs:label>
        <rdfs:comment>A specialization of #$Agent-Generic. Each instance
            of this collection is an agent that uses a #$Computer. This
            collection includes #$Persons, and also copies of certain
            computer programs that access other programs  (such as web
            spiders). #$ComputerUsers may be using their computers for
            personal, scientific, and/or institutional purposes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConcealingFromSight">
        <rdfs:label xml:lang="en">#$ConcealingFromSight</rdfs:label>
        <rdfs:comment>This is the collection of events in which an
            animal conceals an object from the line of sight of another
            animal.  For instance, a squirrel staying on the opposite
            side of a tree trunk, a robber  donning a mask, and a pirate
            burying a treasure.  Note that no animal needs to be looking
            at the hidden object at the moment that it is hidden for an
            instance of this collection to occur.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocatingInIntendedPosition"/>
        <rdfs:subClassOf rdf:resource="#DisappearingFromSight"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConceptualWork">
        <rdfs:label xml:lang="en">#$ConceptualWork</rdfs:label>
        <rdfs:comment>A specialization of #$DevisedPracticeOrWork
            (q.v.).  #$ConceptualWork is the collection of abstract
            works which either have associated
            #$AbstractInformationStructures (q.v.) or have versions that
            have associated #$AbstractInformationStructures.  Conceptual
            works or versions of conceptual works can be instantiated in
            instances of #$InformationBearingThing; every such
            instantiation of a conceptual work will also be an
            instantiation of an instance of
            #$AbstractInformationStructure.  Positive examples of
            instances of #$ConceptualWork include: #$MobyDickNovel (as
            opposed to any instance BC of #$BookCopy such that
            (#$instantiationOfWork #$MobyDickNovel BC)),
            Beethoven&apos;s 9th Symphony (as opposed to any performance
            of this symphony or any copy of its score). Negative
            examples include games (see #$DevisedStructuredActivity) and
            awards (see #$AwardPractice) -- these are instances of
            #$DevisedPracticeOrWork but not #$ConceptualWork because
            they do not have associated #$AbstractInformationStructures.
            For works with propositional content see the more specific
            collection, #$PropositionalConceptualWork.  </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DevisedPracticeOrWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Concern">
        <rdfs:label xml:lang="en">concern</rdfs:label>
        <rdfs:comment>Care for, preocupation, worry. Feeling of a person
            with his mind engrossed by something pertinent to himself or
            another, due to his responsibility, interest or affection</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Concrete">
        <rdfs:label xml:lang="en">concrete</rdfs:label>
        <rdfs:comment>#$Concrete is a specialization of
            #$ArtificialMaterial and #$BuildingMaterial.  Each instance
            of #$Concrete is a piece of an artificial mixture of cement,
            gravel, sand, and (during mixture, pouring, and forming)
            water.  Used widely in construction, pieces of concrete are
            formed into the desired shape while fluid and afterward
            hardened into a sturdy, durable material.  Instances of
            #$Concrete include bridge pilings, foundations of houses,
            and sidewalks.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BuildingMaterial"/>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConcreteNounProducingSuffix">
        <rdfs:label xml:lang="en">concrete noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Condensing">
        <rdfs:label xml:lang="en">condensation processes</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$Condensing, a gas is cooled to (or its pressure lowered
            to) the point where the relative humidity (or similar
            partial pressure measure if something other than water is
            condensing) is greater than 100%, changing part of a
            component of the gas from the #$Gaseous-StateOfMatter to the #$Liquid-StateOfMatter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnergyTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#HeatProductionProcess"/>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Condiment">
        <rdfs:label xml:lang="en">condiment</rdfs:label>
        <rdfs:comment>A specialization of #$FoodIngredientOnly.  Each
            instance of #$Condiment is a substance used to flavor or
            complement a foodstuff.  Some commonly used condiments are
            ketchup, mustard, relish, mayonaise, salt and pepper.
            Instances of #$Condiment are not eaten by themselves, but
            they are often served in their own dishes, so that the
            consumer can season his/her own food directly.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodIngredientOnly"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConductingMedium">
        <rdfs:label xml:lang="en">conducting mediums</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$PartiallyTangible.  Each instance of
            #$ConductingMedium is a partially tangible object that can
            serve as a conductor, e.g., for heat or electricity.
            Specializations include #$PowerLine, #$Superconductor, and #$ElectricalWire.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConeShape">
        <rdfs:label xml:lang="en">#$ConeShape</rdfs:label>
        <rdfs:comment>A specialization of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$ConeShape is a three-dimensional object with a circular
            base; the surface of the object is formed by lines joining
            each point of the periphery of the base to a common vertex.
            Examples include spatially localized objects (for example,
            the space occupied by a traffic cone can be approximated as
            an instance of #$ConeShape), and abstract objects, such as
            the cone generated by rotating a right triangle about one of
            its legs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Confidence">
        <rdfs:label xml:lang="en">certainties</rdfs:label>
        <rdfs:comment>The positive emotion felt when one is free  from
            doubt about an event or object from which the agent feeling
            #$Confidence expects positive contingencies.  For example,
            one might  say &apos;I feel confident that tomorrow it will
            not be rainy&apos;. Do not  confuse this with a personality
            disposition, e.g. &apos;Joe is a confident  person.&apos;
            (See #$PersonalityAttribute.)  This is a collection; for an
            explanation of a typical #$FeelingType, see #$Happiness.
            More specialized #$FeelingTypes include #$Grief,
            #$SelfConfidence, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Configuration">
        <rdfs:label xml:lang="en">configurations</rdfs:label>
        <rdfs:comment>A specialization of both #$StaticSituation and
            #$SpatialThing-Localized.  Each instance of #$Configuration
            is a static situation consisting of two or more
            #$PartiallyTangible things of certain types standing in a
            certain type of spatial relationship (or set of
            relationships).  This (set of) spatial relationship(s)
            characterizes  the #$Configuration&apos;s _type_ in the
            sense that any group of objects of the appropriate types
            standing in that relationship (or those relationships)
            correspond to a #$Configuration of that type; and each of
            these objects, in turn, is said to be  configured  (see
            #$objectConfigured) in the (individual) #$Configuration.
            For example, a #$KnotConfiguration might correspond to a
            particular intertwining of end-segments of two
            #$CordlikeObjects, or to the intertwining of several
            segments of a single #$CordlikeObject.  For configurations
            like the latter, whose characterizing relationship(s) hold
            between different parts of a single salient object, see the
            specialization #$ConfigurationOfComplexObject.  Note that a
            static situation involving an #$Agent might be a
            configuration, but only so long as it&apos;s just the
            agent&apos;s _spatial_ relationship(s) to other partially
            tangibles that matters (see e.g. #$WearingSomething); static
            situations in which an agent&apos;s agency or sentience is
            crucial, on the other hand, are not configurations (cf.
            #$AgentRelationship and #$InterAgentRelationship).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#StaticSituation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConfiguringEvent">
        <rdfs:label xml:lang="en">configuration events</rdfs:label>
        <rdfs:comment>The collection of events in which at least two
            spatially distinct objects become spatially configured
            relative to each other, producing an instance of #$Configuration.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConflictEvent">
        <rdfs:label xml:lang="en">#$ConflictEvent</rdfs:label>
        <rdfs:comment>A collection of all events in #$SocialOccurrence
            that can be called &apos;conflicts&apos;.  For each
            #$ConflictEvent CONF, there are at least two
            #$IntelligentAgents AGT1 and AGT2 such that
            (#$opponentsInConflict AGT1 AGT2 CONF) holds.  For each
            #$ConflictEvent CONF, there are subevents ACT1 and ACT2 of
            CONF, which are #$PurposefulActions, and there are GOAL1 and
            GOAL2 such that (#$purposeInEvent AGT1 ACT1 GOAL1),
            (#$purposeInEvent AGT2 ACT2 GOAL2), and GOAL1 and GOAL2 are
            in conflict, i.e., (#$and GOAL1 GOAL2) is not consistent (in
            the current #$Microtheory).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Confusion-Generic">
        <rdfs:label xml:lang="en">confusion - generic</rdfs:label>
        <rdfs:comment>Every element of this collection is a feeling of
            being confused or bewildered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="CongenitalCondition">
        <rdfs:label xml:lang="en">congenital conditions</rdfs:label>
        <rdfs:comment>A specialization of #$PhysiologicalCondition.
            Each instance of #$CongenitalCondition is a physiological
            condition that is present in an organism from the time of
            gestation (i.e. before birth). Instances of
            #$CongenitalCondition may be genetic conditions (see the
            specialization #$GeneticCondition) or they may be caused by
            the behavior of the mother during pregnancy (for example, as
            in a case of congenital heroin addiction).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConjunctAdverb">
        <rdfs:label xml:lang="en">#$ConjunctAdverb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            Adverbials which are neither disjuncts nor subjuncts.
            #$ConjunctAdverbs can generally act as sentential modifiers,
            however, they cannot appear as the focus of a cleft
            sentence. Semantically, these conjuncts generally indicate
            how the speaker views the connection between two linguistic units.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adverb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conjunction">
        <rdfs:label xml:lang="en">conjunction</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all coordinating and subordinating conjunctions</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConnectedPathSystem">
        <rdfs:label xml:lang="en">#$ConnectedPathSystem</rdfs:label>
        <rdfs:comment>A subcollection of #$PathSystem   instances of
            which are  connected , as opposed to being in   separate
            pieces.  For any distinct points A and B in a connected
            path system SYS, there is a path PATH in SYS that both A and
            B are   on.  That is, a path system SYS is an instance of
            #$ConnectedPathSystem if and only if, for any distinct
            points A and   B in SYS, there is a path PATH in SYS such
            that   (#$pathBetweenInSystem PATH A B SYS) holds.  Note
            that according to   this definition, a connected path system
            does not necessarily  contain a link -- a path system
            containing a single node and no   links will be a connected
            path system.  Note also that because of   the CycL treatment
            of paths (see #$pathInSystem) and nodes (see
            #$nodeInSystem), there is a path between every two points in
            SYS just in case there is a path between every two nodes in SYS.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="ConnectedPhysicalPathSystem">
        <rdfs:label xml:lang="en">connected physical path system</rdfs:label>
        <rdfs:comment>The collection of all (partially) tangible
            physical path systems which are connected.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#SpatialPathSystem"/>
    </owl:Class>
    <owl:Class rdf:ID="ConnectingTogether">
        <rdfs:label xml:lang="en">#$ConnectingTogether</rdfs:label>
        <rdfs:comment>A collection of events.  In a #$ConnectingTogether
            event, two or more tangible things get physically connected
            together (attached) by means of some sort of connector or
            fastener.  Some specializations of this include welding,
            buckling-up, using nailing, tying-up, etc.
            #$ConnectingTogether need not be a spec of
            #$Movement-TranslationEvent since two objects being
            connected may be already at rest with each other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#AttachmentEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Connection-Physical">
        <rdfs:label xml:lang="en">connection - physical</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleThing. Each
            instance of #$Connection-Physical is a group consisting of
            parts of at least two instances of #$PartiallyTangible that
            are in physical contact and which are connected in way such
            that they resist spatial separation. Examples include the
            connection between a table leg and a tabletop, two pieces of
            metal welded together, and a hinge joining a CD case cover
            to its backing (the last would be an instance of the more
            specialized collection #$Joint-Physical). While each
            #$Connection-Physical is an instance of
            #$SolidTangibleThing, and therefore has a determinate
            spatial boundary, there are many cases in which there are no
            easily describable boundaries between the parts of connected
            objects that are parts of the connection, and those which
            are not. For example, consider a connection between a table
            and one of its legs. If the leg is merely glued to the
            bottom surface of the table top, the exact spatial
            boundaries of the connection bewteen the parts is not clear.
            In contrast, the connection between a sewing needle and a
            thread attached by a knot to its eye is more clearly
            defined, because the boundaries of their connected parts are
            more easily determined. The group consisting of the knot and
            the eye of the needle determine the spatial extent of the connection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConnectionPredicate">
        <rdfs:label xml:lang="en">connection predicates</rdfs:label>
        <rdfs:comment>A #$PredicateCategory that is a  specialization of
            #$SpatialPredicate, #$TangibleObjectPredicate,
            #$CotemporalObjectsSlot, and #$InterExistingObjectPredicate
            (qq.v.).   Each instance of #$ConnectionPredicate is a
            specialization of  #$connectedTo (q.v.), and is used to
            describe a particular sort of  physical connection between
            pairs of objects.  Examples include  #$nailedTo,
            #$rivetedTo, #$connectedTo-Rigidly,
            #$rotationallyConnectedTo, #$hangsFrom, and #$in-Embedded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalFeatureDescribingPredicate"/>
        <rdfs:subClassOf rdf:resource="#SpatialPredicate"/>
        <rdfs:subClassOf rdf:resource="#CotemporalObjectsSlot"/>
        <rdfs:subClassOf rdf:resource="#TangibleObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#InterExistingObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Connector">
        <rdfs:label xml:lang="en">#$Connector</rdfs:label>
        <rdfs:comment>A specialization of #$NonPoweredDevice.  Each
            instance of #$Connector is a device which connects two
            objects.  An instance of #$Connector may be a part
            incorporated into one or both of the objects connected, or
            it may be a totally separate device.  Notable
            specializations of #$Connector include #$Staple, #$Pin, and #$Nail.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Consonant">
        <rdfs:label xml:lang="en">consonant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Phoneme"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConstativeIllocutionaryForce">
        <rdfs:label xml:lang="en">constative illocutionary forces</rdfs:label>
        <rdfs:comment>A collection of illocutionary forces.  If a
            communication act has an instance of this collection as an
            attribute, the #$senderOfInfo expresses a belief and intends
            that the #$communicationTarget or the
            #$recipientOfInfo-Intended hold a like belief.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="Constructing">
        <rdfs:label xml:lang="en">construction events</rdfs:label>
        <rdfs:comment>A specialization of #$MakingSomething. In each
            instance of this collection, one or more
            #$ConstructionArtifacts, such as a house or a road, are made
            (or incrementally enlarged or remodeled).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#MakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConstructionArtifact">
        <rdfs:label xml:lang="en">structures</rdfs:label>
        <rdfs:comment>A specialization of #$Artifact.  Each instance of
            #$ConstructionArtifact is a structure designed and built by
            humans.  This collection includes buildings and parts of
            buildings, as well as things like dams, railroad lines, and
            roads.  Examples include the #$RomanColiseum, the
            #$ArcDeTriomphe, #$HooverDam, the #$EmpireStateBuilding, and
            the #$HollywoodBowl.  Note that the collection
            #$ConstructionArtifact includes some instances (such as
            instances of the specialization #$MannedSpacecraft) that are
            not tied to a fixed location, as well as some instances
            (such as instances of the specialization #$BridgeSpan) that,
            although tied to a fixed location, are not free-standing
            artifacts.  #$FixedStructure, an important specialization of
            #$ConstructionArtifact, is the collection of free-standing
            construction artifacts that are tied to a fixed location.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConstructionCompany">
        <rdfs:label xml:lang="en">construction companies</rdfs:label>
        <rdfs:comment>A specialization of both
            #$CommercialServiceOrganization and
            #$PrivateSectorOrganization. Each instance of
            #$ConstructionCompany is an organization whose main function
            (see the constant #$MainFunction) is constructing or
            remodeling buildings, houses, dams, bridges, or other
            construction artifacts (see the collection #$ConstructionArtifact).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#ConstructionRepairOrMaintenanceOrganization"/>
        <rdfs:subClassOf rdf:resource="#PrivateSectorOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConstructionRepairOrMaintenanceOrganization">
        <rdfs:label xml:lang="en">construction repair or maintenance companies</rdfs:label>
        <rdfs:comment>#$ConstructionRepairOrMaintenanceOrganization is a
            specialization of #$Organization.  Each instance of
            #$ConstructionRepairOrMaintenanceOrganization is an
            #$Organization that is primarily engaged in the construction
            industry or the business of repairing and maintaining
            physical structures or whose activities focus on that
            industry.  Examples of specializations of
            #$ConstructionRepairOrMaintenanceOrganization include
            #$PestControlCompany and #$BuildingContractor-Organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConstructionVehicle">
        <rdfs:label xml:lang="en">construction vehicles</rdfs:label>
        <rdfs:comment>#$ConstructionVehicle is a specialization of
            #$LandTransportationDevice, #$TransportationDevice-Vehicle,
            and #$InternalCombustionPoweredDevice.  Each instance of
            #$ConstructionVehicle is a  land vehicle that is used to
            make roads, dams, buildings etc.  They also may be either a
            #$WheeledTransportationDevice or a #$TrackedVehicle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#InternalCombustionPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Consultant">
        <rdfs:label xml:lang="en">#$Consultant</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$Consultant is a person who works with some
            business in a consulting capacity.  Consultants can be self
            employed, or they can work for a consulting company.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#BusinessPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConsumableProduct">
        <rdfs:label xml:lang="en">consumable products</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangibleProduct.
            Each instance of #$ConsumableProduct is a product of which
            any portion can be used only once.  A portion of a
            #$ConsumableProduct is `used up&apos;, i.e., destroyed or
            transformed into an unusable or waste form, during normal
            use.  Note: `consumable&apos; here does not necessarily mean
            consumed by mouth; the consumption may be any use of the product.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConsumingFoodOrDrink">
        <rdfs:label xml:lang="en">events in which food or drink is consumed</rdfs:label>
        <rdfs:comment>A specialization of both #$Ingesting and
            #$AnimalActivity.  Each instance of #$ConsumingFoodOrDrink
            is an event in which an animal ingests some portion of food
            or drink through its mouth.  Notable specializations of
            #$ConsumingFoodOrDrink are #$EatingEvent and #$DrinkingEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Ingesting"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContactInfoString">
        <rdfs:label xml:lang="en">contact information</rdfs:label>
        <rdfs:comment>A specialization of #$IDString.  Each instance of
            #$ContactInfoString is a character string that conveys
            information about how to contact an agent or a place (see
            #$ContactInformation).  Specializations include
            #$PostalCode, #$DomainName, and #$PhoneNumber.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="ContactLocation">
        <rdfs:label xml:lang="en">contact locations</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.   Each
            instance of #$ContactLocation is a location at which some
            particular agent (e.g. a person or a corporation) may be
            contacted by any of several means, for any of several
            purposes.  #$ContactLocations include any place to which one
            may direct one or more of the following: letters, packages,
            phone calls or voice messages, bills, email, faxes, pages,
            subpoenas.  Contact locations must be fairly specific --
            e.g. my house or my office, but not simply my city of residence.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContactLocationType">
        <rdfs:label xml:lang="en">#$ContactLocationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ContactLocationType is a collection of places  at which a
            particular agent may be contacted. Instances of
            #$ContactLocationType may be characterized in several
            different ways, including the following: by method of
            contact (e.g., #$VoicePhoneLocation, #$FaxLocation); by
            purpose of contact (e.g., #$BillingLocation,
            #$ShippingLocation, #$EmergencyContact); by the agent&apos;s
            relationship to those places (e.g., #$HumanResidence,
            #$Workplace).  Note that a particular place may be an
            instance of two or more instances of #$ContactLocationType,
            since, for example, one person&apos;s home might be
            another&apos;s vacation location.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="ContactPointSubOrganization">
        <rdfs:label xml:lang="en">customer contact points</rdfs:label>
        <rdfs:comment>#$ContactPointSubOrganization is a specialization
            of #$ServiceOrganization.  Each instance of
            #$ContactPointSubOrganization is an organization that is a
            #$subOrganizations of another #$Organization and is an
            important (within the larger #$Organization) contact point
            between the public and that #$Organization or between the
            #$Organization&apos;s #$clients and the #$Organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Container">
        <rdfs:label xml:lang="en">#$Container</rdfs:label>
        <rdfs:comment>The collection of tangible objects whose primary
            function (see #$primaryFunction) is to contain something
            (see #$ContainingSomething).  Note that just about anything
            can serve as a container without actually being a container.
            For example the palm of your hand when cupped may contain
            some marbles.  But because your palm is not always
            configured as and does not function primarily as a
            container, it would not be represented as a #$Container but
            would rather stand in a particular *relation* to the marbles
            via some containment predicate.  To relate contents to the
            thing containing them (whether or not that thing is a
            #$Container) use one or more specific predicates indicating
            the type of containment present (#$in-ContOpen,
            #$in-ContClosed, #$in-ContFullOf, #$in-Held, #$packagedIn,
            #$physicallyContains, #$protectiveContains, ...).  If the
            type of containment is not known use the general predicate #$in-ContGeneric.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ContainerShapedObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Container-PressureBarrier">
        <rdfs:label xml:lang="en">pressure barrier containers</rdfs:label>
        <rdfs:comment>A container which when closed does not necessarily
            have the same ambient pressure as that which surrounds it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Container"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContainerProduct">
        <rdfs:label xml:lang="en">container products</rdfs:label>
        <rdfs:comment>#$ContainerProduct is a specialization of
            #$Container, #$PhysicalDevice, and #$Artifact-NonAgentive.
            Each instance of #$ContainerProduct is an object whose
            primary function (or one of whose main functions) is to be a
            container.  Instances of #$ContainerProduct include storage
            containers for books, office records, food, clothing, tools,
            and materials; containers for transporting the same;
            passenger compartments of various kinds of vehicles; and
            artificial constructs for housing humans and animals.
            Specializations include #$Crib, #$Sandbox, #$OfficeSpace,
            and #$Coffin.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Container"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContainerShapedObject">
        <rdfs:label xml:lang="en">container-shaped objects</rdfs:label>
        <rdfs:comment>The collection of #$CavityOrContainers which have
            a distinct or clearly defined outside surface (see
            #$ClearlyDefinedEntireExternalSurface).  Unlike instances of
            the more specialized collection #$Container, instances of
            #$ContainerShapedObject do not necessarily contain things as
            their main function.  Examples of #$ContainerShapedObject
            include the cap of an #$Acorn, the flower of a
            #$Tulip-Plant, a #$RadioTelescope dish, or a table tennis
            ball. Negative examples include a #$Cave.  Although a cave
            is a #$CavityOrContainer it does not have clearly defined
            outside walls. However, the existence of clearly defined
            *inside* walls entails that any #$Cave is a
            #$CavityWithWalls (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#CavityOrContainer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContaminationEvent">
        <rdfs:label xml:lang="en">contamination events</rdfs:label>
        <rdfs:comment>A specialization of #$IntrinsicStateChangeEvent.
            In each instance of #$ContaminationEvent, some instance of
            #$PartiallyTangible comes to contain a contaminant, and this
            state of affairs is considered undesirable from the point of
            view of some agent (see the related predicate
            #$unwantedMatter).  Specializations of #$ContaminationEvent
            include #$InfectionTransmissionEvent and #$PollutionProcess.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#SomethingAppearingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Contempt">
        <rdfs:label xml:lang="en">#$Contempt</rdfs:label>
        <rdfs:comment>Emotion characterized by vehement condemnation of
            its object as being low, vile, feeble, or ignominious.  This
            is a #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingTypes than
            #$Contempt are #$Hate, #$Abhorrence, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Disapproval"/>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
    </owl:Class>
    <owl:Class rdf:ID="Contemptuous">
        <rdfs:label xml:lang="en">agents who feels contempt</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            contemptuous. Use this constant with a
            #$GenericValueFunction to denote a collection of agents that
            are in this emotional state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Contentment">
        <rdfs:label xml:lang="en">contentment</rdfs:label>
        <rdfs:comment>Feeling of satisfaction with one&apos;s
            possessions, status, or situation. Appeasement to the point
            where one is not disquieted or disturbed by a desire for
            what s/he does not have</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Satisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="Continent">
        <rdfs:label xml:lang="en">continents</rdfs:label>
        <rdfs:comment>A specialization of #$LandTopographicalFeature.
            The instances of #$Continent on the #$PlanetEarth are the
            six traditional main land masses on the surface of the earth
            (plus the two #$geographicalSubRegions of Eurasia, Europe
            and Asia).  The current instances are: #$ContinentOfAfrica,
            #$ContinentOfAntarctica, #$ContinentOfAsia,
            #$ContinentOfAustralia, #$ContinentOfEurasia,
            #$ContinentOfEurope, #$ContinentOfNorthAmerica,
            #$ContinentOfSouthAmerica.  Former instances of this
            collection include Pangaea and the two continents it broke
            up into, Gondwanaland and Laurasia (all of which are
            instances of #$TrueContinent (q.v.)).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContinuousPhysicalContactEvent">
        <rdfs:label xml:lang="en">#$ContinuousPhysicalContactEvent</rdfs:label>
        <rdfs:comment>A collection of physical contact events in which
            two or more objects are in physical contact (see #$touches)
            throughout the event&apos;s entire duration.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContinuousPhysicalContactSituation"/>
        <rdfs:subClassOf rdf:resource="#PhysicalContactEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContinuousPhysicalContactSituation">
        <rdfs:label xml:lang="en">situations involving continuous
            physical contact</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalContactSituation
            each instance of which involves two or more tangible objects
            touching (see #$touches) continuously throughout the entire
            duration of the situation.  Every #$PhysicalContactSituation
            has a #$ContinuousPhysicalContactSituation as a (proper or
            improper)  sub-situation (see #$subSituations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalContactSituation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ContractNegotiation">
        <rdfs:label xml:lang="en">contract negotiations</rdfs:label>
        <rdfs:comment>The collection of negotiations intended to lead to
            the formation of a contract between the participants (or the
            parties they represent in the negotiations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Negotiating"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ControlDevice">
        <rdfs:label xml:lang="en">control devices</rdfs:label>
        <rdfs:comment>#$ControlDevice is a specialization of
            #$ControlStructure-Physical and #$PhysicalDevice.  Each
            instance of #$ControlDevice is a device whose
            #$primaryFunction is to control the
            behavior/functioning/properties of another thing (usually
            another instance of #$PhysicalDevice).  Obvious instances of
            #$ControlDevice include: the remote control for one&apos;s
            TV (an instance of #$RemoteControlDevice), the brake pedal
            on one&apos;s car (an instance of #$Pedal-ControlDevice),
            the light switch on one&apos;s bedroom wall (an instance of
            #$ElectricalSwitch); a less obvious instance of
            #$ControlDevice is #$HooverDam (an instance of #$Dam).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControlStructure-Physical"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ControlStructure-Physical">
        <rdfs:label xml:lang="en">physical control structure</rdfs:label>
        <rdfs:comment>The collection of all physical control structures.
            An instance of #$ControlStructure-Physical is a physical
            object (#$PartiallyTangible) with the #$behaviorCapable of
            controling the behavior/functioning/properties of another
            physical object.  Instances of #$ControlDevice include
            manufactured #$ControlDevices and biological control structures.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ControllableAutonomousActionType">
        <rdfs:label xml:lang="en">#$ControllableAutonomousActionType</rdfs:label>
        <rdfs:comment>The collection of all types of actions that are
            #$doneBy an #$Animal which are often done automatically, but
            could also be intentionally #$performedBy the animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DefaultDisjointScriptType"/>
    </owl:Class>
    <owl:Class rdf:ID="ControlledLand">
        <rdfs:label xml:lang="en">#$ControlledLand</rdfs:label>
        <rdfs:comment>A specialization of #$GeopoliticalEntity.  Each
            instance of #$ControlledLand is a geopolitical entity that
            is at least partially controlled by some other instance of
            #$GeopoliticalEntity.  Furthermore, the instance of
            #$ControlledLand is not a geopolitical sub-division (see the
            predicate #$geopoliticalSubdivisions) of the power that
            controls it.  Instances of #$GeopoliticalEntity include
            #$PuertoRico, #$Bermuda, #$Guadeloupe-TheDependency, #$Tibet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ControllingAPhysicalDevice">
        <rdfs:label xml:lang="en">controls a physical device</rdfs:label>
        <rdfs:comment>This is the subcollection of actions of
            #$ControllingSomething in which the #$objectControlled is a #$PhysicalDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ControllingSomething">
        <rdfs:label xml:lang="en">#$ControllingSomething</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulPhysicalAction
            (q.v.).  Each instance  of #$ControllingSomething is a
            purposeful physical action in which an  agent intentionally
            controls an object (i.e. instance of  #$SomethingExisting).
            It is not necessary that the agent touch the  object being
            controlled (see #$objectControlled), only that s/he
            exercise control over some its movements, functioning, or
            actions.  Specializations of #$ControllingSomething include
            #$GuidingAMovingObject (some instances of which involve a
            #$RemoteControlDevice), #$HandlingAnObject, #$Braking,
            #$SteeringADeviceByHand,  #$PlayingAMusicalInstrument,
            #$CuttingFabric, #$CarryingWhileLocomoting,  and
            #$FlushingAToilet.  When a #$ControlDevice (q.v.) is being
            used  by an agent for its primary function, a
            #$ControllingSomething event is  typically taking place.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConventionalClassificationType">
        <rdfs:label xml:lang="en">conventional classification types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ConventionalClassificationType is a collection that
            corresponds to a category in some agreed-upon or
            conventional classification system (see
            #$ClassificationSystem) used by people.  In such systems, a
            change or reclassification is possible by a decision of an
            authority, or by a changed social agreement or custom,
            without changing the intrinsic natures of the actual objects
            in the category.   #$ConventionalClassificationTypes include
            categories in biological taxonomy, standard classifications
            in data dictionaries and thesauri, cultural taboo classes,
            military doctrinal classes, and named calendar intervals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="ConventionalWeapon">
        <rdfs:label xml:lang="en">conventional weapons</rdfs:label>
        <rdfs:comment>#$ConventionalWeapon is a specialization of
            #$Weapon.  Each instance of #$ConventionalWeapon is a weapon
            which is not classified as nuclear weapons, biological
            weapons, or chemical weapons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Weapon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConventionallyClassifiedDisjointTimeIntervalType">
        <rdfs:label xml:lang="en">#$ConventionallyClassifiedDisjointTimeIntervalType</rdfs:label>
        <rdfs:comment>Each instance of
            #$ConventionallyClassifiedDisjointTimeIntervalType   is a
            collection of `solid&apos; intervals, which is
            conventionally named (such as   #$Friday) and has its
            instances scattered over time in the sense that they   are
            disjoint with each other and usually have gaps between them.
            This is the   intersection of current (3/6/00)
            #$ConventionalClassificationType and   #$TemporallyDisjointTemporalObjectType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Conversation">
        <rdfs:label xml:lang="en">conversations</rdfs:label>
        <rdfs:comment>Every #$Conversation includes at least two
            #$CommunicationAct-Single as #$subEvents, with the
            #$senderOfInfo in one being the #$recipientOfInfo in the other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiDirectionalCommunication"/>
        <rdfs:subClassOf rdf:resource="#SpokenCommunicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conversion-WordFormationProcess">
        <rdfs:label xml:lang="en">conversion - word formation process</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConvexTangibleObject">
        <rdfs:label xml:lang="en">convex tangible object</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$PartiallyTangible that are convex; i.e., have no
            significant concave surfaces, cavities or crevices (the size
            of allowable minor concavities may depend on the context).
            An instance of #$ConvexTangibleObject occupies about the
            same space as its convex hull; see #$ConvexHullFn and
            #$ConvexHullSpaceFn.  A solid physical sphere or cube is an
            instance of #$ConvexTangibleObject, but a cup or doughnut
            cannot be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conveyance">
        <rdfs:label xml:lang="en">#$Conveyance</rdfs:label>
        <rdfs:comment>A collection of solid tangible objects each
            instance of which is used for moving partially tangible
            things.  A #$Conveyance  could be a car, ship, plane, or
            other vehicle for transporting  people; it could be a
            conveyor belt or a grocery bag for moving  goods; it could
            be a gun, a bow, or a cannon for launching  projectiles.
            Notable specializations include #$TransportationDevice,
            whose instances actually move along with the things they
            transport,  and #$Conveyance-Stationary, whose instances
            remain stationary  while moving other things.  Note that not
            all conveyances are  artifacts, as (e.g.) horses and rivers
            can be used to convey things.  See #$Conveying-Generic,
            #$TransportationEvent, and  #$Conveying-Stationary for the
            different kinds of conveying  events.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conveyance-Stationary">
        <rdfs:label xml:lang="en">stationary conveyances</rdfs:label>
        <rdfs:comment>The subcollection of #$Conveyance that contains
            object that are intended for moving partially tangible
            things while remaining stationary. Positive examples are
            conveyor belts or guns. A borderline case is a #$River that
            is used to transport logs; that river is a
            #$Conveyance-Stationary because the river as a whole does
            not change its location (only parts of it; the water). </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conveyance"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conveying-Generic">
        <rdfs:label xml:lang="en">conveying events</rdfs:label>
        <rdfs:comment>A specialization of both
            #$CausingAnotherObjectsTranslationalMotion and
            #$Translation-SingleTrajectory.  In each instance of
            #$Conveying-Generic, some object (see #$conveyor-Generic)
            enables or facilitates the conveyance of another object, or
            objects, or stuff (see #$transportees).  The conveyor itself
            might or might not also be undergoing translational motion
            (see #$objectTranslating) during the event.  See also the
            various specializations of #$Conveying-Generic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Conveying-Stationary">
        <rdfs:label xml:lang="en">events involving a stationary conveyor</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$Conveying-Stationary            is an event in which one
            object (in the role of            #$conveyor-Stationary)
            aids in the translational movement of            another
            (having the role of #$transportees).  Note that by
            definition the  #$conveyor-Stationary does not move along
            with the #$transportees.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conveying-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ConveyingMaterials">
        <rdfs:label xml:lang="en">transportation of materials</rdfs:label>
        <rdfs:comment>Moving some kind of material from one point to
            another, where the goal is to transport the goods. Different
            from just mixing stuff or putting stuff with other stuff.
            This collection of events remains agnostic as to whether the
            #$conveyor-Generic remains stationary (transport through a
            #$Pipeline) or moves along with the #$transportees
            (transport in a #$Truck). </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conveying-Generic"/>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CookingFood">
        <rdfs:label xml:lang="en">#$CookingFood</rdfs:label>
        <rdfs:comment>A specialization of #$PreparingFoodItem and
            #$HeatingProcess.  Each instance of #$CookingFood is an
            event in which some item of #$Food (q.v.) is prepared by
            heating it.  Typically, the foodstuff is heated until it
            reaches a certain temperature over some period of time;
            during the heating, chemical and/or physical changes occur
            which are supposed to make the foodstuff healthier or
            tastier (or, in some cases, ethically acceptable).  A
            #$CookingFood event may last from a few minutes (e.g.,
            #$SteamingFood (vegetables), #$MakingToast) to several hours
            (e.g., #$RoastingFood).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PreparingFoodItem"/>
        <rdfs:subClassOf rdf:resource="#HeatingProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CoolingProcess">
        <rdfs:label xml:lang="en">cooling processes</rdfs:label>
        <rdfs:comment>A specialization of #$TemperatureChangingProcess.
            Each instance of #$CoolingProcess is an event in which the
            temperature of some object (related to the instance of
            #$CoolingProcess by #$objectOfStateChange) is lowered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemperatureChangingProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CooperationEvent">
        <rdfs:label xml:lang="en">collaborations</rdfs:label>
        <rdfs:comment>A collection of all instances of
            #$SocialOccurrence that can be called
            &apos;cooperations&apos;.  For each #$CooperationEvent COOP
            the following hold: (i) there are at least two
            #$IntelligentAgents AGT1 and AGT2 such that
            (#$partnersInCooperation AGT1 AGT2 COOP), (ii) AGT1 and AGT2
            share a GOAL, (iii) there are subevents ACT1 and ACT2 of
            COOP, both of which are #$PurposefulActions, such that ACT1
            is performed by AGT1 with the intent of furthering GOAL and
            ACT2 is performed by AGT2 with the intent of furthering
            GOAL, (iv) AGT1 believes that ACT2 furthers GOAL and AGT2
            believes that ACT1 furthers GOAL, and (v) the fact ACT1 and
            ACT2 both further GOAL is not an unexpected coincidence: it
            was a part of AGT1&apos;s expectation that an act like (i.e.
            of the same kind as) ACT2, performed by AGT2, would further
            GOAL; and it was a part of AGT2&apos;s expectation that an
            act like ACT1, performed by AGT1, would further GOAL.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CoordinatingConjunction">
        <rdfs:label xml:lang="en">coordinating conjunction</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all coordinating conjunctions. Typically,
            coordinating conjunctions can appear in phrases with any
            number of conjuncts. Coordinating conjunctions can link
            terms of any functional category. Example: &apos;and&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conjunction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CopyingAComputerFile">
        <rdfs:label xml:lang="en">file transfers</rdfs:label>
        <rdfs:comment>A specialization of #$AccessingAFile-ReadOnly,
            #$CreatingAFile and #$IBTCopying. In each instance of this
            collection a computer reads a file and creates a new file
            with the same contents. Immediately after the event, the
            original file and the new file will contain exactly the same
            information. The two files may be stored on the same or
            different storage media. Notable specializations of this
            collection include #$UploadingAFile and #$DownloadingAFile.
            See also #$MovingAComputerFile.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTCopying"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferPhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CordlikeObject">
        <rdfs:label xml:lang="en">#$CordlikeObject</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$CordlikeObject is a partially tangible
            non-fluid object (so #$CordlikeObject is disjoint with
            #$FluidTangibleThing) whose length is significantly greater
            than either its height or width. Moreover, each instance of
            #$CordlikeObject has a high degree of flexibility. Notable
            specializations of #$CordlikeObject include the collections
            #$Nerve, #$Tape, and #$Cable.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CoreConstant">
        <rdfs:label xml:lang="en">core constant</rdfs:label>
        <rdfs:comment>The collection of constants that form a useful
            &apos;core&apos; ontology for CycL which should be assumed
            by any ontology which would want to be maximally conformant
            with the Cyc inference engine (including the Cyc KB itself).
            These are constants (such as #$SymmetricBinaryPredicate and
            #$February) which have sufficiently useful support in the
            Cyc inference engine that they are strongly preferred for
            ontology building purposes in Cyc.  See also #$CoreImplementationConstant.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CoreUnionConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="CoreImplementationConstant">
        <rdfs:label xml:lang="en">core implementation constant</rdfs:label>
        <rdfs:comment>The collection of constants from the
            &apos;core&apos; ontology for CycL that are specific to the
            Cyc implementation.  Any ontology built using CycL intended
            to have Cyc as its implementation (such as the Cyc KB
            itself) should use these constants to maximally leverage the
            implementation. See also #$CoreConstant.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#ImplementationConstant"/>
        <rdfs:subClassOf rdf:resource="#CoreUnionConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="CoreUnionConstant">
        <rdfs:label xml:lang="en">core union constant</rdfs:label>
        <rdfs:comment>The collection of constants that constitute the
            useful &apos;core&apos; ontology for CycL in Cyc.  It is the
            union of those specific to the CycL language (the elements
            of #$CoreConstant) and those specific to the Cyc
            implementation (the elements of #$CoreImplementationConstant).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="Corner-2d">
        <rdfs:label xml:lang="en">two-dimensional corners</rdfs:label>
        <rdfs:comment>The collection of all regions wherein two linear
            edges of a two dimensional or sheet-shaped object (i.e.,
            considered in this context to be sheet shaped) meet to form
            an angle of substantially less than 180 degrees.  Polygons
            have at least three corners each.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Corner-2or3d"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Corner-2or3d">
        <rdfs:label xml:lang="en">corners</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$Corner-2or3d is a region centered around a
            point where two edges of a sheet-like object meet at an
            angle, or where three or more surfaces (together with three
            or more solid edges dividing them) meet at one place forming
            a solid angle.    Instances of #$Corner-2or3d are either
            #$Convex or #$Concave with respect to some perspective.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Corner-3d">
        <rdfs:label xml:lang="en">three-dimensional corners</rdfs:label>
        <rdfs:comment>The collection of all regions where three or more
            surfaces of an object (which is considered three dimensional
            in current context), and three or more #$EdgeOnObjects,
            meet.  This includes corners of boxes, the tops of pyramids,
            etc.  Each #$Corner-3d includes some solid angle of part of
            the object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Corner-2or3d"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CorporateOfficer">
        <rdfs:label xml:lang="en">officers (types of things)</rdfs:label>
        <rdfs:comment>A subcollection of #$Administrator.  Each instance
            of #$CorporateOfficer is a person who is officially
            recognized as an officer of a corporation.  Common types of
            #$CorporateOfficer include #$President-CorporateOfficer,
            #$VicePresident-CorporateOfficer, and #$ChiefFinancialOfficer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Administrator"/>
        <rdfs:subClassOf rdf:resource="#OrganizationRepresentative"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CostBreakdownSlot">
        <rdfs:label xml:lang="en">cost breakdown slot</rdfs:label>
        <rdfs:comment>A specialization of #$BinaryPredicate. Each
            instance of #$CostBreakdownSlot is a binary predicate used
            to describe some pecuniary aspect of an instance of
            #$Buying. The first argument to every #$CostBreakdownSlot is
            constrained to be an instance of #$Buying and the second
            argument is constrained to be an instance of
            #$MonetaryValue. Instances of #$CostBreakdownSlot include
            #$moneyTransferred, #$discount, #$salesTax, and #$salesCommission.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CotemporalObjectsSlot">
        <rdfs:label xml:lang="en">#$CotemporalObjectsSlot</rdfs:label>
        <rdfs:comment>#$CotemporalObjectsSlot is the collection of
            #$BinaryPredicates PRED such that whenever a formula without
            free variables (PRED ARG1 ARG2) is true at a moment in time,
            it will be the case that the moment belongs to the temporal
            extent of both ARG1 and ARG2 (i.e., that ARG1 and ARG2 are
            #$TemporalThings which temporally subsume the moment).  For
            example, #$owns is a #$CotemporalObjectsSlot.  So from the
            assertion (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), we
            can conclude that Nick and Spot were alive throughout
            (temporally subsume) 1992.  In contrast, consider the
            predicate #$awareOf, which is not a #$CotemporalObjectsSlot.
            The assertion (#$holdsIn (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)) doesn&apos;t justify the conclusion
            (#$temporallySubsumes #$GeorgeWashington (#$YearFn 1992)).
            In general (with the qualifications indicated below), a
            closed assertion (#$holdsIn TIME (PRED ARG1 ARG2)), with
            PRED a #$CotemporalObjectsSlot, licenses the conclusions
            (#$temporallySubsumes ARG1 TIME) and (#$temporallySubsumes
            ARG2 TIME).  And a closed assertion (#$holdsSometimeDuring
            TIME (PRED ARG1 ARG2)) licenses the conclusions
            (#$temporallyIntersects ARG1 TIME) and
            (#$temporallyIntersects ARG2 TIME).  Although what
            constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  In
            particular, in the case of most microtheories, one
            doesn&apos;t have to worry about the possibility of gaps in
            the fabric of time between moments.  (Such gaps would
            undermine the conclusions above about temporal subsumption.)
            Another qualification is that ARG1 and ARG2 are not
            #$IndexicalFirstOrderTerms; in practice, they almost never
            are.  See also the generalization of
            #$CotemporalObjectsSlot, #$CotemporalPredicate, and the
            predicate #$contemporaryInArg.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CotemporalPredicate">
        <rdfs:label xml:lang="en">cotemporal predicates</rdfs:label>
        <rdfs:comment>#$CotemporalPredicate is the collection of
            #$Predicates PRED such that whenever a formula (PRED ARG1
            ... ARGN) is true at a moment in time, it will be the case
            that the moment belongs to the temporal extent of each ARG
            among ARG1, ..., ARGN that is an instance of #$TemporalThing
            (so that each such ARG temporally subsumes the moment).  For
            example, #$owns is a #$CotemporalPredicate.  So from the
            assertion (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), we
            can conclude (given that Nick and Spot are #$TemporalThings)
            that Nick and Spot were alive throughout (temporally
            subsume) 1992.  In contrast, consider the predicate
            #$awareOf, which is not a #$CotemporalPredicate.  The
            assertion (#$holdsIn (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)) doesn&apos;t justify the conclusion
            (#$temporallySubsumes #$GeorgeWashington (#$YearFn 1992)).
            In general (with the qualifications indicated below), an
            assertion (#$holdsIn TIME (PRED ARG1 ... ARGN)), with PRED a
            #$CotemporalPredicate and ARG among ARG1, ..., ARGN an
            instance of #$TemporalThing, licenses the conclusion
            (#$temporallySubsumes ARG TIME).  Moreover, an assertion
            (#$holdsSometimeDuring TIME (PRED ARG1 ... ARGN)) licenses
            the conclusion (#$temporallyIntersects ARG TIME).  Although
            what constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  In
            particular, in the case of most microtheories, one
            doesn&apos;t have to worry about the possibility of gaps in
            the fabric of time between moments (note that the presence
            of such gaps would undermine the conclusion above about
            temporal subsumption).  Another qualification is that ARG is
            not an #$IndexicalFirstOrderTerm; in practice, it almost
            never is.  In order to bar predicates that would otherwise
            trivially qualify as instances of #$CotemporalPredicate, the
            type-constraint on at least one of the argument-places of a
            #$CotemporalPredicate PRED must be non-disjoint with
            #$TemporalThing (or, more generally, the collection of
            things satisfying all of the #$argIsa and #$argGenl
            constraints on at least one of the argument-places of PRED
            must be non-disjoint with #$TemporalThing).  See also the
            specialization of #$CotemporalPredicate,
            #$CotemporalObjectsSlot, and the predicate #$contemporaryInArg.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CountNoun">
        <rdfs:label xml:lang="en">#$CountNoun</rdfs:label>
        <rdfs:comment>The collection of all simple nouns, also called
            common nouns. Simple nouns can typically be preceded by a
            determiner, and in English they inflect for number. These
            nouns, unlike mass nouns, are countable. Example: &apos;dog&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#CountNoun-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountNoun-Feminine">
        <rdfs:label xml:lang="en">feminine count nouns</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CountNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountNoun-Generic">
        <rdfs:label xml:lang="en">#$CountNoun-Generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all count nouns. This collection also includes
            proper count nouns like &apos;Rolodex&apos;, agentive count
            nouns like &apos;teacher&apos;, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountNoun-Masculine">
        <rdfs:label xml:lang="en">masculine count nouns</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CountNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountNoun-Neuter">
        <rdfs:label xml:lang="en">neuter count nouns</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CountNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Counting">
        <rdfs:label xml:lang="en">numbering</rdfs:label>
        <rdfs:comment>A specialization of #$Evaluating. Each instance of
            this collection is an event in which at least one agent
            evaluates the numeric quantity of some (reasonably discrete)
            group of things by assigning numbers to each thing in turn.
            The items counted may not necessarily be tangible objects
            (e.g,  close your eyes and count to 10 , a mathematician
            counting the number of primes between 1 and 100). See also #$CountingDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Series"/>
        <rdfs:subClassOf rdf:resource="#Evaluating"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
    </owl:Class>
    <owl:Class rdf:ID="Country">
        <rdfs:label xml:lang="en">#$Country</rdfs:label>
        <rdfs:comment>A specialization of #$GeopoliticalEntity.  Each
            instance of #$Country is a nation-state having its own
            territory, population, and government, whether or not it is
            fully independent.  For example, #$Scotland is an instance
            of #$Country, even though it is a part of the
            #$UnitedKingdomOfGreatBritainAndNorthernIreland.  See also
            the important specialization #$IndependentCountry.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountrySubsidiary">
        <rdfs:label xml:lang="en">districts</rdfs:label>
        <rdfs:comment>A specialization of #$GeopoliticalEntity.  Each
            instance of #$CountrySubsidiary is a political region that
            is a direct subsidiary of some country.  This collection
            includes states, provinces, territories, and some special
            districts such as Washington, D.C.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
    </owl:Class>
    <owl:Class rdf:ID="County">
        <rdfs:label xml:lang="en">counties</rdfs:label>
        <rdfs:comment>A specialization of #$GeopoliticalEntity.  Each
            instance of #$County is a geopolitical region having an area
            typically larger than that of a #$City, but smaller than
            that of a #$State-Geopolitical.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CountyGovernment">
        <rdfs:label xml:lang="en">county governments</rdfs:label>
        <rdfs:comment>#$CountyGovernment is a specialization of
            #$LocalOrganization and #$RegionalGovernment.  Each instance
            of #$CountyGovernment is a local government that has
            jurisdiction over a single county.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocalOrganization"/>
        <rdfs:subClassOf rdf:resource="#RegionalGovernment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Courageousness-Feeling">
        <rdfs:label xml:lang="en">courageousness - feeling</rdfs:label>
        <rdfs:comment>Braveness. Emotion of those who show undismayed
            resolution in presence of evil or danger.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Resolution-Emotion"/>
        <rdfs:subClassOf rdf:resource="#Confidence"/>
    </owl:Class>
    <owl:Class rdf:ID="CourseDuringAMeal">
        <rdfs:label xml:lang="en">course of a meals</rdfs:label>
        <rdfs:comment>A specialization of #$ManipulatingFood.  Each
            instance of #$CourseDuringAMeal is an event in which one or
            more diners at a meal consume a single course.
            Specializations of #$CourseDuringAMeal include
            #$AppetizerCourse, #$MainCourse, and #$DessertCourse.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ManipulatingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Court-Judicial">
        <rdfs:label xml:lang="en">#$Court-Judicial</rdfs:label>
        <rdfs:comment>#$Court-Judicial is a specialization of
            #$Organization, #$GovernmentAgency, and #$JudicialAgent.
            Each instance of #$Court-Judicial is an established judicial
            court, i.e., an enduring governmental organization whose
            primary function is to settle disputes by means of legal
            reasoning by one or more #$Judges (q.v.).  Typically, a
            court&apos;s orders are enforced by some other agency
            belonging to the government of which that court is a part.
            The collection #$Court-Judicial includes federal, state,
            county, and municipal courts, appellate and chancery courts,
            tax courts, courts of claims, courts-martial (if
            non-temporary), admiralty courts, courts of chivalry,
            American Indian tribal courts, and the Permanent Court of
            International Justice.  It excludes Gypsy/Rom Kris courts,
            nonjudicial administrative county courts, stannaries, and
            temporary #$Tribunals (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#JudicialAgent"/>
        <rdfs:subClassOf rdf:resource="#GovernmentAgency"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Covering-Object">
        <rdfs:label xml:lang="en">coverings</rdfs:label>
        <rdfs:comment>The collection of all objects designed or evolved
            to be used as coverings for other objects. The intended
            purpose could be to shelter or protect the covered object,
            or even just to serve a decorative function. Examples
            include paint, #$Tile, #$Wigs, #$Carpets, and #$Eyelids.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cracking">
        <rdfs:label xml:lang="en">cracking events</rdfs:label>
        <rdfs:comment>A collection of change events.  In each
            #$Cracking, something becomes cracked.  I.e., two or more
            areas of the thing are separated from one another (though
            perhaps not divided wholly into parts).  In order to undergo
            a #$Cracking, the #$objectOfStateChange must be in a #$Solid-StateOfMatter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CreatingAnArtifact">
        <rdfs:label xml:lang="en">events in which something is
            deliberately created</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction. In every
            instance of #$CreatingAnArtifact, an #$Agent deliberately
            brings  an #$Artifact-Generic into existence. This artifact
            may be tangible or  intangible. Chiseling a marble statue,
            writing a computer program, or  whistling a tune would all
            be instances of #$CreatingAnArtifact. Two  important
            specializations of #$CreatingAnArtifact are: (1)
            #$IBTGeneration-Original, the creation of
            #$InformationBearingThings  expressing an original thought
            or idea.  (2) #$MakingSomething, where #$PartiallyTangible
            things  are created.  See also #$artifactsCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CreationEvent">
        <rdfs:label xml:lang="en">creation events</rdfs:label>
        <rdfs:comment>A specialization of #$CreationOrDestructionEvent.
            In each instance of #$CreationEvent, at least one instance
            of #$Entity (q.v.) is brought into existence (see #$outputsCreated).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CreationOrDestructionEvent">
        <rdfs:label xml:lang="en">creation or destruction events</rdfs:label>
        <rdfs:comment>A specialization of #$Event-Localized.  During
            each instance of #$CreationOrDestructionEvent, one or more
            instances of #$Entity (q.v.) come into or go out of
            existence.  Notable specializations of
            #$CreationOrDestructionEvent include #$Manufacturing,
            #$MakingSomething, and #$Killing-Biological.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Credential">
        <rdfs:label xml:lang="en">credentials</rdfs:label>
        <rdfs:comment>A specialization of
            #$PropositionalInformationThing.  Each instance of
            #$Credential is specific information about one #$SocialBeing
            (q.v.), provided by another #$SocialBeing.  The information
            content of a credential consists of favorable, enabling, or
            empowering propositional declarations.  Although each
            instance of #$Credential is wholly intangible, instances of
            #$Credential usually have some associated #$TextualMaterial
            (e.g. a diploma associated with a college degree, a
            driver&apos;s license).  A credential may certify that the
            holder (i.e. the subject of the credential) has a particular
            skill (e.g. legal bar certification or the ability to
            drive); has completed certain training (e.g. GED schooling
            or satisfying PhD requirements); is allowed to do a certain
            thing (e.g. a travel visa or permission slip); and so on.
            See also the predicate #$issuesCredential.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="CreditCard">
        <rdfs:label xml:lang="en">#$CreditCard</rdfs:label>
        <rdfs:comment>A specialization of both #$Card and
            #$TenderObject.  Each instance of #$CreditCard is a piece of
            plastic that enables authorized users to spend the
            card-issuing company&apos;s money, drawn as a (usually
            unsecured) loan through an associated instance of
            #$CreditCardAccount (q.v.) under a pre-arranged credit
            agreement.  The credit card company credits the vendor of
            the purchased goods or services and bills the card user (see
            #$Bill-PaymentRequest), usually with interest. See also
            #$creditor, #$owesDebts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#FinancialAccountTenderObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Crevice">
        <rdfs:label xml:lang="en">crackz</rdfs:label>
        <rdfs:comment>The collection of all long, slender cavities or
            cracks or furrows in otherwise solid objects.  The width of
            a crevice is significantly less than its length.  The depth
            of a crevice is often greater than its width, and is never
            significantly less than its width.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#CavityWithWalls"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CrimeDetection">
        <rdfs:label xml:lang="en">#$CrimeDetection</rdfs:label>
        <rdfs:comment>A specialization of #$LawEnforcementActivity.  In
            each instance of #$CrimeDetection, an authorized law
            enforcement agent detects a crime (i.e., some instance of #$CriminalAct).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LawEnforcementActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CropPlant">
        <rdfs:label xml:lang="en">crop plants</rdfs:label>
        <rdfs:comment>#$CropPlant is a specialization of #$Plant.  Each
            instance of #$CropPlant is a plant that has been or is
            commonly grown and harvested as crops, e.g. #$TobaccoPlant,
            #$CornPlant, #$OrangeTree, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cruciform">
        <rdfs:label xml:lang="en">#$Cruciform</rdfs:label>
        <rdfs:comment>A specialization of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$Cruciform is a three-dimensional object consisting of an
            upright beam and a transverse beam, with the two beams
            roughly orthogonal to each other. Examples include spatially
            localized objects (for example, the space occupied by a
            cross worn by a Christian approximates an instance of
            #$Cruciform), as well as abstract cruciform shapes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon3DShaped"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CubeShape">
        <rdfs:label xml:lang="en">cubes</rdfs:label>
        <rdfs:comment>The collection of all three-dimensional cubes.
            Examples include spatially localized objects, such as dice,
            as well as abstract cubes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rectangular3DShape"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CulturalEvent">
        <rdfs:label xml:lang="en">culture</rdfs:label>
        <rdfs:comment>The collection of events having something to do
            with #$HumanCulture.  This includes museum displays,
            concerts, celebrations, etc. each of which is a #$subEvents
            of the local #$HumanCulture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Curiosity">
        <rdfs:label xml:lang="en">curiosity</rdfs:label>
        <rdfs:comment>The collection of feelings of intellectual
            interest, desire to know (more), to understand (more about)
            a thing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Currency">
        <rdfs:label xml:lang="en">items of currency</rdfs:label>
        <rdfs:comment>A specialization of #$TenderObject.  Each instance
            of #$Currency is a physical object generally accepted as
            legal tender, and used as a means of transferring a quantity
            of #$Money (q.v.) between some instances of #$Agent.
            Instances of #$Currency may be coins, items of precious
            metal, paper bills for which precious objects are payable by
            a government to the bearer on demand, or unbacked paper
            bills required by a government to be accepted for payment of
            debts.  Instances of #$Currency are typically backed by and
            issued by national governments.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CustomaryPathCycLConstant">
        <rdfs:label xml:lang="en">customary path cyc l constant</rdfs:label>
        <rdfs:comment>The collection of Cyc constants created to set up
            the general framework for reasoning with customary paths.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="CustomarySystemOfLinks">
        <rdfs:label xml:lang="en">customary system of links</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing-Localized.
            Each instance of #$CustomarySystemOfLinks is a customary or
            conventional network system consisting of interconnected
            links (instances of #$Path-Customary) and nodes of obvious
            types, where the elements of the system (i.e., the points,
            nodes, and links of the system) can be assumed without
            specifying them as sets (note that this is in contrast to
            instances of #$PathSystem, in which the sets of point,
            nodes, links, and loops (if any) have to be specified for
            the system).  Instances of #$CustomarySystemOfLinks include
            pipe systems, road systems, vascular systems, wiring
            systems, and mechanical linkages.  The links of any
            #$CustomarySystemOfLinks are assumed to share certain
            characteristics.  For example, in a road system, pipes are
            not links, nor are streetlights, road paint, or other
            non-roadways; only the roadways forming the road system are
            links in that system.  Moreover, what constitutes a
            #$JunctionOfPaths (q.v.) or #$pathTerminus (q.v.) in the
            system should be obvious from the system type.   The links
            are related to the assumed system by
            #$linksOfCustomarySystem (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cuteness-EmotionalResponse">
        <rdfs:label xml:lang="en">cuteness - emotional response</rdfs:label>
        <rdfs:comment>Attractive or pretty in a delicate way</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Delight"/>
    </owl:Class>
    <owl:Class rdf:ID="CuttingDevice">
        <rdfs:label xml:lang="en">cutting implements</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of #$CuttingDevice is a device whose
            #$primaryFunction is to (enable its user to) cut another
            object.  Specializations of #$CuttingDevice include the
            collections #$Razor, #$Scissors, and #$LawnMower.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CuttingInPieces">
        <rdfs:label xml:lang="en">cutting into pieces</rdfs:label>
        <rdfs:comment>The collection of all cutting events
            [#$CuttingSomething] in which there is a complete separation
            [#$Separation-Complete] so that two (or more) distinct
            connected objects result.  The pieces may be of similar or
            vastly dissimilar size.  For example, #$DrillingSomething
            and #$SawingSomething are specializations of
            #$CuttingInPieces since small pieces (e.g. sawdust) are
            removed from the larger piece.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#CuttingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CuttingSomething">
        <rdfs:label xml:lang="en">#$CuttingSomething</rdfs:label>
        <rdfs:comment>A specialization of both #$HandlingADevice and
            #$SeparationEvent.  Each instance of #$CuttingSomething is
            an event in which some piece of material stuff is cut,
            whether or not a complete separation of parts occurs.
            Specializations of #$CuttingSomething include
            #$CuttingNails, #$Butchering, and #$CuttingFabric.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#HandlingADevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Cyc-BasedProject">
        <rdfs:label xml:lang="en">cyc - based project</rdfs:label>
        <rdfs:comment>Collection whose instances represent   projects
            based on Cyc.  Used to categorize and organize terms and
            assertions.   An example project is #$OpenCycProject.  See
            also #$myCreationPurpose and  #$assertionAssertPurpose.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycAgent">
        <rdfs:label xml:lang="en">cyc agent</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#AgentiveArtifact"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#CycTheCollection"/>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Cyclist"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycELVariableList">
        <rdfs:label xml:lang="en">cyc el variable list</rdfs:label>
        <rdfs:comment>A subcollection of #$SubLList, each instance of of
            which is an expression consisting of a sequence of
            #$ELVariables enclosed in parentheses. Note that this
            collection is   quoted  (see #$quotedCollection). Thus
            (e.g.) the sentence `(#$isa (?X ?Y ?Z)
            #$CycELVariableList)&apos; means that the string `(?X ?Y
            ?Z)&apos; is an instance of #$CycELVariableList.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLList"/>

    </owl:Class>
    <owl:Class rdf:ID="CycHLTruthValue">
        <rdfs:label xml:lang="en">cyc hl truth value</rdfs:label>
        <rdfs:comment>The truth/strength combinations used in the Cyc HL
            implementation of #$CycLAssertions and arguments.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycInferenceDescriptorPredicate">
        <rdfs:label xml:lang="en">Cyc inference descriptor predicates</rdfs:label>
        <rdfs:comment>The collection of predicates which describe the
            internal inference mechanisms of the Cyc theorem prover.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CycInferenceHeuristicPredicate">
        <rdfs:label xml:lang="en">Cyc inference heuristic predicates</rdfs:label>
        <rdfs:comment>The collection of predicates which describe the
            heuristic mechanisms available in the internal inference
            mechanisms of the Cyc theorem prover.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycInferenceDescriptorPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAssertedAssertion">
        <rdfs:label xml:lang="en">asserted CycL assertions</rdfs:label>
        <rdfs:comment>A specialization of #$CycLAssertion.  An instance
            ASSERT of #$CycLAssertion is also an instance of
            #$CycLAssertedAssertion  just in case ASSERT was explicitly
            asserted to the Cyc Knowledge Base by one of its users (see
            the collection #$Cyclist), as opposed to having been deduced
            by Cyc&apos;s inference engine (in which case it would be an
            instance of #$CycLDeducedAssertion (q.v.)).  Note that since
            a single assertion can be both explicitly asserted to the
            knowledge base and also deduced by the inference engine, the
            collections #$CycLAssertedAssertion and
            #$CycLDeducedAssertion are not disjoint.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAssertion">
        <rdfs:label xml:lang="en">Cyc assertions (types of things)</rdfs:label>
        <rdfs:comment>The collection of semantically well-formed
            #$CycLSentences asserted to the Cyc Knowledge Base.  Each
            instance of #$CycLAssertion is either (1) an #$HLAssertion :
            a Heuristic Level CycL sentence reified in the Cyc Knowledge
            Base (i.e. a CycL sentence that corresponds to a data
            structure actually in the Cyc KB), or (2) an #$ELAssertion :
            an Epistemological Level CycL sentence that can be
            canonicalized into one or more already extant
            #$HLAssertions.  #$CycLAssertion is used as an argument type
            constraint for certain meta-predicates, such as #$overrides.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLPropositionalSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAssertionDirection">
        <rdfs:label xml:lang="en">CycL assertion directions</rdfs:label>
        <rdfs:comment>The collection of possible directions for
            #$CycLAssertions; the direction indicates how the
            #$CycLAssertion will be propagated during inference.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAtomicAssertion">
        <rdfs:label xml:lang="en">CycL atomic assertions</rdfs:label>
        <rdfs:comment>A specialization of #$CycLAtomicSentence.  An
            instance ATOM of #$CycLAtomicSentence is also an instance of
            #$CycLAtomicAssertion just in case ATOM has been explicitly
            asserted to the Cyc Knowledge Base (see
            #$CycLAssertedAssertion), or deduced in the Knowledge Base
            by the Cyc inference engine (see #$CycLDeducedAssertion).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAtomicSentence">
        <rdfs:label xml:lang="en">cyc l atomic sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed atomic
            sentences in the CycL language. Each instance of
            #$CycLAtomicSentence consists of a CycL constant denoting a
            #$Predicate followed by one or more (closed or open) CycL
            terms, with the entire sequence enclosed in parentheses.
            Thus CycL atomic sentences never contain other sentences as
            truth-functional components (see #$TruthFunction).  Note
            that  atomic  as used here specifically in connection with
            _sentences_, has a less strict meaning than it does when
            applied to terms generally, where it means  not
            constructible from other terms via CycL syntax  (see #$CycLAtomicTerm).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLAtomicTerm">
        <rdfs:label xml:lang="en">cyc l atomic term</rdfs:label>
        <rdfs:comment>The collection of all atomic
            #$CycLDenotationalTerms (q.v.).   Atomic  here means not
            constructible  from other CycL terms via the syntax of CycL.
            Thus, subcollections  of #$CycLAtomicTerm include
            #$CycLConstant, #$CycLVariable, and #$SubLAtomicTerm.  Note
            that #$CycLAtomicTerm, like most instances of
            #$CycLExpressionType, is  quoted  (see #$quotedCollection).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedAtomicSentence">
        <rdfs:label xml:lang="en">cyc l closed atomic sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed atomic
            sentences in the CycL language that contain no free
            variables.  Each instance of #$CycLClosedAtomicSentence
            consists of a CycL expression denoting a #$Predicate
            followed by one or more (closed) CycL terms, with the entire
            sequence enclosed in parentheses.  Such sentences are
            sometimes called  GAFs  (an acronym for  ground atomic
            formulas ).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedAtomicTerm">
        <rdfs:label xml:lang="en">cyc l closed atomic term</rdfs:label>
        <rdfs:comment>The collection of all closed #$CycLAtomicTerms.
            Closed  here means not containing any free (i.e. unbound)
            variables.  Since a variable itself is the only type of
            _atomic_ term that contains a variable (and contains it
            _free_, moreover, as a single occurrence of a variable
            can&apos;t bind itself), #$CycLClosedAtomicTerm has as
            instances all #$CycLAtomicTerms except #$CycLVariables.
            Like all CycL atomic terms, Cycl closed atomic terms are
            denotational  (see #$CycLDenotationalTerm).  Note that this
            collection, like most instances of #$CycLExpressionType, is
            quoted  (see #$quotedCollection).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedDenotationalTerm">
        <rdfs:label xml:lang="en">CycL closed denotational terms</rdfs:label>
        <rdfs:comment>The collection of all closed denotational terms in
            the CycL language.  An expression is said to be  closed  if
            it contains no free variables (see #$CycLClosedExpression).
            A CycL term is said to be  denotational  if it is the right
            sort of term to have a denotation (or value) in the universe
            of discourse (see #$CycLDenotationalTerm).  CycL sentences,
            while terms of CycL, are not considered denotational terms.
            Each instance of #$CycLClosedDenotationalTerm is either a
            #$CycLClosedAtomicTerm (i.e. a #$CycLConstant or
            #$SubLAtomicTerm) or a #$CycLClosedNonAtomicTerm (i.e. a
            NAT  with no free variables).  Examples of closed
            denotational terms include `#$Muffet&apos;, `(#$JuvenileFn
            #$Dog)&apos;, `(#$TheSetOf ?X (#$objectHasColor ?X
            GreenColor))&apos;, and `212&apos;.  Note that these are
            also examples: `(#$BorderBetweenFn #$Canada #$Mexico)&apos;
            (despite the fact that it fails actually to denote anything)
            and `(#$JuvenileFn #$isa #$genls #$JuvenileFn)&apos;
            (despite the fact that it is not semantically well-formed).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedExpression">
        <rdfs:label xml:lang="en">CycL closed expresses</rdfs:label>
        <rdfs:comment>The collection of #$CycLExpressions that contain
            no free variables.  (A variable VAR occurs _free_ in an
            expression EXPR if and only if there is an occurrence of VAR
            in EXPR that is not bound by a quantifier in EXPR.)  Note
            that those CycL sentences that are treated (in the context
            of representing assertions in the Cyc Knowledge Base) as
            implicitly containing universal quantifiers are _not_ closed
            expressions (see #$CycLClosedSentence). Also cf. #$CycLOpenExpression.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedFormula">
        <rdfs:label xml:lang="en">cyc l closed formula</rdfs:label>
        <rdfs:comment>The collection of #$CycLFormulas that contain no
            free variables.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedNonAtomicTerm">
        <rdfs:label xml:lang="en">cyc l closed non atomic term</rdfs:label>
        <rdfs:comment>The collection of closed, non-atomic denotational
            terms of the CycL language.  Each instance of
            #$CycLClosedNonAtomicTerm is a CycL term that contains no
            free variables, is constructible from other CycL terms via
            the syntax of CycL, and can have a denotatum (this last
            requirement excludes closed CycL sentences from
            #$CycLClosedNonAtomicTerm).  Examples: `(#$JuvenileFn
            #$Platypus)&apos;, `(#$JuvenileFn #$isa #$genls)&apos;, and
            `(#$TheSetOf ?X (#$objectHasColor ?X #$GreenColor))&apos;.
            Non-example: `(#$JuvenileFn ?X)&apos;.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-ClosedFunctor"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLClosedSentence">
        <rdfs:label xml:lang="en">cyc l closed sentence</rdfs:label>
        <rdfs:comment>The collection of #$CycLSentences that contain no
            free variables.  Note that those CycL sentences that are
            treated (in the context of representing assertions in the
            Cyc Knowledge Base) as implicitly containing universal
            quantifiers are _not_ closed sentences (cf. #$CycLOpenSentence).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-ClosedPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLConstant">
        <rdfs:label xml:lang="en">ART (type of thing)</rdfs:label>
        <rdfs:comment>The collection of all constants in the CycL
            language. #$CycLConstant has as instances all
            #$CycLAtomicTerms other than #$CycLVariables and
            #$SubLAtomicTerms (qq.v.).  Orthographically, CycL constants
            are those atomic terms (i.e. terms not constructable from
            other terms via CycL syntax) that are prefixed by `#$&apos;
            in their printed (as opposed to their HTML-displayed)
            representations.  For example, `#$Dog&apos; and `#$isa&apos;
            are CycL constants, while other CycL terms like `?X&apos;,
            `42&apos;, and  `(#$GovernmentFn #$France)&apos; are not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedDenotationalTerm"/>

        <rdfs:subClassOf rdf:resource="#CycLRepresentedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLDeducedAssertion">
        <rdfs:label xml:lang="en">#$CycLDeducedAssertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            #$CycLAssertions that are supported by  at least one
            argument which is a deduction by Cyc&apos;s inference
            engine,  as opposed to having been explicitly asserted to
            Cyc.  A given assertion can have more than one argument, and
            can therefore  be both a #$CycLAssertedAssertion and a #$CycLDeducedAssertion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLDenotationalTerm">
        <rdfs:label xml:lang="en">CycL denotational terms</rdfs:label>
        <rdfs:comment>The collection of all CycL terms that are not
            sentences (cf. #$CycLSentence), and thus are either
            #$CycLAtomicTerms (such as constants or variables) or
            #$CycLNonAtomicTerms (also known as  NAT s).
            #$CycLDenotationalTerms are so-called, not because they all
            have denotations (not all of them do), but because they are
            in a certain sense the right kind of term for having a
            denotation.  That is, an instance of #$CycLDenotationalTerm
            -- if it is semantically well-formed and closed (i.e.
            contains no free variables) -- might denote something in the
            universe of discourse.  (Even so, it will not _necessarily_
            denote something, considering (e.g.) the fact that a
            function need not be defined for every (sequence of)
            thing(s) satisfying its argument type constraints; see
            #$PartialDenotationalFunction.)  But note that neither
            semantic well-formedness nor being closed is a requirement
            for being a CycL denotational term: `(#$JuvenileFn #$isa ?X
            #$genls #$JuvenileFn)&apos;, for example, is a NAT and thus
            a denotational term.  Other examples of denotational terms
            are the expressions: `#$Muffet&apos;, `?X&apos;,
            `(#$JuvenileFn ?X)&apos;, `(#$TheSetOf ?X (#$objectHasColor
            ?X #$GreenColor))&apos;, and `212&apos;.  Note also that,
            like most instances of #$CycLExpressionType,
            #$CycLDenotationalTerm is a #$quotedCollection (q.v.).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLExpression">
        <rdfs:label xml:lang="en">cyc l expression</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the CycL language.  This includes constants,
            variables, non-atomic terms, formulas, sentences, etc.
            Since the CycL syntax allows any CycL expression to be used
            as a term, #$CycLExpression is actually coextensional with
            #$CycLTerm (q.v.).  Note that #$CycLExpression, like most
            #$CycLExpressionTypes, is a #$quotedCollection (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLExpression"/>

        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <owl:equivalentClass rdf:resource="#CycLTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLExpression-Askable">
        <rdfs:label xml:lang="en">cyc l expression - askable</rdfs:label>
        <rdfs:comment>The collection of #$CycLExpressions  that are
            either themselves askable as queries to the Cyc system (see
            #$CycLSentence-Askable) or could appear as non-atomic terms
            within   sentences that could be so asked (see
            #$CycLNonAtomicTerm-Askable).   More precisely, each
            instance of #$CycLExpression-Askable is a CycL   expression
            that is constructible via the syntax of CycL without
            violating any applicable arity constraints (see #$arity).
            Note that   askable CycL expressions do not necesarily obey
            other semantic   constraints beyond arity, such as
            argument-type constraints (see   #$ArgTypePredicate); thus
            they are not always semantically   well-formed in the
            fullest sense (cf. #$CycLExpression-Assertible).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLExpression-Assertible">
        <rdfs:label xml:lang="en">cyc l expression assertible</rdfs:label>
        <rdfs:comment>A #$CycLExpressionType.  The collection  of all
            compound CycL expressions that either could themselves be
            asserted to the  Cyc Knowledge Base (see
            #$CycLSentence-Assertible) or could appear as non-atomic
            terms within sentences that could be so asserted (see
            #$CycLNonAtomicTerm-Assertible).  More precisely, each
            instance of #$CycLExpression-Assertible is a CycL expression
            that is both syntactically and  semantically well-formed.
            By definition, any compound CycL expression is
            syntactically well-formed.  To be semantically well-formed,
            a CycL expression  must be constructible via the syntax of
            CycL without violating any applicable  arity or
            argument-type constraints (see #$arity and
            #$ArgTypePredicate).  A CycL  formula must be semantically
            well-formed in order to be interpretable as having a
            semantic value , such as a truth-value (if the formula is a
            sentence) or a  denotation (if it&apos;s a
            #$CycLDenotationalTerm).  Note that being  assertible   in
            the present sense does not require an expression&apos;s
            actually being asserted  in (or being a component of
            something asserted in) the KB.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLExpressionType">
        <rdfs:label xml:lang="en">types of CycL expression</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$CycLExpressionType is a type (i.e. a subcollection) of
            #$CycLExpression.  Note that, while #$CycLExpressionType is
            not itself a #$quotedCollection (q.v.), most of its reified
            instances are quoted-collections.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLFormula">
        <rdfs:label xml:lang="en">cyc l formula</rdfs:label>
        <rdfs:comment>The collection of well-formed non-atomic CycL
            expressions.  Each instance of #$CycLFormula consists of a
            CycL expression that denotes a relation (e.g. a #$Predicate,
            #$Function-Denotational, or #$TruthFunction) -- or at least
            an expression that could be interpreted as having a relation
            as its semantic value (see #$CycLGenericRelationFormula) --
            followed by one or more CycL terms (see #$CycLTerm), with
            the entire sequence enclosed in parentheses.  For example,
            (#$isa #$Muffet #$Poodle) and (#$BirthFn #$Muffet) are both
            CycL formulas.  Two important specializations of
            #$CycLFormula are #$CycLNonAtomicTerm (whose instances are
            also called  denotational formulas ) and #$CycLSentences
            (whose instances are also called  logical formulas ).  (Note
            that this notion of  formula  differs somewhat from that
            used in formal logic, where a formula is normally defined as
            an (atomic or non-atomic, quantificationally closed or open) sentence.)</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLGAFAssertion">
        <rdfs:label xml:lang="en">cyc lgaf assertion</rdfs:label>
        <rdfs:comment>The collection of #$CycLAtomicAssertions that
            contain no free variables.  The acronym `GAF&apos; stands
            for  ground atomic formula .  An  atomic  formula (or, more
            specifically, an atomic CycL sentence) consists of an
            expression denoting a #$Predicate followed by one or more
            CycL terms, with the entire sequence enclosed in
            parentheses.  Ground  means  no variables .  GAF assertions
            are at least _closed_ at the EL (i.e. they contain no free
            EL variables) and are genuinely ground at the HL (i.e. their
            HL representations contain no HL variables at all).  For
            example, the  atomic EL sentence (#$isa (#$TheSetOf ?X
            (#$objectHasColor ?X #$GreenColor)) #$Thing) is closed
            (though not ground).  Thus, if used to make an assertion in
            Cyc, this sentence would be a GAF assertion, and the HL
            sentence representing   it in the Knowledge Base would be a
            ground atomic sentence.  GAF assertions typically express
            particular facts (as opposed to general rules) about the world.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicAssertion"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLGenericRelationFormula">
        <rdfs:label xml:lang="en">cyc l generic relation formula</rdfs:label>
        <rdfs:comment>A subcollection of #$CycLFormula (q.v.).  Each
            instance of that #$CycLGenericRelationFormula is a CycL
            formula that begins (immediately after the opening
            parenthesis) with a variable or other open expression (see
            #$CycLOpenExpression); i.e. it has an open expression in its
            0th  or  arg0  position.  A CycL generic relation formula
            thus consists   of an open expression followed by some
            number of terms, with the entire sequence   enclosed in
            parentheses.  But note that the open expression in the
            formula&apos;s   arg0 position must be such that, given the
            syntax and intended semantics of CycL, it could conceivably
            have a #$Relation -- i.e. a #$Function-Denotational or a
            #$TruthFunction (such as a #$Predicate or
            #$LogicalConnective) -- as its semantic value.  Hence the
            arg0 open expression might be a variable, as in the generic
            relation formula `(?RELATION #$Muffet #$Dog)&apos;; or it
            might be an appropriate open non-atomic term (or  NAT ; see
            #$CycLNonAtomicTerm), as in   `((#$Kappa (?ARG1) (#$knows
            ?ARG1 ?ARG2)) #$Muffet)&apos;; or it might itself be   a
            generic relation formula, as in `((?REL ?ARG1 #$Dog)
            #$Muffet)&apos;.  On the   other hand, `((#$BorderBetweenFn
            ?ARG1 ?ARG2) #$Muffet #$Dog)&apos; is not a
            #$CycLGenericRelationFormula, since #$BorderBetweenFn only
            returns instances   of #$Border, which is disjoint with
            #$Relation; thus the open NAT   `(#$BorderBetweenFn ?ARG1
            ?ARG2)&apos; couldn&apos;t possibly have a #$Relation as its
            semantic value, no matter what values were assigned to the
            variables `?ARG1&apos;   and `?ARG2&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ELFormula"/>

        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLIndexedTerm">
        <rdfs:label xml:lang="en">CycL indexed terms</rdfs:label>
        <rdfs:comment>The collection of indexed or indexable terms in
            the CycL language. This includes reified HL terms as well as
            reifiable EL NATs and assertions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>

    </owl:Class>
    <owl:Class rdf:ID="CycLNLAssertion">
        <rdfs:label xml:lang="en">CycL NL assertions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of #$CycLAssertions whose main (i.e. arg0)
            operators denote #$NLPredicates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLAtomicAssertion"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNLPragmaticAssertion">
        <rdfs:label xml:lang="en">CycL NL pragmatic assertions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of #$CycLAssertions whose main (i.e. arg0)
            operators denote #$NLPragmaticPredicates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNLAssertion"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNLSemanticAssertion">
        <rdfs:label xml:lang="en">CycL NL semantic assertions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of #$CycLAssertions whose main (i.e. arg0)
            operators denote #$NLSemanticPredicates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNLAssertion"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNLSyntacticAssertion">
        <rdfs:label xml:lang="en">CycL NL syntactic assertions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of #$CycLAssertions whose main (i.e. arg0)
            operators denote #$NLSyntacticPredicates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNLAssertion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNonAtomicReifiedTerm">
        <rdfs:label xml:lang="en">NART</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLReifiableNonAtomicTerms
            that are reified in the KB. Example: (#$JuvenileFn #$Dog).
            Counterexample: (#$JuvenileFn #$Platypus), because that term
            is not currently reified in the KB.  These are often called
            NARTs, which stands for &apos;non-atomic reified term&apos;.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiedDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNonAtomicTerm">
        <rdfs:label xml:lang="en">NAT</rdfs:label>
        <rdfs:comment>The collection of non-atomic denotational terms in
            the CycL language.  A CycL term is _non-atomic_ if it
            constructible from other CycL terms via the syntax of CycL.
            A CycL term is said to be  denotational  if it is the type
            of term that can have a denotatum (or assigned value; see
            #$CycLDenotationalTerm).  #$CycLNonAtomicTerm   thus
            includes all CycL denotational terms except constants and
            variables.  A  CycL non-atomic term (or  NAT ) consists of a
            CycL expression denoting a #$Function-Denotational followed
            by one or more CycL terms, with the entire sequence enclosed
            in parentheses.  The NAT itself denotes the value (if any)
            of this function for the denotations of the other terms
            taken as arguments.  (If there is no such value then the NAT
            has no denotatum; see #$undefined.)  NATs are also known as
            denotational formulas , in contrast to  logical formulas
            (i.e. sentences). Currently, there are two main types of
            NAT: (i) #$HLNonAtomicReifiedTerms (or  NART s), which are a
            type of #$HLReifiedDenotationalTerm and are implemented with
            data structures that have indexing that enables all uses of
            the NAT to be retrieved, and (ii) #$ELNonAtomicTerms (or
            NAUT s), which have no such indexing and remain in the form
            of an EL expression in the assertions in which  they occur.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLRepresentedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNonAtomicTerm-Askable">
        <rdfs:label xml:lang="en">askable CycL non-atomic terms</rdfs:label>
        <rdfs:comment>The collection of #$CycLNonAtomicTerms  that can
            appear within sentences that are askable as queries to the
            Cyc system  (see #$CycLSentence-Askable).  More precisely,
            each instance of   #$CycLNonAtomicTerm-Askable is a CycL
            non-atomic term that is constructible via   the syntax of
            CycL without violating any applicable arity constraints (see
            #$arity).  Note that askable CycL non-atomic terms do not
            necesarily obey other   semantic constraints beyond arity,
            such as argument-type constraints (see
            #$ArgTypePredicate); thus they are not always semantically
            well-formed in   the fullest sense (cf. #$CycLNonAtomicTerm-Assertible).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNonAtomicTerm-Assertible">
        <rdfs:label xml:lang="en">assertible CycL non-atomic terms</rdfs:label>
        <rdfs:comment>A #$CycLExpressionType and a specialization of
            both #$CycLExpression-Assertible and #$CycLNonAtomicTerm
            (qq.v.).  The collection of all CycL non-atomic terms that
            could appear within a sentence that could be asserted to the
            Cyc Knowledge Base.  More precisely, each instance of
            #$CycLNonAtomicTerm-Assertible is a non-atomic term that is
            both syntactically and semantically well-formed.  By
            definition, any CycL non-atomic term is syntactically
            well-formed.  To be semantically well-formed, a non-atomic
            term sentence must be constructible via the syntax of CycL
            without violating any applicable arity or argument-type
            constraints (see #$arity and #$ArgTypePredicate).  A CycL
            term must be semantically well-formed in order to be
            interpretable as having a  semantic value , which for terms
            means having a denotation.  Note that being  assertible  in
            the present sense does not require a sentence&apos;s
            actually being asserted in the KB.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Askable"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLNonAtomicTerm-ClosedFunctor">
        <rdfs:label xml:lang="en">CycL closed functor non-atomic terms</rdfs:label>
        <rdfs:comment>The subcollection of denotational
            #$CycLNonAtomicTerms which have no free variable in the arg0
            position.  Examples: (#$JuvenileFn #$Platypus),
            (#$JuvenileFn #$isa #$genls), (#$TheSetOf ?X (#$colorOfType
            ?X #$GreenColor)), (#$JuvenileFn ?X).  Counterexample:
            (?SOMEFN #$Gold) ((#$USDollarFn ?YEAR) 5).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLOpenDenotationalTerm">
        <rdfs:label xml:lang="en">CycL open denotational terms</rdfs:label>
        <rdfs:comment>The collection of all open denotational terms in
            the CycL language.  An expression is  open  if it contains
            one or more free variables (see #$CycLOpenExpression).  A
            CycL term is said to be  denotational  if it is the right
            sort of term to have a denotation (or value) in the universe
            of discourse (see #$CycLDenotationalTerm).  Each instance of
            #$CycLOpenDenotationalTerm is either a
            #$CycLOpenNonAtomicTerm (i.e. a  NAT   with a free variable)
            or a #$CycLVariable iself.  Examples include `?X&apos;,
            `(#$JuvenileFn ?X)&apos;, and `(#$JuvenileFn #$isa ?X
            #$genls #$JuvenileFn)&apos; (even though the latter is
            semantically ill-formed).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLOpenExpression">
        <rdfs:label xml:lang="en">cyc l open expression</rdfs:label>
        <rdfs:comment>The collection of CycL expressions that contain
            one or more free variables.  A variable VAR occurs _free_ in
            an expression EXPR if and only if there is an occurrence of
            VAR in EXPR that is not bound by a term denoting a
            #$ScopingRelation (q.v.), such as a quantifier or
            #$TheSetOf, in EXPR.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLOpenFormula">
        <rdfs:label xml:lang="en">cyc l open formula</rdfs:label>
        <rdfs:comment>A specialization of both #$CycLOpenExpression and
            #$CycLFormula.  An instance FORM of #$CycLFormula is also an
            instance of #$CycLOpenFormula just in case FORM contains one
            or more free variables.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLOpenNonAtomicTerm">
        <rdfs:label xml:lang="en">cyc l open non atomic term</rdfs:label>
        <rdfs:comment>The collection of denotational
            #$CycLNonAtomicTerms that have free variables. Examples:
            `(#$JuvenileFn ?X)&apos;, `(#$JuvenileFn ?X ?Y ?Z)&apos;.
            Counterexample: `(#$TheSetOf ?X (#$objectHasColor ?X #$GreenColor))&apos;.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLOpenSentence">
        <rdfs:label xml:lang="en">cyc l open sentence</rdfs:label>
        <rdfs:comment>A specialization of both #$CycLOpenExpression and
            #$CycLSentence. An instance PROP of #$CycLSentence is also
            an instance of #$CycLOpenSentence just in case PROP contains
            one or more free variables.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLPropositionalSentence">
        <rdfs:label xml:lang="en">cyc l propositional sentence</rdfs:label>
        <rdfs:comment>The collection of CycL sentences that express
            propositions (see #$Proposition).  Two necessary (and,
            arguably, jointly sufficient) conditions for a CycL
            sentence&apos;s expressing a proposition is that it   be
            semantically well-formed (see #$CycLSentence-Assertible) and
            closed   (see #$CycLClosedSentence).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Assertible"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLReformulationRulePredicate">
        <rdfs:label xml:lang="en">#$CycLReformulationRulePredicate</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which may appear as
            the operator in a #$CycLReformulatorRule.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CanonicalizerDirectivePredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLReformulatorRule">
        <rdfs:label xml:lang="en">#$CycLReformulatorRule</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLAssertions which
            express reformulation rules to be used by  the
            #$CycLReformulator.  Even though the reformulator may treat
            these as  rules, they are GAFs in the KB.  Each
            #$CycLReformulatorRule must  have a
            #$CycLReformulationRulePredicate as its predicate.  They are
            relevant in the microtheory in which they are  asserted, and
            in specMts of that microtheory unless overridden.  For
            meta-directives, the convention is that the
            #$CycLReformulatorRule  argument comes last.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLAtomicAssertion"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLReifiableDenotationalTerm">
        <rdfs:label xml:lang="en">CycL reifiable denotational terms</rdfs:label>
        <rdfs:comment>A subcollection of both
            #$CycLClosedDenotationalTerm and #$CycLIndexedTerm (qq.v.).
            #$CycLReifiableDenotationalTerm is the collection of all
            CycL terms that both may be reified and may denote something
            in the universe of discourse.  It thus includes all
            instances of #$CycLConstant as well as any NAT (see
            #$CycLNonAtomicTerm and #$Function-Denotational) whose
            functor denotes an instance of #$ReifiableFunction.  For
            example, the NAT `(#$GovernmentFn #$France)&apos; is a
            #$CycLReifiableDenotationalTerm, since #$GovernmentFn is an
            instance of #$ReifiableFunction.  Similarly,
            `(#$JuvenileFn #$Platypus)&apos; is a
            #$CycLReifiableDenotationalTerm; although it is not
            currently reified in the KB, it is reifiable and
            denotational (see #$CycLClosedDenotationalTerm).  Finally,
            `(#$BorderBetweenFn #$Canada #$Mexico)&apos; is a
            #$CycLReifiableDenotationalTerm; although it happens not to
            denote anything in the universe of discourse, it is
            nonetheless the kind of NAT that can and often does denote.
            Note that #$CycLVariables are not considered reifiable terms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>

        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLReifiableNonAtomicTerm">
        <rdfs:label xml:lang="en">CycL reifiable non-atomic denotational terms</rdfs:label>
        <rdfs:comment>A collection of Cyc terms that are NATs
            (#$CycLNonAtomicTerms; see #$Function-Denotational) whose
            functor is an instance of #$ReifiableFunction. E.g., since
            #$GovernmentFn is an instance of #$ReifiableFunction, it is
            true that (#$GovernmentFn #$France) is a #$CycLReifiableNonAtomicTerm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLClosedNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>

        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLReifiedDenotationalTerm">
        <rdfs:label xml:lang="en">FORT (type of thing)</rdfs:label>
        <rdfs:comment>The collection of denotational terms in the CycL
            language which are reified in the KB.  Examples include
            #$Muffet and (#$JuvenileFn #$Dog); a counterexample would be
            (#$JuvenileFn #$Platypus) because that term is not currently
            reified in the KB.  These are often called
            &apos;FORTs&apos;, which stands for &apos;first-order
            reified terms&apos;</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLRepresentedAtomicTerm">
        <rdfs:label xml:lang="en">#$CycLRepresentedAtomicTerm</rdfs:label>
        <rdfs:comment>A specialization of #$CycLAtomicTerm.  An instance
            ATOM of #$CycLAtomicTerm is also an instance of
            #$CycLRepresentedAtomicTerm just in case ATOM is explicitly
            represented in the CycL language (as opposed to being
            represented in SubL, the underlying implementation language
            of the Cyc system).  Important specializations of
            #$CycLRepresentedAtomicTerm include #$CycLVariable and #$CycLConstant.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLRepresentedTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLRepresentedTerm">
        <rdfs:label xml:lang="en">CycL represented terms</rdfs:label>
        <rdfs:comment>The collection of all denotational terms that are
            represented in the CycL language, instead of being defined
            in SubL, the underlying implementation language used by Cyc.
            That is, each instance of #$CycLRepresentedTerm is either
            (i) an atomic term, and thus also an instance of
            #$CycLRepresentedAtomicTerm (q.v.), or (ii) a non-atomic
            term (or  NAT ), and has a #$CycLRepresentedTerm as its arg0
            functor (the other arguments in the NAT  need not be CycL
            represented terms).  Thus #$CycLRepresentedTerm has as
            instances all #$CycLConstants, all #$CycLVariables, and all #$CycLNonAtomicTerms.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLRuleAssertion">
        <rdfs:label xml:lang="en">cyc l rule assertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            #$CycLAssertions whose formulas are rules. More precisely,
            the formulas are not GAFs (see #$CycLGAFAssertion), so they
            either have more than one literal (and therefore are
            non-atomic) or they quantify over some free variables (and
            therefore are non-ground). Any free variables are implicitly
            universally quantified.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLSentence">
        <rdfs:label xml:lang="en">cyc l sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed
            sentences of the CycL language.  Each instance of
            #$CycLSentence consists of a CycL expression denoting a
            logical relation (i.e. a #$Predicate or #$TruthFunction)
            followed by one or more CycL terms, with the entire sequence
            enclosed in parentheses.  #$CycLSentences need not obey
            arity constraints or other semantic constraints (such as
            argument type constraints). #$CycLSentences are also called
            logical formulas , and are to be distinguished from
            denotational formulas  (which are also known as  NAT s; see
            #$CycLNonAtomicTerms).  Note that this notion of a CycL
            sentence is broader than the notion of  sentence  standardly
            used in formal logic, where a sentence is defined as a
            _closed_ well-formed formula: CycL sentences may be _open_
            (i.e. contain free variables).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLSentence-Askable">
        <rdfs:label xml:lang="en">cyc l sentence askable</rdfs:label>
        <rdfs:comment>The collection of #$CycLSentences  that are
            askable as queries to the Cyc system.  More precisely, each
            instance of #$CycLSentence-Askable is a CycL sentence that
            is   constructible via the syntax of CycL without violating
            any applicable   arity constraints (see #$arity).  Note that
            askable CycL sentences do   not necessarily obey other
            semantic constraints beyond arity, such as   argument-type
            constraints (see #$ArgTypePredicate); thus they are   not
            always semantically well-formed in the fullest sense (cf.
            #$CycLSentence-Assertible).  The idea behind this criterion
            of    askability  is that such a sentence, even if it
            isn&apos;t true or  false (which it can&apos;t be unless it
            also obeys all argument-type   constraints), at least  makes
            enough sense  to be asked as a query   to the Cyc system.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLSentence-Assertible">
        <rdfs:label xml:lang="en">cyc l sentence - assertible</rdfs:label>
        <rdfs:comment>An instance of #$CycLExpressionType and a
            specialization of #$CycLExpression-Assertible.  The
            collection of all CycL sentences that could be asserted to
            the Cyc Knowledge Base.  More precisely, each instance of
            #$CycLSentence-Assertible is a CycL sentence that is both
            syntactically and semantically well-formed.  By definition,
            any CycL sentence is syntactically well-formed.  To be
            semantically well-formed, a CycL sentence must be
            constructible via the syntax of CycL without violating any
            applicable arity or argument-type constraints (see #$arity
            and #$ArgTypePredicate).  A CycL sentence must be
            semantically well-formed in order to be interpretable as
            having a  semantic value , which for sentences means having
            a truth value.  Note that being  assertible  in the present
            sense does not require a sentences&apos;s actually being
            asserted in the KB.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLSentence-ClosedPredicate">
        <rdfs:label xml:lang="en">cyc l sentence closed predicate</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLSentences whose arg0
            does not contain a free variable although free variables may
            occupy other argument positions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLTerm">
        <rdfs:label xml:lang="en">CycL terms</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the CycL language that can be used as terms,
            i.e. that   can be combined with other expressions to form
            non-atomic terms or formulas.     Since the grammar of the
            CycL language allows any CycL expression to be used     as a
            term, #$CycLTerm and #$CycLExpression are coextensional
            collections.   Note that, as with most
            #$CycLExpressionTypes, #$CycLTerm is a #$quotedCollection (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLExpression"/>

        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <owl:equivalentClass rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLUnreifiedReifiableNonAtomicTerm">
        <rdfs:label xml:lang="en">cyc l unreified reifiable non atomic term</rdfs:label>
        <rdfs:comment>A collection of Cyc terms that are
            #$CycLReifiableNonAtomicTerms but are not meant to be
            reified at the top level (but sub-nats are still reified).
            #$CycLUnreifiedReifiableNonAtomicTerms are handled specially
            by the canonicalizer. As an example of how this works, see
            #$termOfUnit. Its arg1 is a #$CycLReifiableNonAtomicTerm and
            its arg2 is an #$CycLUnreifiedReifiableNonAtomicTerm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>

        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycLVariable">
        <rdfs:label xml:lang="en">cyc l variable</rdfs:label>
        <rdfs:comment>The collection of all variables in the CycL
            language.  A #$CycLVariable is a character string consisting
            of a question mark `?&apos; (as its initial character)
            followed by one or more characters, where each of these
            latter characters is either an (upper- or lower-case) Roman
            letter, an Arabic numeral (i.e. `0&apos; through `9&apos;),
            a hyphen (`-&apos;), an underscore (`_&apos;), or another
            question mark.  (The letters occurring in a CycL variable
            used in an actual assertion will typically be all uppercase;
            but this convention is not enforced in any formal way.)
            Examples: `?WHAT&apos;, &apos;?OBJ-TYPE&apos;, and `?var0&apos;.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLRepresentedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="CycSubjectClump">
        <rdfs:label xml:lang="en">cyc subject clump</rdfs:label>
        <rdfs:comment></rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="CycTheCollection">
        <rdfs:label xml:lang="en">Cyc</rdfs:label>
        <rdfs:comment>A specialization of (#$ProgramTypeCopyFn
            #$IntelligentComputerProgram) and (#$ProgramTypeCopyFn
            #$InteractiveComputerProgram). Each instance of
            #$CycTheCollection is a copy (see #$programCopies) of
            #$CycProgram. Instances of #$CycTheCollection include all of
            the copies of #$CycProgram on storage media (see #$CycCopy)
            or running on computers (either #$CycAgent or #$CycImage) at
            any time in history. A notable instance of this #$CycAgent
            is #$Cyc, which is the agentive copy of #$CycTheCollection
            that one is currently running and using.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CycUniversalDate">
        <rdfs:label xml:lang="en">dates expressed in YYYYMMDD format</rdfs:label>
        <rdfs:comment>A collection of integers which represent
            #$CalendarDays expressed as an integer of the form YYYYMMDD.
            For example, 19690720 was the day of the Apollo 11 moon
            landing, July 20 1969, expressed as a #$CycUniversalDate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLInteger"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="CycUniversalSecond">
        <rdfs:label xml:lang="en">cyc universal second</rdfs:label>
        <rdfs:comment>A collection of integers which represent
            #$CalendarSeconds within their #$CalendarDay expressed as an
            integer of the form HHMMSS. For example, 130759 represents
            1:07:59 pm expressed as a #$CycUniversalSecond.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLInteger"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeInteger"/>
    </owl:Class>
    <owl:Class rdf:ID="CyclicalIntervalGroupType">
        <rdfs:label xml:lang="en">#$CyclicalIntervalGroupType</rdfs:label>
        <rdfs:comment>(#$isa X #$CyclicalIntervalGroupType) means that X
            is a collection of interval types whose instances recur in a
            set pattern throughout all of calendar history.  X must
            partition all of time: the elements of X must be mutually
            disjoint, and unioned altogether they must encompass all
            time.  For example, X could be the set of the seven calendar
            days (Monday through Sunday), or the set of the twelve
            calendar months (January through December).  I.e., (#$isa
            #$DayOfWeekType #$CyclicalIntervalGroupType) and (#$isa
            #$MonthOfYearType #$CyclicalIntervalGroupType).  `Recurring
            in a set pattern&apos; generally means that one can put the
            elements of X in order, say X1, X2,..., Xn, and there will
            be an instance of X1 immediately followed by an instance of
            X2 (that instance x2a of X2 will be #$contiguousAfter that
            instance x1a of X1),  and there will be an instance of X3
            immediately following that particular instance of X2, and
            there will be an instance of X4 immediately following that
            instance of X3, etc.  One final note:  when we arrange
            elements of X into such a pattern X1,...Xn (whose
            repetitions then `tile&apos; all time), n may be larger than
            the cardinality of X.  E.g., X might be the set with just
            the 2 elements WeekendDay (the union of the set #$Saturday
            and the set #$Sunday) and WeekDay, and then the arrangement
            that tiles all time is 5 contiguous WeekDays followed by 2
            contiguous WeekendDays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MutuallyDisjointIntervalCollectionType"/>
        <rdfs:subClassOf rdf:resource="#SecondOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="Cyclist">
        <rdfs:label xml:lang="en">cyclists</rdfs:label>
        <rdfs:comment>A specialization of #$IndividualAgent. Each
            instance of #$Cyclist is an agent (usually a person)
            entitled to inspect and modify the Cyc knowledge base.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CylinderShape">
        <rdfs:label xml:lang="en">cylinders</rdfs:label>
        <rdfs:comment>A specialization of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$CylinderShape is a three-dimensional object bounded by a
            circular base and top. Examples include spatially localized
            objects, such as the cylinders that house pistons in an
            internal combustion engine, as well as abstract cylinders.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="CylindricalHollowObject">
        <rdfs:label xml:lang="en">hollow cylindrical objects</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleThing;
            instances are characterized  by a cylindrical, single-walled
            structure and a hollow interior.  Examples include
            #$GunBarrels and #$Bottles.  The structure  in question must
            be &apos;long&apos; enough to justify the appelation of
            &apos;hollow&apos;.  Borderline non-cases might include
            two-dimensional ringlike structures like  wedding-rings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ContainerShapedObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DailyPersonalCleaning">
        <rdfs:label xml:lang="en">daily personal cleaning</rdfs:label>
        <rdfs:comment>A collection of events.  Each
            #$DailyPersonalCleaning encompasses the standard cleaning
            and grooming activities that an animal engages in over the
            course of a day.  Such a `daily routine&apos; is almost sure
            to include many brief grooming and cleaning actions, such as
            licking one&apos;s paws, combing one&apos;s hair, washing
            one&apos;s hands, shaving, bathing, etc., and those are
            sub-events of that #$DailyPersonalCleaning event.  For
            example, a human&apos;s #$DailyPersonalCleaning might have a
            #$TeethCleaning as one of its sub-events, along with a
            #$TakingABath, two instances of #$CombingHair, etc.   Note:
            Those specialized kinds of events, like #$CombingHair, are
            NOT subsets of #$DailyPersonalCleaning, since it would be
            abnormal for someone to JUST comb their hair each day (and
            do absolutely no other daily cleaning activity whatsoever).
            Note:  In the context #$HumanActivitiesMt --- where all the
            performers of actions are, by default, human beings ---
            #$DailyPersonalCleaning designates human grooming activities
            only.  In that microtheory, dog-grooming performed by human
            beings does not constitute #$DailyPersonalCleaning, even if
            it happens on a daily basis for some pampered poodle, as it
            is not PERSONAL (i.e, self-) cleaning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DairyProduct">
        <rdfs:label xml:lang="en">dairy products</rdfs:label>
        <rdfs:comment>A specialization of #$FoodOrDrink and an instance
            of #$FoodGroup.  Each instance of #$DairyProduct is a
            foodstuff that is milk or processed milk.  Important
            specializations of #$DairyProduct include
            #$CowsMilk-Product, #$Cheese, #$Butter, and #$IceCream.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#FoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DataMicrotheory">
        <rdfs:label xml:lang="en">#$DataMicrotheory</rdfs:label>
        <rdfs:comment>A specialization of #$DeclarativeContext (q.v.).
            An instance of #$DataMicrotheory contains information about
            particular #$Individuals of a certain kind (such as specific
            #$Persons, #$Organizations,  #$GeographicalRegions, or
            #$ConceptualWorks).  Data microtheories thus  typically
            contain mostly GAFs (see #$CycLClosedAtomicSentence) and few
            rules.  For example, #$PeopleDataMt contains lots of
            information about  individual #$Persons, but no rules about
            persons generally.  Contrast with  #$GeneralMicrotheory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeclarativeContext"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="DataStream">
        <rdfs:label xml:lang="en">streams (types of things)</rdfs:label>
        <rdfs:comment>This generic data type encapsluates the concept of
            streams in programming languages. This includes all streams,
            including Input and Output streams, as well as Byte and
            Character streams.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="Database-AbstractContent">
        <rdfs:label xml:lang="en">abstract databases</rdfs:label>
        <rdfs:comment>The collection of all databases considered as
            abstract repositories of information rather than as physical
            storage devices.   A database generally has some means of
            accessing the data from structured records, frames or
            relational structures, using some query language.  A
            particular #$Database-AbstractContent may exist in multiple
            copies, and may be distributed over several different
            physical data storage sites: see also #$Database-Physical.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndexedInformationSource"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Database-Physical">
        <rdfs:label xml:lang="en">#$Database-Physical</rdfs:label>
        <rdfs:comment>A specialization of both
            #$InformationBearingObject and #$StructuredKnowledgeSource.
            Each instance of #$Database-Physical is an IBO (either
            hardcopy or electronic) that stores many pieces of
            information, organized for easy scanning and access.
            Typically, a database involves one or more formatted data
            record schemes, together with some functionality for
            searching and retrieving data.  Note that, as an IBO, an
            instance of #$Database-Physical is some particular, tangible
            copy of a database. To refer to the abstract  content  of a
            database, use #$Database-AbstractContent, which is a
            specialization of #$AbstractInformationalThing. For computer
            programs which deal with databases, see #$DatabaseProgram.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DatabaseClientProgram">
        <rdfs:label xml:lang="en">database client program</rdfs:label>
        <rdfs:comment>A specialization of #$DatabaseProgram. Each
            instance of this collection is some instance of
            #$ComputerProgram-CW which presents information taken from a
            database (or databases) to the user -- often mediating
            between the user and one or more #$DatabaseServerProgram.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DatabaseProgram"/>
        <rdfs:subClassOf rdf:resource="#ClientProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DatabaseProgram">
        <rdfs:label xml:lang="en">database programs</rdfs:label>
        <rdfs:comment>A specialization of #$ApplicationProgram. Each
            instance of this collection is an instance of
            #$ComputerProgram-CW which has something (where this is
            deliberately left vague) to do with database usage or
            maintenance. Its major specializations are
            #$DatabaseServerProgram and #$DatabaseClientProgram (though
            the odd case will not fit under either of these -- for
            example programs which repair fragmented databases). See
            also #$Database-Physical, #$Database-AbstractContent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ApplicationProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DatabaseServerProgram">
        <rdfs:label xml:lang="en">#$DatabaseServerProgram</rdfs:label>
        <rdfs:comment>A specialization of #$DatabaseProgram. Each
            instance of this collection is some instance of
            #$ComputerProgram-CW which stores and manages databases,
            often presenting that information to
            #$DatabaseClientPrograms. See also #$RelationalDatabaseServerProgram.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DatabaseProgram"/>
        <rdfs:subClassOf rdf:resource="#ServerProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Date">
        <rdfs:label xml:lang="en">dates</rdfs:label>
        <rdfs:comment>A specialization of #$TimeInterval.  Each instance
            of #$Date is a temporally continuous instance of
            #$TimeInterval which can be defined purely by its location
            on a particular calendar.  Thus, an instance of #$Date could
            be a particular calendar day, calendar quarter, calendar
            month, or decade.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DateDenotingFunction">
        <rdfs:label xml:lang="en">date-denoting functions</rdfs:label>
        <rdfs:comment>#$DateDenotingFunction is a specialization of
            #$IndividualDenotingFunction.  For each function FN, FN is
            an instance of #$DateDenotingFunction if and only if (1) FN
            is an instance of #$IndividualDenotingFunction, (2) FN is
            not a #$SkolemFunction, and (3) (#$resultIsa FN COL) holds
            for some specialization COL of #$Date.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="Dawn">
        <rdfs:label xml:lang="en">dawns (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Twilight.  Each instance of
            #$Dawn is a period of time just before an instance of
            #$Sunrise (q.v.) during which the sky is partially and
            indirectly illuminated by the sun.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Twilight"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DayOfWeekType">
        <rdfs:label xml:lang="en">#$DayOfWeekType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$WeeklyTemporalObjectType. Each instance of
            #$DayOfWeekType is a collection of #$CalendarDays, all of
            whose instances correspond to the same particular  day of
            the week  in  the respective weeks in which they occur.  For
            example, #$Monday -- the  collection of all mondays -- is an
            instance of #$DayOfWeekType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WeeklyTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionallyClassifiedDisjointTimeIntervalType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="DaytimeWorkingHours">
        <rdfs:label xml:lang="en">daytime working hours</rdfs:label>
        <rdfs:comment>A specialization of #$TimeOfDay.  Each instance of
            #$DaytimeWorkingHours is a time interval during which most
            members of a working population perform their daily jobs.
            Instances of #$DaytimeWorkingHours will vary in their
            respective durations, starting points, and ending points
            (see the constants #$duration, #$startingPoint, and
            #$endingPoint), according to which group of workers is being considered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAbstractNounProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival abstract noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAdjective">
        <rdfs:label xml:lang="en">de-adjectival adjectives</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAdjectiveProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival adjective producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalSuffix"/>
        <rdfs:subClassOf rdf:resource="#AdjectiveProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAdverb">
        <rdfs:label xml:lang="en">de-adjectival adverbs</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adverb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAdverbProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival adverb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#AdverbProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalAffix">
        <rdfs:label xml:lang="en">de-adjectival affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalConcreteNounProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival concrete noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConcreteNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalNoun">
        <rdfs:label xml:lang="en">de-adjectival nouns</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalNounProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalSuffix"/>
        <rdfs:subClassOf rdf:resource="#NounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalSuffix">
        <rdfs:label xml:lang="en">de adjectival suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalVerb">
        <rdfs:label xml:lang="en">de-adjectival verbs</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Verb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeAdjectivalVerbProducingSuffix">
        <rdfs:label xml:lang="en">de adjectival verb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeAdjectivalSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#VerbProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeVerbalNoun">
        <rdfs:label xml:lang="en">#$DeVerbalNoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all nouns derived from verbs, including (but
            not limited to) those ending in &apos;-ing&apos;,
            &apos;-er/or&apos;, and &apos;tion&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeadAnimal">
        <rdfs:label xml:lang="en">#$DeadAnimal</rdfs:label>
        <rdfs:comment>A specialization of #$OrganicStuff (and not, of
            course, of #$Animal, whose instances must be alive).  Each
            instance of #$DeadAnimal is a corpse or partial remains of
            an individual animal, somewhat intact, and prior to any
            butchering, burning, cooking, dissolving, or fully decomposing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeadLanguage">
        <rdfs:label xml:lang="en">dead languages</rdfs:label>
        <rdfs:comment>A specialization of #$NaturalLanguage.  Each
            instance of #$DeadLanguage is a natural language that is no
            longer spoken as a native language (though written texts may
            survive and continue to be interpretable -- as is the case
            with #$LatinLanguage).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NaturalLanguage"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DebuggingAComputerProgram">
        <rdfs:label xml:lang="en">debugging a computer program</rdfs:label>
        <rdfs:comment>A collection of events, and a specialization of
            #$SimpleRepairing.  In each #$DebuggingAComputerProgram
            event,  a computer program is tested, analyzed, and modified
            (perhaps repeatedly) in order to remove unwanted features,
            restore intended functionality, etc.  This is more of a
            #$TemporalStuffType than a #$TemporalObjectType (i.e., more
            substance-like than object-like), since each `portion&apos;
            of the total #$DebuggingAComputerProgram event is itself a
            small #$DebuggingAComputerProgram event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#UsingADevice"/>
        <rdfs:subClassOf rdf:resource="#SimpleRepairing"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Decagon">
        <rdfs:label xml:lang="en">decagons</rdfs:label>
        <rdfs:comment>The collection of all ten-sided    #$Polygons.
            Note also that each instance has ten angles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="December">
        <rdfs:label xml:lang="en">December</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarMonth.  Each
            instance of #$December is the twelth and final month of a
            particular year in the #$GregorianCalendar (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeciduousPlant">
        <rdfs:label xml:lang="en">deciduous plants</rdfs:label>
        <rdfs:comment>A specialization of #$Plant-Woody. Each instance
            of #$DeciduousPlant is a plant which sheds all of its leaves
            once a year, seasonally, and subsequently grows new ones.
            Cf. #$EvergreenPlant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeclarativeContext">
        <rdfs:label xml:lang="en">declarative context</rdfs:label>
        <rdfs:comment>The collection of all contexts [#$Microtheory]
            which assert facts and rules about some world or facet of a
            world.  This is disjoint with #$PropositionalAttitudeContext
            which refers to groups of assertions which have the property
            of having some specific relationship with a sentient beings
            internal state (beliefs, hopes, goals, questions, etc.).  It
            is necessary, but not sufficient for a context to be a
            #$DeclarativeContext in order to derive new assertions in
            it.  A #$SourceMicrotheory or
            #$PropositionalInformationThing contains assertions that are
            expressly in some source.  Assertions that can be derived
            from those assertions are NOT expressly in such sources and
            so should not be derived within them, even though they may
            be instances of #$DeclarativeContext.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Decoding">
        <rdfs:label xml:lang="en">decoding</rdfs:label>
        <rdfs:comment>The collection of events where some data in an
            #$InformationBearingThing are transformed from a
            complex/compressed format to a more usable or natural format.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTRecoding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DecompositionEvent">
        <rdfs:label xml:lang="en">#$DecompositionEvent</rdfs:label>
        <rdfs:comment>The collection of events in which one or more
            objects decompose more or less completely.  See also the
            more general concept #$DecompositionProcess, in whose
            instances objects at least partially decompose.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DecompositionProcess">
        <rdfs:label xml:lang="en">decomposition</rdfs:label>
        <rdfs:comment>A specialization of both #$SeparationEvent and
            #$PhysicalTransformationProcess.  Each instance of
            #$DecompositionProcess is an event in which some
            object&apos;s matter undergoes chemical reactions (sometimes
            mediated by microorganisms) that result in the object losing
            its shape and other material characteristics.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationProcess"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Decrypting">
        <rdfs:label xml:lang="en">decryption processes</rdfs:label>
        <rdfs:comment>A specialization of #$Decoding.  In each instance
            of #$Decrypting, a transformation is applied to the
            information in an encrypted information-bearing object (see
            the collections #$Encrypting and #$InformationBearingObject)
            so that the information is rendered into a readily
            accessible form.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Decoding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DefaultDisjointEdibleStuffType">
        <rdfs:label xml:lang="en">#$DefaultDisjointEdibleStuffType</rdfs:label>
        <rdfs:comment>An instance of #$SiblingDisjointCollectionType
            (q.v.), and thus a collection of collections.  Each instance
            of #$DefaultDisjointEdibleStuffType is a collection of
            beverages or foodstuffs (a specialization of #$EdibleStuff)
            that is by default disjoint with every other instance of
            #$DefaultDisjointEdibleStuffType.  Instances of
            #$DefaultDisjointEdibleStuffType include
            #$SubmarineSandwich, #$Rice-Foodstuff, and #$Sauerkraut.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="DefaultDisjointScriptType">
        <rdfs:label xml:lang="en">#$DefaultDisjointScriptType</rdfs:label>
        <rdfs:comment>A collection of collections and an instance of
            #$SiblingDisjointCollectionType (q.v.).  Each instance TYPE
            of #$DefaultDisjointScriptType is a specialization  of
            #$Event of which the following is true, as a default
            assumption: every  instance of #$DefaultDisjointScriptType
            is either a specialization of TYPE, a  generalization of
            TYPE, or is disjoint with TYPE.  Asserting that TYPE is an
            instance of #$DefaultDisjointScriptType is thus a convenient
            way to make TYPE disjoint with a lot of other
            specializations of #$Event (viz. the other instances of
            #$DefaultDisjointScriptType), without having to enter a lot
            of #$disjointWith assertions.  Note that the default
            assumption mentioned above can be overridden, with respect
            to TYPE and some other #$DefaultDisjointScriptType
            OTHER-TYPE, by asserting (#$siblingDisjointExceptions TYPE OTHER-TYPE).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="DefaultMonotonicPredicate">
        <rdfs:label xml:lang="en">#$DefaultMonotonicPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each instance of
            #$DefaultMonotonicPredicate is a predicate whose use as the
            predicate of a locally asserted ground formula causes that
            formula to be entered, by default, as :MONOTONIC.  Examples:
            #$isa, #$genls, #$disjointWith, #$equals, #$arity, #$arg1Isa.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Defeatedness-Feeling">
        <rdfs:label xml:lang="en">defeatedness - feeling</rdfs:label>
        <rdfs:comment>The feeling of despair and loss one feels when
            defeated or overthrown.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Despair"/>
    </owl:Class>
    <owl:Class rdf:ID="DefenseSystem">
        <rdfs:label xml:lang="en">#$DefenseSystem</rdfs:label>
        <rdfs:comment>#$DefenseSystem is a specialization of both
            #$ProtectiveSystem and #$Artifact. Instances of
            #$DefenseSystem are created by agents to protect things (not
            necessarily the agents themselves) from harmful situations
            or individuals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#ProtectiveSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DefinedDataType">
        <rdfs:label xml:lang="en">#$DefinedDataType</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerDataType.   The
            collection of all data types that are currently available
            for   parameters in the current context of a
            #$ComputerCode-Source. Negative  examples for this
            collection would include abstract classes in
            #$JavaProgrammingLanguage, and underspecified data types
            like  (#$ProgramRepresentationFn #$RealNumber).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerDataType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="DefinitionalPredicate">
        <rdfs:label xml:lang="en">#$DefinitionalPredicate</rdfs:label>
        <rdfs:comment>The collection of all instances of #$Predicate
            whose uses are almost always considered  definitional  and
            thus are normally asserted in an instance of
            #$VocabularyMicrotheory.  If the use of a predicate is
            sometimes, but not primarily definitional, it should be an
            instance of #$SometimesDefinitionalPredicate, instead</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PossibleDefinitionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="DegenerationEvent">
        <rdfs:label xml:lang="en">#$DegenerationEvent</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$DegenerationEvent, some object loses its function(s)
            through a process of deterioration and/or a series of
            discrete breakdowns.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IncurringDamage"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DegreeGrantingHigherEducationInstitution">
        <rdfs:label xml:lang="en">degree granting institutions</rdfs:label>
        <rdfs:comment>#$DegreeGrantingHigherEducationInstitution is a
            specialization of #$HigherEducationInstitution.  Each
            instance of #$DegreeGrantingHigherEducationInstitution is a
            higher education institution that grants degrees. For those
            that do not grant degrees, such as colleges of universities,
            e.g. Trinity College, Cambridge, see specs of #$NonDegreeGrantingInstitution.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HigherEducationInstitution"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DegreeOfCloudiness">
        <rdfs:label xml:lang="en">levels of cloudiness</rdfs:label>
        <rdfs:comment>A collection of collections of #$OutdoorLocations.
            Each instance of #$DegreeOfCloudiness is collection of
            #$OutdoorLocations with a particular degree of cloud cover.
            Instances of #$DegreeOfCloudiness include #$Cloudless,
            #$PartiallyCloudCovered, and #$CompletelyCloudCovered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocationByWeatherType"/>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="DegreePrefix">
        <rdfs:label xml:lang="en">degree prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Delight">
        <rdfs:label xml:lang="en">delight</rdfs:label>
        <rdfs:comment>Live and obvious (and somewhat ephemeral) emotion
            found in the satisfaction or gratification induced by the
            possession, acquisition or expectation of something good or
            greatly desired.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cheerfulness"/>
        <rdfs:subClassOf rdf:resource="#Pleasure-Feeling"/>
    </owl:Class>
    <owl:Class rdf:ID="DeliveringSomeoneSomething">
        <rdfs:label xml:lang="en">delivering (type of thing)</rdfs:label>
        <rdfs:comment>The collection of delivery actions from a third
            person perspective. Delivery from the perspective of being
            done as a dedicated service.  We don&apos;t think that non
            dedicated delivery events are included here, for example, a
            waitress bringing client&apos;s food to the table.  Instead
            we mean things like what UPS, or Dominoes Pizza Delivery
            might do.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PuttingSomethingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAbstractNounProducingSuffix">
        <rdfs:label xml:lang="en">denominal abstract noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DenominalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAdjective">
        <rdfs:label xml:lang="en">denominal adjectives</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAdjectiveProducingSuffix">
        <rdfs:label xml:lang="en">denominal adjective producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DenominalSuffix"/>
        <rdfs:subClassOf rdf:resource="#AdjectiveProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAdverb">
        <rdfs:label xml:lang="en">denominal adverbs</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adverb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAdverbProducingSuffix">
        <rdfs:label xml:lang="en">denominal adverb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DenominalSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#AdverbProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalAffix">
        <rdfs:label xml:lang="en">denominal affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalConcreteNounProducingSuffix">
        <rdfs:label xml:lang="en">denominal concrete noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConcreteNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DenominalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalNoun">
        <rdfs:label xml:lang="en">denominal nouns</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalNounProducingSuffix">
        <rdfs:label xml:lang="en">denominal noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DenominalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalSuffix">
        <rdfs:label xml:lang="en">denominal suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DenominalAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalVerb">
        <rdfs:label xml:lang="en">denominal verbs</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Verb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenominalVerbProducingSuffix">
        <rdfs:label xml:lang="en">denominal verb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DenominalSuffix"/>
        <rdfs:subClassOf rdf:resource="#VerbProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DenotesArgInRelnPredicate">
        <rdfs:label xml:lang="en">predicates relating words to argument positions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Density">
        <rdfs:label xml:lang="en">#$Density</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$Density is a measure of an aspect of a
            tangible object, namely, its mass per volume.  Instances of
            #$Density include #$DenseAsOil, #$GaseousDensity, and
            #$SolidDensity.  See also the predicate #$densityOfObject,
            which relates an object to its density.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="DentalCareEvent">
        <rdfs:label xml:lang="en">dental care</rdfs:label>
        <rdfs:comment>The collection of events in which dental care is
            administered. This includes personal teeth cleaning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#DiagnosingAndRepairingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dentist">
        <rdfs:label xml:lang="en">tooth doctors</rdfs:label>
        <rdfs:comment>A specialization of #$MedicalCareProfessional.
            Each instance of #$Dentist is a medical care professional
            who has been trained to diagnose and treat diseases of, and
            injuries to, the gums and teeth.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Depression-Feeling">
        <rdfs:label xml:lang="en">feelings of depression</rdfs:label>
        <rdfs:comment>An emotion marked by sadness, inactivity,
            difficulty in thinking and concentration, feelings of
            dejection and hopelessness; unhappiness, discouraged and
            without vigor</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Gloominess"/>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalAffix">
        <rdfs:label xml:lang="en">#$DerivationalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WordConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalAffixByBasePOSCategory">
        <rdfs:label xml:lang="en">derivational affix by base p o s category</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixCategory"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalAffixByResultPOSCategory">
        <rdfs:label xml:lang="en">derivational affix by result p o s category</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixCategory"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalAffixation">
        <rdfs:label xml:lang="en">#$DerivationalAffixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affixation-WordFormationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalPrefix">
        <rdfs:label xml:lang="en">derivational prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalPrefixation">
        <rdfs:label xml:lang="en">derivational prefixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Prefixation"/>
        <rdfs:subClassOf rdf:resource="#DerivationalAffixation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalSuffix">
        <rdfs:label xml:lang="en">derivational suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivationalSuffixation">
        <rdfs:label xml:lang="en">derivational suffixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffixation"/>
        <rdfs:subClassOf rdf:resource="#Suffixation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivedNumericScalarIntervalType">
        <rdfs:label xml:lang="en">types of derived numeric scalar interval</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$DerivedNumericScalarIntervalType is a collection of
            numerically measurable #$ScalarIntervals whose units are
            complex (that is, whose units are derived from some more
            basic units of measure).  Instances include #$Volume,
            #$Area, and #$Acceleration.  See also the related collection #$FundamentalNumericScalarIntervalType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MeasurableScalarIntervalType"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivedWord">
        <rdfs:label xml:lang="en">derived words</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComplexWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DerivedWordFormingFunction">
        <rdfs:label xml:lang="en">derived word forming functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#BinaryFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="DescendingEvent">
        <rdfs:label xml:lang="en">descending</rdfs:label>
        <rdfs:comment>An event is an #$DescendingEvent if and only if
            its object (#$objectMoving) has a lower altitude
            (#$altitudeAboveSeaLevel) at the end of the event than it
            did at the beginning of the event.  Thus, some ascent may
            occur during the descent so long as the net effect is to
            decrease altitude.  Descending stairs, walking over a ridge
            on the way to a lower valley, being lowered, and airplane
            landings are exemplars of #$DescendingEvent.  Technically,
            sitting down and souffles falling are not exemplars because
            the #$altitudeAboveSeaLevel of these objects is not lower at
            the end of the event.  (#$altitudeAboveSeaLevel is based on
            the distance between the bottom of the object and the mean
            sea level.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DesertClimateCycle">
        <rdfs:label xml:lang="en">desert climates</rdfs:label>
        <rdfs:comment>A specialization of #$AnnualClimateCycle.  Each
            instance of #$DesertClimateCycle is a year-long event
            consisting of weather occurring (typically) within a desert
            region.  Characteristics of a desert climate cycle include
            wide temperature extremes (from very hot in the day to cold
            at night) and very little yearly precipitation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnnualClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeskWorker">
        <rdfs:label xml:lang="en">office worker</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation.
            #$DeskWorker is a very broad category, consisting of those
            people who do a significant amount of their work sitting at
            desks (as opposed, e.g., to those who do physically
            demanding or outdoor work).  While the sorts of work
            performed at desks make up too heterogeneous a class for
            #$DeskWorker itself to be considered an
            #$PersonTypeByOccupation (q.v.), some of its subcollections
            do correspond to types of occupations, e.g. #$Administrator,
            #$ComputerOperator, and #$Secretary.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Despair">
        <rdfs:label xml:lang="en">despair</rdfs:label>
        <rdfs:comment>Utter loss of hope</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Misery"/>
    </owl:Class>
    <owl:Class rdf:ID="DestructionEvent">
        <rdfs:label xml:lang="en">#$DestructionEvent</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$DestructionEvent, at least one instance of #$Entity (the
            #$inputsDestroyed) ceases to exist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner">
        <rdfs:label xml:lang="en">articles (types of things)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all determiners. Determiners are function
            words which can precede nouns. Example: &apos;these&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-Central">
        <rdfs:label xml:lang="en">determiner - central</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-ClassA">
        <rdfs:label xml:lang="en">determiner - class a</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-ClassB">
        <rdfs:label xml:lang="en">determiner - class b</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-ClassC">
        <rdfs:label xml:lang="en">determiner - class c</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-ClassD">
        <rdfs:label xml:lang="en">determiner - class d</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-Definite">
        <rdfs:label xml:lang="en">determiner - definite</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Determiner-Central"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-Indefinite">
        <rdfs:label xml:lang="en">determiner - indefinite</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Determiner-Central"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Determiner-Numeric">
        <rdfs:label xml:lang="en">determiner - numeric</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. the
            collection of all #$Determiner-Indefinites that represent
            numeric values.  All #$Number-SPs are also #$Determiner-Numerics.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalAbstractNounProducingSuffix">
        <rdfs:label xml:lang="en">deverbal abstract noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DeverbalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalAdjective">
        <rdfs:label xml:lang="en">deverbal adjectives</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalAdjectiveProducingSuffix">
        <rdfs:label xml:lang="en">deverbal adjective producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeverbalSuffix"/>
        <rdfs:subClassOf rdf:resource="#AdjectiveProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalAffix">
        <rdfs:label xml:lang="en">deverbal affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalConcreteNounProducingSuffix">
        <rdfs:label xml:lang="en">deverbal concrete noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConcreteNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#DeverbalNounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalNounProducingSuffix">
        <rdfs:label xml:lang="en">deverbal noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeverbalSuffix"/>
        <rdfs:subClassOf rdf:resource="#NounProducingSuffix"/>
        <rdfs:subClassOf rdf:resource="#CategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeverbalSuffix">
        <rdfs:label xml:lang="en">deverbal suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeverbalAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Device-SingleUser">
        <rdfs:label xml:lang="en">single-user devices</rdfs:label>
        <rdfs:comment>#$Device-SingleUser is a specialization of
            #$PhysicalDevice.  Each instance of #$Device-SingleUser is a
            device that typically has exactly one (i.e., one and only
            one)  user  who is the only individual who derives the value
            of its single function at a single time.  A screwdriver (an
            instance of  #$Screwdriver) is a #$Device-SingleUser, but a
            grand piano (an instance of #$GrandPiano) is not.  A
            borderline non-example is a multiple-passenger car ---
            although only one person operates it, several can  use  it
            at once, i.e. derive the value of its primary function
            (transportation).  So a multiple-passanger car is not a
            #$Device-SingleUser. A borderline example is a telephone --
            although it requires two or more users (each on telephones)
            for meaningful use, each phone generally has just one user
            at a time.  So a telephone is a #$Device-SingleUser, but a
            telephone-circuit is not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Device-UserControlled">
        <rdfs:label xml:lang="en">user-guided devices</rdfs:label>
        <rdfs:comment>#$Device-UserControlled is a specialization of
            #$PhysicalDevice.  Each   instance of
            #$Device-UserControlled is an artifact which is normally
            controlled by its user while serving its intended
            function(s).  The artifact may be guided   during part or
            all of its operation, and the user may guide it by hand or
            some other means of interaction.  #$Tool is an important
            specialization of this collection, and further examples of
            #$Device-UserControlled include instances of the collections
            #$PomPom, #$Van, #$Spoon, and #$ToiletPaper.  This
            collection does not include those devices which merely
            require some user intervention to get started or to be set
            up, e.g., instances of #$SofaBed, #$Holster, or
            #$LightBulbIncandescent.  #$ManualCarWindow and
            #$AutomaticCarWindow are also not included, since they do
            not require user guidance while performing their main task
            (keeping out the wind), although they can be adjusted by the user.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Device-UserPowered">
        <rdfs:label xml:lang="en">user-powered devices</rdfs:label>
        <rdfs:comment>A specialization of #$MusclePoweredDevice.  Each
            instance of #$Device-UserPowered is an artifact deliberately
            designed to perform a particular function, and one which
            depends upon the physical efforts of the user to perform
            that function in part or in whole.  A paradigm  example
            would be a bicycle.  However, the definition also leaves
            room  for some counterintuitive cases -- for example, combs
            and forks also qualify as user-powered devices.  Borderline
            cases would be devices which  require effort on the part of
            the user to perform part of the function,  but not all of
            it.  For example, many gas-powered lawnmowers have to be
            pushed by hand, but use an internal combustion engine to
            impart the necessary velocity to the cutting surfaces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MusclePoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DeviceRunning">
        <rdfs:label xml:lang="en">running (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalEvent.  Each
            instance of #$DeviceRunning is an event in which some device
            is running.  This collection includes events which are
            complete cycles of a device&apos;s normal function (see the
            specialization #$SingleCompleteRunOfADevice), as well as
            random time slices (see the predicate #$timeSlices) of such
            events.  Examples of #$DeviceRunning include instances of
            the collections #$AirplaneTakeOff, #$SkateBoarding, and
            #$OffRoadMotorcycleRiding.  Note that an instance of
            #$DeviceRunning does not need to be a continuous event.
            Examples of discontinuous instances of #$DeviceRunning
            include the following: the event of all the ignition phases
            of the firing of a particular automobile&apos;s engine
            during November of 1996; the event in which a  particular TV
            was on and showing a commercial in the year 2001.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DevisedPracticeOrWork">
        <rdfs:label xml:lang="en">works (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Artifact-Intangible,
            #$IntangibleExistingThing, and #$AbstractInformationalThing.
            Each instance of  #$DevisedPracticeOrWork is an abstract
            work which is the deliberate creation of one or more
            individuals working in concert.  Such works are instantiated
            either in #$Events (for instances of
            #$DevisedStructuredActivity (q.v.)) or in
            #$InformationBearingThings.  Positive examples include:
            #$MobyDickNovel (as opposed to any instance COPY of
            #$BookCopy such that (#$instantiationOfWork #$MobyDickNovel
            COPY), #$Chess (as opposed to games of chess -- see
            (#$PlayingFn #$Chess)), and Beethoven&apos;s 9th Symphony
            (as opposed to any performance of this symphony or any copy
            of its score).  Negative examples include paintings
            (instances of #$InformationBearingObject), customs (not
            deliberate creations), natural languages (not deliberate
            creations), and codes (their uses, not instantiations, are
            IBTs).  For those works which have associated
            #$AbstractInformationStructures see #$ConceptualWork.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>

        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DevisedStructuredActivity">
        <rdfs:label xml:lang="en">devised structured activities</rdfs:label>
        <rdfs:comment>A specialization of #$DevisedPracticeOrWork.  Each
            instance of #$DevisedStructuredActivity is an abstraction of
            a largely rule-governed activity.  Major specializations of
            this collection include #$Game and #$Sport -- instances of
            these collections are abstractions of activities that are
            obviously rule-governed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DevisedPracticeOrWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DiagnosingAndRepairingSomething">
        <rdfs:label xml:lang="en">diagnosing and repairing something</rdfs:label>
        <rdfs:comment>A specialization of both
            #$IntrinsicStateChangeEvent and #$HumanActivity.  Each
            instance of #$DiagnosingAndRepairingSomething is an event in
            which something is diagnosed and repaired.  Such events can
            range from fixing an instance of #$PhysicalDevice (q.v.) to
            killing pests that infest a place.  All instances of
            #$DiagnosingAndRepairingSomething involve an intrinsic
            change in the thing which undergoes repairs.  Note that a
            diagnosis action alone, or a repair action alone, would not
            be instances of this collection, although they could be
            sub-events of an instance of this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SimpleRepairing"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DietaryDeficiencyCondition">
        <rdfs:label xml:lang="en">dietary deficiency conditions</rdfs:label>
        <rdfs:comment>The collection of physiological conditions brought
            on by consuming less of a nutrient than the body requires.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Malnutrition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Diffidence">
        <rdfs:label xml:lang="en">diffidence</rdfs:label>
        <rdfs:comment>Unsure of himself. Emotion of a person who feels
            hesitant, lacking self-confidence. Distrust in my own
            ability, opinions or powers</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Humility"/>
        <rdfs:subClassOf rdf:resource="#Doubt"/>
    </owl:Class>
    <owl:Class rdf:ID="DigestionEvent">
        <rdfs:label xml:lang="en">digestion</rdfs:label>
        <rdfs:comment>A specialization of
            #$BiologicalTransportationEvent and
            #$BiologicalDestructionEvent.  Each instance of
            #$DigestionEvent is a process in which a single animal
            converts food into substances that can be assimilated by the
            body.  This collection should not be confused with
            #$DigestingInStomach, each instance of which occurs only in
            an instance of #$Stomach; an instance of #$DigestionEvent
            spans the whole #$DigestiveSystem, from start to finish.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalDecompositionEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#TranslationAlongInternalLivingStructure"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DigestiveSystem">
        <rdfs:label xml:lang="en">digestive systems</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart and
            #$ConnectedPathSystem. Each instance of #$DigestiveSystem is
            a system of organs and other body parts which work together
            to accomplish the digestion function (see #$DigestionEvent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PipingSystem-Generic"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Digit-AnatomicalPart">
        <rdfs:label xml:lang="en">digits</rdfs:label>
        <rdfs:comment>A specialization of #$Appendage-AnimalBodyPart.
            Each instance of a #$Bird, #$Bat-Mammal, or other #$Vertebrate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DimensionlessUnitOfMeasure">
        <rdfs:label xml:lang="en">#$DimensionlessUnitOfMeasure</rdfs:label>
        <rdfs:comment>A subcollection of #$UnitOfMeasure.
            #$DimensionlessUnitOfMeasure is the collection of
            measurement functions whose results are instances of
            #$ScalarInterval which have no dimension; i.e., they are
            simply numbers, instances of #$IntervalOnNumberLine.
            Examples include #$Percent, #$Unity, #$Per1000.  (#$Percent
            50) returns the point-interval, one-half (0.5).  (#$Unity 3
            4) returns the interval that is the range of numbers between
            3 and 4, inclusive.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="Diphthong-Vowel">
        <rdfs:label xml:lang="en">diphthong - vowel</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vowel"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DiplomaticMission-ThePost">
        <rdfs:label xml:lang="en">diplomatic mission - the post</rdfs:label>
        <rdfs:comment>#$DiplomaticMission-ThePost is a specialization of
            #$LegalGovernmentOrganization.  Each instance of
            #$DiplomaticMission-ThePost is an official diplomatic
            mission (the organization --embassy or consulate -- not
            physical structure) of a legal government in a foreign country.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectFireWeapon">
        <rdfs:label xml:lang="en">direct fire weapons</rdfs:label>
        <rdfs:comment>#$DirectFireWeapon is a specialization of
            #$ProjectileLauncher and #$Weapon.  Each instance of
            #$DirectFireWeapon is a weapon that shoots a projectile such
            as a bullet in a flat trajectory as opposed to the arching
            trajectory of an #$IndirectFireWeapon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProjectileLauncher"/>
        <rdfs:subClassOf rdf:resource="#Weapon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectedAcyclicGraph">
        <rdfs:label xml:lang="en">Directed Acyclic Graph</rdfs:label>
        <rdfs:comment>The collection of all those #$DirectedGraphs
            (node-and-link structures in which each link has one
            direction) each of which has no directed cycle in it.  This
            is the intersection of #$DirectedGraph and
            #$DirectedAcyclicPathSystem (which is the same as the
            intersection of #$SimpleGraph-GraphTheoretic and
            #$DirectedAcyclicPathSystem).  A #$DirectedAcyclicGraph is
            often used as a representation of a #$PartialOrdering.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectedGraph"/>
        <rdfs:subClassOf rdf:resource="#DirectedAcyclicPathSystem"/>
        <rdfs:subClassOf rdf:resource="#DirectedMultigraph"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectedAcyclicPathSystem">
        <rdfs:label xml:lang="en">directed acyclic path systems</rdfs:label>
        <rdfs:comment>The collection of all #$DirectedPathSystems each
            of which has no directed cycle in it (see
            #$directedCycleInSystem).  Note that each instance of
            #$DirectedAcyclicPathSystem has no loops in it, although it
            may have an undirected graph cycle in it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectedPathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="DirectedGraph">
        <rdfs:label xml:lang="en">directed graph</rdfs:label>
        <rdfs:comment>The collection of all directed simple graphs,
            i.e., node-and-link structure in which every link has one
            direction and no multiple links (between a pair of nodes) or
            loops are allowed, as studied in graph theory.  This is the
            intersection of #$SimpleGraph-GraphTheoretic and
            #$DirectedMultigraph, which is the same as the intersection
            of #$SimpleGraph-GraphTheoretic and #$DirectedPathSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SimpleGraph-GraphTheoretic"/>
        <rdfs:subClassOf rdf:resource="#DirectedMultigraph"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectedMultigraph">
        <rdfs:label xml:lang="en">directed multigraph</rdfs:label>
        <rdfs:comment>A specialization of both #$DirectedPathSystem and
            #$Multigraph.  Each instance of #$DirectedMultigraph is a
            multigraph in which every link has one direction.  Note that
            there can be loops and multiple links between a pair of
            nodes in a given instance of #$DirectedMultigraph.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Multigraph"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectedPathSystem">
        <rdfs:label xml:lang="en">#$DirectedPathSystem</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural  and a
            specialization of #$Semi-DirectedPathSystem.  Each instance
            of  #$DirectedPathSystem is a path system SYS in which every
            link LINK is  given exactly one direction (specified by
            (#$linkFromToInSystem LINK X Y SYS),  (#$PathFromFn LINK
            SYS), or (#$PathToFn LINK SYS)).  Note that #$PathFromFn
            and #$PathToFn are only defined for directed path systems.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Semi-DirectedPathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="DirectedTranslation">
        <rdfs:label xml:lang="en">directed movements</rdfs:label>
        <rdfs:comment>A specialization of #$Movement-TranslationEvent.
            Each instance of #$DirectedTranslation is a movement event
            that is #$performedBy an #$Agent that intends for the
            #$objectMoving to reach a particular #$target.  Examples:
            William Tell shooting the apple off his son&apos;s head,
            John Wilkes Booth shooting Abraham Lincoln, the last time
            you tossed a frisbee to someone, a pilot landing an
            airplane, and a skiier skiing one run of the downhill course.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectionExpression">
        <rdfs:label xml:lang="en">direction expression</rdfs:label>
        <rdfs:comment>A specialization of #$UnitVectorInterval.  Each
            instance of #$DirectionExpression is a vector representing a
            direction.  Typically these expressions are used to indicate
            direction between two objects or locations.  An important
            specialization of this collection is #$GeographicalDirection (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DirectiveIllocutionaryForce">
        <rdfs:label xml:lang="en">directive illocutionary forces</rdfs:label>
        <rdfs:comment>A collection of illocutionary forces.  If a
            communication act has an instance of this collection as an
            attribute, then the communication explains or refers
            directly to some action and, depending upon the relevant
            illocutionary force, expresses the speaker&apos;s (see
            #$senderOfInfo) desire that the communication target
            (#$communicationTarget) either perform or not perform the
            action referred to in the communication act.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="Dirtiness">
        <rdfs:label xml:lang="en">dirtiness</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of the collection #$Dirtiness is a specific level
            of dirtiness (or, alternatively, cleanliness).  Instances of
            #$Dirtiness include #$Dirty, #$ReallyDirty, #$ALittleDirty,
            #$Clean, and #$Sterile.  Indicate a particular object&apos;s
            #$Dirtiness with the predicate #$dirtinessOfObject (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="DisappearingFromSight">
        <rdfs:label xml:lang="en">#$DisappearingFromSight</rdfs:label>
        <rdfs:comment>This is the collection of events in which an
            object becomes hidden from an animal&apos;s sight, either by
            becoming too distant to be seen, or by the animal&apos;s
            line of sight becoming blocked by another object.  An animal
            may not actually see the object before it disappears, but it
            was visible in the context.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Disappointed">
        <rdfs:label xml:lang="en">agents who is disappointed</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            dissapointed. Use this constant with a
            #$GenericValueFunction to denote a collection of agents that
            are in this emotional state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dissatisfied"/>
        <rdfs:subClassOf rdf:resource="#Sad"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Disappointment">
        <rdfs:label xml:lang="en">#$Disappointment</rdfs:label>
        <rdfs:comment>The attribute-type associated with feeling
            defeated in expectation or hope. (For the rationale behind
            treating feelings as types   -- i.e. collections -- of
            attributes, see the comment   on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sadness"/>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="Disapproval">
        <rdfs:label xml:lang="en">#$Disapproval</rdfs:label>
        <rdfs:comment>The emotion or state of disapproving of something;
            a negative attitude towards some situation, proposal,
            person, or thing, implying a judgment based on explicit or
            implicit standards (rational, moral, pragmatic, or etc.).
            This is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.  More specialized
            #$FeelingTypes than #$Disapproval are #$Contempt, #$Hate,
            #$Abhorrence, etc.  More subtly, it is often true that
            feelings of #$Jealousy or #$Envy manifest in superficial
            shows of #$Disapproval.  #$Disapproval is a #$Collection ---
            for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Disapproval-CommunicationAct">
        <rdfs:label xml:lang="en">expressing disapproval</rdfs:label>
        <rdfs:comment>A specialization of #$Inform-CommunicationAct.  In
            each instance of #$Disapproval-CommunicationAct,  an #$Agent
            expresses disapproval of something.  Instances of
            #$Disapproval-CommunicationAct are often (though not always)
            accompanied by feelings of #$Disapproval. For situations
            where what the agent disapproves of can be expressed in
            propositional form, see #$disapprovedStatement. It is also
            worth noting that instances of
            #$Disapproval-CommunicationAct differ from instances of
            #$Rejecting-CommunicationAct, in that the former are
            expressed judgments that a certain action or opinion is
            inappropriate, morally wrong, etc., while the latter involve
            the denial of the propositional content of some communication.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Inform-CommunicationAct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Disc3DShape">
        <rdfs:label xml:lang="en">disc 3 d shape</rdfs:label>
        <rdfs:comment>A subcollection of #$CylinderShape. Each instance
            of #$Disc3DShape has a height much less than the radius of
            its base.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CylinderShape"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DiseaseType">
        <rdfs:label xml:lang="en">#$DiseaseType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$DiseaseType is a subcollection of #$AilmentCondition that
            is normally classified as a type of disease.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalConditionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Disgust">
        <rdfs:label xml:lang="en">disgusted</rdfs:label>
        <rdfs:comment>A feeling of repulsion or aversion towards
            something considered distasteful or repugnant.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingTypes than
            #$Disgust include feelings of #$Abhorrence.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
    </owl:Class>
    <owl:Class rdf:ID="Disgusted">
        <rdfs:label xml:lang="en">agents who is disgusted</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            disgusted. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DisjointCollectionType">
        <rdfs:label xml:lang="en">#$DisjointCollectionType</rdfs:label>
        <rdfs:comment>A collection of collections of collections and a
            specialization of #$SiblingDisjointCollectionType (q.v.).  A
            disjoint collection type is such that its instances are
            collections that are all disjoint from one another.  That
            is, each instance DISCOLTYPE of #$DisjointCollectionType  is
            a collection whose instances are mutually disjoint
            collections: no two  instances of DISCOLTYPE have any
            instances in common.  Instances of  #$DisjointCollectionType
            include #$BiologicalSpecies and #$SportsTeamTypeBySport.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SiblingDisjointCollectionType"/>
        <rdfs:subClassOf rdf:resource="#DisjointSetOrCollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="DisjointSetOrCollectionType">
        <rdfs:label xml:lang="en">disjoint sets</rdfs:label>
        <rdfs:comment>A collection of mathematical sets and collections
            whose elements are themselves mathematical sets or
            collections.  A set or collection, SETORCOL, of sets or
            collections is an instance of #$DisjointSetOrCollectionType
            just in case the elements of SETORCOL are mutually disjoint
            -- that is, no two elements of SETORCOL have any elements in common.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SetOrCollectionType"/>
        <rdfs:subClassOf rdf:resource="#SiblingDisjointSetOrCollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Dislike">
        <rdfs:label xml:lang="en">#$Dislike</rdfs:label>
        <rdfs:comment>A feeling of disaffection or disaffinity for a
            person or thing.  This is a #$Collection --- for an
            explanation of that, see #$Happiness.  Some more specialized
            #$FeelingTypes than #$Dislike are #$Disgust, #$Contempt,
            #$Hate, #$Resentment, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="DisputeEvent">
        <rdfs:label xml:lang="en">#$DisputeEvent</rdfs:label>
        <rdfs:comment>A collection of events with multiple participants.
            In each #$DisputeEvent,  some participants seek to achieve
            states of affairs that other participants seek to prevent.
            Disputes may or may not get settled.  Settlement of a
            dispute may be by fighting, by competition, by using a
            mediator or court, by chance, by mutual reasoning, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConflictEvent"/>
        <rdfs:subClassOf rdf:resource="#HostileSocialAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dissatisfaction">
        <rdfs:label xml:lang="en">#$Dissatisfaction</rdfs:label>
        <rdfs:comment>Feeling of discontent, due to a lack of
            fulfillment of an agent&apos;s desires, needs, or
            requirements.  This is a collection; for an explanation of a
            typical #$FeelingType, see #$Happiness.   Some more
            specialized #$FeelingTypes than #$Dissatisfaction are
            #$Disappointment, #$Frustration, #$Impatience, #$Anger, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Dissatisfied">
        <rdfs:label xml:lang="en">agents who is dissatisfied</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            dissatisfied. Use this constant with a
            #$GenericValueFunction to denote a collection of agents that
            are in this emotional state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dissolving">
        <rdfs:label xml:lang="en">dissolving events</rdfs:label>
        <rdfs:comment>The collection of all events in which one solid or
            gasseous substance disolves in some fluid.  After disolving
            the matter in the #$objectOfStateChange is dispersed in
            discrete molecules or ions</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Distance">
        <rdfs:label xml:lang="en">distance</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity. Each
            instance of #$Distance is the length of a path in space
            extending from one point to another. In some contexts, for
            example in the argument 2 position of
            #$altitudeAboveSeaLevel, an instance of #$Distance will
            include directional information.  In these contexts,
            instances can take on positive or negative values.  In other
            contexts, directional information will not matter, and
            instances of #$Distance will only take on non-negative
            values.  See the specialization #$Distance-Absolute for
            measures of distance that necessarily do not include
            directional information, and thus are always non-negative.
            An instance of #$Distance may be either a fixed interval,
            such as the height of the #$WashingtonMonumentInWashingtonDC
            or the altitude of the #$DeadSea, or a range, such as
            #$WithinAudibleDistance (see #$ScalarInterval for more
            explanation). See #$UnitOfDistance for the units used by Cyc
            to measure distances.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="Distance-Absolute">
        <rdfs:label xml:lang="en">absolute distances</rdfs:label>
        <rdfs:comment>#$Distance-Absolute is the length of a path in
            space extending from one point to another.  Unlike
            #$Distance, instances of #$Distance-Absolute do not contain
            directional information.  Rather #$Distance-Absolute is by
            definition a scalar, not a vector quantity, and is thus
            always positive or zero.  Instances of #$Distance may be
            either a fixed interval such as the height of the
            #$WashingtonMonumentInWashingtonDC, or a range, such as
            #$WithinAudibleDistance (see #$ScalarInterval for more
            explanation). Also see #$UnitOfDistance for the units used
            by Cyc to measure distances.  Distances must be
            #$NonNegativeScalarIntervals.  See also #$Distance, which
            can take on negative values.  Exemplars of
            #$Distance-Absolute include the distance in miles between
            Austin and San Antonio, or the turning radius of a Model T
            Automobile. Non-exemplars of #$Distance-Absolute include
            height above sea level. Since the Dead Sea is below sea
            level, its height above sea level is a negative value.  Thus
            #$Distance is a more appropriate argument constraint for
            height above sea level.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#Distance"/>
    </owl:Class>
    <owl:Class rdf:ID="Distress">
        <rdfs:label xml:lang="en">trouble</rdfs:label>
        <rdfs:comment>Extremely troubled; mentally confused, distracted.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="DistributingMetaKnowledgePredicate">
        <rdfs:label xml:lang="en">distributing meta knowledge predicate</rdfs:label>
        <rdfs:comment>A subcollection of  #$MetaKnowledgePredicate,
            instances of which  distribute  over each of the multiple
            assertions resulting from the polycanonicalization of an
            assertion. Let DIST-METAPRED be an instance of
            #$DistributingMetaKnowledgePredicate, and suppose that one
            asserts (DIST-METAPRED ARG1 ARG2) and that ARG1
            polycanonicalizes into ASSERTION1 and ASSERTION2.  Then
            (DIST-METAPRED ASSERTION1 ARG2) and (DIST-METAPRED
            ASSERTION2 ARG2) will both be asserted to the Knowledge Base automatically.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="DistributionEvent">
        <rdfs:label xml:lang="en">#$DistributionEvent</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PurposefulPhysicalAction and #$TransferOut.  Each instance
            of #$DistributionEvent is an event in which tangible objects
            are distributed from a source to various destinations via
            some distribution network.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DistributiveLattice">
        <rdfs:label xml:lang="en">distributive lattices</rdfs:label>
        <rdfs:comment>The subcollection of #$Lattice-LatticeTheoretic
            that contains all those lattices called &apos;distributive
            lattices&apos; by lattice theorists.  A
            #$Lattice-LatticeTheoretic LATICE (with the #$baseSet S,
            meet operation MEET and join operation JOIN) is distributive
            if the distribution laws hold, i.e., for each X, Y and Z in
            S, (MEET X (JOIN Y Z)) = (JOIN (MEET X Y) (MEET X Z)).  Note
            that this condition is equivalent to the condition that for
            each X, Y and Z in S, (JOIN X (MEET Y Z)) = (MEET (JOIN X Y)
            (JOIN X Z)).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ModularLattice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DitransitivePPCompFrame">
        <rdfs:label xml:lang="en">ditransitive pp comp frame</rdfs:label>
        <rdfs:comment>Frames used for verbs that take an NP complement
            followed by a PP complement. Examples include &apos;make X
            out of Y&apos;, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#PassivizableFrame"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#PPCompFrame"/>
    </owl:Class>
    <owl:Class rdf:ID="DivineBeing">
        <rdfs:label xml:lang="en">divine beings</rdfs:label>
        <rdfs:comment>The collection of all divinities, or supernatural
            beings that are gods (or God) or god-like.  Instances of
            #$DivineBeing are usually (if not always) immortal.  Note
            that this collection is _not_ a   specialization of
            #$Agent-Intangible, since some god-like beings are believed
            to have physical bodies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SupernaturalBeing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DoAux">
        <rdfs:label xml:lang="en">the auxiliary verb &apos;do&apos;</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            auxiliary verb &apos;do&apos;. It has unique syntactic
            functions, for example, do-support in yes/no questions, so
            it is treated as a separate part of speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuxVerb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dock">
        <rdfs:label xml:lang="en">#$Dock</rdfs:label>
        <rdfs:comment>#$Dock is a specialization of #$FixedStructure,
            #$TransportFacility, and #$OutdoorLocation.  Each instance
            of #$Dock is a long flat walkway that juts out over water
            from shorelines.  A dock&apos;s main function is to provide
            a place to secure boats and to provide a place where
            passengers and cargo can be loaded and unloaded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Doctor-Medical">
        <rdfs:label xml:lang="en">#$Doctor-Medical</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$PersonWithOccupation. Each instance of
            #$Doctor-Medical is a person with a certain type of
            education in the field of medicine (usually such a person
            has obtained an MD degree) who is professionally licensed to
            practice medicine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Scientist"/>
        <rdfs:subClassOf rdf:resource="#Prescriber"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DocumentationConstant">
        <rdfs:label xml:lang="en">documentation constant</rdfs:label>
        <rdfs:comment>A collection of CycL constants whose purpose is to
            facilitate users in their understanding of the system,
            tracking knowledge representation work being done, noting
            cleanup work to be done, etc. Documentation constants are
            usually not involved in inference.  Instances may be
            excluded from versions of the knowledge base in which
            available memory is a premium without affecting the
            performance of applications.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
        <rdfs:subClassOf rdf:resource="#ImplementationConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="DocumentationPredicate">
        <rdfs:label xml:lang="en">documentation predicates</rdfs:label>
        <rdfs:comment>A collection of predicate-denoting constants
            specifically designed for facilitating #$Cyclists in their
            understanding of the system, tracking knowledge
            representation work being done, noting cleanup work to be
            done, etc.  Documentation predicates are usually not
            involved in inference.  They may be excluded from knowledge
            bases in which available memory is a premium without
            affecting the performance of applications.
            #$DocumentationPredicate is used in code to determine which
            documentation to show to the user when they request to see
            documentation for a first-order reified term (or  FORT ).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#DocumentationConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="Dodecagon">
        <rdfs:label xml:lang="en">dodecagon</rdfs:label>
        <rdfs:comment>A specialization of #$Polygon. Instances of
            #$Dodecagon  are polygon with 12 sides.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dog">
        <rdfs:label xml:lang="en">#$Dog</rdfs:label>
        <rdfs:comment>A #$BiologicalSpecies (scientific name `Canis
            familiaris&apos;) that is a  specialization of
            #$CanineAnimal (q.v.).  Each instance of #$Dog is a  canine
            animal that has either been bred to be a domestic pet (see
            #$DomesticatedAnimal) or is a wild canine animal that is not
            an instance  of #$Wolf, #$Fox, or any other non-dog
            specialization of #$CanineAnimal.   (Thus #$Dog includes
            Australian dingos, e.g.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CanineAnimal"/>
        <rdfs:subClassOf rdf:resource="#DomesticatedAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DomesticPet">
        <rdfs:label xml:lang="en">#$DomesticPet</rdfs:label>
        <rdfs:comment>#$DomesticPet is a specialization of
            #$DomesticatedAnimal, #$HumanOccupationConstructResident,
            and #$PortableObject.  Each specialization of #$DomesticPet
            is a type of domesticated animal kept by humans primarily
            for companionship.  Many members of #$DomesticPet live in
            the homes of their owners.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#DomesticatedAnimal"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructResident"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DomesticatedAnimal">
        <rdfs:label xml:lang="en">domesticated animals</rdfs:label>
        <rdfs:comment>A specialization of #$TameAnimal.  Each instance
            of #$DomesticatedAnimal is an animal that has been bred and
            trained in such a way that it cannot readily survive in the
            wild.  Domesticated animals are kept by humans for labor,
            transportation, food, or as pets, and their relations with
            humans are more or less cooperative.  #$DomesticatedAnimal
            does _not_ include most wild animals kept in zoos (see
            #$CaptiveAnimal).  Cf. #$WildAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TameAnimal"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DomesticatedAnimalFood">
        <rdfs:label xml:lang="en">#$DomesticatedAnimalFood</rdfs:label>
        <rdfs:comment>A specialization of #$Food.  Each instance of
            #$DomesticatedAnimalFood is a foodstuff produced by human
            beings and intended for consumption by domesticated animals.
            This collection includes feed manufactured for horses,
            cattle, chickens, and other farm animals, as well as pet food.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Food"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Doorway">
        <rdfs:label xml:lang="en">#$Doorway</rdfs:label>
        <rdfs:comment>#$Doorway is a specialization of #$Portal,
            #$CavityWithWalls, and #$Artifact-NonAgentive.  Each
            instance of #$Doorway is a portal in some instance of
            #$HumanOccupationConstruct (q.v.), suitable for people (and
            perhaps vehicles) to enter and exit.  Each instance of
            #$Doorway includes the frame, not merely the empty space
            within the doorway.  Instances of #$Doorway include doorways
            to houses, office buildings, elevators, automobiles,
            airplanes, and garages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#CavityWithWalls"/>
        <rdfs:subClassOf rdf:resource="#Portal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DoorwayCovering">
        <rdfs:label xml:lang="en">doors (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$PortalCovering.  Each
            instance of #$DoorwayCovering is a physical object used to
            cover some kind of portal, including but not limited to
            doorways in buildings.  This collection also includes doors
            of cars, buses, subways, elevators, garages, airplane
            hangars -- coverings over any doors that people (and perhaps
            vehicles) pass through.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PortalCovering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DoubleFloatObject">
        <rdfs:label xml:lang="en">double</rdfs:label>
        <rdfs:comment>An instance of #$ComputerDataType. The double
            precision floating point number representation in, for
            example, the #$C-ComputerLanguage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="DoubleHelix">
        <rdfs:label xml:lang="en">double helix</rdfs:label>
        <rdfs:comment>An important specialization of #$Helix.  Each
            #$DoubleHelix consists of two instances of #$Helix that turn
            about a common axis.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Helix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Doubt">
        <rdfs:label xml:lang="en">doubt</rdfs:label>
        <rdfs:comment>Feeling of unsureness; lack of certitude or
            conviction about someone or about the result of something.
            Skepticism. Carries no evil suspicion, as Mistrust does</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="DownloadingAFile">
        <rdfs:label xml:lang="en">downloading a file</rdfs:label>
        <rdfs:comment>A specialization of #$CopyingAComputerFile. In
            each instance of this collection, a computer copies a file
            from a file system that it is #$remotelyConnectedTo over a
            #$ComputerNetwork to a local #$ComputerDisk or other
            long-term storage device.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CopyingAComputerFile"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dread">
        <rdfs:label xml:lang="en">apprehension (type)</rdfs:label>
        <rdfs:comment>Each Dread is an intangible object which specifies
            some undesirable state or event (which, by the way, are also
            intangible objects)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Fear"/>
    </owl:Class>
    <owl:Class rdf:ID="Dress">
        <rdfs:label xml:lang="en">#$Dress</rdfs:label>
        <rdfs:comment>#$Dress is a specialization of
            #$Clothing-WholeBody, #$WomensClothing, and
            #$EnvelopingCovering.  Each instance of #$Dress is an
            article of women&apos;s clothing that covers the upper and
            lower body, but which usually does not drape down to the feet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-WholeBody"/>
        <rdfs:subClassOf rdf:resource="#EnvelopingCovering"/>
        <rdfs:subClassOf rdf:resource="#WomensClothing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Drink">
        <rdfs:label xml:lang="en">#$Drink</rdfs:label>
        <rdfs:comment>A specialization of both #$FoodOrDrink and
            #$LiquidTangibleThing.  Each instance of #$Drink is a
            portion of a liquid of a type that is ingestible and
            commonly consumed by humans or animals.  Instances of
            #$Drink, unlike instances of #$Food (q.v.), are ingested by
            drinking without chewing.  Since soup and applesauce are
            normally ``eaten&apos;&apos; by being placed in the mouth
            with a spoon, they are not considered to be drunk (although
            one can certainly drink either), and so are not
            specializations of this collection.  Specializations of
            #$Drink include #$Water-Ingestible, #$Tea-Hot,
            #$HotChocolate, #$Lemonade, and #$Beer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#LiquidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrinkingEvent">
        <rdfs:label xml:lang="en">#$DrinkingEvent</rdfs:label>
        <rdfs:comment>A specialization of #$ConsumingFoodOrDrink.  In
            each instance of #$DrinkingEvent, one animal consumes a
            substantial portion (i.e., a portion larger than a sip) of
            some instance of #$Drink.  Each instance of #$DrinkingEvent
            typically consists of several instances of #$DrinkingASip
            (q.v.).  See also #$EatingEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConsumingFoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#FluidFlow-Complete"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrugPrescription">
        <rdfs:label xml:lang="en">prescriptions</rdfs:label>
        <rdfs:comment>A specialization of #$OfficialDocument. Each
            instance of this collection is a document in which a doctor
            (#$Doctor-Medical) authorizes a patient to purchase a
            certain amount of a #$PrescriptionDrug and take it according
            to some specified schedule. See also the predicates
            #$prescriptionFilled and #$prescribedDrug.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OfficialDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrugProduct">
        <rdfs:label xml:lang="en">medicines</rdfs:label>
        <rdfs:comment>A specialization of both #$Artifact and
            #$DrugSubstance.  Each instance of #$DrugProduct is a drug
            substance manufactured by some agent. Instances of
            #$DrugProduct include drugs prescribed by a physician, drugs
            purchased as over-the-counter medicines, and drugs used for
            recreational purposes (so #$AlcoholicBeverage, #$Nicotine,
            and #$Caffeine are specializations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConsumableProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#DrugSubstance"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrugSubstance">
        <rdfs:label xml:lang="en">drugs</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$DrugSubstance is something that can be
            introduced into an organism&apos;s body to produce certain
            physiological effects.  This collection includes
            naturally-occurring substances, as well as manufactured
            substances (for the latter, see the specialization #$DrugProduct).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrugTherapy">
        <rdfs:label xml:lang="en">drug therapies</rdfs:label>
        <rdfs:comment>A collection of medical care events in which drugs
            accomplish a medical purpose.  An instance of #$DrugTherapy
            is the result of an instance of #$AdministeringADrug (q.v.).
            An instance of #$DrugTherapy is the event of the
            patient&apos;s body undergoing the physiological effects of
            the drug it was given.   Note: #$DrugTherapy events do not
            include the administration of the drug; rather, they are the
            results of such administrations.  Cf. #$AdministeringADrug.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalTreatmentEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DrySeason">
        <rdfs:label xml:lang="en">dry seasons</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear.  Each instance
            of #$DrySeason is the driest season of the year in a
            particular region during an annual climate cycle (see
            #$AnnualClimateCycle). Note that #$DrySeason is _not_ a
            specialization of #$CalendarSeason.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Drying">
        <rdfs:label xml:lang="en">#$Drying</rdfs:label>
        <rdfs:comment>A collection of events in which involves a
            reduction in the moistness of something -- either its water
            content or its surface wetness -- by evaporation, absorption
            (e.g. with towels), or some other process.  Typical objects
            of a #$Drying event include instances of: paint, food,
            dishes, clothes, humans.  The event of a clothes dryer
            running is a #$Drying.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DurableGood">
        <rdfs:label xml:lang="en">consumer durables</rdfs:label>
        <rdfs:comment>#$DurableGoods are #$PartiallyTangibleProducts
            whose usefulness continues for a number of years -- that are
            not destroyed in a single usage. Examples:  household
            appliances, automobiles, machinery.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dusk">
        <rdfs:label xml:lang="en">#$Dusk</rdfs:label>
        <rdfs:comment>A specialization of #$Twilight.  Each instance of
            #$Dusk is a dimly-lit period of time which is
            #$contiguousAfter an instance of #$Sunset, and is the event
            which starts an instance of #$Night.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Twilight"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Dying">
        <rdfs:label xml:lang="en">#$Dying</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of #$Dying
            is an event in which a living organism (an instance of
            #$Organism-Whole) ceases to live and thus ceases to exist.
            The physical portion of the organism may remain, but that is
            not considered an instance of #$Organism-Whole (cf.
            #$DeadAnimal).  Note that the expiring animal is related to
            its dying event by #$bodilyDoer (q.v.)--in contrast to the
            role an organism plays when it is the #$objectActedOn in a
            #$Killing-Biological event (which will have some #$Dying
            event among its #$subEvents), and cf. #$bodilyActedOn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DynamicIndexedInfoSource">
        <rdfs:label xml:lang="en">dynamic indexed info source</rdfs:label>
        <rdfs:comment>The collection of #$IndexedInformationSources for
            which the associated indexing may change over time. For each
            #$IndexedInformationSource, and for each time, there is a
            characteristic function associating index terms with the
            pieces of information indexed by that
            #$IndexedInformationSource (see #$comment on
            #$IndexedInformationSource). For any
            #$DynamicIndexedInfoSource, the indexing of information may
            change over time. Each #$DynamicIndexedInfoSource is such
            that it may have various characteristic functions over the
            course of its existence. This can happen in several ways:
            New information is added to the source and is indexed by
            some new terms; the index terms and information in the
            source remain the same, but the indexing changes;
            information or terms are removed from the source. The OED,
            considered as a single work that has been modified over
            time, is an example of an #$DynamicIndexedInfoSource -- the
            amount of information (the number of definintions) in this
            source has increased,  and the number of index terms (the
            number of words defined) has also increased. Another example
            is the #$WorldWideWeb-DynamicIndexedInfoSource. This
            #$DynamicIndexedInfoSource associates, at a given time,
            certain peices of information (web pages) with certain
            addresses (URLs). At a later time it may associate a new web
            page with a previously unused URL, or it may associate an
            existing web page with a URL previously used for a different
            web page.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DynamicInfoSource"/>
        <rdfs:subClassOf rdf:resource="#IndexedInformationSource"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="DynamicInfoSource">
        <rdfs:label xml:lang="en">dynamic info source</rdfs:label>
        <rdfs:comment>The collection of all abstract sources of
            information whose information content can change over time.
            Includes all intangible works that &apos;survive&apos;
            modification or editing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ELAssertion">
        <rdfs:label xml:lang="en">el assertion</rdfs:label>
        <rdfs:comment>A specialization of #$ELSentence-Assertible. Each
            instance of this collection is a syntactically and
            semantically well-formed sentence of CycL (i.e. an
            #$ELSentence-Assertible) that has been actually asserted to
            the Cyc Knowledge Base.  When an EL assertion is presented
            to the Knowledge Base, the #$CycCanonicalizer  transforms
            it into (more exactly, replaces it with) a logically
            equivalent #$HLAssertion, for more efficient storage and
            inferencing. (Note, however, that the HL Assertion will not
            always differ from the EL assertion it was derived from. For
            more detail on this  canonicalization  process, see the
            shared note #$NoteAboutELVersusHLVersusCycL).   For
            information re. using #$ELAssertion as an arg-constraint,
            see #$NoteAboutAssertionsAsArgConstraints.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#ELSentence-Assertible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ELSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="ELExpression">
        <rdfs:label xml:lang="en">e l expression</rdfs:label>
        <rdfs:comment>A specialization of #$CycLExpression.  The
            collection of all syntactically well-formed expressions in
            the EL  (i.e.  epistemological level ) sub-language of CycL.
            Any component  expression of an EL expression must itself be
            an EL expression.  An EL  expression can appear in (or be) a
            sentence asserted to or queried of  the Knowledge Base; but
            unless it is also an instance of #$HLExpression  (q.v.), it
            cannot appear in (or as) an assertion actually stored in the
            system in data structures accessible by the inference engine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>

    </owl:Class>
    <owl:Class rdf:ID="ELExpression-Askable">
        <rdfs:label xml:lang="en">e l expression - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            #$ELExpressions  which obey arity constraints, but but do
            not necessarily obey other  semantic constraints (e.g.
            argument type constraints).   The name &apos;Askable&apos;
            derives from #$ELSentence-Askable, but instances  of
            #$ELExpression-Askable are not necessarily askable as a
            query (after being converted to HL form by the
            #$CycCanonicalizer) unless they  are also instances of
            #$ELSentence-Askable.  See #$CycLExpression-Askable for more details.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>

        <rdfs:subClassOf rdf:resource="#ELExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="ELExpression-Assertible">
        <rdfs:label xml:lang="en">e l expression - assertible</rdfs:label>
        <rdfs:comment>An instance of #$CycLExpressionType.  The
            collection of all compound expressions in the EL (i.e.
            epistemological level ) sub-language of CycL that either
            could themselves be asserted (after being converted to HL
            form by the #$CycCanonicalizer) to the Cyc Knowledge Base
            (see #$ELSentence-Assertible) or could appear as non-atomic
            terms (again, after being converted to HL form by the
            #$CycCanonicalizer) within sentences that could be so
            asserted (see #$ELNonAtomicTerm-Assertible).  More
            precisely, each instance of #$ELExpression-Assertible is a
            compound EL expression which is syntactically well-formed
            and semantically well-formed with respect to both arity and
            argument-type constraints (see #$arity and
            #$ArgTypePredicate).  Note that being  assertible  in the
            present sense does not require an expression&apos;s actually
            being asserted in (or being a component of something
            asserted in) the KB.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>

        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
    </owl:Class>
    <owl:Class rdf:ID="ELFormula">
        <rdfs:label xml:lang="en">ELF</rdfs:label>
        <rdfs:comment>The collection of expressions in the EL language
            which involve the application of a relation to some arguments.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>

        <rdfs:subClassOf rdf:resource="#ELExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="ELNonAtomicTerm">
        <rdfs:label xml:lang="en">NAUT</rdfs:label>
        <rdfs:comment>A specialization of #$CycLNonAtomicTerm; the
            collection of non-atomic denotational terms in the EL (i.e.
            epistemological level ) language. Each instance of
            #$ELNonAtomicTerm consists of an EL expression denoting a
            #$Function-Denotational followed by one or more EL terms,
            with the entire sequence enclosed in parentheses.  An
            instance of #$ELNonAtomicTerm denotes the value (if any) of
            its function for the denotations of the other terms taken as
            arguments (if there is no such value, then the instance in
            question has no denotatum; see #$undefined.)  Note that
            #$ELNonAtomicTerms, unlike #$HLNonAtomicReifiedTerms, are
            not implemented with data structures that have indexing that
            enables all uses of them to be retrieved; rather, they
            remain in the form of EL expressions in the assertions in
            which they occur.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>

        <rdfs:subClassOf rdf:resource="#ELFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="ELNonAtomicTerm-Askable">
        <rdfs:label xml:lang="en">askable EL non-atomic terms</rdfs:label>
        <rdfs:comment>A specialization of both #$ELNonAtomicTerm and
            #$CycLNonAtomicTerm-Askable.  The collection of all
            non-atomic terms in the EL (i.e.  epistemological level )
            sub-language of CycL that can appear (after being converted
            into an expression in the HL --  heuristic level  --
            sub-language of CycL by the #$CycCanonicalizer) within
            sentences that are askable as queries to the Cyc system (see
            #$CycLSentence-Askable).  More precisely, each instance of
            #$ELNonAtomicTerm-Askable is a syntactically well-formed EL
            non-atomic term that does not violate any applicable arity
            constraints (see #$arity). Note that askable  EL non-atomic
            terms do not necesarily obey other semantic constraints
            beyond arity, such as argument-type constraints (see
            #$ArgTypePredicate); thus they are not always semantically
            well-formed in the fullest sense (cf. #$ELNonAtomicTerm-Assertible).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Askable"/>

        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="ELNonAtomicTerm-Assertible">
        <rdfs:label xml:lang="en">EL assertible non-atomic terms</rdfs:label>
        <rdfs:comment>A specialization of both #$ELExpression-Assertible
            and #$ELNonAtomicTerm-Askable.  The collection of all
            non-atomic terms in the EL (i.e.  epistemological level )
            sub-language of CycL that could appear (after being
            converted to HL form by the #$CycCanonicalizer) within a
            sentence that could be asserted to the Cyc Knowledge Base.
            More precisely, each instance of
            #$ELNonAtomicTerm-Assertible is an EL non-atomic term that
            is syntactically well-formed, and semantically well-formed
            with respect to both arity and argument-type constraints
            (see #$arity and #$ArgTypePredicate).  Note that being
            assertible  in the present sense does not require the
            expression to be a component of something actually asserted
            in the KB.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Assertible"/>

        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="ELReifiableDenotationalTerm">
        <rdfs:label xml:lang="en">#$ELReifiableDenotationalTerm</rdfs:label>
        <rdfs:comment>A subcollection of both
            #$CycLReifiableDenotationalTerm and #$ELExpression (qq.v.).
            #$ELReifiableDenotationalTerm is the collection of all EL
            terms that both may be reified and may denote something in
            the universe of discourse.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>

        <rdfs:subClassOf rdf:resource="#ELExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="ELRelation">
        <rdfs:label xml:lang="en">EL relations</rdfs:label>
        <rdfs:comment>A specialization of #$MacroRelation (q.v.)
            instances of which appear only at the  epistemological level
            (or EL) of the Cyc system.  Each instance of #$ELRelation is
            associated, via the #$expansion (q.v.) relation,  to another
            (non-EL-only) relation to which the former is essentially
            equivalent and for which the former serves as a convenient
            alternative. More precisely:  A GAF (see
            #$CycLClosedAtomicSentence) whose main  functor (or  0th
            argument ) is a term that denotes an EL relation can  occur
            only at the EL, and not at the underlying HL ( heuristic
            level )  of the system.  Thus, although one can use an
            EL-relation-based GAF to  make an assertion to the system,
            the GAF that actually gets stored as an assertion in the Cyc
            Knowledge Base is a different (though logically  equivalent)
            one that is related to the first via the #$expansion
            assertion  on the EL relation.  Upon assertion, the first
            GAF is  transformed into   the second GAF by the
            #$CycCanonicalizer.   For example, #$lessThan is an  EL
            relation whose #$expansion correlate is the template
            (#$greaterThan :ARG2 :ARG1).  So if one makes an assertion
            using the sentence `(#$lessThan 1 2)&apos;,  the assertion
            that actually shows up in the KB is `(#$greaterThan 2
            1)&apos;.   Note that terms for EL relations _do_ appear in
            stored assertions in which  they occur in argument places
            other than the 0th; e.g. the sentence `(#$isa #$lessThan
            #$OrderingPredicate)&apos; is in the KB.  EL relations
            afford cyclists  the convenience of having alternative forms
            of expression, while their expansions serve to minimize
            redundancy in the types of GAFs that the system  has to store.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MacroRelation"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="ELSentence">
        <rdfs:label xml:lang="en">e l sentence</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            sentences (also called  logical formulas ) of the EL (
            epistemological level ) subset of #$CycL.  Each instance of
            #$ELSentence consists of an EL expression denoting a logical
            relation (i.e. a #$Predicate or #$TruthFunction) followed by
            one or more EL terms (cf. #$CycLTerm), with the entire
            sequence enclosed in parentheses.  An EL sentence need not
            obey #$arity constraints or other semantic constraints (such
            as argument-type constraints) -- for those that do, see the
            more specialized collection #$ELSentence-Assertible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ELFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="ELSentence-Askable">
        <rdfs:label xml:lang="en">e l sentence - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            sentences in the EL language  which obey arity constraints,
            but but do not necessarily obey other  semantic constraints
            (e.g. argument type constraints).   These sentences
            &apos;make enough  sense&apos; to be asked as a query, after
            being converted into HL form by the  #$CycCanonicalizer.  Of
            course, just because a sentence is askable does not require
            it to be used in a query.  Each instance of this collection
            involves a logical relation (a #$Predicate or
            #$TruthFunction) applied to some number of arguments, as
            permitted  by the arity of the relation.  Note that an
            instance of #$ELSentence-Askable does not mean that the
            sentence must be used in a query; only that it can be used
            in a query.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELSentence"/>
    </owl:Class>
    <owl:Class rdf:ID="ELSentence-Assertible">
        <rdfs:label xml:lang="en">#$ELSentence-Assertible</rdfs:label>
        <rdfs:comment>A specialization of #$ELSentence. Each instance of
            this collection is an #$ELSentence which is not only
            syntactically but also semantically well-formed -- which
            includes such matters as the (in-context) satisfaction of
            #$arity and argument-type constraints on predicates and
            relations.  Each instance of #$ELSentence-Assertible meets
            the necessary criteria for being asserted into the Cyc
            Knowledge Base (at which time it becomes an #$ELAssertion,
            which is subsequently  transformed  into one or more
            #$HLAssertions by the #$CycCanonicalizer).  Of course, a
            sentence&apos;s being assertible does not entail that it is
            actually asserted, but only that it could be asserted.    An
            assertible EL sentence consists of an EL expression denoting
            a logical relation (i.e. a #$Predicate or #$TruthFunction)
            followed by an appropriate (in accordance with the #$arity
            of the logical relation) number of EL terms (cf. #$CycLTerm)
            of the appropriate types, with the entire sequence enclosed
            in parentheses. Here is an example of an
            #$ELSentence-Assertible :  (#$and     (#$isa #$Muffet #$Dog)
            (#$residesInRegion #$Muffet #$CityOfAustinTX)).   For a
            thorough discussion of what constitutes a well-formed CycL
            formula, see the Cyc documentation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#ELSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Assertible"/>
    </owl:Class>
    <owl:Class rdf:ID="ELSentenceTemplate">
        <rdfs:label xml:lang="en">e l sentence template</rdfs:label>
        <rdfs:comment>The collection of expressions which are valid CycL
            formulas except that their EL variables are not
            canonicalized into HL variables.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ELTemplate"/>
    </owl:Class>
    <owl:Class rdf:ID="ELTemplate">
        <rdfs:label xml:lang="en">e l template</rdfs:label>
        <rdfs:comment>The collection of expressions for which EL
            variables are not canonicalized into HL variables,
            #$ELRelations are not expanded, and functions are not reified.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="ELVariable">
        <rdfs:label xml:lang="en">e l variable</rdfs:label>
        <rdfs:comment>The collection of all #$CycLVariables that are
            also #$ELExpressions (q.v.).  An #$ELVariable is a character
            string consisting of a question mark `?&apos; (as its
            initial character) followed by one or more characters, where
            each of these latter characters is either an (upper- or
            lower-case) Roman letter, an Arabic numeral (i.e. `0&apos;
            through `9&apos;), a hyphen (`-&apos;), an underscore
            (`_&apos;), or another question mark.  (The letters
            occurring in an EL variable used in an actual assertion will
            typically be all uppercase; but this convention is not
            enforced in any formal way.)  Examples: `?WHAT&apos;,
            `?OBJ-TYPE&apos;, and `?var0&apos;.  Note that this
            collection, like most instances of #$CycLExpressionType,  is
            quoted  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLVariable"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>

        <rdfs:subClassOf rdf:resource="#CycLVariable"/>
    </owl:Class>
    <owl:Class rdf:ID="EMailAddress">
        <rdfs:label xml:lang="en">#$EMailAddress</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString.  Each
            instance of #$EMailAddress is a string that identifies an
            e-mail user&apos;s electronic mailbox.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="EMailSending">
        <rdfs:label xml:lang="en">#$EMailSending</rdfs:label>
        <rdfs:comment>A specialization of
            #$InformationTransferEvent-Electronic. Each instance of this
            collection is an #$Event in which somebody or something
            sends an #$EMailMessage to some #$EMailAddress.  If
            successful, an instance of #$EMailSending ends when the
            email message reaches the intended recipient&apos;s
            #$MailServer-Network, at which point it is likely that an
            instance of #$EMailReceiving will ensue. See also
            #$EMailCommunication -- events in which an email message is
            successfully sent and received.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferPhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Eagerness">
        <rdfs:label xml:lang="en">eagerness</rdfs:label>
        <rdfs:comment>Intensely desiring something; impatiently expectant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Ear">
        <rdfs:label xml:lang="en">#$Ear</rdfs:label>
        <rdfs:comment>The organ of hearing, which occur in pairs on most animals</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VibrationThroughAMediumSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Protrusion"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EatingEvent">
        <rdfs:label xml:lang="en">#$EatingEvent</rdfs:label>
        <rdfs:comment>A specialization of #$ConsumingFoodOrDrink.  Each
            instance of #$EatingEvent is an event which involves the
            consumption of a substantial portion of food (i.e., a
            portion larger than a morsel) by one animal.   Each instance
            of #$EatingEvent is a meal or snack taken in its entirety;
            it is a series of individual #$EatingAMorsel (q.v.) events.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#ConsumingFoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EcholocationPerception">
        <rdfs:label xml:lang="en">echo location</rdfs:label>
        <rdfs:comment>#$EcholocationPerception is the collection of
            spatial #$Perceivings in which a #$PerceptualAgent (such as
            a bat or a submarine) generates sounds (potentially ultra-
            or sub- sonic in frequency), hears the sounds reflected from
            surfaces, and thereby acquires information about the
            position of other objects in its environment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EcologicalRegion">
        <rdfs:label xml:lang="en">ecological regions</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            instance of #$EcologicalRegion is a region having one or
            more characteristic ecosystems.  From knowledge of those
            ecosystems, we can posit whether certain organisms can
            forage, reproduce, and live successfully there.  Information
            about ecological regions typically also includes what kinds
            of organisms are in fact found there.  In theory, any
            arbitrary continuous region could be analyzed as an
            ecological region, but most regions identified in practice
            have some kind of sameness or systematic interconnection in
            their topology, climate, and biology.  Examples: the
            #$WesternDesertOfEgypt, the #$GreatBarrierReef, the #$Amazon-Region.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EconomicAction">
        <rdfs:label xml:lang="en">economic actions</rdfs:label>
        <rdfs:comment>The class of all actions which are either
            &apos;transactions&apos; within some economic system --
            instances of #$Buying, #$Bartering, contract-signing,
            boycotting, etc. -- or which are in some  way &apos;directed
            at&apos; the functioning of an economic system.  Examples of
            the latter include ordering an embargo on a certain
            country&apos;s goods or changing a tax rate.  To a first
            approximation, instances of #$EconomicAction must be
            performed by   #$IntelligentAgents. E.g., although animal
            stampedes might have economic consequences, they are not
            instances of #$EconomicAction.  More precisely, saying that
            an action is &apos;directed at&apos; an economic system
            entails that the initiator has some awareness of its
            economic consequences.  Even if painting my house purple
            results in an increased demand for purple paint, such an
            action is not an #$EconomicAction unless I did it in part
            hoping to affect the paint market in some way.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#EconomicEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EconomicEvent">
        <rdfs:label xml:lang="en">economic occurrences</rdfs:label>
        <rdfs:comment>#$EconomicEvent is the most general collection of
            events having an economic character, such as buying and
            selling, inflation and recession, and economic policy-making.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EdgeOnObject">
        <rdfs:label xml:lang="en">#$EdgeOnObject</rdfs:label>
        <rdfs:comment>The collection of all edges on objects that are
            instances of #$PartiallyTangible.  For a two-dimensional
            object, its boundaries other than corners are it edges.  For
            a three dimensional  object the edges are the outer portions
            of those extremities, excluding any corners
            (#$Corner-2or3d), that are much more acute in  cross section
            in one direction than in most other directions at the same
            point.  Some objects, like spheres, hairs, poles and typical
            burrs, have no edges.  A discus has one, round, edge has
            four edges.  A mountain ridge might have only a single edge.
            A solid  polyhedron has six or more edges.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdgeOnObject-Generic"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Path-Spatial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EdgeOnObject-Generic">
        <rdfs:label xml:lang="en">edges</rdfs:label>
        <rdfs:comment>This is the collection of all edges on spatial
            objects, tangible or intangible.  Edges define the
            boundaries of two-dimensional objects and the edges of the
            surface boundaries of three-dimensional objects.  Corners
            define where one edge ends and another begins.  See
            #$EdgeOnObject for a discussion of some examples of edges on
            physical objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EdibleStuff">
        <rdfs:label xml:lang="en">edible things</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType and a
            specialization of #$PartiallyTangible.  Each specialization
            of #$EdibleStuff is a type of partially tangible stuff which
            all normal instances of some specialization of
            #$Organism-Whole can consume and successfully metabolize a
            significant portion of any instance of, with or without
            resulting harm to themselves. This collection includes
            virtually all animal and vegetable matter, as well as salts,
            potable water, and instances of #$OralDrug. It does not
            necessarily include things that are ingested but not
            metabolized, such as the stones that birds swallow to aid in
            digestion, or dirt, paint chips, and coins ingested by
            children. The function #$EdibleByFn is used to specify the
            collections of edible stuff that are ingestible by all
            normal instances of certain specializations of
            #$Organism-Whole, including #$Person. Note that whether an
            edible substance _also_ has a detrimental effect if eaten is
            a separate question. Something can be both edible and poisonous.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConsumableProduct"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EdibleStuffComposite">
        <rdfs:label xml:lang="en">#$EdibleStuffComposite</rdfs:label>
        <rdfs:comment>#$EdibleStuffComposite is a specialization of
            #$EdibleStuff and #$Artifact-NonAgentive.  Each instance of
            #$EdibleStuffComposite is an edible substance that is made
            up of two or more foodstuffs as constituents.  Typically,
            some recipe is, explicitly or implicitly, associated with
            the production of such substances.  #$EdibleStuffComposite
            includes both some instances of #$FoodIngredientOnly (e.g.,
            a dollop of ketchup) and some instances of #$FoodOrDrink
            (e.g., a slice of a cheese pizza).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EducationalDegree">
        <rdfs:label xml:lang="en">#$EducationalDegree</rdfs:label>
        <rdfs:comment>A specialization of #$Credential.  Each instance
            of #$EducationalDegree is a credential conferred by some
            instance of #$EducationalOrganization on a student who has
            successfully completed a prescribed course of study there.
            #$EducationalDegree includes as instances high school,
            associate, baccalaureate, licensate, magisterial,
            professional, and doctoral degrees.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Credential"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="EducationalOrganization">
        <rdfs:label xml:lang="en">#$EducationalOrganization</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$EducationalOrganization is an organization whose
            primary function is to provide teaching and/or training as a
            service for students.  Instances of
            #$EducationalOrganization may be either public or private
            institutions.  Instances of this collection include
            #$AustinISD (the #$CityOfAustinTX Independent School
            District), #$StanfordUniversity, #$BrynMawrCollege,
            #$UniversityOfPennsylvaniaSchoolOfMedicine, and many other institutions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Elasticity">
        <rdfs:label xml:lang="en">#$Elasticity</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$Elasticity is a specific ability of a physical
            material to quickly and completely return to its original
            shape after deformation that does not induce breakage,
            without permanent change to its original dimensions.  For
            example, billiard balls have a high degree of elasticity in
            this sense.  Elasticities of objects are indicated with the
            predicate #$elasticityOfObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="Elation">
        <rdfs:label xml:lang="en">elation</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Happiness"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalCharge">
        <rdfs:label xml:lang="en">#$ElectricalCharge</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity. Each
            instance of #$ElectricalCharge is an amount of net
            electrical charge (positive or negative) possessed by a
            particular instance of #$PartiallyTangible. Instances of
            #$ElectricalCharge may be either a fixed interval, such as
            the charge on one electron, or a range, such as a usable
            charge on a flashlight battery; see #$ScalarInterval. Also
            see #$UnitOfCharge for the units used by Cyc to measure
            electrical charges.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalComponent">
        <rdfs:label xml:lang="en">electrical components</rdfs:label>
        <rdfs:comment>A specialization of both #$ElectricalDevice and
            #$PhysicalPartOfObject.  Each instance of
            #$ElectricalComponent is an #$ElectricalDevice which is
            normally considered to be a part of some larger, more
            clearly distinguished #$PhysicalDevice (for example, clearly
            distinguished in the sense that it is sold or moved as a
            unit).  Each instance of  #$ElectricalComponent must be
            connected with other parts in order to perform its #$primaryFunction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectricalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalConductor">
        <rdfs:label xml:lang="en">#$ElectricalConductor</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$ConductingMedium.  Each instance of
            #$ElectricalConductor is a partially tangible thing that can
            conduct electricity. Instances include power cords,
            electrical plugs, and pieces of metal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConductingMedium"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalCurrentLevel">
        <rdfs:label xml:lang="en">current</rdfs:label>
        <rdfs:comment>A specialization of #$Rate.  Each instance of
            #$ElectricalCurrentLevel is a rate of electrical flow, given
            in terms of the amount of charge (see the collection
            #$ElectricalCharge) per unit time.  The standard unit of
            measure (see the collection #$UnitOfMeasure) for
            #$ElectricalCurrentLevel is the ampere (see the constant #$Ampere).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalDevice">
        <rdfs:label xml:lang="en">electrical devices</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of #$ElectricalDevice is a device that requires an
            input of electrical current (as its #$energySource) in order
            to perform its intended function(s).  Instances of
            #$ElectricalDevice include both complex devices (for
            example, instances of the collections #$StereoSystem or
            #$Computer) and simpler ones (for example, instances of the
            collection #$ElectricalComponent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalEvent">
        <rdfs:label xml:lang="en">electrical events</rdfs:label>
        <rdfs:comment>The class of electrical events.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectricalResistance">
        <rdfs:label xml:lang="en">electrical resistance</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$ElectricalResistance is a measure of the
            resistance to electrical flow through an object.  Instances
            of #$ElectricalResistance include #$InsulatorResistance,
            #$ConductorResistance, #$SemiconductorResistance, and #$SuperconductorResistance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectroMagneticRadiationSensor">
        <rdfs:label xml:lang="en">electromagnetic radiation sensors</rdfs:label>
        <rdfs:comment>A subcollection of #$Sensor, namely those sensors
            that detect #$ElectromagneticRadiation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectromagneticRadiation">
        <rdfs:label xml:lang="en">electromagnetic radiation</rdfs:label>
        <rdfs:comment>A specialization of #$WavePropagation (q.v.).
            Each instance of #$ElectromagneticRadiation is an event that
            arises from the interaction of an electrical field and a
            magnetic field.  Specializations of
            #$ElectromagneticRadiation include #$VisibleLight,
            #$RadioWaves, and #$XRays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectromagneticRadiationType">
        <rdfs:label xml:lang="en">#$ElectromagneticRadiationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ElectromagneticRadiationType is a specialization of
            #$ElectromagneticRadiation.   Notable instances of
            #$ElectromagneticRadiationType include the collections
            #$RadioWave, #$XRay, #$GammaRay,  and #$UltravioletLight.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WavePropagationType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="Electron">
        <rdfs:label xml:lang="en">electrons</rdfs:label>
        <rdfs:comment>A specialization of #$Lepton.  Each instance of
            #$Electron is a subatomic particle with an
            #$ElectricalCharge of -1.  Each instance of #$Atom consists
            of a nucleus (see #$AtomicNucleus) surrounded by a cloud of
            negatively charged electrons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubAtomicParticle"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElectronicDevice">
        <rdfs:label xml:lang="en">electronic devices</rdfs:label>
        <rdfs:comment>#$ElectronicDevice is a specialization of
            #$ElectricalDevice.  Each instance of #$ElectronicDevice is
            a device that uses electronic circuitry; more specifically,
            a device in which electricity passes through a vacuum or
            semiconductor.  Notable specializations of
            #$ElectronicDevice include #$Telephone, #$VideoCamera, and #$Computer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectricalDevice"/>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElementStuff">
        <rdfs:label xml:lang="en">chemical elements</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffCompositionType and
            a specialization of #$InanimateThing.  Each instance of
            #$ElementStuff is a piece of tangible stuff, composed of a
            quantity of atoms, all of which are of the same chemical
            element.  That is, every atom in a given piece of
            #$ElementStuff has the same number of protons in its atomic
            nucleus.  For example, all pieces of carbon (i.e. all
            instances of #$Carbon) are instances of #$ElementStuff.  On
            the other hand, instances of #$Water, because they are all
            constituted of both #$Hydrogen and #$Oxygen atoms, do not
            belong to the collection #$ElementStuff.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ElementStuffType">
        <rdfs:label xml:lang="en">#$ElementStuffType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$TangibleStuffCompositionType. Each instance of
            #$ElementStuffType is a specialization of #$ElementStuff.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TangibleStuffCompositionType"/>
    </owl:Class>
    <owl:Class rdf:ID="ElementStuffTypeByNumberOfProtons">
        <rdfs:label xml:lang="en">#$ElementStuffTypeByNumberOfProtons</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$ElementStuffType.  Each instance of
            #$ElementStuffTypeByNumberOfProtons is a specialization of
            #$ElementStuff which is defined _only_ by the atomic
            composition of its instances -- neither the isotopic
            composition or physical state of the substances, nor any
            other additional feature, determines membership in an
            instance of #$ElementStuffTypeByNumberOfProtons.  All that
            matters is that the instances of that collection are
            entirely composed of atoms having a particular number of
            protons in each atomic nucleus.  Thus, the collection
            #$Carbon is an instance of
            #$ElementStuffTypeByNumberOfProtons, but neither the
            collection #$Diamond nor the collection #$Graphite is (even
            though they are subcollections of #$Carbon), because their
            members have additional qualifications.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElementStuffType"/>
        <rdfs:subClassOf rdf:resource="#ChemicalSubstanceType"/>
    </owl:Class>
    <owl:Class rdf:ID="Ellipse">
        <rdfs:label xml:lang="en">ellipse</rdfs:label>
        <rdfs:comment>The collection of all elliptical objects.  Note
            that #$Circle is a specialization of #$Ellipse, i.e.
            circular things are elliptical insofar as they are ellipses
            with eccentricity zero.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ellipsoid">
        <rdfs:label xml:lang="en">ellipsoid</rdfs:label>
        <rdfs:comment>A specialization of both #$RoundThing and
            #$ThreeDimensionalGeometricThing (qq.v.).  Each instance of
            #$Ellipsoid is a three-dimensional object such that the
            planar sections along its respective internal axes are
            #$Ellipses.  In other words, the shape of such objects
            should be roughly describable by taking some two dimensional
            ellipse and rotating it around its major axis in
            three-space.  Note that #$Sphere and its generalization
            #$Spheroid are specializations of #$Ellipsoid.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Embarrassment">
        <rdfs:label xml:lang="en">#$Embarrassment</rdfs:label>
        <rdfs:comment>Mental disturbance and confusion at self-exposure.
            #$Embarrassment is often an impediment to freedom of
            thought, speech, or action.  This is a collection; for an
            explanation of a typical #$FeelingType, see #$Happiness.  A
            more specialized #$FeelingType than #$Embarrassment is #$Shame.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Embassy-TheMission">
        <rdfs:label xml:lang="en">embassies</rdfs:label>
        <rdfs:comment>#$Embassy-TheMission is a specialization of
            #$DiplomaticMission-ThePost.  Each instance of
            #$Embassy-TheMission is an embassy, which is the official
            diplomatic representation of a country A in a foreign
            country B. Not to be confused with the buildings in which
            such offices are hosted. See #$Embassy-TheBuilding.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DiplomaticMission-ThePost"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Embryo">
        <rdfs:label xml:lang="en">embryos</rdfs:label>
        <rdfs:comment>The collection of not yet fully-formed organisms,
            including mammals before birth, birds before hatching, and
            plants before sprouting from their seeds.  Note that the
            criteria of the collection #$Embryo do not correspond
            exactly with the meaning of the English word
            &apos;embryo&apos;, since #$Embryo includes zygotes,
            blastulas, the set of cells derived from the embryo after
            the fetus is formed (#$AmnioticSac + #$Fetus +
            #$Placenta-FetalPortion), etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmergencyVehicle">
        <rdfs:label xml:lang="en">emergency vehicles</rdfs:label>
        <rdfs:comment>#$EmergencyVehicle is a specialization of
            #$TransportationDevice-Vehicle.  Each instance of
            #$EmergencyVehicle is a vehicle, which is used for emergency
            and rescue situations.  These include instances of
            FireTrucks, Ambulances, and, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Emirate-Geopolitical">
        <rdfs:label xml:lang="en">emirates</rdfs:label>
        <rdfs:comment>#$Emirate-Geopolitical is a specialization of
            #$GeopoliticalEntity.  Each instance of
            #$Emirate-Geopolitical is a geopolitical entity, or
            territories, each of which is ordinarily ruled by an
            #$Amir-HeadOfState or an Emir (Amir) who is not necessariy a
            #$HeadOfState of an #$IndependentCountry, but rules a
            subsidiary region.  See especially the #$UnitedArabEmirates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Emission">
        <rdfs:label xml:lang="en">emission (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of #$TransferOut.  Each instance
            of #$Emission is an event in which something `comes
            out&apos; of a source, where the source in question causally
            contributes to that thing&apos;s `coming out&apos; (e.g.,
            the source is a #$providerOfMotiveForce).  The source of the
            emission is indicated with the predicate #$emitter.  If the
            thing which `comes out&apos; is an instance of
            #$PartiallyTangible, then the event belongs to a more
            specific collection, #$EmittingAnObject. If an emission is
            the first sub-event of an instance of #$WavePropagation,
            then the emission belongs to the more specialized
            collection, #$EmittingAWave.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmittingAWave">
        <rdfs:label xml:lang="en">wave emissions</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$Emission.  Each instance is an event in which a wave is
            emitted at a #$fromLocation.  For example, Themistocles
            ordering his fleet to withdraw; Miles Davis playing the
            trumpet; an emergency flare burning by the side of the road.
            See also #$WavePropagation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GenerationOrConversionEvent"/>
        <rdfs:subClassOf rdf:resource="#Emission"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmittingAnObject">
        <rdfs:label xml:lang="en">emissions of an object</rdfs:label>
        <rdfs:comment>A specialization of #$Emission.  Each instance of
            #$EmittingAnObject is an emission event in which some
            partially tangible object (related to the emission event via
            #$objectEmitted) is emitted from something else (the
            emitter, related to the emission event via #$emitter).  The
            emitted object goes from a place inside of the emitter to
            some place that is not within the emitter, and the emitter
            plays an active role in the emission. Notable
            specializations of #$EmittingAnObject include #$Bleeding,
            #$PrecipitationProcess, and #$SecretionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Emission"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmittingSound">
        <rdfs:label xml:lang="en">sound emissions</rdfs:label>
        <rdfs:comment>A specialization of #$EmittingAWave.  Each
            instance of #$EmittingSound is an event in which some
            instance of #$Sound is emitted from some wave source (see
            the predicate #$waveSource).  Examples of #$EmittingSound
            include an explosion generating a sound wave, a plucked
            violin string resonating, a baby crying, and a person saying `Hello&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EmittingAWave"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmotionalColdness">
        <rdfs:label xml:lang="en">emotional coldness</rdfs:label>
        <rdfs:comment>Absence of feeling; less than normal human
            sympathy, friendliness, sensitiveness or responsiveness</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Employee">
        <rdfs:label xml:lang="en">#$Employee</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation.  Each
            instance of #$Employee works directly for some business or
            other organization (to which it is related via the predicate
            #$employees). This collection is disjoint with
            #$SelfEmployedWorker. See also #$HasPositionRelationship.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmployeeHiring">
        <rdfs:label xml:lang="en">employee-hiring events</rdfs:label>
        <rdfs:comment>A specialization of both #$MakingAnAgreement and
            #$OrganizationalTransferIn.  Each instance of
            #$EmployeeHiring is an event in which some agent--either an
            organization or an individual--hires a person to work as its
            employee. See also #$employees, #$WorkAgreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MakingAnAgreement"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmployeeTypeByWorkStatus">
        <rdfs:label xml:lang="en">#$EmployeeTypeByWorkStatus</rdfs:label>
        <rdfs:comment>A collection of specializations of #$Employee.
            Each instance of #$EmployeeTypeByWorkStatus is a
            classification commonly used by human resources departments
            to describe the status of workers on the company payroll.
            Note that these collections classify a person&apos;s status
            in a job, rather than the position itself.  Examples of
            #$EmployeeTypeByWorkStatus include #$CommissionedWorker,
            #$HourlyWorker, #$FullTimeWorker, #$PartTimeWorker,
            #$TemporaryWorker. Also see #$employeeStatus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="EmploymentTermination">
        <rdfs:label xml:lang="en">#$EmploymentTermination</rdfs:label>
        <rdfs:comment>A specialization of both #$EndingAnAgreement and
            #$OrganizationalTransferOut.  Each instance of
            #$EmploymentTermination is an event in which some employee
            (an instance of #$IntelligentAgent) ceases to work for his
            or her employer.  The termination may be initiated by either
            party, or it may have been specified in the original
            #$WorkAgreement (q.v.) that specified the terms of the
            employment.  Specializations of #$EmploymentTermination
            include #$Resigning, #$EmployeeLayoff,
            #$DischargeWithPrejudice, and #$RetirementEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EndingAnAgreement"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransferOut"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmptyRegion-Generic">
        <rdfs:label xml:lang="en">#$EmptyRegion-Generic</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing-Localized whose
            instances are connected,  empty  regions, which might be
            either  intangible space regions (see #$EmptySpaceRegion) or
            the tangible contents of such regions (see #$FreeSpaceContent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EmptySpaceRegion">
        <rdfs:label xml:lang="en">empty space (type)</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion-Empirical whose
            instances are connected regions of empty space located in
            the empirically observable universe.  The meaning of  empty
            depends on context.  In a high-energy physics microtheory
            where  empty  is defined as containing no particles, an
            empty space region would be a complete vacuum (see also
            #$Vacuum).  In #$AmbientConditionsMt an empty space region
            would be occupied by a piece of #$Atmosphere.  An undersea
            context could treat empty space regions as filled with
            seawater.  An instance of #$EmptySpaceRegion is intangible,
            and not to be confused with the material -- if any -- that
            occupies it (cf. #$FreeSpaceContent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion-Empirical"/>
        <rdfs:subClassOf rdf:resource="#EmptyRegion-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnclosingSomething">
        <rdfs:label xml:lang="en">#$EnclosingSomething</rdfs:label>
        <rdfs:comment>This is the collection of all events in which
            something  becomes enclosed.  This can happen either as the
            result of an object  moving into an enclosure, such as a
            person entering a room, or the  enclosure surrounding the
            object, such as a hand grasping a pencil.
            &apos;Enclosure&apos; means that the enclosed object is at
            least surrounded in a  plane by the enclosure.  The
            enclosing event is considered to last as long as the
            enclosed object is inside the enclosure.  An enclosing may
            come about either by movement, growth or shape change.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementOrShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Encoding">
        <rdfs:label xml:lang="en">encoding</rdfs:label>
        <rdfs:comment>The collection of events where some data in an
            #$InformationBearingThing are tranformed from a more
            &apos;raw&apos; or natural format to a more
            compressed/complex format.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTRecoding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EncounteringSomething">
        <rdfs:label xml:lang="en">#$EncounteringSomething</rdfs:label>
        <rdfs:comment>This is the collection of events in which an agent
            encounters an object or another agent.  To encounter
            something is to become close enough to it to become aware of
            it.  One may encounter a bear by the bear approaching, so
            encountering does not require movement on the part of the
            encounterer (though the bear would also be an encounterer).
            If both objects encountering each other are #$Agents, the
            #$doneBy slot would normally be filled by the moving agent,
            if only one moves.  See #$MeetingSomeone.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Encrypting">
        <rdfs:label xml:lang="en">encrypting events</rdfs:label>
        <rdfs:comment>A specialization of #$Encoding.  In each instance
            of #$Encrypting, a transformation is applied to the
            information in some instance of #$InformationBearingThing,
            with the intention of making that information inaccessible
            to all but the intended audience for that
            #$InformationBearingThing (the intended audience, in almost
            all cases, will have a decryption method which will allow it
            to transform the information back into an accessible form).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Encoding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EndingAnAgreement">
        <rdfs:label xml:lang="en">end of an agreements</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction and
            #$SocialOccurrence.  Each instance of #$EndingAnAgreement is
            an event in which some instance of #$Agreement comes to an
            end.  For example, #$EmploymentTermination is a
            specialization of #$EndingAnAgreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnergyConversionProcess">
        <rdfs:label xml:lang="en">#$EnergyConversionProcess</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$EnergyConversionProcess, energy is converted from one form
            to another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnergyTransferEvent">
        <rdfs:label xml:lang="en">#$EnergyTransferEvent</rdfs:label>
        <rdfs:comment>A specialization of #$Translocation.  Each
            instance of #$EnergyTransferEvent is an event in which
            energy is transferred from at least one instance of
            #$PartiallyTangible to at least one other instance of
            #$PartiallyTangible.  Important specializations of
            #$EnergyTransferEvent include #$Freezing and #$Condensing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Engine">
        <rdfs:label xml:lang="en">#$Engine</rdfs:label>
        <rdfs:comment>#$Engine is a specialization of #$PoweredDevice
            and #$MechanicalDevice.  Each instance of #$Engine is a
            device that changes some form of energy into motion (usually
            rotation).  An engine may operate by burning some type of
            fuel (as do jet engines and internal combustion engines), or
            it may be powered by electricity, fluid flow, etc.  Some
            notable specializations of #$Engine are #$ElectricalMotor,
            #$ExternalCombustionEngine, and #$RocketEngine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Engineer">
        <rdfs:label xml:lang="en">engineers</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$Engineer is a professional who works in some
            branch of engineering (see the constant #$EngineeringField).
            Notable specializations of #$Engineer include
            #$ElectricalEngineer, #$ChemicalEngineer, #$CivilEngineer,
            and #$MechanicalEngineer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishDerivationalAffix">
        <rdfs:label xml:lang="en">#$EnglishDerivationalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishDerivationalPrefix">
        <rdfs:label xml:lang="en">english derivational prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#EnglishDerivationalAffix"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishDerivationalSuffix">
        <rdfs:label xml:lang="en">english derivational suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnglishDerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishInflectionalAffix">
        <rdfs:label xml:lang="en">#$EnglishInflectionalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InflectionalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishInflectionalPrefix">
        <rdfs:label xml:lang="en">english inflectional prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InflectionalPrefix"/>
        <rdfs:subClassOf rdf:resource="#EnglishInflectionalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishInflectionalSuffix">
        <rdfs:label xml:lang="en">english inflectional suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnglishInflectionalAffix"/>
        <rdfs:subClassOf rdf:resource="#InflectionalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishLexicalMicrotheory">
        <rdfs:label xml:lang="en">english lexical microtheory</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$LexicalMicrotheory whose #$languageOfLexicon is the #$EnglishLanguage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Language-SpecificMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#LexicalMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="EnglishWord">
        <rdfs:label xml:lang="en">English words</rdfs:label>
        <rdfs:comment>A subcollection of #$LexicalWord. Each instance of
            #$EnglishWord is a lexical word of the English language.
            Note that different inflectional forms of a given word do
            not count as different lexical words; for example,
            #$Eat-TheWord encompasses the strings `eat&apos;,
            `eats&apos;, `eating&apos;, and `ate&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
    </owl:Class>
    <owl:Class rdf:ID="Enjoyment">
        <rdfs:label xml:lang="en">#$Enjoyment</rdfs:label>
        <rdfs:comment>The agreeable emotion of taking pleasure or
            satisfaction in an experience.  This is a collection; for an
            explanation of a typical #$FeelingType, see #$Happiness.
            Some more specialized #$FeelingTypes are #$Delight,
            #$Celebratory-Emotion, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="EnlistedPerson">
        <rdfs:label xml:lang="en">enlisted men</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryPerson. Each
            instance of #$EnlistedPerson is a person in some branch of
            the military who holds a rank below that of a commissioned
            officer (see the collection #$CommissionedOfficer).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Entertained-Emotion">
        <rdfs:label xml:lang="en">#$Entertained-Emotion</rdfs:label>
        <rdfs:comment>The emotion experienced when one is entertained or
            occupied in a light, playful, or pleasant manner. Not
            necessarily implies play or sport.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Enjoyment"/>
    </owl:Class>
    <owl:Class rdf:ID="Entertainer">
        <rdfs:label xml:lang="en">entertainer</rdfs:label>
        <rdfs:comment>#$Entertainer is a specialization of
            #$EntertainmentOrArtsProfessional.  Each instance of
            #$Entertainer is a person whose job it is to entertain
            people, i.e., to perform for an audience (live or via a
            recording) in an attempt to distract them from their worries
            and make them laugh, cry, smile, get excited, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>

        <rdfs:subClassOf rdf:resource="#EntertainmentOrArtsProfessional"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EntertainmentEvent">
        <rdfs:label xml:lang="en">entertainment events</rdfs:label>
        <rdfs:comment>A specialization of #$CulturalEvent and
            #$ServiceEvent. Each instance of this collection is an
            activity performed by one or more agents primarily to amuse,
            entertain or otherwise divert others. Every instance of
            #$EntertainmentEvent necessarily has among its subevents
            both an instance of (#$PerformingFn #$EntertainmentEvent)
            and an instance of (#$AttendingFn #$EntertainmentEvent). It
            is thus distinguished from #$RecreationalActivity: a
            #$RecreationalActivity need not involve any #$Entertainers,
            whereas an instance of #$EntertainmentEvent will always
            involve both an entertainer, and an entertainee. Note: This
            collection is more general than #$EntertainmentPerformance,
            which is a specialization of it. For instance, #$JokeTelling
            is a specialization of #$EntertainmentEvent, since it
            involves both an entertainer and an entertainee, Such an
            event, however, can occur under informal circumstances, and
            need not be a formal performance. Thus #$JokeTelling is not
            a spec of #$EntertainmentPerformance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CulturalEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EntertainmentOrArtsProfessional">
        <rdfs:label xml:lang="en">entertainment or arts professionals</rdfs:label>
        <rdfs:comment>A #$PersonTypeByOccupation (q.v.) instances of
            which are persons who use some sort of creative or artistic
            abilities in carrying out the main function of their jobs.
            #$EntertainmentOrArtsProfessional includes both performing
            artists and producers of tangible artworks, either creative
            or commercial.  Note that this collection does _not_ include
            people working on the business side of those professions,
            such as producers or art dealers, whose jobs are more
            similar (see #$jobAttributes) to those of other business
            professionals (e.g. managers, marketers, sales
            representatives) than to the artists&apos;; cf. #$EntertainmentOrArtsAdministrator.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EntertainmentOrRecreationOrganization">
        <rdfs:label xml:lang="en">entertainment or recreation organization</rdfs:label>
        <rdfs:comment>#$EntertainmentOrRecreationOrganization is a
            specialization of #$Organization.  Each instance of
            #$EntertainmentOrRecreationOrganization is an organization
            whose #$MainFunction is to provide personal entertainment to
            customers.  This collection includes organizations that
            perform or provide other forms of entertainment, as well as
            organizations which provide spaces in which entertainment is
            scheduled or provided.  Specific types of
            #$EntertainmentOrRecreationOrganization include:
            #$TelevisionStation, #$TelevisionNetwork, #$NightClub,
            #$TheaterCompany, #$Cinema-Organization, #$AmusementPark, #$Band-MusicGroup.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EntertainmentPerformance">
        <rdfs:label xml:lang="en">#$EntertainmentPerformance</rdfs:label>
        <rdfs:comment>A specialization of #$EntertainmentEvent. Each
            instance of this collection is a public or private
            performance with artistic or entertainment value
            (#$performedBy instances of #$Artist-Performer) arranged in
            order for some audience to witness and enjoy it. Examples
            include #$PlayPerformances, street performances,
            #$BalletDancePerformances, #$MovieShowings.  Note:  Movies
            are included even though the performers aren&apos;t
            performing at the same point in space-time as the
            performance is occurring. But  still photographs are not
            included, since one would not generally call the viewing of
            a photograph an instance of #$EntertainmentEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#EntertainmentEvent"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Enthusiasm">
        <rdfs:label xml:lang="en">enthusiasm</rdfs:label>
        <rdfs:comment>Support and excitement towards a thing that is
            considered worthwhile</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Excitement"/>
    </owl:Class>
    <owl:Class rdf:ID="Entity">
        <rdfs:label xml:lang="en">entities</rdfs:label>
        <rdfs:comment>A specialization of #$SomethingExisting. Each
            instance of #$Entity is a &apos;maximal&apos; instance of
            #$SomethingExisting, in the sense that there cannot be
            another #$SomethingExisting of which that instance is merely
            a sub-abstraction (see #$subAbstractions).  So
            #$AlbertEinstein is an entity, but
            AlbertEinsteinWhileAtPrinceton is not, since
            AlbertEinsteinWhileAtPrinceton is a proper sub-abstraction
            of #$AlbertEinstein.  In other words, an #$Entity represents
            the entire existence of a thing, not just one or more
            `temporal chunks&apos; or #$timeSlices of a thing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
    </owl:Class>
    <owl:Class rdf:ID="EnvelopingCovering">
        <rdfs:label xml:lang="en">#$EnvelopingCovering</rdfs:label>
        <rdfs:comment>The collection of coverings which envelope closely
            the object being      covered</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Covering-Object"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Envy">
        <rdfs:label xml:lang="en">envy</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Resentment"/>
    </owl:Class>
    <owl:Class rdf:ID="Equiangular">
        <rdfs:label xml:lang="en">equiangular</rdfs:label>
        <rdfs:comment>The collection of all objects that are polygon
            shaped (see #$Polygon) and in which all angles between edges
            (see #$angleBetweenEdges) have the same measure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
    </owl:Class>
    <owl:Class rdf:ID="EquilateralShaped">
        <rdfs:label xml:lang="en">equilateral shaped</rdfs:label>
        <rdfs:comment>The collection of all polygon-shaped objects each
            of whose edges has the same length.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EquivalenceRelation">
        <rdfs:label xml:lang="en">equivalence relations</rdfs:label>
        <rdfs:comment>The collection of binary relations that are
            reflexive, symmetric and transitive.  Each instance of
            #$EquivalenceRelation is a binary predicate that carves out
            an equivalence class of its domain (see #$relationDomain)
            and subsets of its domain.  A simple example of an
            equivalence relation is the one denoted by the English
            phrase  the same length as .  On a domain of objects with
            two lengths (long and short), this relation divides the
            domain into two equivalence classes; namely, the class of
            long objects and the class of short objects.  Every member
            of an equivalence class bears the relevant relation to every
            other member in the equivalence class, and to no thing (in
            the relevant domain) that is not in the class.  Thus, an
            equivalence relation on a domain creates a partitioning of
            that domain (see #$partitionedInto).  Examples of
            equivalence relations include #$equals,
            #$temporalBoundsIdentical and #$levelWith.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransitiveBinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#ReflexiveBinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#SymmetricBinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="EukaryoticCell">
        <rdfs:label xml:lang="en">#$EukaryoticCell</rdfs:label>
        <rdfs:comment>A specialization of #$Cell.  Each instance of
            #$EukaryoticCell is a cell that serves as the basic
            structural unit of a eukaryotic organism.  These cells have
            a membrane-bound nucleus and other organelles.
            Multicellular Organisms generally have #$EukaryoticCells;
            #$EukaryoticCell DNA has introns.  Certain
            #$EukaryoticCells, like the red blood corpuscles of
            #$Persons with heathy #$Spleens, lack nuclei.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cell"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EukaryoticOrganism">
        <rdfs:label xml:lang="en">eukaryotic organisms</rdfs:label>
        <rdfs:comment>#$EukaryoticOrganism is a specialization of
            #$Organism-Whole.  Each instance of #$EukaryoticOrganism is
            an organism (individual organism, not type of organism)
            composed of #$EukaryoticCells (cells which have
            mitochondria, other organelles, and nuclei containing chromosomes).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Eutheria">
        <rdfs:label xml:lang="en">#$Eutheria</rdfs:label>
        <rdfs:comment>#$Eutheria is a specialization of #$Mammal.  Each
            instance of #$Eutheria is a placental mammal; most mammals
            are members of this collection.  #$Eutheria are born live,
            nurse from their mothers&apos; #$MammaryGlands and live
            outside their mothers&apos; bodies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mammal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EvaluatableFunction">
        <rdfs:label xml:lang="en">#$EvaluatableFunction</rdfs:label>
        <rdfs:comment>A specialization of both #$EvaluatableRelation
            and #$Function-Denotational (qq.v.).  Each instance of
            #$EvaluatableFunction is  a function that is associated (via
            #$evaluationDefn) with a piece of HL  ( heuristic level )
            code that computes the result of applying the function  to
            arguments for which that function is defined.  An evaluation
            of this sort  is carried out, for example, when the system
            is queried using an #$evaluate  (q.v.) sentence.  As one
            might expect, most evaluatable functions are  mathematical
            or syntactic in nature; for, unlike with functions
            generally,  operations on numbers, sets, lists, and strings
            can in many cases be  calculated algorithmically.  Examples
            include #$PlusFn and #$JoinListsFn.   The practical result
            of evaluating a term built from (a constant that denotes)
            an evaluatable function is another _term_ -- one that has
            the same denotatum  as the former term, but that is
            syntactically simpler and constitutes a more
            straightforward way of referring to that denotatum.  For
            example, the term  `(#$PlusFn 2 3 4)&apos;, when evaluated,
            results in the term `9&apos;.  So if a query  using the open
            sentence `(#$evaluate ?X (#$PlusFn 2 3 4))&apos; is asked,
            the answer  (or  binding  for the free variable
            &apos;?X&apos;) returned will be the term `9&apos;.   By way
            of contrast, consider the non-evaluatable function
            #$BorderBetweenFn  and the following arbitrarily-chosen
            non-atomic term built with its CycL name:
            `(#$BorderBetweenFn #$France #$Germany)&apos;.  As there is
            no general algorithm  for finding simpler or  standard
            terms for given geographical borders,  it is not possible
            for the Cyc system to  evaluate  non-atomic terms like  this one.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnreifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#EvaluatableRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="EvaluatablePredicate">
        <rdfs:label xml:lang="en">evaluatable predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$EvaluatableRelation and
            #$Predicate (qq.v.).   Each instance of
            #$EvaluatablePredicate is a  predicate associated (via
            #$evaluationDefn) with a piece of HL ( heuristic level )
            code that  computes the resulting truth-value when the
            predicate is applied to legal  arguments.  As one might
            expect, most evaluatable predicates are mathematical  or
            syntactic in nature; for numbers, sets, lists, and strings
            are the sorts  of things that are related in various ways
            that can be calculated  algorithmically.  Examples include
            #$greaterThan and #$substring. Thus the sentence
            `(#$greaterThan 3 1)&apos; evaluates to (and so if used  to
            ask a query will return the answer) `#$True&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EvaluatableRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="EvaluatableRelation">
        <rdfs:label xml:lang="en">#$EvaluatableRelation</rdfs:label>
        <rdfs:comment>A specialization of #$Relation.  Each instance of
            #$EvaluatableRelation is a function or predicate for which
            there is some piece of system code that  can be invoked to
            evaluate (i.e. to determine the denotation or truth-value
            of) a closed expression built from that function or
            predicate (i.e. a closed  expression that has the constant
            that denotes that function or predicate in  its initial or
            0th  argument-place).  An evaluation of this sort is carried
            out, for example, when the system is queried using an
            #$evaluate (q.v.)  sentence.  As one might expect, most
            evaluatable relations are mathematical  or syntactic in
            nature; for numbers, sets, lists, and strings are the sorts
            of things that are related in various ways that can be
            calculated  algorithmically.  Examples include #$PlusFn,
            #$greaterThan, #$JoinListsFn,  and #$substring.  In the case
            of a function that is evaluatable (see
            #$EvaluatableFunction), the practical result of evaluating
            the relevant  expression is another _term_ -- one that has
            the same denotatum as the  original expression, but that is
            syntactically simpler and constitutes a  more
            straightforward way of referring to that denotatum.  For
            example,  the term `(#$PlusFn (#$Inch 3) (#$Inch 1))&apos;,
            when evaluated, results in  the term `(#$Inch 4)&apos;.  So
            if a query using the open sentence `(#$evaluate ?X (#$PlusFn
            (#$Inch 3) (#$Inch 1)))&apos; is asked, the answer  (or
            binding  for the variable `?X&apos;) returned will be the
            term `(#$Inch 4)&apos;.   Evaluating a sentence built from
            (a constant that denotes) an  #$EvaluatablePredicate, on the
            other hand, yields a _truth-value_.  For  example, the
            sentence `(#$greaterThan (#$Inch 3) (#$Inch 1))&apos;
            evaluates  to (and so if used to ask a query will return the
            answer) `#$True&apos;.  The  predicate #$evaluationDefn
            (q.v.) is used to specify the name of the piece  of system
            code used to evaluate expressions formed with a given
            evaluatable relation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="Evaluating">
        <rdfs:label xml:lang="en">reviews</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction. Each
            instance of this collection is an event in which at least
            one agent evaluates some thing or situation.  Notable
            specializations of #$Evaluating include
            #$MeasuringSomething, #$MedicalTesting, and #$Navigating.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#IntentionalMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Evaporating">
        <rdfs:label xml:lang="en">#$Evaporating</rdfs:label>
        <rdfs:comment>A specialization of #$StateOfMatterChangeEvent.
            In each instance of #$Evaporating, something in liquid form
            (i.e., an instance of #$Liquid-StateOfMatter) is converted
            to vapor (and thus becomes an instance of #$Gaseous-StateOfMatter).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EvenNumber">
        <rdfs:label xml:lang="en">even numbers</rdfs:label>
        <rdfs:comment>A specialization of #$Integer.  An instance INT of
            #$Integer is also an instance of #$EvenNumber if and only if
            INT is divisible (without remainder) by two.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="Evening">
        <rdfs:label xml:lang="en">evenings</rdfs:label>
        <rdfs:comment>Each #$Evening is started by a #$Dusk and is
            #$temporallyCoterminal with the #$CalendarDay it&apos;s a
            part of.  Each #$Evening is #$contiguousAfter an
            #$Afternoon, and each #$Overnight is #$contiguousAfter an #$Evening.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Event">
        <rdfs:label xml:lang="en">#$Event</rdfs:label>
        <rdfs:comment>An important specialization of
            #$Situation-Temporal and #$IntangibleIndividual (qq.v).
            Each instance of #$Event is a dynamic situation in which the
            state of the world changes; each instance is something one
            would say  happens .  Events are intangible because they
            consist of changes per se, not tangible objects that effect
            changes.  Instances of #$Event should not be confused with
            instances of #$TimeInterval (q.v.).  The temporal bounds of
            events are delineated by time intervals, but in contrast to
            events time intervals have no spatial extent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Event-Localized">
        <rdfs:label xml:lang="en">localized events</rdfs:label>
        <rdfs:comment>A specialization of #$Event.  Each instance of
            #$Event-Localized is an event that occurs at a specific
            location in space. Notable specializations of
            #$Event-Localized include #$PhysicalEvent and #$AnimalActivity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Event-Organized">
        <rdfs:label xml:lang="en">#$Event-Organized</rdfs:label>
        <rdfs:comment>A collection of individual events.  An event is an
            instance of #$Event-Organized if it is planned and directed
            by some instance of #$Person or #$Organization.  Elements of
            #$MusicalPerformance, #$Trial, and #$Bombing would all be
            instances.  Elements of #$Earthquake and #$Breathing would not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="EventPredicate">
        <rdfs:label xml:lang="en">event predicates</rdfs:label>
        <rdfs:comment>#$EventPredicate is a collection of predicates
            that are used to make assertions about events. The
            representation of events in terms of #$EventPredicates is an
            alternative to the Davidsonian-style representation of
            events in which the  participants  in  events are related to
            the reified individual events in which they participate (for
            the representational approach, see #$Role, #$ActorSlot, and
            #$SubEventPredicate). The first argument to an event
            predicate will always be the  agentive force  in the event.
            For instance, in the ground atomic formula (#$transports
            LOTUS-BLOSSUM099 OBJECT056 FROM TO VIA), LOTUS-BLOSSUM099 is
            the agentive force -- it is what transports OBJECT056.  The
            agentive force need not be a volitional or intelligent
            agent. It may just be a causal agent.  For example, a
            bacterium, or a mob of bacteria, can be the agentive force
            in an infection, even though bacteria are not volitional or
            intelligent agents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="EvergreenPlant">
        <rdfs:label xml:lang="en">evergreens</rdfs:label>
        <rdfs:comment>A specialization of #$Plant-Woody.  Each instance
            of #$EvergreenPlant is a plant that retains its leaves or
            needles throughout all the seasons of the year.  See also
            the collection #$DeciduousPlant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExceptionRelation">
        <rdfs:label xml:lang="en">#$ExceptionRelation</rdfs:label>
        <rdfs:comment>A collection of mathematical objects, which are
            the #$LogicalConnectives used to express exceptions to
            rules.  Elements include #$exceptWhen and #$exceptFor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ExchangeOfUserRights">
        <rdfs:label xml:lang="en">exchanging</rdfs:label>
        <rdfs:comment>A specialization of both #$SocialOccurrence and
            #$ChangeInUserRights.  In each instance of
            #$ExchangeOfUserRights, two instances of #$Agent (the
            #$exchangers) perform two distinct (though related)
            instances of #$TransferringPossession with each other.  Two
            objects are exchanged.  Each agent gains possession -- in
            the form of some #$UserRightsAttribute -- of something (an
            #$objectOfPossessionTransfer) from the other.  Each transfer
            is related to the other as some kind of condition, usually
            as a precondition or an intended result; for example, the
            news seller will hand over a paper if given fifty cents, and
            a buyer will give the news seller fifty cents so that the
            seller will turn over a newspaper to the buyer.  The two
            #$TransferringPossession events are #$subEvents of the
            #$ExchangeOfUserRights event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Excited">
        <rdfs:label xml:lang="en">agents who is excited</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            excited. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Excitement">
        <rdfs:label xml:lang="en">#$Excitement</rdfs:label>
        <rdfs:comment>A feeling of arousal that stirs up, moves
            profoundly, or serves as a challenge to one&apos;s power,
            eliciting the desire to do or perceive something.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingTypes than
            #$Excitement include #$Enthusiasm, #$Celebratory-Emotion,
            #$Triumph-TheFeeling, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Executive">
        <rdfs:label xml:lang="en">executives</rdfs:label>
        <rdfs:comment>A collection of people.  An instance of
            #$Executive is a person who holds an executive managerial
            positions in some #$Organization.  Among the members of
            #$Executive are top managers of organizations, including
            corporate officers (#$ChiefExecutiveOfficer, etc.), Chiefs
            of Staff, Generals, Admirals and others like Chief Corporate
            Counsel, Managing Partner, Producer, Chief Scientist, Chief
            Engineer, as well as other upper and upper-middle managers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#OrganizationRepresentative"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Exercising">
        <rdfs:label xml:lang="en">#$Exercising</rdfs:label>
        <rdfs:comment>The collection of events in which humans move
            their bodies for the purpose of general physical
            conditioning and/or strengthening muscles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AthleticActivity"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Exhaling">
        <rdfs:label xml:lang="en">#$Exhaling</rdfs:label>
        <rdfs:comment>Expelling gas from the lungs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TranslationAlongInternalLivingStructure"/>
        <rdfs:subClassOf rdf:resource="#PassingThroughPortal"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExistentialQuantifier">
        <rdfs:label xml:lang="en">existential quantifier</rdfs:label>
        <rdfs:comment>A specialization of #$Quantifier. Each instance of
            #$ExistentialQuantifier can be used to assert the existence
            of something meeting certain criteria.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Quantifier"/>
    </owl:Class>
    <owl:Class rdf:ID="ExistingObjectType">
        <rdfs:label xml:lang="en">#$ExistingObjectType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ExistingObjectType is a collection that is temporally
            stuff-like (see #$TemporalStuffType) but
            physically-spatially object-like (see #$ObjectType) -- i.e.
            object-like with respect to some physical-spatial part-whole
            predicate (e.g. some specialization of
            #$physicalDecompositions).  Consider the collection
            #$BookCopy.  #$BookCopy is temporally stuff-like: any one of
            the #$timeSlices of a given copy COPY of (say)  Moby Dick
            is still a copy of  Moby Dick . (Most collections of
            tangible objects are temporally stuff-like in this way.)
            But #$BookCopy is spatially _object-like_: if we take a
            scalpel and slice COPY into ten pieces, each piece is not a
            copy of  Moby Dick .  So #$BookCopy is an instance of
            #$ExistingObjectType.  See also #$StuffType and #$ExistingStuffType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="ExistingStuffType">
        <rdfs:label xml:lang="en">#$ExistingStuffType</rdfs:label>
        <rdfs:comment>A collection of collections, and a specialization
            of #$TemporalStuffType.  Each instance of
            #$ExistingStuffType is a collection of things (including
            portions of things) which are both temporally and spatially
            stufflike.  Division in time or space does not destroy the
            stufflike quality of the object (down to a certain
            granularity).      ``STUFF is an instance of
            #$ExistingStuffType&apos;&apos; implies:  a) for most
            instances, OBJ, of STUFF, for any proper physical part (see
            the predicate #$physicalParts) PART of OBJ, PART is also an
            instance of STUFF.  b) for all instances, OBJ, of STUFF, for
            most proper physical parts PART of OBJ, PART is also an
            instance of STUFF.       For example, every piece of wood is
            temporally stufflike: if W-168 is a piece of wood during
            1996, then it&apos;s also a piece of wood for the one-minute
            time-slice 9:05am 7/7/96.  It&apos;s also spatially
            stufflike: if we take that piece of wood W-168 and cut it in
            half, we have two things which are both pieces of wood.
            Since every piece of wood is both temporally and spatially
            stufflike, #$Wood is an instance of #$ExistingStuffType.
            Other instances of #$ExistingStuffType include the
            collections #$AppleJuice, #$IceCream, #$Diamond,
            #$WaxedPaper, and #$StriatedMuscle. See the comment for
            #$StuffType to learn more about the distinctions between,
            and the need for, these four collections: #$StuffType,
            #$ObjectType, #$ExistingStuffType, and #$ExistingObjectType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="ExperiencingHunger">
        <rdfs:label xml:lang="en">hungering</rdfs:label>
        <rdfs:comment>Being hungry</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExpletivePronoun">
        <rdfs:label xml:lang="en">#$ExpletivePronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Explosion">
        <rdfs:label xml:lang="en">#$Explosion</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$Explosion is an event that involve an extremely violent,
            chaotic release of energy.  It is not exactly controlled,
            even in the best circumstances, though it may be contained
            and channelled to do useful work (such as within the
            cylinders of a car engine, or such as when a hole is blasted
            for a backyard swimming pool.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnergyConversionProcess"/>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExtendedSpaceRegion">
        <rdfs:label xml:lang="en">#$ExtendedSpaceRegion</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion. Instances of
            #$ExtendedSpaceRegion are portions of a three dimensional
            space  that have an extent in at least one direction. This
            collection has three  important specialization: the
            collections of one [#$SpaceLine], two  [#$SpaceSurface] and
            three [#$ChunkOfSpace] dimensional  pieces of space.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExternalAnatomicalPart">
        <rdfs:label xml:lang="en">external anatomical parts</rdfs:label>
        <rdfs:comment>#$ExternalAnatomicalPart is a specialization of
            #$OrganismPart.  Each instance of #$ExternalAnatomicalPart
            is a part of the external anatomy of an organism. Example
            subcollections include #$Earlobe and #$Leaf.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExternalOrgan">
        <rdfs:label xml:lang="en">external organs</rdfs:label>
        <rdfs:comment>#$ExternalOrgan is a specialization of #$Organ and
            #$ExternalAnatomicalPart.  Each instance of #$ExternalOrgan
            is an organ that is an external anatomical part; e.g., a
            nose or eye.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organ"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ExternalSurface-WholeThing">
        <rdfs:label xml:lang="en">#$ExternalSurface-WholeThing</rdfs:label>
        <rdfs:comment>The collection of all entire outer physical
            surfaces of tangible objects.  Excludes mere patches or
            portions of the whole surface of an object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Eye">
        <rdfs:label xml:lang="en">#$Eye</rdfs:label>
        <rdfs:comment>A specialization of both #$ExternalOrgan and
            #$ElectroMagneticRadiationSensor.  Each instance of #$Eye is
            an organ of sight.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#ElectroMagneticRadiationSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FPSUnitOfMeasure">
        <rdfs:label xml:lang="en">foot-pound-second units of measure</rdfs:label>
        <rdfs:comment>A subcollection of #$UnitOfMeasure.
            #$FPSUnitOfMeasure is the collection of all the measurement
            functions whose results use the FPS (i.e.,
            foot-pound-second) system of measure to describe physical
            quantities.  Examples: #$Gallon-US, #$SquareMile, #$CubicFtPerSec.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="FaceOfAnimal">
        <rdfs:label xml:lang="en">#$FaceOfAnimal</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart and
            #$ExternalAnatomicalPart. Each instance of #$FaceOfAnimal is
            the bodily region of an animal where the eyes of that animal
            are located.  In most terrestrial animals, this is the front
            region of an animal&apos;s head, and it also turns out to be
            where the nose and mouth are located.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Facility-Construct">
        <rdfs:label xml:lang="en">facilities</rdfs:label>
        <rdfs:comment>#$Facility-Construct is a specialization of
            #$ConstructionArtifact.  Each instance of
            #$Facility-Construct is  used primarily for one purpose and
            will usually be a building (such as a    particular
            #$Laboratory) or building(s) *and*    the surrounding
            property (e.g., a    particular #$MilitaryFacility).  As
            such, this    collection is a proper subcollection of
            #$ConstructionArtifact, as it excludes     things like
            railroad tracks, and is a distinct    collection from
            #$FixedStructure, which   includes non-#$Facility-Constructs
            like the #$EiffelTower, but   excludes most (perhaps all)
            instances of   #$MilitaryFacility).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FallSeason">
        <rdfs:label xml:lang="en">#$FallSeason</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear.  Each instance
            of #$FallSeason is the season during a temperate climate
            cycle (see #$TemperateClimateCycle) during which the bulk of
            harvesting occurs and many plants cease growth in order to
            enter a dormant period for the coming Winter. Thus instances
            of #$FallSeason also typically have harvest celebrations as
            sub-events.  Note that #$FallSeason represents the climatic
            aspects of Fall; it is _not_ a specialization of
            #$CalendarSeason.  For the collection of temporal extents of
            fall seasons, see #$CalendarAutumn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FallingProcess">
        <rdfs:label xml:lang="en">#$FallingProcess</rdfs:label>
        <rdfs:comment>A moving process in which a non completely
            supported object moves downward under the force of gravity.
            Since time slice is also a #$FallingProcess, the collision
            with the ground or some other object is not a necessary
            #$subEvents as it is with #$FallingEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DescendingEvent"/>
        <rdfs:subClassOf rdf:resource="#ProjectileMotion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Family-SocialEntity">
        <rdfs:label xml:lang="en">family units</rdfs:label>
        <rdfs:comment>A specialization of #$Group.  Each instance of
            #$Family-SocialEntity is a group of people or of other
            animals related by birth and mating.  The kinship relation
            between group-members of an instance of
            #$Family-SocialEntity  is closer than simply being members
            of the same species.  Instances of #$Family-SocialEntity may
            (but need not) function together as an #$Organization
            (q.v.).  See also the specialization #$Family-Human.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FamilyRelationSlot">
        <rdfs:label xml:lang="en">family relationships</rdfs:label>
        <rdfs:comment>A specialization of #$InterPersonalRelationSlot.
            Each instance of #$FamilyRelationSlot is a binary predicate
            used to represent relationships among members of human
            families.  Instances of #$FamilyRelationSlot include
            #$spouse, #$siblings, #$grandmothers, #$grandfathers,
            #$relatives, and #$cohabitingFamilyMembers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InterPersonalRelationSlot"/>
        <rdfs:subClassOf rdf:resource="#InterExistingObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Famine">
        <rdfs:label xml:lang="en">famines</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$DisasterEvent.  Each instance of #$Famine is an event
            taking place in a contiguous geographical area in which a
            lot of people are undergoing #$Starvation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Farmer">
        <rdfs:label xml:lang="en">farmer</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$Farmer is a person who makes (or significantly
            supplements) his or her income by farming, where farming
            includes such activities as growing vegetables, grain, or
            fruit crops, dairy farming, and raising livestock (e.g.,
            cattle, pigs, sheep, fish) for their meat or other animal
            products (e.g., wool).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#BlueCollarWorker"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fear">
        <rdfs:label xml:lang="en">fears</rdfs:label>
        <rdfs:comment>Unpleasant emotion manifested by painful agitation
            in the presence or awareness of danger.   Fear implies
            anxiety and loss of courage.  This is a collection; for an
            explanation of a typical #$FeelingType, see #$Happiness.   A
            more specialized #$FeelingType than #$Fear is #$Dread.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Fearful">
        <rdfs:label xml:lang="en">agents who is scared</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            fearful. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="February">
        <rdfs:label xml:lang="en">February</rdfs:label>
        <rdfs:comment>The collection of all Februaries,  the second
            month of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FeelingAttribute">
        <rdfs:label xml:lang="en">#$FeelingAttribute</rdfs:label>
        <rdfs:comment>The collection of all emotions and mental
            feelings.  As an emotion/feeling can be experienced in
            various degrees of intensity, an instance of
            #$FeelingAttribute is some particular  relative amount  of
            happiness, confidence, fear, or whatever.  These  relative
            amounts  can be measured using the #$GenericValueFunctions
            (q.v.), such as #$LowAmountFn, #$VeryHighAmountFn, etc.  For
            example, (#$LowAmountFn #$Happiness) is the
            #$FeelingAttribute of feeling a relatively low amount of
            happiness.  (Note that #$Happiness itself is not an
            individual feeling attribute but a _collection_ of
            #$FeelingAttributes -- a #$FeelingType (q.v.) -- whose
            instances are the individual attributes of feeling
            particular relative amounts of happiness; (#$LowAmountFn
            #$Happiness) is one such instance.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="FeelingOfCompetence">
        <rdfs:label xml:lang="en">feelings of competence</rdfs:label>
        <rdfs:comment>A feeling of self-confidence with respect to a
            certain kind of task or area of expertise.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Confidence"/>
    </owl:Class>
    <owl:Class rdf:ID="FeelingType">
        <rdfs:label xml:lang="en">#$FeelingType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$FeelingType is a type of emotion or mental feeling.
            Instances of #$FeelingType include #$Envy, #$Curiosity, and
            #$PrideOfAccomplishment.  See also #$FeelingAttribute.  (For
            the rationale behind treating feelings as _types_ -- i.e.
            collections -- of attributes, see the comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrimitiveScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="FelidaeFamily">
        <rdfs:label xml:lang="en">felidae family</rdfs:label>
        <rdfs:comment>The family of which cats - housecats, lions,
            tigers, etc. - are members.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CarnivoreOrder"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
    </owl:Class>
    <owl:Class rdf:ID="FemaleAnimal">
        <rdfs:label xml:lang="en">female animals</rdfs:label>
        <rdfs:comment>The collection of all female animals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FemalePerson">
        <rdfs:label xml:lang="en">#$FemalePerson</rdfs:label>
        <rdfs:comment>A specialization of both #$Person and
            #$FemaleAnimal. The collection of all female persons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#FemaleAnimal"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Primate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ferry">
        <rdfs:label xml:lang="en">#$Ferry</rdfs:label>
        <rdfs:comment>#$Ferry is a specialization of #$Ship and
            #$PublicTransportationDevice.  Each instance of #$Ferry is a
            ferryboat, i.e., boats that are used to carry people, goods
            or vehicles across rivers, lakes, canals or channels etc. or
            even from one side of a harbor to another, but normally not
            used to cross oceans.  #$Ferry is disjoint with #$OceanLiner.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ship"/>
        <rdfs:subClassOf rdf:resource="#PublicTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FeverInfection">
        <rdfs:label xml:lang="en">infections with fever</rdfs:label>
        <rdfs:comment>An instance of #$InfectionTypeBySymptomology, and
            a specialization of #$Infection.  Each instance of
            #$FeverInfection is an infection whose symptoms include
            prolonged episodes of fever (see the constant #$Fever).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Infection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FictionalContext">
        <rdfs:label xml:lang="en">fictional contexts</rdfs:label>
        <rdfs:comment>The collection of
            #$FictionalOrMythologicalContexts which are (1) created
            intentionally, not by error or chance or gradual evolution
            and accretion in a culture, and (2) typically are the
            information content of some #$InformationBearingThing, and
            (3) are not expected (by their creator) to be believed as
            factual, nor do their creators believe them to be factual.
            In addition to asserting fictional propositions about
            existing things, a #$FictionalContext may include terms for
            nonexistent things.  Examples: #$MiddleEarthMt, #$AdventuresOfHuckleberryFinn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="FieldOfStudy">
        <rdfs:label xml:lang="en">fields of study</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$FieldOfStudy is a particular area of
            study, with its own distinctive set of theories, hypotheses,
            and problems.  Instances of #$FieldOfStudy are typically the
            subject of teaching and/or research within instances of
            #$AcademicDepartment (q.v.), although one
            #$AcademicDepartment may cover several instances of
            #$FieldOfStudy.  Instances of #$FieldOfStudy include
            #$ArtHistory, #$Physics, and #$ArtificialIntelligence.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fight-Physical">
        <rdfs:label xml:lang="en">#$Fight-Physical</rdfs:label>
        <rdfs:comment>The collection of all #$ConflictEvents in which
            two or more #$competingAgents try to subdue each other by
            inflicting physical injury. A #$Fight-Physical may be
            between individuals or between groups, and may involve
            weapons or not. The #$competingAgents may be #$Persons or
            #$NonPersonAnimals. The fighting must be mutual; if one side
            refuses to attack the other or tries to flee instead of
            attacking, it is not a #$Fight-Physical.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConflictEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Figure-Geometrical">
        <rdfs:label xml:lang="en">figure - geometrical</rdfs:label>
        <rdfs:comment>Instances of #$Figure-Geometrical can be conceived
            as bounded  regions of space or sets of points and lines. A
            single point, a set of  scattered points are not instances
            of this collection. Note that  this collection includes line
            segments, but not unbounded lines. An  important
            subcollection is #$PlaneFigure-Geometrical.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FileDirectory">
        <rdfs:label xml:lang="en">file directory</rdfs:label>
        <rdfs:comment>A specialization of #$DynamicIndexedInfoSource and
            #$ComputerFile-CW. Each instance of #$FileDirectory is a
            directory structure comprised of other directories,
            instances of #$ComputerFile-CW, symbolic links, or the
            logical names of devices. In #$MSWindowsOperatingSystem
            terminology, instances of this collection are called
            folders . On a #$UnixOS, a directory is a list of names and
            inode (#$FileIndexNode) numbers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerFile-CW"/>
        <rdfs:subClassOf rdf:resource="#DynamicIndexedInfoSource"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FinancialAccount">
        <rdfs:label xml:lang="en">financial accounts</rdfs:label>
        <rdfs:comment>A specialization of #$Account.  Each instance of
            #$FinancialAccount is an account which is denominated in
            units of #$MonetaryValue (q.v.).  Specializations of
            #$FinancialAccount include #$BankAccount,
            #$CreditCardAccount, and #$VendorAccount.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Account"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="FinancialAccountTenderObject">
        <rdfs:label xml:lang="en">financial account tender object</rdfs:label>
        <rdfs:comment>A specialization of #$TenderObject.  Each instance
            of #$FinancialAccountTenderObject is an object (e.g., a
            check or a credit card) that serves as a means for offering
            payment in funds drawn on an associated instance of
            #$FinancialAccount.  The liquidity of an instance of
            #$FinancialAccountTenderObject depends on the status of the
            associated financial account (see the predicates
            #$accountBalance and #$accountStatus).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FinancialAssetHoldings">
        <rdfs:label xml:lang="en">financial asset holdings</rdfs:label>
        <rdfs:comment>A collection of partially tangibles. An instance
            of #$FinancialAssetHoldings is a group of financial assets
            (e.g., stocks, bonds, ... ) owned by individual or corporate
            #$Agent(s). As a default, we assume that the monetary value
            of each group equals the sum of the monetary values of the
            individual assets in that group.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Holdings"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FinancialCompany">
        <rdfs:label xml:lang="en">financial institutions</rdfs:label>
        <rdfs:comment>#$FinancialCompany is a specialization of
            #$PrivateSectorOrganization, #$FinancialOrganization, and
            #$CommercialServiceOrganization.  Each instance of
            #$FinancialCompany is a business engaged in financial
            activities as it&apos;s main concern.  An instance of
            #$FinancialCompany is a commercial service organization that
            buys, sells, trades, converts, or lends money, in the form
            of currency or negotiable financial instruments (such as
            stocks, bonds, commodities futures, etc.), as (one of) its
            major function(s).  The collection #$FinancialCompany does
            not include businesses, such as retailers, which simply
            exchange goods or non-financial services for money.
            Examples: Chase Bank, University Federal Credit Union,
            Fidelity Investments (but NOT the IMF). Cf. the
            supercollection #$FinancialOrganization for non-business
            organizations engaged in financial activities (such as the IMF).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrivateSectorOrganization"/>
        <rdfs:subClassOf rdf:resource="#FinancialOrganization"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FinancialOrganization">
        <rdfs:label xml:lang="en">financial organization</rdfs:label>
        <rdfs:comment>#$FinancialOrganization is a specialization of
            #$Organization.  Each instance of #$FinancialOrganization is
            primarily or significantly engaged in the
            #$FinancialIndustry or whose activities focus on that
            industry.  Instances of both
            #$CommercialServiceOrganizations (e.g., banks and brokerage
            houses) and #$NonProfitOrganizations (e.g.,
            #$InternationalMonetaryFund) may be instances of
            #$FinancialOrganization.  Specializations of
            #$FinancialOrganization include #$BankCompany,
            #$FinancialExchange, and #$InvestmentOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Finger">
        <rdfs:label xml:lang="en">fingers</rdfs:label>
        <rdfs:comment>The collection of all digits of all #$Hands
            (q.v.).  Fingers are (typically) flexibly jointed and are
            necessary to enabling the hand (and its owner) to perform
            grasping and manipulation actions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Digit-AnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Firewall-Network">
        <rdfs:label xml:lang="en">firewall - network</rdfs:label>
        <rdfs:comment>A specialization of #$Computer and of
            #$SinglePurposeDevice. Each instance of this collection is a
            dedicated hardware machine designed to run
            #$FirewallPrograms in order to increase the security of a
            #$ComputerNetwork by filtering out incoming packets (see
            #$Packet-Network) according to specific rules.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SinglePurposeDevice"/>
        <rdfs:subClassOf rdf:resource="#Computer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FirewallProgram">
        <rdfs:label xml:lang="en">#$FirewallProgram</rdfs:label>
        <rdfs:comment>A specialization of #$SecurityProgram and
            #$ServerProgram. Each instance of this collection is a
            program designed to filter  packets (see #$Packet-Network)
            that enter the network or computer that it is protecting.
            Firewall filtering rules -- usually stored in a
            coinfiguration file accessed by th program -- describe what
            the program should do with various kinds of packets --
            accepting them and routing them toward their destination,
            discarding them as though they were never received, or
            dropping them with a notification sent to the sending
            machine. Which occurs is determined by whether information
            in the packet headers satisfies criteria stated in the
            firewall rules. Any machine that runs a firewall program is
            a #$Firewall-Network.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServerProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FirstOrderCollection">
        <rdfs:label xml:lang="en">first order collection</rdfs:label>
        <rdfs:comment>The collection of all specs of #$Individual.  Any
            instance of any instance of #$FirstOrderCollection is an #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedOrderCollection"/>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="FiscalQuarter">
        <rdfs:label xml:lang="en">#$FiscalQuarter</rdfs:label>
        <rdfs:comment>Each instance of this collection is a 3-month-long
            interval of time kept track of by an #$Agent as part of its
            financial accounting procedures.  Since the start dates and
            end dates may vary depending on the organization, instances
            will be things like Fiscal3rdQuarterOf1995ForCycorp.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FiscalYear">
        <rdfs:label xml:lang="en">fiscal years</rdfs:label>
        <rdfs:comment>Each instance of this collection is an annual,
            year-long interval of time kept track of by an #$Agent as
            part of its operational and financial accounting procedures.
            Since the start dates and end dates may vary depending on
            the organization, instances of this collection are time
            intervals like FiscalYearOf1989ForMicrosoft</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fish">
        <rdfs:label xml:lang="en">fish</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass, and a
            specialization of #$Vertebrate.  Each instance of #$Fish is
            a cold-blooded animal (see the collection #$Poikilotherm)
            with gills and fins. Each instance of #$Fish spends all or
            almost all of its life under water.  Note that the
            collection #$Fish excludes fish-shaped examples of #$Mammal,
            such as porpoises and whales. Specializations of #$Fish
            include the collections #$Salmon, #$Catfish, and #$Tuna.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AquaticOrganism"/>
        <rdfs:subClassOf rdf:resource="#Poikilotherm"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedArityFunction">
        <rdfs:label xml:lang="en">fixed-arity functions</rdfs:label>
        <rdfs:comment>A #$FunctionCategory and the collection of
            functions of fixed arity (see #$arity).  Each instance of
            #$FixedArityFunction is a function that always takes a fixed
            number of arguments.  Most functions reified in the Cyc
            ontology are of fixed arity.  For example, #$GroupFn always
            takes a single argument and #$BorderBetweenFn always takes
            two arguments. This   collection is disjoint with #$VariableArityFunction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedArityRelation">
        <rdfs:label xml:lang="en">fixed-arity relations</rdfs:label>
        <rdfs:comment>A specialization of #$Relation.  A #$Relation REL
            is an instance of #$FixedArityRelation just in case REL is a
            relation with a fixed number of arguments.
            #$FixedArityRelation is disjoint with #$VariableArityRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedAritySkolemFuncN">
        <rdfs:label xml:lang="en">fixed arity skolem func n</rdfs:label>
        <rdfs:comment>The collection of #$SkolemFuncNs (q.v.) whose
            arity is fixed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedAritySkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#SkolemFuncN"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedAritySkolemFunction">
        <rdfs:label xml:lang="en">fixed-arity Skolem functions</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFunctions whose arity
            is fixed. This is the most common type of skolem function,
            since variable- arity skolem functions are only created when
            a sequence variable is in the scope of the skolem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedOrderCollection">
        <rdfs:label xml:lang="en">fixed order collection</rdfs:label>
        <rdfs:comment>The collection of all #$Collections all of whose
            elements have the same ``order&apos;&apos;.  The elements of
            #$FixedOrderCollection include #$Individual,
            #$FirstOrderCollection, #$SecondOrderCollection,
            #$ThirdOrderCollection, #$FourthOrderCollection, and their specs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedStructure">
        <rdfs:label xml:lang="en">fixed free-standing structures</rdfs:label>
        <rdfs:comment>#$FixedStructure is a specialization of
            #$ConstructionArtifact.  Each instance of #$FixedStructure
            is a human-constructed, freestanding object that exists in a
            fixed location.  Examples include buildings, pyramids, the
            Great Wall of China, dams, bridges, elevated roadways, and
            canals. Such structures may have parts which are also
            instances of #$FixedStructure (e.g. bridge pilings) and
            parts which are not freestanding (e.g. the span of a bridge,
            or a room in a building).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedTerrainGeologicalRegion">
        <rdfs:label xml:lang="en">#$FixedTerrainGeologicalRegion</rdfs:label>
        <rdfs:comment>The collection of all (normally extensive)
            #$GeographicalRegions distinguised by the type of surface
            growth.  See #$ClimaticTerrainType</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FixedWingAircraft">
        <rdfs:label xml:lang="en">fixed-wing aircraft</rdfs:label>
        <rdfs:comment>The collection of #$AirTransportationDevices that
            are vehicles having fixed wing structures as their primary
            source of lift.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#AirTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#FuelPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Flammability">
        <rdfs:label xml:lang="en">flammabilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subcollection of
            #$PhysicalAttribute. Each instance of #$Flammability
            represents a specific readiness with which some tangible
            substance burns. Different degrees of #$Flammability are
            represented using #$GenericValueFunctions. Flammability of
            an object is indicated with the predicate #$flammabilityOfObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalAttributeOfTangibleOnly"/>
        <rdfs:subClassOf rdf:resource="#Interval-BoundedBelow"/>
    </owl:Class>
    <owl:Class rdf:ID="FlatPhysicalSurface">
        <rdfs:label xml:lang="en">flat surfaces</rdfs:label>
        <rdfs:comment>The collection of all surfaces that are
            substantially flat (by the tolerance standards of the the
            context).  This means that there are no
            &apos;significant&apos; concave depressions or convex bulges
            or bumps, and that the surface approximates some portion of
            a Euclidian plane in space.  Note that the surface may have
            holes or cracks and may be disconnected, in multiple
            (substantially coplanar) pieces.  A typical table top is a #$FlatPhysicalSurface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FlatSurface">
        <rdfs:label xml:lang="en">planes (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Surface-Generic. Each
            instance of #$FlatSurface is a (roughly) two-dimensional
            object. Examples include spatially localized objects, like
            the top of a kitchen counter, as well as abstract surfaces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FlightlessBird">
        <rdfs:label xml:lang="en">#$FlightlessBird</rdfs:label>
        <rdfs:comment>#$FlightlessBird is the collection of #$Birds that
            can&apos;t fly.  Notable specializations include #$Penguin
            and #$Emu.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Bird"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Flippancy">
        <rdfs:label xml:lang="en">flippancy</rdfs:label>
        <rdfs:comment>Emotion shown by irresponsibly gay or indifferent
            behavior, when seriousness is expected. Empty conduct</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="FloatObject">
        <rdfs:label xml:lang="en">float object</rdfs:label>
        <rdfs:comment>The float data type is used to store real-valued
            numbers in  C-like programming languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="FloorInAConstruction">
        <rdfs:label xml:lang="en">floors (types of things)</rdfs:label>
        <rdfs:comment>#$FloorInAConstruction is a specialization of
            #$PartOfAnHSC and #$Wall-GenericBarrier.  Each instance of
            #$FloorInAConstruction is a physical floor in a building
            (typically made to walk upon), _not_ the level (the story
            composed of rooms or halls -- see #$LevelOfAConstruction).
            The floor can include any floor in a building such as the
            floor of a room on the third floor as well as the floor of
            the entire first level of the building.  This includes just
            the horizontal surface -- not the subfloor.  It also does
            not include floor coverings like carpet or tile.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Wall-GenericBarrier"/>
        <rdfs:subClassOf rdf:resource="#PartOfAnHSC"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FlowPath">
        <rdfs:label xml:lang="en">#$FlowPath</rdfs:label>
        <rdfs:comment>A #$CustomaryPathCycLConstant and a specialization
            of both #$Path-Customary and #$Path-Simple.  Each instance
            of #$FlowPath is a path whose extent is delineated by the
            movement of a fluid over an area; for example, the path of a
            lava flow or the #$AlaskanPipeline.  Instances of #$FlowPath
            may (but need not) be constrained by objects or forces that
            channel the flow of fluid; see also the subcollection #$FluidConduit.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FloweringPlant">
        <rdfs:label xml:lang="en">magnoliophytes</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass and a
            specialization of #$Plant. Each instance of #$FloweringPlant
            is a plant whose seeds are enclosed in ovaries;
            consequently, this is the collection of flowering plants in
            the botanical sense.  For flowering plants actually in
            bloom, see the collection #$FloweryPlant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant"/>
    </owl:Class>
    <owl:Class rdf:ID="FloweryPlant">
        <rdfs:label xml:lang="en">flowers</rdfs:label>
        <rdfs:comment>A specialization of #$FloweringPlant and an
            instance  of #$LifeStageType (q.v.).  Each instance of
            #$FloweryPlant is a flowering plant that is actually and
            visibly in bloom (i.e. has flowers showing).  This
            collection includes both bushes and trees with visible flowers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FloweringPlant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FluidConduit">
        <rdfs:label xml:lang="en">#$FluidConduit</rdfs:label>
        <rdfs:comment>The collection of all conduits, natural or
            artifactual, through which fluid (instances of
            #$FluidTangibleThing) can flow in #$FluidFlowEvents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CavityOrContainer"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#FlowPath"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FluidFlow-Complete">
        <rdfs:label xml:lang="en">conducting</rdfs:label>
        <rdfs:comment>Instances of #$FluidFlow-Complete represent the
            motion of a piece of fluid from being entirely `at&apos;
            (see #$objectFoundInLocation) the #$fromLocation to entirely
            `at&apos; the #$toLocation.  Thus when we say, `The river
            flowed from West Egg to East Egg&apos; we don&apos;t mean
            the same thing as `The entire river left West Egg and went
            to East Egg&apos;.  Therefore, #$FluidFlow-Complete is not
            the correct motion event to use.  Instead,
            #$Translation-Flow is.  However, if we wish to say, `Joe
            pumped all the water out of the bilge and into the
            ocean&apos; we do mean the same thing that
            #$FluidFlow-Complete entails.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Translation-Flow"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FluidFlowEvent">
        <rdfs:label xml:lang="en">movements of fluid</rdfs:label>
        <rdfs:comment>A specialization of #$MovementOrShapeChangeEvent.
            Each instance of #$FluidFlowEvent is an event in which a
            fluid moves (or a group of particles collectively moves).
            The spatial extent of the fluid may change (i.e. expansion
            or contraction, see #$ShapingSomething) and/or they may
            undergo a #$MovementEvent such as rotation (e.g. a whirlpool
            or a tornado) and/or translation.  If the fluid undergoes
            translation, then the event is also an instance of
            #$Translation-Flow.  Examples of #$Translation-Flow include
            `partial&apos; motions such as occurs in rivers flowing, or
            jets of air blowing.  Another kind of example of
            #$Translation-Flow is #$FluidFlow-Complete, in which  the
            fluid moves entirely from the #$fromLocation and to the  #$toLocation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementOrShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FluidReservoir">
        <rdfs:label xml:lang="en">fluid reservoir</rdfs:label>
        <rdfs:comment>A specialization of #$ContainerProduct.  Each
            instance of #$FluidReservoir is a container designed to hold
            fluids.  Instances of #$FluidReservoir generally have an
            opening, which may be small and resealable (as in a
            #$Bottle) or large and open (as in a #$Tub).  Note a special
            negative case: natural `reservoirs&apos;, such as #$Lakes,
            are not #$ContainerProducts -- though the #$Dams that create
            some of them are artifacts, the reservoir water is contained
            in the natural landscape -- and hence such reservoirs are
            not instances of #$FluidReservoir.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FluidTangibleThing">
        <rdfs:label xml:lang="en">fluid</rdfs:label>
        <rdfs:comment>A subcollection of #$PartiallyTangible and an
            instance of #$TangibleStuffStateType.  Each instance of
            #$FluidTangibleThing is a tangible thing that can flow.
            This includes gases, liquids, and  granular fluids  (i.e.
            tangible things that are #$Pourable, such as sand); see
            #$GaseousTangibleThing, #$LiquidTangibleThing, and
            #$GranularFluid.  Instances of #$FluidTangibleThing include
            the air in Austin, the water in #$LakeErie, a particular
            chunk of snow, the sand on the beach at Malibu, and the
            mercury in a thermometer.  Non-instances include an air
            molecule, a snowflake, a grain of sand, a boulder, and a
            hunk of bread dough.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fog">
        <rdfs:label xml:lang="en">fog</rdfs:label>
        <rdfs:comment>The collection of clouds (instances of
            #$CloudOfH2O) that cover a #$GeographicalRegion at ground-level.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#CloudOfH2O"/>
        <rdfs:subClassOf rdf:resource="#Mist"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Foggy">
        <rdfs:label xml:lang="en">foggy</rdfs:label>
        <rdfs:comment>An instance of #$OutdoorLocationByWeatherType.
            Each instance of #$Foggy is an instance of #$OutdoorLocation
            covered by a ground-level cloud.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Food">
        <rdfs:label xml:lang="en">food items</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$FoodOrDrink.  Each instance of #$Food is
            a particular portion of food of a type which can be, and
            habitually is, eaten by humans or other animals.  Here the
            notion of _eating_ is important; eating an instance of
            #$Food will generally require biting or chewing, but if
            placed into the mouth (e.g. with a utensil) in a manner not
            considered to be drinking, it is still considered eating.
            Thus, edible stuff normally taken in via drinking,
            inhalation, or osmosis is excluded from this collection.  A
            borderline example is a bowl of bouillon, which, although it
            can be drunk from the bowl is normally ``eaten&apos;&apos;
            with a spoon; a borderline non-example is a very thick
            milkshake, which may be eaten with a spoon, but is normally
            drunk (possibly using a straw) from a glass.  Instances of
            #$Food provide calories and/or nutrients that humans or
            animals need.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#CommodityProduct"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#FoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Food-ReadyToEat">
        <rdfs:label xml:lang="en">ready-to-eat food</rdfs:label>
        <rdfs:comment>A specialization of (#$FoodOrDrinkForFn #$Person).
            Each instance of #$Food-ReadyToEat is food that is edible
            more or less in its current state, without further elaborate
            preparation. Instances of #$Food-ReadyToEat can require
            unwrapping, cutting, pouring, buttering, or cooling before
            being consumed, but not cooking or other complex or
            sophisticated preparation that is typically done in a
            kitchen or other food-preparation area rather than at the
            table or site of consumption. If a cook would inspect an
            item and pronounce it  done,  that item is probably an
            instance of #$Food-ReadyToEat.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodAndBeverageOrganization">
        <rdfs:label xml:lang="en">food and beverage organization</rdfs:label>
        <rdfs:comment>Each instance of #$FoodAndBeverageOrganization is
            an #$Organization that is primarily or significantly engaged
            in the #$FoodAndBeverageIndustry or whose activities focus
            on that industry.  Specializations of
            #$FoodAndBeverageOrganization include
            #$Restaurant-Organization and #$GroceryStore.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodGroup">
        <rdfs:label xml:lang="en">#$FoodGroup</rdfs:label>
        <rdfs:comment>A specialization of
            #$ConventionalClassificationType and hence a collection of
            collections.  Each instance of #$FoodGroup is a collection
            of foodstuffs classified according to their nutritional
            content.  Instances of #$FoodGroup include #$DairyProduct,
            #$CerealFood, #$FruitAndVegetableFood, #$MeatAndLegumeFood.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductByGenericType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodIngredientOnly">
        <rdfs:label xml:lang="en">food ingredients</rdfs:label>
        <rdfs:comment>A specialization of #$EdibleStuff.  Each instance
            of #$FoodIngredientOnly is an edible substance that is used
            in making other food but isn&apos;t eaten by itself.
            Instances of #$FoodIngredientOnly may or may not require
            some preparation.  For example, #$TableSalt, #$VegetableOil,
            and #$Ketchup are specializations of #$FoodIngredientOnly,
            since all of their instances are used only as ingredients or
            condiments.   In contrast, #$Egg-Chickens is not a
            specialization of #$FoodIngredientOnly; some of its
            instances serve as ingredients in cooking other dishes, but
            other instances are simply eaten after poaching or frying.
            Types of food, such as #$Pizza, whose instances are never
            merely ingredients, are specializations of #$Food.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodOrDrink">
        <rdfs:label xml:lang="en">#$FoodOrDrink</rdfs:label>
        <rdfs:comment>A specialization of #$EdibleStuff (q.v.). Each
            instance of #$FoodOrDrink is a substance which instances of
            some type of organism (that is, some sub-collection of
            #$Organism-Whole) normally consume a significant part of.
            Important specializations of #$FoodOrDrink include #$Food
            (instances of which require chewing in order to be consumed)
            and #$Drink (instances of which are liquids that can be
            consumed without chewing).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodOrDrinkPreparationDevice">
        <rdfs:label xml:lang="en">kitchen tools</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$FoodOrDrinkPreparationDevice is a device
            designed to be used in the preparation of food or drink.
            Specializations of #$FoodOrDrinkPreparationDevice include
            #$CoffeeMaker, #$SpiceMill, and #$ElectricalToaster.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructObject"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodProfessional">
        <rdfs:label xml:lang="en">food professionals</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$FoodProfessional is a worker whose occupation
            is to prepare or serve food or drink.  Notable
            specializations of #$FoodProfessional include #$Butcher,
            #$Brewer, #$Bartender, and #$WaitPerson.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodServiceOrganization">
        <rdfs:label xml:lang="en">food service companies</rdfs:label>
        <rdfs:comment>A subcollection of
            #$CommercialServiceOrganization. An instance of
            #$FoodServiceOrganization is a business which prepares
            and/or serves food as its major function(s). Important
            subcollections of #$FoodServiceOrganization include
            #$Restaurant-Organization and #$CateringCompany. Note that
            grocery stores -- and airlines -- are not themselves
            considered elements of #$FoodServiceOrganization, even
            though some of those may have #$subOrganizations or
            sub-contractors which are #$FoodServiceOrganizations. Bars
            or taverns, in contrast to #$Restaurant-Organizations that
            also prepare and serve food, are also not considered #$FoodServiceOrganizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodAndBeverageOrganization"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodUtensil">
        <rdfs:label xml:lang="en">utensils</rdfs:label>
        <rdfs:comment>A specialization of #$HandTool.  Each instance of
            #$FoodUtensil is an implement or container used in preparing
            or consuming food.  Notable specializations of #$FoodUtensil
            include #$Spoon, #$CarvingKnife, #$CookingUtensil,
            #$FoodVessel, #$CuttingBoard, and #$ChopStick.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FoodVessel">
        <rdfs:label xml:lang="en">food vessels</rdfs:label>
        <rdfs:comment>A specialization of both #$ContainerProduct and
            #$FoodUtensil.  Each instance of #$FoodVessel is a portable
            container designed for holding, storing, or preparing food
            or drink.  Specializations of #$FoodVessel include the
            collections #$CookingVessel, #$EatingVessel, and #$FoodStorageContainer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodUtensil"/>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Foot-AnimalBodyPart">
        <rdfs:label xml:lang="en">feet (types of things)</rdfs:label>
        <rdfs:comment>The collection of all vertebrates&apos; feet.  A
            foot is a terminal part of a #$Vertebrate #$Leg.  Feet are
            used in locomotion, support, balance, kicking, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Forest">
        <rdfs:label xml:lang="en">forest</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion. The
            collection of all forests.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EcologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#FixedTerrainGeologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Form-StandardizedIBO">
        <rdfs:label xml:lang="en">#$Form-StandardizedIBO</rdfs:label>
        <rdfs:comment>A specialization of both
            #$InformationBearingObject and
            #$StructuredInformationSource.  Each instance of
            #$Form-StandardizedIBO is an information-bearing object
            having some standard set of labelled fields; these fields
            are left blank for the user to fill in with certain items of
            information (often information pertaining to the user).
            Instances of #$Form-StandardizedIBO often accompany some
            sort of bureaucratic procedure, which they may be used to
            initiate or to certify.  Specializations include the
            collections #$LeaseDocument, #$DepositSlip,
            #$InsuranceClaimForm, and #$Check-TenderObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBO"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FormalCOC">
        <rdfs:label xml:lang="en">formal codes of conduct</rdfs:label>
        <rdfs:comment>An instance of #$MicrotheoryType, and a
            specialization of #$CodeOfConduct.  Each instance of
            #$FormalCOC is a code of conduct imposed by some
            organization.   Formal codes of conduct typically are
            explicitly stated and publicly promulgated among the group
            subject to them, and they are usually associated with
            prescribed methods of enforcement and punishment of
            violators.  Thus, the collection #$FormalCOC includes the
            laws of any legal jurisdiction, the rules of deportment
            imposed by educational institutions, and the practices of
            some strict religious sects.   In contrast, informal codes
            of conduct are norms that are not prescribed or enforced by
            formal means; for example, etiquette
            (#$MannersCodeOfConduct) and ethics (#$EthicsCodeOfConduct).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CodeOfConduct"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="FormalProductType">
        <rdfs:label xml:lang="en">#$FormalProductType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$FormalProductType is a collection of products (i.e. a
            subcollection of #$Product (q.v.)),  all of which conform to
            the same standardized product specification  (or  form ).
            In Western-style capitalistic markets, instances of
            #$FormalProductType are often associated with a particular
            brand name  (and perhaps model), since competing providers
            of products design them  to be distinctive.  For example,
            the collection  #$InternalCombustionEngine is not an
            instance of #$FormalProductType,  but a specific collection
            of engines manufactured by (e.g.) Mazda might  be.  On the
            service side, the collection #$HairCuttingEvent is not a
            formal product-type, but a subcollection of hair stylings
            for men (e.g.  at a particular salon) might be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="FormalityOfSpeech">
        <rdfs:label xml:lang="en">formality levels of speech</rdfs:label>
        <rdfs:comment>Formality attributes apply to individual word
            senses of words or phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Format">
        <rdfs:label xml:lang="en">format</rdfs:label>
        <rdfs:comment>A collection of argument entry-formats that can be
            specified for #$Predicates with respect to particular
            argument-places  (see #$argFormat).  An argument
            entry-format is a kind of restriction on   a predicate
            regarding how many things, or the range of things, that the
            predicate holds of with respect to a given one of its
            argument-places.  More   precisely: given any particular way
            of fixing the arguments in the rest of   the
            predicate&apos;s argument-places, the entry-format tells us
            something about   the number of different things, or the
            range of things, that can occupy the   given argument-place
            such that the relation holds of those arguments.  That is,
            supposing the given argument-place is the Nth, the
            entry-format tells us   something about the number or range
            of different sequences of arguments   of which the predicate
            holds and that differ from each other only in their  Nth
            items.  For example, the format #$SingleEntry (q.v.) is used
            to state   that in every case there is at most only one such
            sequence, the format   #$SetTheFormat (q.v.) to state that
            there is no particular (upper or lower)   limit to the
            number of such sequences that applies to every case, and the
            format #$IntervalEntry (q.v.) to state that the Nth items of
            any two such   sequences must be #$ScalarIntervals that
            intersect  (see #$quantityIntersects).  Thus, the first
            argument-place of #$biologicalMother has the format (see
            #$arg1Format) #$SetTheFormat, since a given female animal
            might have any   number (including zero) of offspring; but
            the second argument-place of   this predicate has (see
            #$arg2Format) #$SingleEntry format, since any   given animal
            has at most (in fact, exactly) one biological mother.  And
            the format of the second argument-place of #$bodyTemperature
            is #$IntervalEntry  because, while a given creature (at a
            given moment in time) has a single   exact (see
            #$ScalarPointValue) body temperature, we want the predicate
            #$bodyTemperature to be flexible enough to allow us to
            specify this   temperature with varying degrees of precision
            (e.g. as  98.6 degrees Fahrenheit  or as  between 98 and 99
            degrees  or as  less than 100 degrees ).  See the various
            instances of #$Format for further details.  See also
            #$ArgFormatPredicate.  Note that, in contrast with what
            #$ArgTypePredicates   are used for, specifying an argument
            entry-format for a predicate does   _not_ impose any sort of
            necessary condition for semantic well-formedness.    A
            violation of a legitimate entry-format constraint
            necessarily involves   two or more statements, and at least
            one them must be _untrue_;   but there is no implication
            that any of them is malformed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FourthOrderCollection">
        <rdfs:label xml:lang="en">fourth order collection</rdfs:label>
        <rdfs:comment>The collection of all specs of
            #$ThirdOrderCollection.  Any instance of any instance of
            #$FourthOrderCollection is a #$ThirdOrderCollection.  Any
            instance of any instance of any instance of any instance of
            any instance of #$FourthOrderCollection is an #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedOrderCollection"/>
        <rdfs:subClassOf rdf:resource="#CollectionTypeType"/>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="FrameForAdjectives">
        <rdfs:label xml:lang="en">frame for adjectives</rdfs:label>
        <rdfs:comment>The class of #$SubcategorizationFrames which make
            sense for #$Adjectives.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FrameForAdverbs">
        <rdfs:label xml:lang="en">frame for adverbs</rdfs:label>
        <rdfs:comment>The class of #$SubcategorizationFrames which make
            sense for #$Adverbs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FrameForNouns">
        <rdfs:label xml:lang="en">frame for nouns</rdfs:label>
        <rdfs:comment>The class of #$SubcategorizationFrames which make
            sense for nouns.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FrameForVerbs">
        <rdfs:label xml:lang="en">frame for verbs</rdfs:label>
        <rdfs:comment>The class of #$SubcategorizationFrames which make
            sense for #$Verbs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FreeSheet">
        <rdfs:label xml:lang="en">free sheets</rdfs:label>
        <rdfs:comment>A specialization of #$SheetOfSomeStuff.  Each
            instance of #$FreeSheet is a sheet of tangible stuff that
            has two sides  open to the environment.  That is, over most
            of each of its surfaces, it is not related by
            #$sheetSurfaceConnected (q.v.) with something else.
            Specializations include #$SheetOfPaper, #$Towel, #$Fence,
            and  #$CreditCard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FreeSpaceContent">
        <rdfs:label xml:lang="en">empty space (type)</rdfs:label>
        <rdfs:comment>Instances of #$FreeSpaceContent are connected,
            tangible, fluid individuals occupying regions of  free
            space (i.e. instances  of #$EmptySpaceRegion): space regions
            through which solid objects can move more or less freely.
            Examples include the #$Air in the interior of a room or the
            sky above a city.  In an underwater context, a piece of free
            space content is likely to be an instance of #$Water. Often,
            a #$FreeSpaceContent is associated with a geographical
            region or some physical boundaries that define its edges.
            But a (partially) tangible  #$FreeSpaceContent is not to be
            confused with the intangible #$EmptySpaceRegion it occupies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#EmptyRegion-Generic"/>
        <rdfs:subClassOf rdf:resource="#Air"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Freedom-Emotion">
        <rdfs:label xml:lang="en">freedom - emotion</rdfs:label>
        <rdfs:comment>Pleasant emotion associated with situations where
            the person believes themself to be relatively unconstrained
            in their behavior, not controlled by others.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Freezing">
        <rdfs:label xml:lang="en">freezing events</rdfs:label>
        <rdfs:comment>A specialization of #$StateOfMatterChangeEvent.
            Each instance of #$Freezing is an event in which an object
            is cooled to a temperature at or below its freezing point
            (see the predicate #$freezingPoint), and is thereby changed
            from a #$Liquid-StateOfMatter to a #$Solid-StateOfMatter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnergyTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#HeatProductionProcess"/>
        <rdfs:subClassOf rdf:resource="#CoolingProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Frequency">
        <rdfs:label xml:lang="en">frequencies</rdfs:label>
        <rdfs:comment>A specialization of #$Rate.  Each instance of
            #$Frequency is the number of times something happens during
            some time interval.  Instances of #$Frequency may be either
            single values (see the collection #$ScalarPointValue), such
            as 103 kiloHertz, or a range of values, such as #$Rarely.
            Note that instances of #$Frequency are important in the
            characterization of types of #$WavePropagation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="FreshWaterLake">
        <rdfs:label xml:lang="en">fresh-water lakes</rdfs:label>
        <rdfs:comment>A specialization of #$BodyOfWater.  Each instance
            of #$FreshWaterLake is a freshwater land-locked body of
            water.  Examples include #$LakeMaracaibo, #$LakeWinnipeg,
            #$LakeTanganyika, #$LochNess-Lake, #$LakeErie, and
            #$LakeTahoe.  Note that inland saltwater lakes, commonly
            referred to as `seas&apos;, belong to the collection
            #$InlandSea (q.v.), rather than to #$FreshWaterLake.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#Lake"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fricative-Consonant">
        <rdfs:label xml:lang="en">fricative - consonant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Consonant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Friday">
        <rdfs:label xml:lang="en">Fri</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Friday is the collection of all  (and
            only) fridays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Friendliness">
        <rdfs:label xml:lang="en">#$Friendliness</rdfs:label>
        <rdfs:comment>Emotion manifested by interest in another person
            (or, more rarely, in some nonhuman agent), good will towards
            that individual, and an inclination to favor him or her (or
            it).  This is a #$Collection --- for an explanation of that,
            see #$Happiness.  Some more specialized #$FeelingTypes than
            #$Friendliness are #$Love and #$Love-Romantic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affection"/>
    </owl:Class>
    <owl:Class rdf:ID="FrontAndBackSidedObject">
        <rdfs:label xml:lang="en">front and back sided objects</rdfs:label>
        <rdfs:comment>A #$FrontAndBackSidedObject is  a object with an
            intrinsic #$FrontSide and an intrinsic #$BackSide.  By
            &apos;intrinsic&apos; we mean simply that there exists an
            estabilshed  convention according to which one side is
            considered &apos;Front&apos; and the  other side is
            considered &apos;Back&apos;.  Usually the two sides in
            question can be reliably  distinguished.  Notice that a
            conventionally  distinguishable front and back do not
            necessarily imply a bottom and  top, or a left and right: a
            #$Worm has a clear-cut front end and a  clear-cut back end
            according to biological convention, but it makes  little
            sense to talk of top, bottom, left or right.  However, see
            also  the comment for #$HexalateralObject.  Notice also--and
            this is crucial  to the whole conception-- that while a
            #$FrontAndBackSidedObject may well  have a preferred
            orientation and direction of motion, changing either  does
            not change what counts as the &apos;front&apos; and what
            counts as the  &apos;back&apos;: while I am backing my car
            out of the driveway in the morning,  its back end does not
            become its front end and vice versa. If an  entity does not
            obey this rule then it does not, generally speaking  count
            as having a distinguishable front and back--example: a
            dolley,  such as is used to transport crates, or some skateboards.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BilateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FrontSide">
        <rdfs:label xml:lang="en">#$FrontSide</rdfs:label>
        <rdfs:comment>The collection of all the entire front sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces in the frontwards direction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Side"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fruit">
        <rdfs:label xml:lang="en">fruits</rdfs:label>
        <rdfs:comment>A specialization of #$PlantPart.  Each instance of
            #$Fruit is a plant structure containing the seeds of an
            angiosperm.  Many instances of #$Fruit have fleshy walls
            with high concentrations of sugars or fats, and these are
            often eaten by humans and other animals.  Fruits usually
            develop from the ovary wall, although some fruits include
            other tissues; e.g., the flesh of apples and of strawberries
            develops from the receptacle, and the fruits of pineapple
            and fig develop from a whole inflorescence (group of
            flowers).  See also #$EdibleFruit.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#PlantPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FruitAndVegetableFood">
        <rdfs:label xml:lang="en">fruit and vegetable food groups</rdfs:label>
        <rdfs:comment>A specialization of #$EdibleStuff and an instance
            of #$FoodGroup.  Each instance of #$FruitAndVegetableFood is
            a fruit or a vegetable.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Frustrated">
        <rdfs:label xml:lang="en">agents who is frustrated</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            frustrated. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dissatisfied"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Frustration">
        <rdfs:label xml:lang="en">frustrated</rdfs:label>
        <rdfs:comment>A feeling of irritation and dissatisfaction
            arising from unresolved problems or unfulfilled needs.  This
            is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="Frying">
        <rdfs:label xml:lang="en">frying</rdfs:label>
        <rdfs:comment>Cooking food by partial or total immersion in hot
            oil until desired level of doneness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FuelPoweredDevice">
        <rdfs:label xml:lang="en">fuel-powered devices</rdfs:label>
        <rdfs:comment>A collection of physical devices; a subcollection
            of  #$PoweredDevice.  An instance of #$FuelPoweredDevice is
            directly powered by combustible fuels such as gasoline,
            coal, and natural gas.  Common examples of
            #$FuelPoweredDevice include automobiles with
            gasoline-powered engines, kerosene heaters, propane torches,
            and jet airplanes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FullTimeWorker">
        <rdfs:label xml:lang="en">full time worker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and
            specialization of #$Employee. Each #$FullTimeWorker is
            employed full time by some agent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Function-Denotational">
        <rdfs:label xml:lang="en">functions</rdfs:label>
        <rdfs:comment>#$Function-Denotational is the   collection of
            functions the CycL expressions for which can be used   to
            form non-atomic terms (NATs).  Specifically, when such a
            function-denoting   expression is appropriately combined
            with other expressions (i.e. the former  is in the 0th
            argument position and the latter are of the correct number
            and   type) the resulting expression is a new CycL term -- a
            NAT -- that may then   freely appear as a component in other
            CycL expressions.  The NAT will itself   denote the value
            (if any) of the function denoted by the former expression
            for   the sequence of arguments denoted, respectively, by
            the latter expressions.  For example, #$GovernmentFn is a
            unary denotational function, and so the  CycL constant
            &apos;#$GovernmentFn&apos; requires one (syntactic) argument
            (such as   the constant &apos;#$France&apos;) to form a NAT
            (in this case, the expression   &apos;(#$GovernmentFn
            #$France)&apos;).  This NAT, which denotes the government of
            France, can in turn serve as a (syntactic) argument in any
            CycL expression   in which (a term for) an instance of
            #$RegionalGovernment can occur.    Alternatively, we could
            have created a specific new term `GovernmentOfFrance&apos;,
            asserted that its denotation is an instance of
            #$RegionalGovernment, and so on.    But two related
            advantages to having NATs in CycL are that they (i) allow
            for   a drastic reduction in the total number of constant
            terms needed in the CycL   vocabulary and (ii) provide a
            convenient and systematic way to form appropriate   new
            terms as needed out of existing vocabulary (which terms can
            then inherit   from various existing rules and other
            assertions involving the terms&apos; component
            expressions).  &lt;PARAGRAPH&gt;  Important subcollections
            of #$Function-Denotational   include
            #$IndividualDenotingFunction (whose instances always return
            instances of  #$Individual), #$CollectionDenotingFunction,
            #$SetDenotingFunction, and   #$FunctionDenotingFunction
            (which is itself a subcollection of the first).    NATs
            formed using terms that denote instances of
            #$FunctionDenotingFunction   often denote instances of
            #$Function-Denotational themselves.  Thus, like most   other
            things, denotational functions can be denoted in CycL either
            by constants   (e.g. &apos;#$GovernmentFn&apos;) or --
            although this is less common -- by NATs (e.g.
            &apos;(#$FunctionToArg 2 #$biologicalMother)&apos;).  Note
            that the collection   #$Function-Denotational does _not_
            include all functions whatsoever.  Functions   that, given
            their natures and the nature of the CycL language, could not
            sensibly   be denoted by any NAT-forming CycL expression are
            not denotational functions.    Examples include certain
            provably-existing exotic mathematical functions, such   as
            (probably) any one-to-one function from the positive
            integers to the rational   numbers.  (For a more general
            collection that does include such functions, and for a  more
            general explication of the notion of function itself, see
            #$Function-MathematicalObject and its comment).  Note also
            that   #$Function-Denotational does not include any of the
            so-called #$TruthFunctions   (q.v.): #$Predicates,
            #$Quantifiers, or #$LogicalConnectives.  For these
            relations (as construed in CycL) are not really functions at
            all, even though   it can be heuristically useful to think
            of them as if they were functions from   sequences of
            arguments to truth values.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StrictlyFunctionalRelation"/>
        <rdfs:subClassOf rdf:resource="#FunctionalRelation"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="Function-MathematicalObject">
        <rdfs:label xml:lang="en">mathematical type of functions</rdfs:label>
        <rdfs:comment>The collection of functions and a specialization
            of  #$Relation-MathematicalObject.  Each instance of
            #$Function-MathematicalObject is a many-one relation that
            represents a mapping from one set of things (the
            function&apos;s  #$relationDomain) to another set of things
            (its #$relationRange).  As a many-one relation, a function
            maps each thing in its domain   to exactly one thing in its
            range.  A function is either unary,  binary, ternary, or
            whatever (see #$functionalArity; but cf.
            #$relationalArity), depending on the nature of the members
            of   its domain.  In general, the domain of an N-ary
            function is   a set of ordered N-tuples (construed in CycL
            as #$Lists of   length N).  The function is said to take the
            items from any   of these N-tuples as its N _arguments_ and
            to return a   member of its range as its corresponding
            _value_.  A key   specialization of
            #$Function-MathematicalObject is  #$FixedArityFunction
            (which is also a specialization of
            #$Function-Denotational).  Instances include the elements of
            #$Distribution and the (non-denumerably many) one-to-one
            correspondences that exist between the positive integers and
            the rational numbers.  See also #$valueOfFunctionForArgs,
            #$DomainOfFunctionFn, and #$RangeOfFunctionFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionCategory">
        <rdfs:label xml:lang="en">#$FunctionCategory</rdfs:label>
        <rdfs:comment>A collection of collections that is a
            specialization of #$RelationshipType.  Each instance of
            #$FunctionCategory is a collection of
            #$Function-Denotationals.  The functions in a given
            function-category represented in the Knowledge Base are
            typically those sharing some common feature(s) -- often
            having to do with what kind of thing the functions return
            (see #$resultIsa and #$resultGenls) -- considered
            significant enough that the collection of all such functions
            is useful to reify.  Although what constitutes a
            significant common feature  is difficult to specify
            precisely, there are many clear-cut cases.  Examples include
            #$IndividualDenotingFunction, #$CollectionDenotingFunction,
            and #$FunctionDenotingFunction.  See also #$PredicateCategory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationshipType"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionDenotingFunction">
        <rdfs:label xml:lang="en">function-denoting functions</rdfs:label>
        <rdfs:comment>The collection of all denotational functions that
            always return instances of either #$Function-Denotational or
            #$Function-MathematicalObject.  Examples include
            #$FunctionToArg, #$Compose, and #$FunctionCompositionFn.
            For instance,  (#$FunctionCompositionFn #$SuccessorFn
            #$SquaredFn) denotes the function that takes any integer and
            returns the square of its successor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionFromQuantitiesToQuantities">
        <rdfs:label xml:lang="en">functions from quantities to quantities</rdfs:label>
        <rdfs:comment>A specialization of #$EvaluatableFunction.  Each
            instance of #$FunctionFromQuantitiesToQuantities is an
            evaluatable function that takes one or more instances of
            #$ScalarInterval (q.v.) as its argument(s), and returns an
            instance of #$ScalarInterval as its value.  Notable
            instances of #$FunctionFromQuantitiesToQuantities include
            #$PlusFn, #$TimesFn, and #$LogFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EvaluatableFunction"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionalAlgorithm">
        <rdfs:label xml:lang="en">functional algorithm</rdfs:label>
        <rdfs:comment>A specialization of #$Algorithm. Each instance of
            #$FunctionalAlgorithm is an algorithm with only one defined
            output. Note that instances of this collection may make
            other computations as a side effect, but there is only one
            official   result. Such algorithms are well suited to being
            abstracted out as independent instances of #$ProgramFunction
            in computer programs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Algorithm"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionalPredicate">
        <rdfs:label xml:lang="en">functional predicates</rdfs:label>
        <rdfs:comment>A specialization of #$Predicate whose instances
            are those predicates that are  functional  in at least one
            argument-place (see #$functionalInArgs and
            #$singleEntryFormatInArgs).  That is, given any sequence of
            legal arguments placed in such a predicate&apos;s other
            argument positions, there is at most one argument such that,
            when it is placed in the predicate&apos;s functional
            position, the resulting formula is true.  More precisely:
            Suppose PRED is an N-ary instance of #$FunctionalPredicate
            that is functional in its Kth place.  Given any (N-1)-tuple
            &lt;O(1),.., O(K-1), O(K+1),.., O(N)&gt; consisting of
            things that are, respectively, legal arguments for (i.e.
            satisfy all argument-constraints on) the N-1 argument-places
            in PRED other than  its Kth-place, there is at most one
            thing -- call it O(K) -- such that  (PRED O(1)..O(N)) is
            true.  (The one exception to the above is when the
            entry-format for PRED&apos;s functional argument-place is
            #$intervalEntryFormatInArgs (q.v.) instead of
            #$singleEntryFormatInArgs.  In that case there might be
            multiple instances INT-1..INT-M of #$ScalarInterval that,
            when put in this argument-place, each yield a true formula;
            but only if all of the INT-i overlap one another and thus
            have a common sub-interval; see #$quantityIntersects and
            #$quantitySubsumes.  Cf. #$StrictlyFunctionalPredicate.)
            For example, #$biologicalMother is functional in its second
            argument-place, since every animal has one and only one
            biological mother.  Note that it might be the case that, for
            some ways of fixing PRED&apos;s other arguments, there will
            be _nothing_ that would yield a true formula when put into
            PRED&apos;s functional argument-place; for example, while a
            spatial thing has at most one length (see #$lengthOfObject),
            if it is (say) a sphere it has none.  A binary
            #$FunctionalPredicate that is functional in its second
            argument is an instance of #$FunctionalSlot (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionalRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionalRelation">
        <rdfs:label xml:lang="en">functional relations</rdfs:label>
        <rdfs:comment>A specialization of #$Relation each instance of
            which is either a function (see #$Function-Denotational) or
            a predicate that is  functional  in at least one
            argument-place (see #$FunctionalPredicate and
            #$functionalInArgs).  Examples include #$IntervalMaxFn,
            #$ElectricalPotentialDifferenceFn, #$revenueFromType,
            #$costRateForType, and #$biologicalMother.  See also the
            specialization #$StrictlyFunctionalRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="FunctionalSlot">
        <rdfs:label xml:lang="en">#$FunctionalSlot</rdfs:label>
        <rdfs:comment>A specialization of #$FunctionalPredicate each
            instance of which is a binary predicate that is functional
            in its second argument position.  More precisely, a binary
            predicate PRED is an instance of #$FunctionalSlot if, for
            any legal occupant THING1 of PRED&apos;s first (or  arg1 )
            argument position, there is at most one legal occupant
            THING2 of PRED&apos;s second (or  arg2 ) argument position
            such that (PRED THING1 THING2) holds.  (The foregoing
            sufficient condition is not necessary in the case where the
            arg2 entry-format of PRED is #$intervalEntryFormatInArgs
            (q.v.) instead of #$singleEntryFormatInArgs; see the comment
            for #$FunctionalPredicate for that case. Cf.
            #$StrictlyFunctionalSlot.)  #$FunctionalSlot is thus the
            subcollection of the  collection-intersection  of
            #$BinaryPredicate and #$FunctionalPredicate containing those
            predicates whose second argument (at least) is functional.
            Examples include #$latitude, #$countryOfAddress, and #$femaleParentActor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="FundamentalNumericScalarIntervalType">
        <rdfs:label xml:lang="en">types of fundamental numeric scalar interval</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$FundamentalNumericScalarIntervalType is a collection of
            measurable #$ScalarIntervals that are `fundamental&apos;
            when contrasted with other types of #$ScalarIntervals which
            are derived from them.  Instances of
            #$FundamentalNumericScalarIntervalType include #$Mass,
            #$Distance, #$Temperature, and #$ElectricalCharge.  Cf. #$DerivedNumericScalarIntervalType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrimitiveScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#MeasurableScalarIntervalType"/>
    </owl:Class>
    <owl:Class rdf:ID="FundamentalUnitType">
        <rdfs:label xml:lang="en">fundamental unit type</rdfs:label>
        <rdfs:comment>These are all the fundamental types of units.
            They are fundamental because they cannot be expanded any
            more (unlike #$UnitOfSpeed, for example).  </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InterconvertibleUnitType"/>
    </owl:Class>
    <owl:Class rdf:ID="FungalInfection">
        <rdfs:label xml:lang="en">#$FungalInfection</rdfs:label>
        <rdfs:comment>An instance of #$InfectionTypeByPathogenType, and
            a specialization of #$Infection. Each instance of
            #$FungalInfection is an infection caused by fungi (see the
            constant #$Fungus).  Specializations of #$FungalInfection
            include #$Histoplasmosis and #$AthletesFoot.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Infection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Fungus">
        <rdfs:label xml:lang="en">Mycota</rdfs:label>
        <rdfs:comment>A specialization of both #$EukaryoticOrganism and
            #$Heterotroph, and an instance of #$BiologicalKingdom.
            Instances of #$Fungus are eukaryotic, heterotrophic
            organisms that are typically not capable of movement.  The
            cell walls of instances of #$Fungus are structurally similar
            to the cell walls of #$Plants, but the former are composed
            mostly of chitin, while the latter are composed mostly of
            cellulose (see the collections #$Chitin and #$Cellulose).
            Instances of #$Fungus reproduce by means of spores, which
            are usually disseminated by the wind.  Some types of
            #$Fungus are parasites (see the collection
            #$ParasiticOrganism), some are saprophytic (see the
            collection #$Saprophyte), and some have symbiotic
            relationships with other organisms.  Notable specializations
            of #$Fungus include #$Mushroom, #$Yeast, and #$RingwormFungus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Heterotroph"/>
        <rdfs:subClassOf rdf:resource="#EukaryoticOrganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FurniturePiece">
        <rdfs:label xml:lang="en">pieces of furniture</rdfs:label>
        <rdfs:comment>A specialization of #$DurableGoods,
            #$HumanOccupationConstructObject,  and
            #$SolidTangibleProduct.  Each instance of #$FurniturePiece
            is a  durable artifact of a type that is typically used in
            human dwellings  (see #$HumanShelterConstruction) to make
            them more comfortable.  Many useful specializations of this
            collection can be classified according  to the main function
            their instances serve.  Such functions include:  (i)
            providing support for people&apos;s bodies while they are
            seated or  reclining (e.g. #$Bed-PieceOfFurniture and
            #$FootStool), (ii) providing  work or activity surfaces
            (e.g. #$Desk-PieceOfFurniture and  #$DiningRoomTable), (iii)
            providing organized or protective storage  for one&apos;s
            belongings (e.g. #$Dresser-PieceOfFurniture and
            #$Bookcase-PieceOfFurniture), and (iv) providing
            illumination (e.g.  #$ElectricLamp).  Most pieces of
            furniture are #$NonPoweredDevices  (q.v.) in that they
            don&apos;t need any energy input in order to serve their
            function; but of course there are plenty of exceptions to
            this, such  as electric lamps, console TVs, and hospital
            beds.  Note that  #$FurniturePiece only includes _whole_
            pieces of furniture; e.g. a  sofa is an instance, but an arm
            of a sofa is not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructObject"/>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="FusionEvent">
        <rdfs:label xml:lang="en">fusing</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$FusionEvent,
            two or more objects fuse together, yielding a product.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalSynthesis"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GainingUserRights">
        <rdfs:label xml:lang="en">transfers of user rights</rdfs:label>
        <rdfs:comment>A specialization of #$ChangeInUserRights.  In each
            instance of #$GainingUserRights, some #$Agent acquires a
            right to use an item.  The item in question is identified as
            the #$objectOfPossessionTransfer, and the agent is the
            #$toPossessor (that is, the one to whom the possession
            comes).  The #$Agent may or may not be a #$deliberateActors
            in the event; for example, buying a car is done on purpose,
            but receiving a car as a gift isn&apos;t. Either of these
            events, however, would be an instance of the collection #$GainingUserRights.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Game">
        <rdfs:label xml:lang="en">games (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$DevisedStructuredActivity.
            Each instance of #$Game is an abstraction of a game that is
            played according to a semi-rigid set of rules. Each instance
            includes both the rules (see #$GameRulesFn) and a
            specification of any physical components required for play
            (instances of #$GameBoard, #$Ball, etc.).  Neither #$Events
            of playing games (instances of #$PlayingAGame) nor any
            physical components required for play (e.g. #$GameBoards)
            are instances of #$Game.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DevisedStructuredActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GameEvent">
        <rdfs:label xml:lang="en">#$GameEvent</rdfs:label>
        <rdfs:comment>A collection of individual Events.  Each instance
            of #$GameEvent includes the entirety of some game, from the
            beginning to the point where a conclusion is reached (there
            is a winner, there is a draw, or the game is abandoned).
            Each #$GameEvent has as #$subEvents one or more instances of
            #$PlayingAGame, but may have other sorts of significant
            #$subEvents as well.  For example, a particular
            #$FootballGame-American, in its entirety, would be an
            instance of #$GameEvent.  That game&apos;s subEvents would
            include, among other things, instances of (#$PlayingFn
            #$FootballGame-American) performed by some
            #$FootballPlayer-American, instances of #$EvaluatingAnAction
            performed by some #$Referee, and instances of
            #$MeasuringSomething performed by some #$SportsOfficial.  A
            game of Monopoly, from beginning to end, would be an
            instance of #$GameEvent, with subEvents possibly including
            instances of #$PlayingABoardGame, #$DisputeEvent,
            #$DistributionEvent, and (#$CleaningFn #$Table-PieceOfFurniture).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Gamete">
        <rdfs:label xml:lang="en">gametes</rdfs:label>
        <rdfs:comment>#$Gamete is a specialization of #$HaploidCell
            (q.v.).  Each instance of #$Gamete is a special cell that is
            produced in preparation for sexual reproduction in the
            reproductive tissues of organisms that reproduce sexually.
            All gametes are haploid, and are produced by a special type
            of cell division called #$Meiosis.  In animals, gametes are
            the direct results of meiosis; in plants, meiosis produces
            spores (see #$Spore-PlantLifeStage), which develop into
            #$Gametophytes, which then produce gametes by mitosis (see #$MitoticCellDivision).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HaploidCell"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GammaRay">
        <rdfs:label xml:lang="en">gamma radiation</rdfs:label>
        <rdfs:comment>A specialization of #$ElectromagneticRadiation.
            Each instance of #$GammaRay is an instance of
            electromagnetic radiation that has a wavelength (see the
            predicate #$wavelength) of less than  1x10^-2 angstroms (see
            the constant #$Angstrom).  Low power instances of #$GammaRay
            overlap with high power instances of #$XRay (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Garment">
        <rdfs:label xml:lang="en">garments</rdfs:label>
        <rdfs:comment>#$Garment is a specialization of #$ClothingItem.
            Each instance of #$Garment is an item of clothing that is
            _not_ an accessory (see the collection #$ClothingAccessory).
            Notable specializations of #$Garment include #$Clothing-Top
            and #$Clothing-Bottom.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GarmentTypeByRegionOfBodyCovered">
        <rdfs:label xml:lang="en">#$GarmentTypeByRegionOfBodyCovered</rdfs:label>
        <rdfs:comment>A specialization of #$ExistingObjectType.  Each
            instance of this collection is a strict facet of #$Garment
            (see #$facets-Strict).  That is, the instances of this
            collection are mutually exclusive specializations of
            #$Garment -- each instance is a specialization of garment
            whose instances, when worn, cover a certain region of the
            body.  The primary instances are #$Clothing-WholeBody,
            #$Clothing-Bottom, and #$Clothing-Top.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Gaseous-StateOfMatter">
        <rdfs:label xml:lang="en">#$Gaseous-StateOfMatter</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible and an
            instance of #$MatterTypeByPhysicalState. Each instance of
            #$Gaseous-StateOfMatter is an object of a single chemical
            species in the gaseous state of matter. Objects in the
            gaseous state of matter are at a high enough temperature or
            low enough pressure for the type of matter involved that the
            molecules are not bonded even weakly to their neighbors, and
            readily break free. Gaseous objects are characterized at the
            macroscopic level by having diffuse boundaries (when outside
            of containers), no shape independent of a container, and by
            great expandability and compressibility. Examples of things
            that typically have this attribute are: the helium in a
            child&apos;s balloon; the oxygen in Earth&apos;s atmosphere;
            the water vapor in Earth&apos;s atmosphere.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GaseousTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GaseousTangibleThing">
        <rdfs:label xml:lang="en">gaseous objects</rdfs:label>
        <rdfs:comment>A specialization of #$FluidTangibleThing.  Each
            instance of #$GaseousTangibleThing is a partially tangible
            thing which possesses a number of the salient properties
            exhibited by substances in a gaseous state (see the constant
            #$Gaseous-StateOfMatter).   To be more specific, each
            instance of #$GaseousTangibleThing is compressible, and the
            shape of each instance would completely conform to the
            boundaries of a vessel containing it.  Examples of
            #$GaseousTangibleThing include pieces of matter in a gaseous
            state (such as the helium in a child&apos;s balloon),
            mixtures of gases such as
            #$TheAtmosphereQuaSinglePieceOfStuff, and suspensions of
            liquids and solids in gas, such as instances of #$Fog or #$Smoke.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeneralEntryFormatPredicate">
        <rdfs:label xml:lang="en">#$GeneralEntryFormatPredicate</rdfs:label>
        <rdfs:comment>A specialization of  #$ArgFormatPredicate (q.v.)
            whose instances are used to relate predicates to the
            specific entry-formats (see  #$SpecificEntryFormatPredicate)
            that apply to their various  argument-places.  For example,
            #$arg1Format relates a predicate  PRED to the
            #$SpecificEntryFormatPredicate that holds between  PRED and
            its first (or  arg1 ) argument-place.  #$argFormat  is
            similar, but has an additional argument-place for specifying
            the relevant argument-place of PRED.  The primary utility of
            the  above sorts of #$GeneralEntryFormatPredicates is to
            provide standard forms for assigning _any_ specific
            entry-format to a predicate with respect to a given
            argument-place.  There are also the
            #$InterArgFormatPredicates (q.v.), which specify particular
            entry-formats that are to apply to a given argument-place
            _conditionally_ (i.e. when a certain specified condition  obtains).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgFormatPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="GeneralMicrotheory">
        <rdfs:label xml:lang="en">general Cyc microtheories</rdfs:label>
        <rdfs:comment>A specialization of #$DeclarativeContext.
            Instances of #$GeneralMicrotheory contain general axioms
            useful for multiple purposes.  This excludes microtheories
            that deal with specific situations,  such as instances of
            #$ProblemSolvingCntxt, microtheories that represent the
            information content of one specific
            #$InformationBearingObject such as the US Declaration of
            Independence, and those that are purely lexical
            microtheories.  Instances of this collection include
            #$HumanSocialLifeMt, #$BuyingMt, and #$NaiveAnimalsMt.
            Non-instances include #$GeneralLexiconMt (purely lexical)
            and #$PeopleDataMt (no general axioms).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeclarativeContext"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="GeneralizedQuantifierRelation">
        <rdfs:label xml:lang="en">generalized quantifier relations</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            `relational&apos; version of a  #$GeneralizedQuantifier.
            These relational variants have been introduced mostly to
            simplify rapid OE creation and NL parsing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RuleMacroPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="GeneralizedTransfer">
        <rdfs:label xml:lang="en">#$GeneralizedTransfer</rdfs:label>
        <rdfs:comment>A specialization of #$Event.  Each instance of
            #$GeneralizedTransfer is an event in which something
            (tangible or intangible) is transferred from one
            `place&apos; to another.  #$GeneralizedTransfer includes
            changes in physical location, in ownership or possession,
            transfer of information, and propagation of wave phenomena
            through space.  See also the related predicate
            #$transferredThing, and the specializations of this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenerationOrConversionEvent">
        <rdfs:label xml:lang="en">generations (types of things)</rdfs:label>
        <rdfs:comment>A collection of events involving the generation or
            conversion of force, energy, or motion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericAdverbPhraseModifyingFrame">
        <rdfs:label xml:lang="en">generic adverb phrase modifying frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames that modify adverb phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForAdverbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericArgTemplate">
        <rdfs:label xml:lang="en">generic arg template</rdfs:label>
        <rdfs:comment>The collection of CycL expressions in which
            generic argument keywords are allowed and treated as
            variables.  Generic argument keywords are of the form :ARG1,
            :ARG2, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericAttribute">
        <rdfs:label xml:lang="en">generic attribute</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericDeterminerModifyingFrame">
        <rdfs:label xml:lang="en">generic determiner modifying frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames that modify determiners.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForAdverbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericDitransitiveInfinitivePhraseCompFrame">
        <rdfs:label xml:lang="en">generic ditransitive infinitive phrase
            comp frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames that take two complements, one of
            which is an NP and the other an infinitive phrase.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericPost-VerbPhraseModifyingFrame">
        <rdfs:label xml:lang="en">generic post - verb phrase modifying frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames for adverbs which modify verb
            phrase by right-attaching them.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GenericVerbPhraseModifyingFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericPre-VerbPhraseModifyingFrame">
        <rdfs:label xml:lang="en">generic pre - verb phrase modifying frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames for adverbs which modify verb
            phrases by left attaching them.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GenericVerbPhraseModifyingFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericShapeType">
        <rdfs:label xml:lang="en">#$GenericShapeType</rdfs:label>
        <rdfs:comment>A collection of collections, and a specialization
            of #$ShapeType.  Each instance of #$GenericShapeType is a
            type of shape (and thus a specialization of
            #$GeometricallyDescribableThing (q.v.)) whose instances
            include both purely abstract spatial things, as well as
            spatial things located in the physical world.
            #$GenericShapeType is distinguished from #$AbstractShapeType
            (q.v.); each instance of #$AbstractShapeType is a type of
            shape _all_ of whose instances are purely abstract spatial things.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericSpeechPartPredicate">
        <rdfs:label xml:lang="en">generic speech part predicates</rdfs:label>
        <rdfs:comment>A collection of #$SpeechPartPredicates.  Each
            instance of #$GenericSpeechPartPredicate represents a
            syntactic generalization shared by a group of
            #$SpeechPartPredicates.  For instance, #$singular-Generic
            abstracts over #$singular, #$pnSingular, and #$agentive-Sg.
            Note that instances of #$GenericSpeechPartPredicate are
            #$notAssertible, since they will always cash out as
            assertions on one of their spec-preds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpeechPartPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericTransitiveInfinitivePhraseCompFrame">
        <rdfs:label xml:lang="en">generic transitive infinitive phrase
            comp frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all transitive frames that take one complement
            which is an infinitive phrase.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PredicativeFrame"/>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericTransitiveNPCompFrame">
        <rdfs:label xml:lang="en">generic transitive n p comp frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of transitive frames that take an NP as their complement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PassivizableFrame"/>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericTransitiveThatClauseCompFrame">
        <rdfs:label xml:lang="en">generic transitive that clause comp frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all transitive frames that take either a
            finite that-clause complement or a simple (that-less and
            wh-less) finite clause complement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PredicativeFrame"/>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#ClausalComplementFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GenericVerbPhraseModifyingFrame">
        <rdfs:label xml:lang="en">generic verb phrase modifying frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames that modify verb phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForAdverbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeneticCondition">
        <rdfs:label xml:lang="en">genetic conditions</rdfs:label>
        <rdfs:comment>A specialization of #$PhysiologicalCondition.
            Each instance of #$GeneticCondition is an abnormal
            physiological condition which developed in a particular
            organism due to that organism&apos;s genetic configuration.
            Such conditions are not contagious as infections are, but
            they may be hereditary.  Specializations of
            #$GeneticCondition include #$DownsSyndrome, #$Hemophilia,
            and #$SickleCellAnemia.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChronicCondition"/>
        <rdfs:subClassOf rdf:resource="#CongenitalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeoculturalRegion">
        <rdfs:label xml:lang="en">geographical/cultural regions</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion. Each
            instance of #$GeoculturalRegion is a region united by
            economic, cultural, political, or religious ties. The exact
            boundaries for such regions are sometimes difficult to
            determine, and sometimes it is unclear whether a region
            ought to count as one. Instances of #$GeoculturalRegion
            include the #$CaribbeanRegion and #$Scandinavia.
            Non-examples of #$GeoculturalRegion include
            #$NorthernHemisphere-Region, where there is only a
            geographical commonality shared by the areas subsumed by the
            region, and the area of #$Nicaragua and #$CostaRica
            combined, which does not by itself form a natural grouping,
            but is subsumed by the #$GeoculturalRegion #$CentralAmerica.
            Another non-example of #$GeoculturalRegion would be
            &apos;Spanish-speaking countries,&apos; which are too
            geographically scattered to form a #$GeoculturalRegion.
            Note that one country may be subsumed by more than one
            #$GeoculturalRegion : for example, #$Norway is in both
            #$WesternEurope and #$Scandinavia.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalAgent">
        <rdfs:label xml:lang="en">geographical agents</rdfs:label>
        <rdfs:comment>A specialization of both #$MultiIndividualAgent
            and #$GeographicalThing.  Each instance of
            #$GeographicalAgent is a group of people and/or
            organizations cohesive enough to be treated as an agent (see
            the collection #$Agent, of which #$GeographicalAgent is a
            specialization), and which occupies a particular instance of
            #$GeographicalRegion.  Important specializations of
            #$GeographicalAgent include #$GeopoliticalEntity,
            #$University, and #$Neighborhood.  Note that instances of
            #$GeographicalAgent are viewed in two significantly
            different ways with respect to two different types of
            geography-related microtheories. In a `physical&apos;
            geography microtheory (i.e. #$PhysicalGeographyMt and its
            submicrotheories), geographical agents are clearly
            distinguished from the regions they occupy. (#$TerritoryFn
            GEO-AGENT) is used in these contexts to denote the land mass
            (an instance of  #$GeographicalRegion) occupied by a given
            geographical agent GEO-AGENT. In a `dualist&apos; geography
            microtheory (i.e. #$DualistGeopoliticalMt and its
            submicrotheories), on the other hand, geographical agents
            are viewed as being _both_ agents _and_ land masses
            (instances of #$GeographicalRegion). Thus, there is little
            need for #$TerritoryFn in the latter sort of context.
            (Despite their somewhat paradoxical flavor, dualist
            microtheories arguably allow Cyc to mimic commonsense
            reasoning about geographical agents and regions more closely
            than do the stricter physical microtheories.) There are also
            some `generic&apos; geography microtheories (e.g.
            #$WorldGeographyMt and #$UnitedStatesGeographyMt) which are
            neutral with respect to the physical and dualist views. Also
            see the shared-note for this constant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiIndividualAgent"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalDirection">
        <rdfs:label xml:lang="en">directions</rdfs:label>
        <rdfs:comment>A specialization of #$UnitVectorInterval.
            #$GeographicalDirections  derive from the
            &apos;intrinsic&apos; directional axes of a terrestrial
            frame of  reference: North, South, East, West, geographic
            &apos;Up&apos; and geographic  &apos;Down&apos;.  Like all
            #$VectorIntervals, they may be specified  precisely--e.g.,
            #$North-Directly or as intervals--e.g.,  #$North-Generally.
            With respect to &apos;up&apos; and &apos;down&apos;, care
            should be  taken to distinguish a
            #$TopAndBottomSidedObject&apos;s &apos;intrinsic&apos; up
            and  down from &apos;up&apos; and &apos;down&apos; with
            respect to the surface of the Earth or  some other planet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectionExpression"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialDirection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalDirection-Direct">
        <rdfs:label xml:lang="en">#$GeographicalDirection-Direct</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalDirection whose
            instances are precise, as opposed to general,  directions.
            For example, #$North-Directly is due north.  Compare #$GeographicalDirection-General.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitVector-Precise"/>
        <rdfs:subClassOf rdf:resource="#GeographicalDirection"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalDirection-General">
        <rdfs:label xml:lang="en">general directions</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalDirection whose
            instances are general, as opposed to precise or  direct ,
            directions.  More exactly, a given general direction (e.g.
            #$North-Generally)  is an instance of #$VectorInterval that
            comprises the cone-shaped set of vectors pointing (from some
            reference point) within approximately 45 degrees (in either
            direction) of   the corresponding  direct  direction (viz.
            #$North-Directly).  Compare #$GeographicalDirection-Direct.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalDirection"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalEntityByHierarchy">
        <rdfs:label xml:lang="en">#$GeographicalEntityByHierarchy</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances of
            #$GeographicalEntityByHierarchy are subcollections of
            #$GeopoliticalEntity each of which correspond to a certain
            level of organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalLine-Intangible">
        <rdfs:label xml:lang="en">#$GeographicalLine-Intangible</rdfs:label>
        <rdfs:comment>The collection of one dimensional intangible
            geographical things. For instance, #$LatitudeLine and
            #$LineOfMilitaryForces are specialization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Line"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalPlace-1D">
        <rdfs:label xml:lang="en">geographical place - 1 d</rdfs:label>
        <rdfs:comment>A subcollection of  #$GeographicalLine-Intangible
            and  #$GeographicalThing-Intangible-FixedLocation. Instances
            of  #$GeographicalPlace-1D are one dimensional portions of
            the geographical  surface of reference. They can be used to
            indicate the (partial) geographical  location of two or
            three dimensional things within the context of a  geography.
            See #$locatedAtPoint-SurfaceGeographical. Additionally, they
            can  be used to denote location of borders, or portions of
            borders and other  tpes of demarcations. The two main
            specializations of this collection are  #$LongitudeLine and
            #$LatitudeLine, one dimensional parts of instances of  those
            also belong to #$GeographicalPlace-1D. Note that a pair
            composed of a  point and a portion of line do not belong to
            this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalLine-Intangible"/>
        <rdfs:subClassOf rdf:resource="#SpaceLine-Empirical"/>
        <rdfs:subClassOf rdf:resource="#GeographicalSpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalRegion">
        <rdfs:label xml:lang="en">#$GeographicalRegion</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalThing.  Each
            instance of #$GeographicalRegion is a spatial region that
            includes some piece of the surface of a planet (usually
            #$PlanetEarth).  Each instance of #$GeographicalRegion is a
            #$PartiallyTangible entity that may be represented on a map
            of the planet.  This includes purely topographical regions
            like mountains and underwater spaces, places defined by
            demographics (e.g., language areas) and territory otherwise
            demarcated (e.g. #$TimeZones).  In  dualist  geopolitical
            contexts [see #$DualistGeopoliticalMt], instances of
            #$GeopoliticalEntity are also considered to be instances of
            #$GeographicalRegion.  In all cases the region in question
            must contain some tangible component with which it is
            possible to make physical contact.  The instances of
            #$GeographicalRegion contrast in this respect with the
            instances of #$GeographicalThing-Intangible, which are
            wholly intangible.  Examples of #$GeographicalRegion include
            #$RockyMountainStates-USRegion, the #$ContinentOfAustralia,
            #$SinaiPeninsula, and -- in  dualist  geopolitical contexts
            -- #$YaleUniversity and #$CityOfPittsburghPA.  Some
            important types of regions are represented by the
            sub-collections #$LanguageArea, #$TimeZone,
            #$PostalCodeRegion, #$EcologicalRegion, #$ConstructionSite,
            and -- in  dualist  geopolitical contexts --
            #$GeopoliticalEntity.  No instances of #$GeographicalRegion
            are wholly indoor locations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Open"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalSpaceRegion">
        <rdfs:label xml:lang="en">#$GeographicalSpaceRegion</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion-Empirical.
            Instances of  #$GeographicalSpaceRegion are pieces of space
            that are relevant  to geographical reasoning. They are
            intangible points, lines or surfaces  that are all incident
            in the projected surface of reference on which  instances of
            #$GeographicalThing are located. [TO BE IMPROVED]</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion-Empirical"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing-Intangible-FixedLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalThing">
        <rdfs:label xml:lang="en">geographical things</rdfs:label>
        <rdfs:comment>This collection may be thought of as consisting of
            all the entities which are localizable within the context of
            a geography, in the sense that they might plausibly be
            represented on a map.  This includes both
            #$PartiallyTangible entities like #$GeographicalRegions, and
            also entities that may be wholly #$Intangible, like
            territorial borders and boundaries, #$LatitudeLines and
            #$LongitudeLines, trajectories of missiles and courses of
            ships, and the #$Equator.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalThing-Intangible">
        <rdfs:label xml:lang="en">intangible geographical things</rdfs:label>
        <rdfs:comment>The collection of all things which occupy definite
            locations in geographic space (in the sense of being
            representable on a map) but which are nevertheless best
            considered #$Intangible or &apos;imaginary&apos;.  This
            includes a very wide variety of things, eg., #$LatitudeLines
            and #$LongitudeLines, the courses of airplanes and ships,
            ballistic trajectories, territorial boundaries and borders,
            air traffic control zones, etcetera.  In this it contrasts
            with #$GeographicalRegion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeographicalThing-Intangible-FixedLocation">
        <rdfs:label xml:lang="en">intangible geographical things with a
            fixed location</rdfs:label>
        <rdfs:comment>The collection of all intangible things that have
            a relatively fixed geographic locations, such as the
            #$Equator, the #$NorthPole, #$LongitudeLines, stable
            borders, etc.  Contrast this with #$GeographicalThing-Intangible-MovableLocation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeometricThing-Abstract">
        <rdfs:label xml:lang="en">abstract shapes</rdfs:label>
        <rdfs:comment>A specialization of
            #$GeometricallyDescribableThing each  of whose instances is
            abstract in the sense of being intangible (see #$Intangible)
            as well as lacking spatial and temporal location.  Each
            instance of #$GeometricThing-Abstract is an abstract region
            of an abstract space (the latter having two or more
            dimensions).  Geometric figures that are located in this (or
            another) universe are not instances of this collection, but
            of #$GeometricThing-Localized.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeometricThing-Localized">
        <rdfs:label xml:lang="en">#$GeometricThing-Localized</rdfs:label>
        <rdfs:comment>A specialization of both #$SpatialThing-Localized
            and #$Intangible. Positive examples are any intangible
            things that both have some location or position in the
            Universe, and are characterizable in geometric terms, such
            as the intangible spaces determined by, for example, the
            pyramids of Egypt (pyramids), the Sun (a sphere), or the
            center of mass of the solar system at the first instant of
            the twentieth century (a point). #$GeometricThing-Localized
            is identical with (#$LocalizedFn
            #$GeometricallyDescribableThing) (see the #$cyclistNotes on
            this page for why we need this constant reified anyway).
            #$GeometricThing-Localized includes as specializations
            (#$LocalizedFn #$Circle), (#$LocalizedFn #$Square), and in
            general all the &apos;localized realizations&apos; of the
            generic geometric collections.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeometricalPoint">
        <rdfs:label xml:lang="en">geometrical point</rdfs:label>
        <rdfs:comment>The collection of  one piece  zero dimensional
            geometrical objects. Instances of #$GeometricalPoint have
            neither length, breadth, nor thickness, but may move in
            time.  An important specialization is #$SpacePoint, which is
            fixed with reference to the coordinate system and does not
            move.  If the coordinate system is the empirically observed
            universe of a given context, the more specific
            #$SpacePoint-Empirical should be used.  The center of the
            solar system is an instance of #$GeometricalPoint, but not
            #$SpacePoint.  The center of mass of the universe (assuming
            such a point exists, would be an instance of
            #$SpacePoint-Empirical since it would be fixed in the
            coordinate system of the universe.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeometricallyDescribableThing">
        <rdfs:label xml:lang="en">geometric forms</rdfs:label>
        <rdfs:comment>A subcollection of #$SpatialThing. Each instance
            of #$GeometricallyDescribableThing is a spatially-connected
            spatial thing (of 0, 1, 2, or 3 dimensions) that either (i)
            has or approximates a simple geometric shape (e.g. it is a
            #$Line of a #$Hemisphere) or (ii) consists of a number of
            (connected) parts in a relatively stable geometric
            configuration, where each such part has or approximates a
            simple geometric shape (e.g. a table consisting of a
            3-D-disc-shaped top and four cylindrical legs).  A
            #$GeometricallyDescribableThing might be tangible (see
            #$PartiallyTangible) or intangible (see
            #$GeometricallyDescribableThing-Intangible). Note that what
            counts as  approximating  a given simple geometric shape --
            and thus what spatial things count as
            #$GeometricallyDescribableThings -- varies with context. In
            a context that was so fine-grained shape-wise that even the
            shapes of the individual molecules on the surface of an
            object were considered relevant to the object&apos;s shape,
            perhaps nearly every (connected, solid) tangible object
            would be geometrically-describable.  In more everyday
            contexts, on the other hand,  an unopened can of soup would
            be geometrically-describable (as a cylinder),  while a
            telephone or an animal&apos;s body would probably not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeometricallyDescribableThing-Intangible">
        <rdfs:label xml:lang="en">intangible geometric forms</rdfs:label>
        <rdfs:comment>The collection of all intangible
            #$GeometricallyDescribableThings (q.v.), whether spatially
            localized or purely abstract.
            #$GeometricallyDescribableThing-Intangible is the
            intersection  (see #$collectionIntersection) of
            #$GeometricallyDescribableThing and #$Intangible.  Examples
            include any spatially-connected, intangible thing that has
            or approximates (or which consists entirely of parts that
            all have or approximate) a simple geometric shape, such as
            the intangible space determined by an Egyptian pyramid, an
            abstract  Platonic  sphere, or the center of mass of the
            solar system (a point) at the first instant of the Twentieth
            Century in Greenwich, England.  Important specializations
            are #$GeometricThing-Localized (which includes all spatially
            localized instances) and #$GeometricThing-Abstract (which
            includes all instances not spatially located in any universe).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GeopoliticalEntity">
        <rdfs:label xml:lang="en">political geographic regions</rdfs:label>
        <rdfs:comment>A specialization of #$Organization and of
            #$LegalAgent and of #$GeographicalAgent; instances of this
            collection control #$GeographicalRegions.  Each instance of
            #$GeopoliticalEntity includes a governing body, but is more
            than just that governing body.  Important subcollections
            include #$Country, #$IndependentCountry,
            #$State-Geopolitical, #$City, and #$Province.  Instances
            include #$CityOfTokyoJapan, #$BronxNY-Borough,
            #$Alaska-State, #$Rwanda, #$Singapore, #$InnerMongolia,
            #$Somerset-CountyEngland, and #$Taiwan-RepublicOfChina.  A
            central feature of this collection is that
            geopolitical-entities (indeed, all  #$GeographicalAgents)
            are viewed in two significantly different ways with respect
            to two different types of geography-related microtheories.
            In a  physical  geography microtheory (i.e.
            #$PhysicalGeographyMt and its submicrotheories),
            geopolitical-entities are clearly distinguished from the
            regions they control.  (#$TerritoryFn GEO-POL) is used in
            these contexts to denote the land mass (a
            #$GeopoliticalRegion) of a given geopolitical-entity
            GEO-POL.  In a  dualist  geography microtheory (i.e.
            #$DualistGeopoliticalMt and its submicrotheories), on the
            other hand, geopolitical-entities are viewed as being _both_
            agents _and_ land masses (i.e. #$GeographicalRegions).
            Thus, there is little need for #$TerritoryFn in the latter
            sort of context.  (Despite their somewhat paradoxical
            flavor, dualist microtheories arguably allow Cyc to mimic
            commonsense reasoning about geopolitical entities and
            regions more closely than do the stricter physicalist
            microtheories.)  There are also some  generic  geography
            microtheories (e.g. #$WorldGeographyMt and
            #$UnitedStatesGeographyMt) which are neutral with respect to
            the physical and dualist views.  Also see the shared-note
            for this constant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalAgent"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </owl:Class>
    <owl:Class rdf:ID="GerundiveNoun">
        <rdfs:label xml:lang="en">#$GerundiveNoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DeVerbalNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Gesture">
        <rdfs:label xml:lang="en">#$Gesture</rdfs:label>
        <rdfs:comment>A subcollection of
            #$VisualInformationBearingThing. Each instance of #$Gesture
            is a configuration of body parts (usually animal body parts)
            that has some meaning to an observer with an understanding
            (whether explicit or instinctive) of the interpretive
            convention. A gesture may include some tool or prop.
            #$Gestures may be fleeting (e.g., a hello wave) or may last
            a long time (e.g., the gesture embodied in the
            #$StatueOfLiberty ). Note that, as defined in #$Cyc, a
            gesture is a meaningful configuration of body parts, NOT the
            #$Actions producing the arrangement. For representation of
            the actions, see #$MakingAGesture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Signal"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GiftGiving">
        <rdfs:label xml:lang="en">offering (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of #$GivingSomething.  In each
            instance of #$GiftGiving, one #$Agent intentionally gives
            all use rights over an object (see #$UserRightsAttribute) to
            another #$Agent without taking payment in return.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferringOwnership"/>
        <rdfs:subClassOf rdf:resource="#GivingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GivingSomething">
        <rdfs:label xml:lang="en">giving events</rdfs:label>
        <rdfs:comment>A specialization of #$TransferringPossession and
            #$AnimalActivity.  In each instance of #$GivingSomething,
            one #$Agent gives a tangible thing to another #$Agent.
            Every event that is an instance of #$GivingSomething  can
            also be thought of as a receiving event.  Note: The common
            case in which one #$Agent gives ownership of an object to
            another #$Agent is represented by the specialization #$GiftGiving.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Glass">
        <rdfs:label xml:lang="en">glass (type)</rdfs:label>
        <rdfs:comment>A specialization of #$InorganicStuff.  Each
            instance of #$Glass is a piece of glass; e.g., a wine
            bottle, a plate glass window, a microscope slide, a crystal
            water goblet, or the mirrors of a reflecting telescope.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Gloominess">
        <rdfs:label xml:lang="en">gloominess</rdfs:label>
        <rdfs:comment>Low spirits; Depression. Without cheerfulness or optimism</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sadness"/>
    </owl:Class>
    <owl:Class rdf:ID="GoingToSleep">
        <rdfs:label xml:lang="en">going to sleep</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Animal goes
            from the state of being awake to being in a state of sleep.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GolfCart">
        <rdfs:label xml:lang="en">golf carts</rdfs:label>
        <rdfs:comment>#$GolfCart is a specialization of both
            #$WheeledTransportationDevice and
            #$TransportationDevice-Vehicle.  Each instance of #$GolfCart
            is a motorized vehicle that is designed for golfers to use
            to drive around on #$GolfCourses while they are playing
            #$Golf.  #$GolfCarts drive very slowly compared with #$Automobiles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GoodWill">
        <rdfs:label xml:lang="en">#$GoodWill</rdfs:label>
        <rdfs:comment>Emotion manifested by interest in another person
            (or, more rarely, in some nonhuman agent), good will towards
            that individual, and an inclination to favor him or her (or
            it).  This is a #$Collection --- for an explanation of that,
            see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentAgency">
        <rdfs:label xml:lang="en">government agencies</rdfs:label>
        <rdfs:comment>#$GovernmentAgency is a specialization of
            #$GovernmentalOrganization.  Each instance of
            #$GovernmentAgency which is a proper #$subOrganizations of
            other #$GovernmentalOrganizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GovernmentalOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentCOC">
        <rdfs:label xml:lang="en">#$GovernmentCOC</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subcollection of
            #$FormalCOC (the collection of formal codes of conduct).
            Each instance of #$GovernmentCOC is a formal regulation of
            behavior imposed upon agents -- including citizens,
            tourists, businesses, government entities, etc., in so far
            as they are subject to it -- who are located within the
            legal jurisdiction where that code of conduct holds.
            #$GovernmentCOC includes both individual laws and whole
            legal codes.  Some examples of #$GovernmentCOC include: the
            Napoleonic Code, the United States Constitution and all
            Federal, State, and local laws of the United States, and the
            particular laws against stealing found in most, if not all,
            countries.  Enforcement of a particular instance of
            #$GovernmentCOC is authorized by the government associated
            with that code and carried out by its agents within their
            jurisdiction(s).  See also #$LegalCode and #$Law.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FormalCOC"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentEmployee">
        <rdfs:label xml:lang="en">government employees</rdfs:label>
        <rdfs:comment>A specialization of #$PublicSectorEmployee.  Each
            instance of #$GovernmentEmployee is a person employed by
            some government.  The government in question may be the
            government of any instance of #$GeopoliticalEntity,
            including a city, county, province, or nation-state.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentMilitaryOrganization">
        <rdfs:label xml:lang="en">government military organization</rdfs:label>
        <rdfs:comment>A specialization of both #$MilitaryOrganization
            and #$LegalGovernmentOrganization.  Each instance of
            #$GovernmentMilitaryOrganization is a military organization
            belonging to, and  directed by, the governing body of a
            geographical region or international organization.  The
            governing body in question may be a national government, a
            state or provincial government, or an international
            governing body such as the #$UnitedNationsOrganization.
            Important specializations of this collection include
            #$Army-BranchOfService, #$Navy, and #$AirForce.  This
            collection excludes private armies and mercenary forces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#MilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentOfCountry">
        <rdfs:label xml:lang="en">national governments</rdfs:label>
        <rdfs:comment>A specialization of #$RegionalGovernment.  Each
            instance of #$GovernmentOfCountry is the government of some
            instance of #$Country.  A notable instance of
            #$GovernmentOfCountry is #$UnitedStatesFederalGovernment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RegionalGovernment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GovernmentalOrganization">
        <rdfs:label xml:lang="en">governmental organization</rdfs:label>
        <rdfs:comment>#$GovernmentalOrganization is a specialization of
            #$Organization.  Each instance of #$GovernmentalOrganization
            is an organization that is governmental, either departments
            of one particular government (e.g., the
            #$FederalCommunicationsCommission) or confederations or
            cooperative groups consisting of different governments or
            representatives from a number of different governments
            (e.g., #$OPEC).  Because instances of
            #$GovernmentalOrganization cannot properly be said to have
            owners (rather, they have members), they are not instances
            of #$CommercialOrganization, and, hence, the two
            collections, #$GovernmentalOrganization and
            #$CommercialOrganization, are disjoint.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GranularFluid">
        <rdfs:label xml:lang="en">granular fluids</rdfs:label>
        <rdfs:comment>A specialization of #$FluidTangibleThing.  Each
            instance of #$GranularFluid is a mass of some granular
            substance (where a granular substance is any instance
            SUBSTANCE of #$PartiallyTangible for which
            (#$physicalStructuralAttributes SUBSTANCE #$Granular) holds)
            which is in   sufficient quantity to behave largely as a
            liquid. Instances of #$GranularFluid assume the shapes of
            their containers, and they are capable of being poured and
            stirred (as in food preparation).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mob"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GraspingImplement">
        <rdfs:label xml:lang="en">grasping implements</rdfs:label>
        <rdfs:comment>#$GraspingImplement is a specialization of
            #$HandTool.  Each instance of #$GraspingImplement is a tool
            which is intended to be used to grasp (and often to
            subsequently immobilize or control the location/movement of)
            some other solid object.  Specializations of
            #$GraspingImplement include #$Vise, #$Forceps, and #$Tweezers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GraspingSomethingWithATool">
        <rdfs:label xml:lang="en">grasping something with a tool</rdfs:label>
        <rdfs:comment>A collection of the events in which a tool is used
            to grasp some object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HoldingAnObject"/>
        <rdfs:subClassOf rdf:resource="#HandlingADevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Grassland">
        <rdfs:label xml:lang="en">grassland</rdfs:label>
        <rdfs:comment>Grassy land with deep, rich soil and few trees or shrubs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Plain-Topographical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Grateful">
        <rdfs:label xml:lang="en">people who is grateful</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            grateful. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Gratitude">
        <rdfs:label xml:lang="en">#$Gratitude</rdfs:label>
        <rdfs:comment>A feeling of appreciation towards another agent
            for a benefit or favor received from him/her.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="GreetingSomeone">
        <rdfs:label xml:lang="en">#$GreetingSomeone</rdfs:label>
        <rdfs:comment>The collection of actions performed by one #$Agent
            to greet another.  Includes verbal and physical greetings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SociabilityBasedAction"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Grief">
        <rdfs:label xml:lang="en">grief</rdfs:label>
        <rdfs:comment>Intense emotional suffering or poignant distress
            caused by or as if by bereavement</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Depression-Feeling"/>
    </owl:Class>
    <owl:Class rdf:ID="GrillingFood">
        <rdfs:label xml:lang="en">#$GrillingFood</rdfs:label>
        <rdfs:comment>A specialization of #$CookingFood.  In each
            instance of #$GrillingFood, food is placed on a cooking
            utensil consisting of several parallel metal bars, where the
            food is exposed to direct radiant heat from below.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroundHasPermaFrost">
        <rdfs:label xml:lang="en">ground has perma frost</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion. Each
            instance has a layer of  permanently frozen ground insulated
            by a shallow layer of soil that  thaws during the spring and summer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedTerrainGeologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroundsOfOrganization">
        <rdfs:label xml:lang="en">grounds of organization</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion.  Each
            instance of #$GroundsOfOrganization is an area which
            contains buildings inhabited by some organization.  Notable
            specializations of #$GroundsOfOrganization include #$Campus
            and #$MilitaryBase-Grounds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Group">
        <rdfs:label xml:lang="en">#$Group</rdfs:label>
        <rdfs:comment>A collection of temporal objects.  Each instance
            of #$Group is a composite object made up of one or more
            individual objects or events.  A group is related to each of
            its members by the predicate #$groupMembers (q.v.).  Note
            that instances of #$Group are _not_ collections.  A group
            has temporal extent and might have spatial location, while a
            collection is timeless and nonspatial.  It is of course
            possible to define a collection parallel to any given group,
            so that the instances of the collection are exactly the
            group-members of that group; e.g. each toe on my left foot
            (and nothing else) is both an instance of the collection of
            my left toes and a member of the group of toes on my left
            foot.  But that group (of my left toes) is a spatiotemporal
            thing while the correlated collection (of my left toes) is
            not.  Similarly, if a certain flock of pigeons is considered
            as having a location, a spatial extent, and a time of
            existence, then the flock is being considered a _group_ and
            not a collection.  Finally, unlike a collection, a group
            cannot be empty, but must have _at_least_one_ group-member.
            As a default, a group whose group-members all are instances
            of #$SomethingExisting is itself an instance of
            #$SomethingExisting, and a group whose group-members all are
            #$Events is itself an #$Event.  Instances of #$Group include
            #$QueensGuard, #$ThreeWiseMen, #$SantasReindeer, and #$InternationalCommunity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroupTransfer">
        <rdfs:label xml:lang="en">group transfer</rdfs:label>
        <rdfs:comment>A collection of #$Actions in which something
            changes membership with respect to some instance of #$Group,
            i.e. actions in which something becomes a #$groupMembers of
            some group, ceases to be a #$groupMembers of some group, or
            is moved from one group to another. This collection includes
            a wide variety of group transfers, including those among
            organizations, instances of #$SystemOfDevices,  (#$GroupFn
            #$ProfessionalSportsTeam) or #$Family-SocialEntity. For
            further clarification see the #$NoteAboutGroupTransfers.
            Note that if a group has a #$groupMemberType assertion for
            it, then anything transferred out of it must be of that
            type.   See also #$GroupTransferIn, #$GroupTransferOut,
            #$toGroup and #$fromGroup. You may also want to look at
            #$OrganizationalTransfer and constants closely related to it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroupTransferIn">
        <rdfs:label xml:lang="en">transfer into group</rdfs:label>
        <rdfs:comment>A subcollection of #$GroupTransfer. Instances of
            this collection are those in which there is necessarily
            something that becomes a #$groupMembers of some instance of
            #$Group. This is a very diverse subcollection of
            #$TransferIn, including transfers into organizations,
            families (e.g. adoption), systems of physical devices, teams
            or anything represented as a subcollection of #$Group in the
            Cyc ontology.  For further clarification see the
            #$NoteAboutGroupTransfers.  See also #$GroupTransferOut,
            #$toGroup and #$fromGroup. You may also want to look at
            #$OrganizationalTransfer and constants closely related to it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GroupTransfer"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroupTransferOut">
        <rdfs:label xml:lang="en">transfer out of group</rdfs:label>
        <rdfs:comment>A subcollection of #$GroupTransfer. Instances of
            this collection are those actions in which there is
            necessarily something that ceases to be a #$groupMembers of
            some instance of #$Group. This is a very diverse
            subcollection of #$TransferOut, including transfers out of
            organizations, systems of physical devices, teams or
            anything represented as a subcollection of #$Group in the
            Cyc ontology.  For further clarification see the
            #$NoteAboutGroupTransfers.  Note that if the group has a
            #$groupMemberType assertion for it, then anything
            transferred out of it must be of that type.  See also
            #$GroupTransferIn, #$toGroup and #$fromGroup. You may also
            want to look at #$OrganizationalTransfer and constants
            closely related to it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GroupTransfer"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GroupingObjects">
        <rdfs:label xml:lang="en">grouping (type of thing)</rdfs:label>
        <rdfs:comment>A collection of purposeful creation events in
            which two or more partially tangibles are grouped together
            (possibly in accordance with some general convention) in
            such a way as to thence constitute a #$Group that did not
            exist before.    Such an act of grouping requires an
            intention to do so on the part of the agent who performs the
            act, and often (but not always) also involves some physical
            act of bringing the objects into proximity with each other.
            Example include putting flowers together to make a bouquet
            and assembling a sports team.  See also #$GroupingThingsMentally.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#CollectionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="GuidingAMovingObject">
        <rdfs:label xml:lang="en">#$GuidingAMovingObject</rdfs:label>
        <rdfs:comment>A specialization of #$DirectedTranslation.  Each
            instance of #$GuidingAMovingObject is an event in which an
            agent guides or steers an object which is in translational
            (as opposed to rotational) motion.  Notable specializations
            of #$GuidingAMovingObject include
            #$PuttingSomethingSomewhere, #$GuidingAnAnimal, and #$SteeringADeviceByHand.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Guilt">
        <rdfs:label xml:lang="en">#$Guilt</rdfs:label>
        <rdfs:comment>Negative, self-accusatory feeling of
            responsibility and blameworthiness for having caused harm by
            a past action, usually with conscious intent.  Note that
            this is not `guilty vs. innocent&apos;, but rather the
            feeling of guiltiness.  An unremorseful killer, though
            guilty (as opposed to innocent) of the murder, may not feel
            any #$Guilt (i.e., guiltiness) about it.    This is a
            collection; for an explanation of a typical #$FeelingType,
            see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Gulf">
        <rdfs:label xml:lang="en">gulfs</rdfs:label>
        <rdfs:comment>A specialization of #$BodyOfWater-Large.  Each
            instance of #$Gulf is a part of a sea extending into a land
            mass.  Instances of #$Gulf include the #$SaronicGulf,
            #$GulfOfMexico, #$GulfOfArkangelsk, #$GulfOfCalifornia, and #$PersianGulf.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater-Large"/>
        <rdfs:subClassOf rdf:resource="#SeaWater"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Gusty">
        <rdfs:label xml:lang="en">#$Gusty</rdfs:label>
        <rdfs:comment>An instance of #$OutdoorLocationByWeatherType.
            Each instance of #$Gusty is an instance of #$OutdoorLocation
            in which the wind is subject to sudden changes in direction
            and intensity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HLAssertion">
        <rdfs:label xml:lang="en">HL assertions</rdfs:label>
        <rdfs:comment>The collection of CycL sentences consisting
            entirely of HL expressions and asserted to the Cyc Knowledge
            Base.  Each #$HLAssertion has a unique corresponding data
            structure that is used internally by Cyc&apos;s inference engine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedFormula"/>
    </owl:Class>
    <owl:Class rdf:ID="HLExpression">
        <rdfs:label xml:lang="en">h l expression</rdfs:label>
        <rdfs:comment>A specialization of #$CycLExpression.  The
            collection of all syntactically well-formed expressions in
            the HL  ( heuristic level ) sub-language of #$CycL.  Any
            component  expression of an HL expression must itself be an
            HL expression.  An  HL expression can appear in (or be) an
            assertion stored in the system  in a data structure
            accessible by the inference engine; but unless  it is also
            an instance of #$ELExpression (q.v.), it cannot appear in
            (or as) a sentence initially asserted to or queried of the
            Knowledge  Base.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>

    </owl:Class>
    <owl:Class rdf:ID="HLIndexedTerm">
        <rdfs:label xml:lang="en">HL indexed terms</rdfs:label>
        <rdfs:comment>The collection of indexed terms in the HL
            language, used by the internals of Cyc.  All these terms
            have special indexing support in Cyc&apos;s inference
            engine.  Indexed terms are currently (September 2000)
            constants, NARTs, and assertions.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="HLNonAtomicReifiedTerm">
        <rdfs:label xml:lang="en">NART</rdfs:label>
        <rdfs:comment>The collection of all non-atomic denotational
            terms in the HL language, used internally by the inference
            engine.  These are HL formulas with an instance of
            #$ReifiableFunction as their functor and optionally other HL
            terms as their arguments.  These HL NATs are often called
            NARTs , which stands for Non-Atomic Reified Term.  The
            difference between HL NATs and reifiable EL NATs should be
            transparent to users of Cyc, because the #$CycCanonicalizer
            automatically transforms all reifiable EL NATs into HL NATs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicReifiedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>

        <rdfs:subClassOf rdf:resource="#HLReifiedFormula"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="HLReifiedDenotationalTerm">
        <rdfs:label xml:lang="en">FORT (type of thing)</rdfs:label>
        <rdfs:comment>The collection of reified denotational terms in
            the HL language. These terms are used by the internals of
            Cyc, such as the inference engine. They are often called
            &apos;FORTs&apos;, which stands for &apos;first-order
            reified terms&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>

        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="HLReifiedFormula">
        <rdfs:label xml:lang="en">RF</rdfs:label>
        <rdfs:comment>The collection of reified formulas in the HL
            language. This includes HL NARTs and HL assertions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>

        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="HLVariable">
        <rdfs:label xml:lang="en">h l variable</rdfs:label>
        <rdfs:comment>The collection of all variables in the HL
            language, used internally by the inference engine and not
            normally visible to users of Cyc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLVariable"/>

        <rdfs:subClassOf rdf:resource="#HLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="Hacking">
        <rdfs:label xml:lang="en">clever programming</rdfs:label>
        <rdfs:comment>A specialization of #$ProgrammingAComputer,
            comprising particularly clever or expert programming feats.
            Contrary to popular usage of the word  hacking , this
            constant is not intended to refer to acts of breaking into
            computer systems (for that, see
            #$PenetratingAComputerNetwork and #$AttackByComputerOperation).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgrammingAComputer"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#UsingADevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HailProcess">
        <rdfs:label xml:lang="en">#$HailProcess</rdfs:label>
        <rdfs:comment>A specialization of #$PrecipitationProcess.  Each
            instance of #$HailProcess is an event in which small chunks,
            usually consisting of several layers of ice, fall to the
            earth from clouds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HailStone">
        <rdfs:label xml:lang="en">#$HailStone</rdfs:label>
        <rdfs:comment>A specialization of #$PrecipitationParticle.
            Instances of #$HailStone are small particles emitted from
            clouds in instances of #$HailProcess (q.v.).  Instances of
            #$HailStone usually consist of several concentric layers of ice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HalfLine-Geometrical">
        <rdfs:label xml:lang="en">half line - geometrical</rdfs:label>
        <rdfs:comment>The collection of all half-line. Instances of
            #$HalfLine-Geometrical have a single end point and contain
            all the points on a line that lie in a given direction. Any
            given line can be divided at any point incident in it into
            two half-lines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear-Straight"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Linear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HalfPlane">
        <rdfs:label xml:lang="en">geometric half planes</rdfs:label>
        <rdfs:comment>The collection of half planes. Instances of
            #$HalfPlane are unbounded portions of plane [#$FlatSurface]
            with a single linear boundary. A straight line cut any plane
            in which it lies into two half planes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hand">
        <rdfs:label xml:lang="en">hands</rdfs:label>
        <rdfs:comment>A specialization of #$HolderGripper and
            #$Appendage-AnimalBodyPart.  Each instance of
            #$HolderGripper is a terminal part of a vertebrate forelimb
            that is structurally suited to function as a grasping organ
            (as in people, newts, etc.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HolderGripper"/>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HandTool">
        <rdfs:label xml:lang="en">hand tools</rdfs:label>
        <rdfs:comment>A specialization of both #$Tool and
            #$PortableObject.  Each instance of #$HandTool is a portable
            tool which is hand-guided throughout its operation.
            Specializations of #$HandTool include the collections
            #$Screwdriver, #$ManualDrill, and #$BlowDryer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Device-SingleUser"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#Tool"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HandlingADevice">
        <rdfs:label xml:lang="en">use of a device (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$HandlingAnObject.  Each
            instance of #$HandlingADevice is an event in which a device
            is manipulated (with the operator holding and touching the
            device) so that it can be used for its #$primaryFunction.
            Specializations of #$HandlingADevice include #$Pruning,
            #$PlayingAMusicalInstrument, #$OperatingAHouseholdAppliance,
            #$PumpingGasEvent, and #$WritingByHand.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControllingAPhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HandlingAnObject">
        <rdfs:label xml:lang="en">#$HandlingAnObject</rdfs:label>
        <rdfs:comment>A collection of events and a specialization of
            #$ActionOnObject,  #$ControllingSomething,
            #$PhysicalContactEvent, and #$SensoryEvent (qq.v.).  Each
            instance of #$HandlingAnObject is an event in which  an
            object (see #$SomethingExisting) is touched and manipulated
            by  some #$Agent.  Specializations of this collection
            include  #$HoldingAnObject and #$HandlingADevice (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalContactEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HaploidCell">
        <rdfs:label xml:lang="en">haploids</rdfs:label>
        <rdfs:comment>A specialization of #$EukaryoticCell.  Each
            instance of #$HaploidCell is a cell which has a single
            chromosome set.  For example, gametes such as sperm and ova
            are haploid cells (see #$Gamete).  There also haploid forms
            of some mature multicellular organisms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EukaryoticCell"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Happiness">
        <rdfs:label xml:lang="en">happy</rdfs:label>
        <rdfs:comment>The enjoyment of pleasurable satisfaction that
            goes with well-being, security, effective accomplishments,
            or satisfied wishes.  As with all #$FeelingTypes, this is a
            #$Collection -- the collection of all possible amounts of
            happiness one can feel.  One instance of #$Happiness is
            `extremely happy&apos;; another is `just a little bit
            happy&apos;.    Note:  Obviously there are no real units of
            measure for this quantity, ways of objectively measuring the
            amount of happiness possessed or gained or lost, etc., but
            still this has proven to be a useful way for Cyc to
            represent and reason with emotions.  E.g., one can have a
            rule that says that most people have a greater `amount&apos;
            of happiness at their wedding than at their high school
            graduation, etc.  There are functions, such as
            #$LowAmountFn, which take a #$PrimitiveScalarIntervalType
            (such as the instances of #$FeelingType) such as #$Happiness
            and return as their value a certain-sized amount of that
            feeling; e.g., (#$LowAmountFn #$Happiness) is an expression
            whose value is a positive but small amount of happiness, and
            that in turn will be an instance of #$Happiness (and also
            will be an instance of #$FeelingAttribute).  #$FeelingTypes
            organize into a lattice; e.g., there are several more
            specialized forms of #$Happiness that are present in
            Cyc&apos;s ontology, such as #$Elation, #$Delight,
            #$Triumph-TheFeeling, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="HappyAgent">
        <rdfs:label xml:lang="en">people who is happy</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being happy.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Harbor">
        <rdfs:label xml:lang="en">#$Harbor</rdfs:label>
        <rdfs:comment>The collection of those parts of a #$BodyOfWater,
            each of which is protected from the open sea and deep enough
            to furnish fairly safe anchorage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HardcopyInformationBearingObject">
        <rdfs:label xml:lang="en">#$HardcopyInformationBearingObject</rdfs:label>
        <rdfs:comment>The  collection-intersection   (and thus a common
            specialization) of #$Artifact, #$StillImageSource and
            #$HumanAccessibleIBO (qq.v.).  Each instance of
            #$HardcopyInformationBearingObject is an human-created
            #$InformationBearingObject (IBO) in a  hard  format (e.g.
            written on paper, on wood, on palm leaves, engraved in
            metal, or carved on stone) that humans can obtain
            information from by viewing (if there is sufficient light)
            without using a computer or electronic device.  In many
            cases the information is  encoded in visual symbols, whose
            #$CommunicationConvention must be understood by  anyone who
            would access the information.  For example, the information
            may be  stored as English text.  Examples of
            #$HardcopyInformationBearingObject include:  a billboard, a
            greeting card, a restaurant check, a magazine, an engraving
            by  Rembrandt, a Picasso painting, and a hardcopy of a map
            with no text on it.  Note  that this collection does _not_
            include IBOs embodied in magnetic media such as  tape or
            disk (as the information they bear is not directly
            accessible to someone  viewing them) or Braille books (as
            they are not instances of #$StillImageSource,  whose
            information content must be accessed visually).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBO"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HardwareTool">
        <rdfs:label xml:lang="en">#$HardwareTool</rdfs:label>
        <rdfs:comment>#$HardwareTool is a specialization of #$Tool.
            Each instance of #$HardwareTool is an object used to perform
            a task, usually by applying a particular kind of force to
            another object.  The tool is used to produce a physical
            effect in the position, structure, or arrangement of the
            other object.  Specializations of #$HardwareTool include
            #$Hammer, #$Screwdriver, and #$HandSaw.  Borderline
            nonexamples include eating utensils, robot servants, screws,
            nails, and levers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Tool"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HarmingAnAgent">
        <rdfs:label xml:lang="en">#$HarmingAnAgent</rdfs:label>
        <rdfs:comment>A specialization of #$Action. Each instance of
            #$HarmingAnAgent is an event in which some agent is harmed,
            either physically or psychologically.  Note that
            #$HarmingAnAgent is not a specialization of
            #$PurposefulAction, since it includes as instances some
            events in which an agent is harmed, but not intentionally
            harmed.  Neither is it a specialization of
            #$IncurringDamage, because that does not cover psychological
            injury.  Although #$HarmingAnAgent is not a specialization
            of #$PurposefulAction, important specializations of
            #$HarmingAnAgent (such as #$Murder and #$Torture) are also
            specializations of #$PurposefulAction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HarvestingAPlant">
        <rdfs:label xml:lang="en">#$HarvestingAPlant</rdfs:label>
        <rdfs:comment>A specialization of #$RemovingSomethingByMovingIt.
            Each instance of #$HarvestingAPlant is an event in which a
            plant is harvested.  Harvesting may involve separating some
            part of the plant and leaving the rest in place (e.g., when
            one harvests fruit from fruit trees), or it may involve
            removing the entire plant from its growing location (e.g.,
            when one harvests carrots).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RemovingSomethingByMovingIt"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#GuidingAMovingObject"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hat">
        <rdfs:label xml:lang="en">hats</rdfs:label>
        <rdfs:comment>#$Hat is a specialization of #$ClothingAccessory.
            Each instance of #$Hat is either a hat or other headgear or
            hatlike object.  Specializations of #$Hat include #$Helmet,
            #$SwimmingCap, and #$Sombrero.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClothingAccessory"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hate">
        <rdfs:label xml:lang="en">#$Hate</rdfs:label>
        <rdfs:comment>An intense feeling of hostility and aversion,
            usually deriving from fear, anger, or a sense of injury, and
            usually coupled with enmity and malice.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Hostility"/>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
    </owl:Class>
    <owl:Class rdf:ID="HaveAux">
        <rdfs:label xml:lang="en">have aux</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            auxiliary verb &apos;have&apos;. It has unique syntactic
            functions, for example, in forming compound tenses, so it is
            treated as a separate part of speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuxVerb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HavingAMeal">
        <rdfs:label xml:lang="en">#$HavingAMeal</rdfs:label>
        <rdfs:comment>A specialization of #$EatingEvent.  Each instance
            of #$HavingAMeal is an event in which one or more diners
            consume a meal.  Notable specializations of #$HavingAMeal
            include #$HavingBreakfast, #$HavingLunch, #$HavingDinner,
            and #$HavingASnack.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#EatingEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Head-AnimalBodyPart">
        <rdfs:label xml:lang="en">#$Head-AnimalBodyPart</rdfs:label>
        <rdfs:comment>The collection of all heads of #$Animals.  </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Head-Vertebrate">
        <rdfs:label xml:lang="en">vertebrate heads</rdfs:label>
        <rdfs:comment>The collection of all heads of #$Vertebrates
            (animals with backbones).  Vertebrate heads all have faces
            (see #$FaceOfAnimal) and connect to the animal&apos;s torso
            via a neck; these things are not generally true for most non-vertebrates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Head-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HeadFinalMultiWordForConstantPred">
        <rdfs:label xml:lang="en">head-final multi-word for constant predicates</rdfs:label>
        <rdfs:comment>The specialization MultiWordForConstantPred that
            maps from head-final lexical items to Cyc constnts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiWordForConstantPred"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="HeadInitialMultiWordForConstantPred">
        <rdfs:label xml:lang="en">#$HeadInitialMultiWordForConstantPred</rdfs:label>
        <rdfs:comment>The specialization MultiWordForConstantPred that
            maps from head-initial lexical items to Cyc constnts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiWordForConstantPred"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="HeadMedialMultiWordForConstantPred">
        <rdfs:label xml:lang="en">head medial multi word for constant pred</rdfs:label>
        <rdfs:comment>The specialization MultiWordForConstantPred that
            maps from head-medial lexical items to Cyc constnts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiWordForConstantPred"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="HeadOfGovernment">
        <rdfs:label xml:lang="en">#$HeadOfGovernment</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByPositionInOrg, and a
            specialization of #$Politician.  Each instance of
            #$HeadOfGovernment is a person who holds a political
            position as the head of the government of some instance of
            #$Country.  See the #$sharedNotes #$GovernmentLeaderNote for
            an explanation of the distinction between #$HeadOfGovernment
            and #$HeadOfState (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Politician"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HeadOfState">
        <rdfs:label xml:lang="en">heads of state</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$HeadOfState is a person who holds a political position as
            the titular leader of some instance of #$Country.  Titles
            that such a person might hold include President, Premier,
            Chairman, Sultan, King or Queen, or Regent.  Examples of
            #$HeadOfState: #$BillClinton, #$QueenElizabethII, Yasser
            Arafat, Hirohito, Jiang Zemin.  See also the related
            constants #$titleOfPosition and #$HeadOfGovernment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Politician"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HealthProfessional">
        <rdfs:label xml:lang="en">health professionals</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$Professional-Adult. Each instance of
            #$HealthProfessional is a person employed in some
            health-related field. Specializations of
            #$HealthProfessional include #$MedicalCareProfessional and #$HealthInspector</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HealthcareOrganization">
        <rdfs:label xml:lang="en">healthcare organization</rdfs:label>
        <rdfs:comment>Each instance of #$HealthcareOrganization is an
            #$Organization that is primarily or significantly engaged in
            the #$HealthcareIndustry or whose activities focus on that
            industry.  All of
            #$OccupationalSafetyAndHealthAdministration,
            #$AmericanMedicalAssociation and #$SetonNorthwestHospital
            are instances of #$HealthcareOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hearing">
        <rdfs:label xml:lang="en">#$Hearing</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which,
            by means of vibratory sensors, a #$PerceptualAgent #$hears
            something that is causing (or consisting of) sound waves,
            and thereby acquires information about it.  See also:
            #$ListeningDeliberately, the subcollection of #$Hearing
            events in which the aural stimulus is intentionally attended to.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Heart">
        <rdfs:label xml:lang="en">hearts</rdfs:label>
        <rdfs:comment>The collection of all hearts.  A #$Heart is an
            #$Organ that pumps blood throughout the body of an #$Animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pump-Generic"/>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#StriatedMuscle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HeatProductionProcess">
        <rdfs:label xml:lang="en">heat production</rdfs:label>
        <rdfs:comment>A heat production process such as condensing,
            freezing, or oxidation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Emission"/>
        <rdfs:subClassOf rdf:resource="#EnergyTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HeatingDevice">
        <rdfs:label xml:lang="en">heater</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of #$HeatingDevice is a device whose primary
            function (see the predicate #$primaryFunction) is to
            generate heat to raise the temperature of something else.
            The thing being heated might be in gaseous form (for
            example, the air in a room), in liquid form (for example,
            the water in a pool), or in solid form (for example, food in
            an oven).  A given instance of #$HeatingDevice typically has
            some energy input, some way of converting that energy to
            heat, and some way of delivering the heat to the object(s)
            to be heated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HeatingProcess">
        <rdfs:label xml:lang="en">heating processes</rdfs:label>
        <rdfs:comment>#$HeatingProcess is a specialization of
            #$TemperatureChangingProcess -- that is, (#$genls
            #$HeatingProcess #$TemperatureChangingProcess).  During each
            #$HeatingProcess event, the temperature of the
            #$objectOfStateChange is increased by applying heat to the object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemperatureChangingProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Helicopter">
        <rdfs:label xml:lang="en">#$Helicopter</rdfs:label>
        <rdfs:comment>#$Helicopter is a specialization of
            #$RotaryWingAircraft and #$TransportationDevice-Vehicle.
            Each instance of #$Helicopter is a self-powered mechanical
            device that hovers in the air using a rotary wing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RotaryWingAircraft"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#FuelPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Helix">
        <rdfs:label xml:lang="en">helix</rdfs:label>
        <rdfs:comment>The collection of all helices; a subset of
            #$SpiralShaped.  In each instance of #$Helix, a
            three-dimensional curve has one or more turns about an axis
            while moving linearly in the general direction paralell to
            the axis.  A helix may fit on the surface of a cylinder.
            Examples include spatially localized objects, such as a
            #$DNAMolecule, or the frieze on #$TrajansColumn, as well as
            abstract spiral shapes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Spiral-3D"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HelpingAnAgent">
        <rdfs:label xml:lang="en">#$HelpingAnAgent</rdfs:label>
        <rdfs:comment>A specialization of both #$PurposefulAction and
            #$SocialOccurrence.  Each instance of #$HelpingAnAgent is an
            event in which some agent (see the collection #$Agent) helps
            another agent, either by doing something that directly
            benefits that agent, or by preventing something that would
            harm that agent.  Notable specializations of
            #$HelpingAnAgent include #$RescuingSomeone,
            #$ReliefOperation, and #$ServiceEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hemisphere">
        <rdfs:label xml:lang="en">#$Hemisphere</rdfs:label>
        <rdfs:comment>A specialization of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$Hemisphere is half of a sphere. Examples include spatially
            localized objects, such as the Western Hemisphere, as well
            as abstract hemispheres.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hendecagon">
        <rdfs:label xml:lang="en">hendecagon</rdfs:label>
        <rdfs:comment>The collection of all eleven-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Heptagon">
        <rdfs:label xml:lang="en">heptagon</rdfs:label>
        <rdfs:comment>A specialization of #$Polygon. Instances of
            #$Heptagon are  polygons with 7 sides.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Herbivore">
        <rdfs:label xml:lang="en">#$Herbivore</rdfs:label>
        <rdfs:comment>A specialization of #$Animal.  An animal is an
            instance of #$Herbivore just in case it is an animal whose
            natural diet consists exclusively of plants or plant parts.
            (Thus a horse that was forced or conditioned by humans to
            eat meat would still be a herbivore, since meat is not part
            of its natural diet.)  Notable specializations of
            #$Herbivore include the collections #$Ruminant and #$EquineAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HerdAnimal">
        <rdfs:label xml:lang="en">herd animals</rdfs:label>
        <rdfs:comment>A subcollection of #$Animal; the collection of all
            large plant-eating animals that travel and graze in social
            groups.  Instances of #$HerdAnimal also belong to
            #$Herbivore; most instances of #$Ruminant are also instances
            of #$HerdAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AirBreathingVertebrate"/>
        <rdfs:subClassOf rdf:resource="#Herbivore"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Heterotroph">
        <rdfs:label xml:lang="en">heterotrophs</rdfs:label>
        <rdfs:comment>A specialization of #$Organism-Whole.  Each
            instance of #$Heterotroph is an organism incapable of
            manufacturing organic nutrients from inorganic raw
            materials.  All instances of #$Animal are instances of
            #$Heterotroph, since animals must eat other living things,
            or parts of living things, in order to get the nutrients
            they need to live.  Other specializations of #$Heterotroph
            include #$ParasiticOrganism and #$Fungus. Cf. #$Autotroph.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hexagon">
        <rdfs:label xml:lang="en">hexagon</rdfs:label>
        <rdfs:comment>The collection of all six-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HexalateralObject">
        <rdfs:label xml:lang="en">hexalateral objects</rdfs:label>
        <rdfs:comment>A #$HexalateralObject is an object with a
            well-defined front, back, left, right, top,
            and bottom.  These sides are considered to be intrinsic to
            the object and do not vary                  as the object
            changes position.  Any object which is an instance of two
            different specs of                 #$BilateralObject is a
            #$HexalateralObject as a matter of definition--eg, if an
            object&apos;s front and back can be distinguished and its
            left side can be distinguished from                 its
            right, then it also has a well-defined bottom and top.  See
            also comments for                 #$BilateralObject  and for
            #$FrontAndBackSidedObject, #$LeftAndRightSidedObject, and                 #$TopAndBottomSidedObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#LeftAndRightSidedObject"/>
        <rdfs:subClassOf rdf:resource="#FrontAndBackSidedObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HigherEducationInstitution">
        <rdfs:label xml:lang="en">#$HigherEducationInstitution</rdfs:label>
        <rdfs:comment>#$HigherEducationInstitution is a specialization
            of #$EducationalOrganization and #$AcademicOrganization. Two
            important types of #$HigherEducationInstitution are
            #$DegreeGrantingHigherEducationInstitution and
            #$NonDegreeGrantingInstitution.  Specs of
            #$DegreeGrantingHigherEducationInstitution include
            #$University, #$College, and
            #$CollegeInUniversity-DegreeGranting while specs of
            #$NonDegreeGrantingInstitution include #$CollegeInUniversity-NonDegreeGranting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EducationalOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Highway">
        <rdfs:label xml:lang="en">#$Highway</rdfs:label>
        <rdfs:comment>A specialization of both #$Roadway and
            #$PublicProperty.  Each instance of #$Highway is a major
            road open to public use.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Roadway"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HolderGripper">
        <rdfs:label xml:lang="en">holder</rdfs:label>
        <rdfs:comment>A specialization of#$SolidTangibleThing.  Each
            instance of #$HolderGripper is an object that can apply
            pressure to another object and thereby grip it in such a way
            that its motion is restricted.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HoldingAnObject">
        <rdfs:label xml:lang="en">holding (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$StaticSituations in which some
            object acts to hold one or more other objects stationary in
            some reference frame.  For example, a nail may hold two
            boards together, a seat may hold a person in place, a person
            may hold an object with a hand tool.  Note that in another
            frame of reference the object need not be stationary. For
            example, one  of the subevents of a
            #$CarryingWhileLocomoting is a #$HoldingAnObject. Thus,
            although the object is moving it is stationary in relation
            to the #$transporter. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
        <rdfs:subClassOf rdf:resource="#ContinuousPhysicalContactEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Holdings">
        <rdfs:label xml:lang="en">#$Holdings</rdfs:label>
        <rdfs:comment>A collection of groups of objects, tangible or
            intangible, which have some special financial, scientific,
            cultural, or educational value.  An instance of #$Holdings
            is a group of objects kept and usually maintained by some
            agent for their value, or to preserve the objects, or to
            make them available for public display or use (as in a
            museum&apos;s `holdings&apos; or a library&apos;s
            `holdings&apos;).  The group-members (see the predicate
            #$groupMembers) in a group of holdings may or may not be all
            of a similar type (e.g., books, paintings).  An agent&apos;s
            holdings may or may not all be kept in the same location.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Holiday">
        <rdfs:label xml:lang="en">#$Holiday</rdfs:label>
        <rdfs:comment>A specialization of #$HumanActivity.  Each
            instance of #$Holiday is an event featuring social
            celebrations and/or rituals.  Instances of #$Holiday
            typically last for one day (see the constant #$DaysDuration)
            and typically coincide with some day of the year (see the
            constant #$CalendarDay).  However, some instances of
            #$Holiday (such as the instances of #$ChanukkahHoliday or
            #$Oktoberfest-Holiday) last for several days.  While
            instances of #$Holiday are often annual events, they may
            also be one-time events or scheduled in some other manner.
            They are also contextual, as different nationalities and
            ethnic groups celebrate different ones.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Homeotherm">
        <rdfs:label xml:lang="en">warm-blooded animals</rdfs:label>
        <rdfs:comment>A specialization of #$Animal and an instance of
            #$OrganismClassificationType.  Each instance of #$Homeotherm
            is a  warm-blooded  animal.  That is, eachinstance is an
            animal that is able to maintain a stable body temperature
            relative to its environmental temperature. Cf. #$Poikilotherm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HominidaeFamily">
        <rdfs:label xml:lang="en">#$HominidaeFamily</rdfs:label>
        <rdfs:comment>A specialization of #$Primate.  The collection
            #$HominidaeFamily is the family to which humans, human
            primate ancestors, and chimps, gorillas, and orangutans belong.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Primate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HomoGenus">
        <rdfs:label xml:lang="en">genus Homo</rdfs:label>
        <rdfs:comment>The genus to which past or present human species belong.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HominidaeFamily"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HomogeneousSpaceRegion">
        <rdfs:label xml:lang="en">homogenous space region generic</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion.   Each instance
            HOMOREGION of #$HomogeneousSpaceRegion is a portion of a
            three   dimensional space and is of uniform dimensionality;
            i.e. HOMOREGION has   no protrusion that is of a lower
            dimensionality than HOMOREGION itself,   nor is there any
            hole in HOMOREGION that is of a lower dimensionality than
            HOMOREGION. For instance, a slice of space shaped as a
            planar surface will   be considered homogeneous provided
            that there is no  missing  line or point.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hope">
        <rdfs:label xml:lang="en">hopeful</rdfs:label>
        <rdfs:comment>Expectation of fulfillment or success.  This is a
            collection; for an explanation of a typical #$FeelingType,
            see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Hopeful">
        <rdfs:label xml:lang="en">agents who is hopeful</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            hopeful. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Horizon">
        <rdfs:label xml:lang="en">#$Horizon</rdfs:label>
        <rdfs:comment>The collection of all horizons, each being the
            far-off region within a few degrees of the horizontal plane,
            where the sky appears to join the distant landscape.   The
            horizon is always relative to a particular point of observation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hospital">
        <rdfs:label xml:lang="en">#$Hospital</rdfs:label>
        <rdfs:comment>#$Hospital is a specialization of
            #$MedicalCareInstitution and
            #$SingleSiteLocalOrganizationWithClients.  Each instance of
            #$Hospital is a local (at one site -- see
            #$HospitalBuilding) organization composed of physicians,
            support personnel, and usually administrators.  The main
            function of the organization is to provide medical care
            (short or long term) to a number of patients/clients, for a
            fee if the patient/client is able to pay.  A clinic services
            out-patients, while a hospital has in-patients.  A hospital
            may have a clinic as a sub-organization, though.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareInstitution"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HospitalCareEvent">
        <rdfs:label xml:lang="en">hospital care event</rdfs:label>
        <rdfs:comment>What happens when you are in the hospital being
            treated for a disease like Cancer or Hepatitis or AIDS, or
            recovering from Surgery.  This is not just a
            #$MedicalCareEvent which happens in a hospital; it&apos;s
            the whole event meant by a hospital stay.  Also see
            #$HospitalRoomStay which only represents the stay in the room.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hostile">
        <rdfs:label xml:lang="en">agents who is hostile</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            hostile. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HostileSocialAction">
        <rdfs:label xml:lang="en">hostile actions</rdfs:label>
        <rdfs:comment>A specialization of both #$PurposefulAction and
            #$SocialOccurrence.  Each instance of #$HostileSocialAction
            is a hostile or pugnacious event, adverse to some agent(s),
            in which multiple agents, at least one of whom is acting
            deliberately, take part.  Specializations of this collection
            include #$PhysicallyAttackingAnAgent and #$PoliticalDispute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Hostility">
        <rdfs:label xml:lang="en">hostile</rdfs:label>
        <rdfs:comment>A feeling of strong antagonism towards another
            agent, organization, or group, sufficient to motivate
            harmful speech or actions against them.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingTypes than
            #$Hostility include feelings of #$Hate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="HotAirBalloon">
        <rdfs:label xml:lang="en">hot-air balloons</rdfs:label>
        <rdfs:comment>#$HotAirBalloon is a specialization of #$Balloon.
            Each instance of #$HotAirBalloon is a hot-air buoyant
            balloon, consisting of a gas-bag into which hot air is
            introduced, and from which a basket or passenger compartment hangs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Balloon"/>
        <rdfs:subClassOf rdf:resource="#LighterThanAirCraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HourOfDayType">
        <rdfs:label xml:lang="en">#$HourOfDayType</rdfs:label>
        <rdfs:comment>A collection of collections. Instances of
            #$HourOfDayType are 24 canonical  subcollections of
            #$CalendarHour, such as #$TimeOfDay-8AM.  This is a proper
            subcollection of #$TimeOfDayType, which could include larger
            or smaller times of the day, such as `before noon&apos;
            (which in Cyc is named #$TimeOfDay-AM).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionallyClassifiedDisjointTimeIntervalType"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDayType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="HourlyWorker">
        <rdfs:label xml:lang="en">hourly worker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and a
            specialization of #$Employee. Each instance of
            #$HourlyWorker is a worker who is paid an hourly rate for
            work done. See also #$SalariedWorker and #$CommissionedWorker.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HouseholdAppliance">
        <rdfs:label xml:lang="en">#$HouseholdAppliance</rdfs:label>
        <rdfs:comment>A specialization of #$MechanicalDevice.  Each
            instance of #$HouseholdAppliance is a device used in one of
            the tasks typically carried on in a home, such as food
            preparation, food storage, laundry, household cleaning,
            personal cleaning, and cooling or heating the house for
            comfort.  Specializations of #$HouseholdAppliance include
            the collections #$Oven, #$Refrigerator, #$ClothesDryer,
            #$VacuumCleaner, #$HotWaterHeater, and #$Furnace.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanAccessibleIBO">
        <rdfs:label xml:lang="en">#$HumanAccessibleIBO</rdfs:label>
        <rdfs:comment>A specialization of both #$HumanAccessibleIBT and
            #$InformationBearingObject.   Each instance of
            #$HumanAccessibleIBO is an object (i.e. an instance of
            #$PartiallyTangible) that can be interpreted by a #$Person
            to yield information. Examples include street signs, product
            wrappings and roulette wheels. #$InformationBearingObjects
            requiring a device to convert them into human understandable
            form (such as DVDs) are not included. Most instances of
            #$HumanAccessibleIBO are also instances of
            #$StillImageSource. Objects such as Braille book copies,
            however, are not (since they are not interpreted visually).
            Objects that are instances of #$HumanAccessibleIBT,
            #$StillImageSource and #$Artifact fall into the collection
            defined as the intersection of these three -- #$HardcopyInformationBearingObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBT"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanAccessibleIBT">
        <rdfs:label xml:lang="en">#$HumanAccessibleIBT</rdfs:label>
        <rdfs:comment>A collection of #$InformationBearingThings, each
            of which contains information, for a #$Person who
            understands how to interpret it.  Examples include a copy of
            the novel _Moby Dick_, a signal buoy, a #$Photograph, a
            #$Flag, an elevator sign in Braille, a map, a US dollar
            bill, a word in #$AmericanSignLanguage and a musical
            performance.  #$InformationBearingThings that must be
            processed by some device (movie reels, #$PhonographRecords,
            #$DVD-Disks, etc.) are not included in this collection. An
            important specialization of this collection is
            #$HumanAccessibleIBO, composed of #$HumanAccessibleIBTs that
            are also objects (i.e,. instances of #$PartiallyTangible).
            Thus the copy of _Moby Dick_, the buoy, the photograph and
            the flag mentioned above are also #$HumanAccessibleIBOs --
            but not the word in #$AmericanSignLanguage, nor the musical performance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanActivity">
        <rdfs:label xml:lang="en">human activities</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalActivity.   Each
            instance of #$HumanActivity is a spatially-localized action
            each of whose  doers  (see #$doneBy) is either a #$Person or
            a  group of people (i.e. a #$Group all of whose members are #$Persons).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanAdult">
        <rdfs:label xml:lang="en">#$HumanAdult</rdfs:label>
        <rdfs:comment>The collection of human beings old enough to
            participate as independent, mature members of society.
            Since different societies have different age or maturity
            requirements for people to be considered adults, different
            axioms in various society-specific microtheories express
            these requirements.  For most modern, Western,
            middle-class,... purposes, e.g., the current view is that
            anyone over 18 is an adult.  In many cultures, adulthood
            occurs when one reaches puberty.  Adulthood is
            #$contiguousAfter childhood; that is, a #$Person is a
            #$HumanChild for a while, and then is a #$HumanAdult.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdultAnimal"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanBehavioralAttribute">
        <rdfs:label xml:lang="en">human behavioral attribute</rdfs:label>
        <rdfs:comment>A specialization of #$AttributeValue.  Each
            instance of #$HumanBehavioralAttribute is an attribute of a
            human being which pertains to his or her social and personal
            behavior.  Some of these attributes are related (explicitly
            or implicitly) to a particular social relationship of the
            person, while others are qualities attributed to the
            individual which get their social significance by implicit
            reference to a social group.  Examples include #$Married,
            #$Single, #$IntimateAcquaintance,
            #$OccasionalContactAcquaintance, #$AuthorityRelationship,
            (#$LowAmountFn #$CredibilityStatus), (#$HighAmountFn
            #$SocialPower), and all the instances of
            #$EducationLevelAttribute (such as #$MastersLevel).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanCapabilityType">
        <rdfs:label xml:lang="en">#$HumanCapabilityType</rdfs:label>
        <rdfs:comment>This is the collection of all types of action
            which can be performed in normal circumstances by any adult
            human being, that is, they are human capabilities in the
            sense that we expect a normal adult person to be able to do
            them in typical circumstances.  This is not the collection
            of types of action which can be done by some, but not all,
            persons.  For example, #$WalkingOnTwoLegs is an instance,
            but #$Juggling is not, because all normal people can walk
            but only some can juggle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanChild">
        <rdfs:label xml:lang="en">#$HumanChild</rdfs:label>
        <rdfs:comment>The collection of all #$Persons in the childhood
            stage of life.  Functionally, this ends when the child
            begins to take responsibility for themselves, work, have
            children of their own,... or, at latest, when the
            person&apos;s age greatly exceeds that at which most people
            reach those milestones.  Generally, this means that it spans
            the period from birth to teenage years.   This is highly
            dependent on context, of course; childhood in
            Shakespeare&apos;s culture ended around age 12.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#JuvenileAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanCyclist">
        <rdfs:label xml:lang="en">human cyclists</rdfs:label>
        <rdfs:comment>A specialization of #$Cyclist and #$Person.  Each
            instance of  #$HumanCyclist is a person who is entitled to
            inspect and modify the Cyc knowledge base.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Cyclist"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanFamilyNameString">
        <rdfs:label xml:lang="en">human family name string</rdfs:label>
        <rdfs:comment>A specialization of #$HumanNameString. Each
            instance of this collection is a character-string (e.g.
            Smith ,  Nguyen ) given to people as a &apos;family&apos; or
            last name. It is thus to be distinguished from
            #$HumanGivenNameString. See also #$HumanSurname.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanNameString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanGivenName">
        <rdfs:label xml:lang="en">given names</rdfs:label>
        <rdfs:comment>A specialization of #$Name. Each instance of this
            collection is a name that is given to human beings as a
            &apos;first name&apos; (e.g. #$Lionel-TheName,
            #$Winifred-TheName). It is thus to be contrasted with
            (though of course not disjoint with) #$HumanSurname. For a
            representation of the actual string of letters which makes
            up any given given name, see #$HumanGivenNameString (and for
            relating the two, see #$nameSpelling).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Name"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanGivenNameString">
        <rdfs:label xml:lang="en">#$HumanGivenNameString</rdfs:label>
        <rdfs:comment>A specialization of #$HumanNameString. Each
            instance of this collection is a character-string (e.g.
            `Billy&apos; and `Peter&apos;) given to people as a first
            name (or, in most Western countries, as a middle name),
            usually shortly after birth. It is thus to be distinguished
            from (though is not disjoint with) #$HumanFamilyNameString.
            This collection also includes nicknames such as  Red  or
            The Refrigerator . See also #$HumanGivenName.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanNameString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanInfant">
        <rdfs:label xml:lang="en">#$HumanInfant</rdfs:label>
        <rdfs:comment>The collection of #$Persons in the infant stage of
            life.  Functionally, this ends when the infant learns to
            walk (even just toddle) and/or talk (even a few words)...
            or, at latest, when the person&apos;s age greatly exceeds
            that at which most people develop those skills.  Generally,
            this means that it spans the period from birth to about 12 -
            18 months old.  One of the subsets of this collection is #$NewbornBaby.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanChild"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanLanguage">
        <rdfs:label xml:lang="en">human languages</rdfs:label>
        <rdfs:comment>A specialization of #$Language. Each instance of
            this collection is a language that is used by human
            communities for communication.  This collection differs from
            #$NaturalLanguage in that a #$HumanLanguage may be
            purposefully created, while #$NaturalLanguages evolve
            without a purposeful creation process.  Instances of
            #$HumanLanguage thus include not only many
            #$NaturalLanguages, but also made-up languages like
            Esperanto and many (non-natural) #$SignLanguages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Language"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanNameString">
        <rdfs:label xml:lang="en">human name string</rdfs:label>
        <rdfs:comment>A specialization of #$ProperNameString. Each
            instance of this collection is a name which is given to
            human beings.  Two important specializations of this
            collection are #$HumanGivenNameString and #$HumanFamilyNameString.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProperNameString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanOccupationConstruct">
        <rdfs:label xml:lang="en">human occupation construct</rdfs:label>
        <rdfs:comment>A specialization of both #$ConstructionArtifact
            and #$HumanlyOccupiedSpatialObject.  Each instance of
            #$HumanOccupationConstruct is a construction artifact whose
            primary function is to serve as a place where people perform
            certain activities.  Instances of #$HumanOccupationConstruct
            include instances of #$HumanShelterConstruction (e.g.,
            houses), sub-regions within a #$HumanShelterConstruction
            which are intended for human use (e.g., rooms, shower
            stalls), and  regions in any transportation vehicle which
            are designed for human occupancy (e.g., a cockpit, a
            passenger compartment).  Note that some buildings which are
            not themselves instances of #$HumanOccupationConstruct, such
            as #$HooverDam, may have a sub-region which is a
            #$HumanOccupationConstruct (e.g., the control room at the
            top of the dam).  Note also that the collection
            #$HumanOccupationConstruct is broad enough to include tents,
            boiler rooms, elevator shafts, steam tunnels, and the space
            inside the #$LincolnMemorialInWashingtonDC.  Consequently,
            an instance of #$HumanOccupationConstruct need not be
            completely indoors (see #$Indoors-IsolatedFromOutside),
            although it cannot be purely outdoors (see #$OutdoorLocation).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanOccupationConstructObject">
        <rdfs:label xml:lang="en">#$HumanOccupationConstructObject</rdfs:label>
        <rdfs:comment>A specialization of both #$Artifact and
            #$HumanScaleObject.  Each instance of
            #$HumanOccupationConstructObject is an artifact that is of a
            type typically found in some indoor place where humans live
            or work -- i.e. in some instance of
            #$HumanOccupationConstruct.  Since these objects are
            normally found indoors, they are all roughly  human-sized .
            Instances of #$HumanOccupationConstructObject include
            everything from furniture  to tools, appliances to artwork,
            medical examining tables to church altars and pews.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanOccupationConstructResident">
        <rdfs:label xml:lang="en">resident of a Human Occupation Construct</rdfs:label>
        <rdfs:comment>A specialization of #$Animal. Each specialization
            of #$HumanOccupationConstructResident is a type of animal
            that commonly resides in structures that house people (see
            the related constant #$HumanOccupationConstruct).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanRelationshipAttribute">
        <rdfs:label xml:lang="en">human relationships (types of things)</rdfs:label>
        <rdfs:comment>The collection of attributes that have to do with
            the description and character of human social relationships.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanBehavioralAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanResidence">
        <rdfs:label xml:lang="en">#$HumanResidence</rdfs:label>
        <rdfs:comment>A specialization of #$HumanShelterConstruction.
            Each instance of #$HumanResidence is a humanly constructed
            shelter (or a part of one) in which humans reside.  The
            collection #$HumanResidence includes residential huts,
            igloos, longhouses, hotels, barracks, palaces, houseboats,
            and mobile homes, as well as apartments, duplexes, and
            detached houses.  A person&apos;s residence is typically the
            place where she/he usually sleeps and keeps most personal effects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalContactLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanResidenceArea">
        <rdfs:label xml:lang="en">#$HumanResidenceArea</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion.  Each
            instance of #$HumanResidenceArea is a region in which a
            number of people live semi-permanently (that is, for a
            duration of at least a year or more).  Examples include
            #$SanFranciscoBayArea, #$ResearchTrianglePark, research
            stations at the #$SouthPole, and radar posts in the Aleutians.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanScaleObject">
        <rdfs:label xml:lang="en">human-scale objects</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$HumanScaleObject is an object that can be
            perceived and manipulated by human beings.  Instances of
            this collection range roughly from objects the size of
            pinheads to objects the size of aircraft carriers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanShelterConstruction">
        <rdfs:label xml:lang="en">human shelter constructions</rdfs:label>
        <rdfs:comment>A specialization of both #$ShelterConstruction and
            #$HumanOccupationConstruct.  Each instance of
            #$HumanShelterConstruction is a place designed to shelter
            people from the elements by allowing them to get indoors.
            Specializations include #$ModernHumanResidence,
            #$SchoolBuilding, #$ShoppingMallBuilding, and many others.
            Each instance of #$HumanShelterConstruction must have a roof
            and typically has sides, though the latter may be flimsy (as
            in instances of #$TentTheShelter) or even absent (as in some
            instances of #$ParkingGarage).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
        <rdfs:subClassOf rdf:resource="#ShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanSkinColor">
        <rdfs:label xml:lang="en">skin colors</rdfs:label>
        <rdfs:comment>A specialization of #$Color.  Each instance of
            #$HumanSkinColor is the color of some person&apos;s skin.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CompositeScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanSurname">
        <rdfs:label xml:lang="en">family names</rdfs:label>
        <rdfs:comment>A specialization of #$Name. Each instance of this
            collection is a name that is given to human beings as a
            &apos;family name&apos;. It is thus to be contrasted with
            (though of course not disjoint with) #$HumanGivenName. For a
            representation of the actual string of letters which makes
            up any given surname, see #$HumanFamilyNameString (and for
            relating the two, see #$nameSpelling). See also the
            predicates #$lastName, #$familyName.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Name"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumanlyOccupiedSpatialObject">
        <rdfs:label xml:lang="en">objects or locations inhabited by humans</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing.  Each
            instance of #$HumanlyOccupiedSpatialObject is a place that
            humans occupy. Instances include both movable things, such
            as cars and ships, and things having a more or less
            permanent location, such as houses or office buildings.
            Instances include things made by human beings, such as
            subway stations or concert halls, as well as things not made
            by human beings, such as caves.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumidClimateCycle">
        <rdfs:label xml:lang="en">humid climates</rdfs:label>
        <rdfs:comment>A specialization of #$AnnualClimateCycle.  Each
            instance of #$HumidClimateCycle is a year-long event
            consisting of weather occurring (typically) in various
            continental and subtropical regions.  Characteristics of a
            humid climate include copious precipitation and high humidity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnnualClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumidContinentalClimateCycle">
        <rdfs:label xml:lang="en">humid continental climates</rdfs:label>
        <rdfs:comment>A specialization of both #$HumidClimateCycle and
            #$TemperateClimateCycle.  Each instance of
            #$HumidContinentalClimateCycle is a year-long event
            consisting of weather occurring (typically) in continental
            interiors within a temperate climate zone.  Characteristics
            of a humid continental climate cycle include a warm summer
            and cold winter, with precipitation throughout.  A good
            example of a region whose annual climate cycles are
            instances of #$HumidContinentalClimateCycle is the American
            Midwest.  Cf. #$HumidSubtropicalClimateCycle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#HumidClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="HumidSubtropicalClimateCycle">
        <rdfs:label xml:lang="en">humid subtropical climates</rdfs:label>
        <rdfs:comment>A specialization of both #$HumidClimateCycle and
            #$TemperateClimateCycle.  Each instance of
            #$HumidSubtropicalClimateCycle is a year-long event
            consisting of weather occurring (typically) within a
            temperate climate zone.  Characteristics of a humid
            subtropical climate cycle include a hot summer and a cool
            winter, with precipitation and moist air throughout.  Cycles
            of this kind occur closer to the equator than do instances
            of #$HumidContinentalClimateCycle (q.v.).  For instance, the
            Southeastern United States is a good example of a region
            whose annual climate cycles are instances of #$HumidSubtropicalClimateCycle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#HumidClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Humility">
        <rdfs:label xml:lang="en">humility</rdfs:label>
        <rdfs:comment>Insignificance, Inferiority: feeling of absence of
            pride in oneself and in one&apos;s achievement, with the
            connotation of undue self-deprecation, humilliation or abjectness</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="HypotheticalContext">
        <rdfs:label xml:lang="en">#$HypotheticalContext</rdfs:label>
        <rdfs:comment>A #$MicrotheoryType.  Each instance of
            #$HypotheticalContext consist of assertions that are posited
            strictly for the purpose of exploring their consequences,
            without alleging their actual truth.   A hypothetical
            context can be used to analyze hypothetical outcomes of
            actions or to examine the hypothetical consequences of
            assuming some theory to be true.  Also, various alternative
            choices might be asserted, each in its own hypothetical
            context, so their ramifications can be generated and compared.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="IBOCreation">
        <rdfs:label xml:lang="en">creations of an information-bearing object</rdfs:label>
        <rdfs:comment>A specialization of both #$PhysicalCreationEvent
            and #$IBTGeneration.  Each instance of #$IBOCreation is an
            event in which an instance of #$InformationBearingObject
            (hereafter IBO) is created.  Examples of #$IBOCreation
            include publishing a book, making a film, printing a
            photograph, molding a plastic credit card, painting a
            billboard, and minting a coin.  When an IBO is created, its
            content may be either original, be copied from a prior
            #$InformationBearingThing, or be instantiated from an
            existing #$ConceptualWork. See also the predicate #$iboCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTContentType">
        <rdfs:label xml:lang="en">#$IBTContentType</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances of
            #$IBTContentType are specs of #$InformationBearingThing.
            Each such instance (that is, each IBTContentType) is
            specified primarily by the type or organization of
            information contained by its instances.  For example, (#$isa
            #$Newsletter #$IBTContentType), since Newsletters are
            primarily distiguished from other kinds of IBTs by the
            nature and organization of information they contain.
            Similarly, #$JazzMusic, #$ComputerProgramCopy, and
            #$Spreadsheet are all IBTContentTypes, since each is
            primarily distinguished from other kinds of IBTs by the
            nature or organization of the information contained.
            Non-examples include #$CompactDisc-Generic, since compact
            discs are distinguished by their physical format, rather
            than their information content. (see #$IBTFormatType).
            IBTContentTypes whose instances contain not just similar but
            identical information (such as a single magazine issue, or
            #$CitizenKane-TheMovie), should be made specs of the more
            specific #$SpecifiedInformationBearingThingType.
            IBTContentTypes whose instances are members of a series (for
            example, #$StarTrek-Classic) should be made instances of #$IBTSeriesType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTCopying">
        <rdfs:label xml:lang="en">events in which an Information Bearing
            Thing is copied</rdfs:label>
        <rdfs:comment>A specialization of #$IBTGeneration-Replication.
            Each instance of #$IBTCopying is an event which generates
            some new instance or instances of #$InformationBearingThing
            by copying the information and format from a source
            #$InformationBearingThing (see #$informationOrigin).  The
            new instance(s) of #$InformationBearingThing encode(s)
            approximately the same information in approximately the same
            way as the source #$InformationBearingThing.  A positive
            example of #$IBTCopying would be a person producing a
            hand-written copy of a newspaper story, where the copy is in
            the same language as the story, and the format of the story
            (e.g., the ordering of the paragraphs) is not changed.
            Negative examples of #$IBTCopying would be a person
            producing a translation of the newspaper story, or a person
            producing a document in which the paragraphs of the story
            are extensively rearranged.  Specializations of #$IBTCopying
            include #$CopyingAComputerFile and #$PhotocopyingADocument.
            See also the predicates #$copyProduced and #$itemCopied.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTGeneration-Replication"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTGeneration">
        <rdfs:label xml:lang="en">generations of an Information Bearing Thing</rdfs:label>
        <rdfs:comment>A specialization of #$InformationTransferEvent and
            of #$Action.  Each instance of #$IBTGeneration is an event
            which creates some #$InformationBearingThing.  The
            #$InformationBearingThing created may be either a transient
            wave phenomenon (e.g. sound, light, or radio waves), or it
            may be a relatively long-lasting instance of
            #$InformationBearingObject (cf. the important specialization
            of IBTGeneration -- #$IBOCreation).  Humans frequently
            generate such IBTs as spoken language, gestures, and
            handwritten notes.  It is irrelevant for instances of
            #$IBTGeneration whether there is another agent who accesses
            the resulting IBT.  Note that every communication act starts
            with an instance of #$IBTGeneration.  (Thus, see also
            #$Communicating and its specializations, especially
            #$CommunicationAct-Single.) For an analogous collection
            regarding instances of #$ConceptualWork, see #$CWCreation.
            Two important specializations of this collection are
            #$IBTGeneration-Original and #$IBTGeneration-Replication.
            See also the predicate #$ibtGenerated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTGeneration-Original">
        <rdfs:label xml:lang="en">generations of an original Information
            Bearing Thing</rdfs:label>
        <rdfs:comment>A specialization of #$IBTGeneration.  Each
            instance of #$IBTGeneration-Original is an event in which
            some instance of #$InformationBearingThing (hereafter IBT)
            is generated, where the content of the IBT generated is not
            a copy of the content of any previously created IBT.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#CreatingAnArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTGeneration-Replication">
        <rdfs:label xml:lang="en">events in which an Information Bearing
            Thing is replicated</rdfs:label>
        <rdfs:comment>A specialization of #$IBTGeneration.  Each
            instance of #$IBTGeneration-Replication is an event in which
            a new instance of #$InformationBearingThing (IBT) is created
            whose content is based on that of a preexisting IBT (which
            is the #$informationOrigin (q.v.) of the generation event).
            The new IBT contains at least part of the information
            content of the original IBT.  It may use the same or a
            different way of encoding the information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IBTRecoding">
        <rdfs:label xml:lang="en">events in which an Information Bearing
            Thing is recoded</rdfs:label>
        <rdfs:comment>A specialization of #$IBTGeneration-Replication.
            Each instance of #$IBTRecoding is an event which generates a
            new information-bearing thing (i.e., an instance of
            #$InformationBearingThing) by taking information from a
            source information-bearing thing (see #$informationOrigin),
            encoding it a new way, and incorporating it into a new
            information-bearing thing (see #$ibtGenerated).  Instances
            of #$IBTRecoding may be done either by agents (e.g., people)
            or by non-agents (e.g., record players, or computers running
            translation software).  Recoding the content of a
            pre-existing information-bearing thing presupposes some
            instance of accessing it (i.e., of #$AccessingAnIBT).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTGeneration-Replication"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IDDocument">
        <rdfs:label xml:lang="en">identification cards</rdfs:label>
        <rdfs:comment>A specialization of #$OfficialDocument.  Each
            instance of this collection is an officially sanctioned
            credential for identifying some person or physical object.
            Important subcollections of #$IDDocument include #$Passport,
            #$DriversLicense, #$PersonalCheck.  Other examples include
            student ID cards, dog tags (worn by military personnel), dog
            tags (worn by dogs), authentication certificates for an
            #$ArtObject or an antique.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OfficialDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IDNumber">
        <rdfs:label xml:lang="en">identification numbers</rdfs:label>
        <rdfs:comment>A specialization of #$IDString.  Each instance of
            #$IDNumber is a string consisting of only numeric characters
            and which is used to identify a specific object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="IDObject">
        <rdfs:label xml:lang="en">ID objects</rdfs:label>
        <rdfs:comment>A specialization of #$SubLAtom.  Each instance of
            #$IDObject is a token (such as a string or a number) that is
            used as an identifier for a distinct thing.  Instances of
            #$IDObject may be unique identifiers, in which case they are
            instances of the specialization #$UniqueID.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>

    </owl:Class>
    <owl:Class rdf:ID="IDString">
        <rdfs:label xml:lang="en">i d string</rdfs:label>
        <rdfs:comment>A specialization of #$CharacterString.  Each
            instance of #$IDString is a character string which is used
            to denote a specific object in some identification mapping.
            Notable specializations of #$IDString include #$IPAddress,
            #$PhoneNumber, #$ProperNameString, and #$ContactInfoString.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
        <rdfs:subClassOf rdf:resource="#IDObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IDStringType">
        <rdfs:label xml:lang="en">#$IDStringType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$ObjectType.  Each instance of #$IDStringType is a
            collection of character strings which is a specialization of
            #$IDString (q.v.).  A few notable instances of
            #$IDStringType are #$ProductName, #$ProductVersion,
            #$EMailAddress, #$PhoneNumber, #$PostalCode.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="IPAddress">
        <rdfs:label xml:lang="en">#$IPAddress</rdfs:label>
        <rdfs:comment>A specialization of #$UniqueID and #$IDString.
            Each instance of #$IPAddress is a string that is a unique
            address of a computer that is used in communications over
            the #$Internet that conform to #$InternetProtocol. Every
            instance of #$Packet-Internet includes both the #$IPAddress
            of the machine that sent it and the #$IPAddress of the
            machine to receive it. To relate #$Computers to their IP
            addresses, see the predicate #$computerIP.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#UniqueID"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="IllocutionaryForceType">
        <rdfs:label xml:lang="en">#$IllocutionaryForceType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$IllocutionaryForceType is a subcollection of
            #$IllocutionaryForce.  Notable instances of
            #$IllocutionaryForceType include
            #$DirectiveIllocutionaryForce,
            #$CommissiveIllocutionaryForce, and #$ConstativeIllocutionaryForce.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="ImmediateWeatherProcess">
        <rdfs:label xml:lang="en">meteorological events</rdfs:label>
        <rdfs:comment>A specialization of #$WeatherEvent. Each instance
            of  #$WeatherEvent is a meteorological event of a duration
            shorter than a seasonal process.  A particular hurricane
            event, for example, might be characteristic of a seasonal
            process for a region; but the hurricane event itself is an
            instance of #$ImmediateWeatherProcess.  Another example of
            an instance of #$ImmediateWeatherProcess is a single
            #$LightningEvent.  (Cf. #$AnnualClimateCycle.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Impatience">
        <rdfs:label xml:lang="en">impatience</rdfs:label>
        <rdfs:comment>Emotion arising from the inability to bear some
            trial (as delay, opposition, discomfort, or stupidity),
            shown by mental and emotional unrest, and inability to keep still</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Frustration"/>
    </owl:Class>
    <owl:Class rdf:ID="ImplementationConstant">
        <rdfs:label xml:lang="en">implementation constant</rdfs:label>
        <rdfs:comment>The collection of constants that are included in a
            Cyc Knowledge Base only in order to support or enable one or
            more Cyc-based applications or capabilities. These constants
            are not used to represent common sense knowledge; nor are
            they used to represent knowledge shared by a significant
            subset of humans, such as specialized domain knowledge (e.g.
            the knowledge of experts in some field of study, such as
            nuclear physics).</rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="ImprovementEvent">
        <rdfs:label xml:lang="en">progressing</rdfs:label>
        <rdfs:comment>The collection of actions in which something is
            improved by being changed.  The improvement is from the
            point of view of the performer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InanimateObject-Natural">
        <rdfs:label xml:lang="en">natural inanimate objects (types of things)</rdfs:label>
        <rdfs:comment>A collection of natural (i.e. not man-made)
            objects. It is a subclass of #$InanimateThing-Natural,
            distinguished from it mainly by only having subclasses which
            are existing object-types. Thus, #$CelestialObject would be
            a subclass of this collection, but #$Dirt would not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InanimateThing">
        <rdfs:label xml:lang="en">inanimate objects</rdfs:label>
        <rdfs:comment>A subcollection of #$PartiallyTangible.  Each
            instance of #$InanimateThing is an (at least partly)
            tangible thing that is not currently a living structure.
            Things that were never alive, dead organisms, and dead (or
            completely non-functioning) organism parts are included in
            this collection.  Examples: #$YaleUniversity, a piece of
            #$Meat, a dead armadillo, the #$StatueOfLiberty, and a pile
            of #$Sawdust.  Two important specializations of this
            collection are #$InanimateThing-Natural and #$InanimateThing-NonNatural.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InanimateThing-Natural">
        <rdfs:label xml:lang="en">natural inanimate things</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$InanimateThing.  Each instance of
            #$InanimateThing-Natural is an #$InanimateThing that was not
            created by an #$Agent in a #$PurposefulAction. Thus, the
            #$MoonOfEarth, human #$Sweat staining a shirt, and most
            footprints left by people in the snow belong to this
            collection, but wood chips left around a tree being chopped
            down, tailings left from a mine, and the #$ArcDeTriomphe do not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
    </owl:Class>
    <owl:Class rdf:ID="InanimateThing-NonNatural">
        <rdfs:label xml:lang="en">non-natural inanimate things</rdfs:label>
        <rdfs:comment>A collection of tangible things.  An instance of
            #$InanimateThing-NonNatural is a tangible which was created
            during a #$PurposefulAction by an #$Agent (or a group of
            #$Agents working together) whether or not that creation was
            intended.  If the creation was intended the thing created is
            an instance of the more specific collection, #$Artifact.
            Let&apos;s consider some positive and negative examples.
            In addition to the obvious human #$Artifacts (buildings,
            tools, textiles, power lines), this collection includes
            #$Artifacts made by #$NonPersonAnimals, such as bird nests,
            termite mounds, and beaver dams.  By-products (see
            #$byProducts) of #$PurposefulActions, such as wood chips
            created when chopping down a tree and slag created when
            obtaining metal from #$MineralOre, are instances of
            #$InanimateThing-NonNatural but not of #$Artifact.  For more
            details on what is included in the concept #$Artifact,
            examine its comment.    Negative examples include bodily
            excretions (see #$ExcretionSubstance), most instances of
            tracks made while walking through mud or snow (both being
            instances of #$InanimateThing-Natural, and spoken words
            (being intangible).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Incorporation-Physical">
        <rdfs:label xml:lang="en">physical incorporation</rdfs:label>
        <rdfs:comment>The collection of events in which an object or
            chunk of stuff comes to include, or acquire, or be joined to
            another object or chunk of stuff. If the additional object
            can be properly said to be a part of the entity into which
            it is incorporated, it is probably more appropriate to use
            #$AttachmentEvent or one of its specs. But incorporation is
            more general: for instance, an egg can be incorporated into
            a chunk of pizza dough, or a teaspoon of cream into a cup of coffee.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IncurringAnInjury">
        <rdfs:label xml:lang="en">instances of incurring an injury</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$IncurringAnInjury is an event in which an animal becomes
            injured.  In such events, the animal which is hurt is the
            #$bodilyActedOn in the event.  The condition which results
            of an instance of #$IncurringAnInjury would be an instance
            of #$InjuryCondition (q.v.).  Also see the comment on #$AilmentCondition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IncurringDamage"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IncurringDamage">
        <rdfs:label xml:lang="en">incurring damage</rdfs:label>
        <rdfs:comment>The collection of events in which some sort of
            damage is incurred to a person or property.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Indecision">
        <rdfs:label xml:lang="en">indecision</rdfs:label>
        <rdfs:comment>Emotion of one who is wavering between two or more
            courses of action</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Doubt"/>
    </owl:Class>
    <owl:Class rdf:ID="IndefinitePronoun">
        <rdfs:label xml:lang="en">#$IndefinitePronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IndependentCountry">
        <rdfs:label xml:lang="en">#$IndependentCountry</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities and a
            specialization of #$Country.  Each instance of
            #$IndependentCountry is a distinct, independent geopolitical
            entity generally recognized by the international community.
            An independent country typically has a relatively stable
            government, enforced borders, its own currency, laws, and
            culture.  Examples include #$UnitedStatesOfAmerica,
            #$Germany, #$Liberia, #$Mongolia, #$India,
            #$Taiwan-RepublicOfChina, and #$Honduras.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Country"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IndependentOrganization">
        <rdfs:label xml:lang="en">independent organization</rdfs:label>
        <rdfs:comment>#$IndependentOrganization is a specialization of
            #$Organization.  Each instance of #$IndependentOrganization
            is an organization which is not affiliated with any instance
            of #$ChainOrganization (q.v.), and is not a sub-organization
            of any other #$Organization.  An independent organization is
            neither the top-level organization of a chain, nor a lower
            level organization in a chain, nor is it an instance of
            #$ChainOrganization.  Note, however, that an instance of
            #$IndependentOrganization may have several locations within
            a small geographical region; e.g., Texas French Bread (a
            single, independent business) has multiple locations in
            Austin, TX.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IndeterminateTerm">
        <rdfs:label xml:lang="en">indeterminate terms</rdfs:label>
        <rdfs:comment>#$IndeterminateTerm is the collection of all CycL
            symbols used to denote some indeterminate object in the
            universe of discourse which must exist, although the precise
            identity of the object may not be known.  One can reason
            from the known existence of such a term, but not about any
            identity property of the term, unless the term is known to
            satisfy #$equals with another term whose identity is known.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="IndexedInformationSource">
        <rdfs:label xml:lang="en">indexed info source</rdfs:label>
        <rdfs:comment>The collection of all structured  information
            sources in which the information contained therein  is
            indexed by some set of index terms (the terms could be
            names, phrases, #$CharacterStrings,  #$IDNumbers or codes).
            For every index term, there is one  specific part of the
            #$IndexedInformationSource associated with that  term.  Each
            instance of #$IndexedInformationSource has some format  or
            organizing structure of specified parts or
            &apos;chunks&apos; imposed on the information.    (Although
            its indexed parts might be  be ordered in a certain
            sequence, in theory it could be indexed without  there being
            any particular sequential ordering of the parts.)  An
            instance of #$IndexedInformationSource  is the abstract
            informational content of the source, not any  particular
            physical object in which the information is stored.
            Examples include a #$Dictionary, #$Thesaurus,
            #$Database-AbstractContent, or a #$KnowledgeBase.  Some
            examples  that do not qualify are #$Painting-ArtForm, or a
            #$CharacterString  without any structuring information about
            it or that has no  structure beyond being a string of
            characters.   Thus this is not referring to unstructured
            text, even if it has an &apos;Index&apos;.  The fact that a
            book has an index does not make it an #$IndexedInformationSource.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IndexicalConcept">
        <rdfs:label xml:lang="en">indexicals</rdfs:label>
        <rdfs:comment>#$IndexicalConcepts are those   whose referent
            essentially depends on the occasion of use and   the user,
            e.g., #$Now, I, Here. When I use the word &apos;I,&apos; I
            am referring to myself (#$OKeefe), but &apos;I&apos; does
            not mean   #$OKeefe, but refers to whomever the user is.
            Similarly, #$Now denotes the moment in which it is used.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="Individual">
        <rdfs:label xml:lang="en">#$Individual</rdfs:label>
        <rdfs:comment>#$Individual is the collection of all individuals:
            things that are _not_ sets or collections.  Individuals
            might be concrete or  abstract, and include (among other
            things) physical objects, events, numbers,   relations, and
            groups.  An instance of #$Individual might have parts or
            structure (including discontinuous parts); but _no_
            individual has elements   or subsets (see #$elementOf and
            #$subsetOf). Thus, an individual that has parts (e.g.
            #$physicalParts or #$groupMembers) is _not_ the same thing
            as either the set or the collection containing those same
            parts.  For example, your car is an individual, but the
            collection of all the parts of your car is not an individual
            but an instance of #$Collection.  This collection (unlike
            the car itself) is abstract: it doesn&apos;t have a
            location, mass, or a top speed; but it does have instances,
            subcollections, and supercollections.  In partial contrast,
            the #$Group (q.v.) of parts of your car (while also not the
            same thing as the car itself) _is_ an individual that has
            location and mass.  Another example: A given company, the
            group consisting of all the company&apos;s employees, the
            collection of those employees, and the set of those
            employees are four distinct things, and only the first two
            are individuals.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="IndividualAgent">
        <rdfs:label xml:lang="en">individuals (types of things)</rdfs:label>
        <rdfs:comment>An instance of #$ExistingObjectType and a
            specialization of #$Agent-Generic.  Each instance of
            #$IndividualAgent is an instance of #$Agent-Generic that is
            not itself a group composed of other instances of
            #$Agent-Generic.  Notable specializations of
            #$IndividualAgent include #$Person and #$Animal. Note that
            #$Organization is not a specialization of #$IndividualAgent,
            since instances of #$Organization are groups composed of
            other instances of #$Agent-Generic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IndividualDenotingFunction">
        <rdfs:label xml:lang="en">individual-denoting functions</rdfs:label>
        <rdfs:comment>The subcollection of #$Function-Denotational whose
            instances, when applied to any appropriate  (sequence of)
            arguments, return instances of #$Individual.  Examples
            include #$PerimeterFn, #$GovernmentFn, and
            #$CavityInteriorRegionFn. See also the collections
            #$CollectionDenotingFunction and #$SetDenotingFunction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="IndividualLevelPredicate">
        <rdfs:label xml:lang="en">individual-level predicates</rdfs:label>
        <rdfs:comment>`Individual-level&apos; predicates express
            properties that apply to  continuants more or less
            intrinsically, rather than only at a certain time  or stage
            in time (for which cf. #$StageLevelPredicate). Example:
            having  brown eyes is, under normal conditions, an
            individual-level property.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="IndustrializedCountry">
        <rdfs:label xml:lang="en">industrialized countries</rdfs:label>
        <rdfs:comment>A specialization of #$Country.  Each instance of
            #$IndustrializedCountry is a nation-state whose economy is
            characterized by large industries, at least some
            mechanization of production, and by a concentration of the
            work force in urban, rather than rural, areas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Country"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InfectingEvent">
        <rdfs:label xml:lang="en">infecting</rdfs:label>
        <rdfs:comment>The collection of events in which some instance of
            #$Organism-Whole is infected. The infectious agent can be
            transmitted from any partially tangible thing. An important
            specialization of this collection is that of events in which
            the pathogen comes from an infected host, see #$InfectionTransmissionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#ContaminationEvent"/>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Infection">
        <rdfs:label xml:lang="en">infection (type)</rdfs:label>
        <rdfs:comment>A specialization of #$AilmentCondition.  Each
            instance of #$Infection is an ailment condition in which
            microorganisms are abnormally present (or abnormally
            numerous) within an animal&apos;s body.  The microorganisms
            involved in an infection may be instances of the collections
            #$Bacterium, #$Virus, or #$ProtistaKingdom.  Specializations
            of #$Infection include #$Bronchitis, #$Tonsillitis, and
            #$SexuallyTransmittedInfection (which has further specializations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InfectionTransmissionEvent">
        <rdfs:label xml:lang="en">#$InfectionTransmissionEvent</rdfs:label>
        <rdfs:comment>A specialization of #$InfectingEvent.  Each
            instance of #$InfectionTransmissionEvent is an event in
            which some infection is transmitted from one host to another
            (where both the old and new hosts are instances of #$BiologicalLivingObject).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InfectingEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InfectionType">
        <rdfs:label xml:lang="en">#$InfectionType</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$InfectionType is a specialization of #$Infection.
            Instances include #$BubonicPlague, #$Leprosy, and #$Herpes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalConditionType"/>
    </owl:Class>
    <owl:Class rdf:ID="InfectionTypeByPathogenType">
        <rdfs:label xml:lang="en">infection type by pathogen type</rdfs:label>
        <rdfs:comment>A collection of Collection. Elements of
            #$InfectionTypeByPathogenType are specs of #$Infection of
            which instances share the common property of being caused by
            pathogenic organisms of the same type. See
            #$pathogenCausesInfectionType, #$InfectionDueToFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InfectionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalConditionType"/>
    </owl:Class>
    <owl:Class rdf:ID="InfectionTypeBySymptomology">
        <rdfs:label xml:lang="en">#$InfectionTypeBySymptomology</rdfs:label>
        <rdfs:comment>This type-level collection facets the class of
            #$Infections by characteristic symptom.  More specifically,
            if INFECTION-COL is an instance of
            #$InfectionTypeBySymptomology, then its instances will,
            under normal circumstances, feature a certain type of
            symptom which is characteristic of the infection-class as a whole.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InfectionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalConditionType"/>
    </owl:Class>
    <owl:Class rdf:ID="InferenceBinding">
        <rdfs:label xml:lang="en">inference binding</rdfs:label>
        <rdfs:comment>Each instance of #$InferenceBinding represents a
            CycL binding pair of variable and value which can be
            substituted for that variable in a CycL formula.  Such
            binding pairs are constructed for representation in the Cyc
            KB by using the function #$InferenceBindingFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLList"/>
    </owl:Class>
    <owl:Class rdf:ID="InferenceBindingSet">
        <rdfs:label xml:lang="en">#$InferenceBindingSet</rdfs:label>
        <rdfs:comment>Each instance of #$InferenceBindingSet represents
            one complete answer to a CycL Query. An
            #$InferenceBindingSet is a set of #$InferenceBindings, with
            one #$InferenceBinding for each free variable present in the
            query formula.  Such binding sets are constructed for
            representation in the KB by using the function #$InferenceBindingSetFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Set-Mathematical"/>
    </owl:Class>
    <owl:Class rdf:ID="InferenceRelatedBookkeepingPredicate">
        <rdfs:label xml:lang="en">#$InferenceRelatedBookkeepingPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each instance of
            #$InferenceRelatedBookkeepingPredicate is a predicate
            involved in assertions used by the Cyc application to direct
            inferencing.  Examples: #$defnIff, #$defnSufficient,
            #$termOfUnit, #$afterAdding.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BookkeepingPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InfinitiveComp">
        <rdfs:label xml:lang="en">infinitive comp</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all infinitive complementizers. In English,
            this is only the word &apos;to&apos;. Infinitive
            complementizers introduce non-tensed clauses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflatableBoat">
        <rdfs:label xml:lang="en">inflatable boats</rdfs:label>
        <rdfs:comment>#$InflatableBoat is a specialization of
            #$Watercraft-Small. Each instance of #$InflatableBoat is
            composed of some fabric or membrane, which is inflated with
            air to give it buoyancy on water.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryHardware"/>
        <rdfs:subClassOf rdf:resource="#Watercraft-Small"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalAffix">
        <rdfs:label xml:lang="en">#$InflectionalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalAffixation">
        <rdfs:label xml:lang="en">#$InflectionalAffixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affixation-WordFormationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalPrefix">
        <rdfs:label xml:lang="en">inflectional prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InflectionalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalPrefixation">
        <rdfs:label xml:lang="en">inflectional prefixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Prefixation"/>
        <rdfs:subClassOf rdf:resource="#InflectionalAffixation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalSuffix">
        <rdfs:label xml:lang="en">inflectional suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InflectionalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InflectionalSuffixation">
        <rdfs:label xml:lang="en">inflectional suffixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Suffixation"/>
        <rdfs:subClassOf rdf:resource="#InflectionalAffixation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InfluencingAnAgent">
        <rdfs:label xml:lang="en">influences</rdfs:label>
        <rdfs:comment>A collection of #$PurposefulActions.  In each
            instance of #$InfluencingAnAgent, one #$IntelligentAgent
            deliberately and successfully influences the actions of
            another (or at least the other&apos;s dispositions to act).
            This collection is restricted to  influence  through
            cognitive or emotional channels -- e.g. influencing someone
            through rational persuasion, through appeals to emotion, or
            by #$MakingAThreat. Affecting someone&apos;s behavior solely
            by the application of physical force -- e.g. twisting your
            arm to make you cry out -- is not influencing in the
            relevant sense.  Also, this collection does not include
            cases where an agent A influences the actions of B
            unknowingly -- e.g., by serving as a role model for B, or by
            unintentionally alienating B.  Borderline cases involve the
            influenced agent acting in a way the influencer did not
            envision -- e.g. my telling you to be more assertive in your
            personal relationships, and you responding to the advice (to
            my horror) by beating someone up.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Inform-CommunicationAct">
        <rdfs:label xml:lang="en">acts of conveying information</rdfs:label>
        <rdfs:comment>A specialization of both #$PurposefulAction and
            #$CommunicationAct-Single.  Each instance of
            #$Inform-CommunicationAct is a communication act in which an
            agent intentionally conveys some piece of information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Information-Content">
        <rdfs:label xml:lang="en">information content</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$Information-Content is an abstract object
            that can be the content, or meaning, of some token in some
            language.  A pair of tokens of linguistic objects mean the
            same thing just in case each has the same content as the
            other. Instance of this collection can be used to represent
            the content of an instance of #$ConceptualWork.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationAdding">
        <rdfs:label xml:lang="en">adding information</rdfs:label>
        <rdfs:comment>A specialization of #$InformationUpdating.  Each
            instance of #$InformationAdding is an event in which
            information is added to the information content of an
            instance of #$InformationBearingObject (q.v.).  After the
            action, the instance of #$InformationBearingObject (which is
            related to the action by #$informationDestination)`has&apos;
            the new information.  The resulting information content of
            that instance of #$InformationBearingObject includes both
            its content immediately prior to the addition, plus the
            newly added information.  Examples of #$InformationAdding
            include recording a check in the check register of
            one&apos;s checkbook; taking the next photograph on a roll
            of film; adding new information to a database.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationUpdating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationBearingObject">
        <rdfs:label xml:lang="en">ibo</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationBearingThing
            and #$CompositeTangibleAndIntangibleObject.  Each instance
            of #$InformationBearingObject (or  IBO ) is a physical
            object that can be interpreted to yield information.
            #$InformationBearingObject includes: (1) artifacts made
            solely for the purpose of conveying information (e.g., a
            newspaper, or a children&apos;s science video); (2)
            artifacts that convey information in addition to their
            intended function (e.g., Neolithic pottery); and (3)
            non-artifacts, such as a person&apos;s fingerprints or
            cellular DNA, which may be interpreted to yield information.
            See the comment on #$InformationBearingThing on the
            importance of distinguishing the many specializations of
            this collection from the many specializations of both
            #$AbstractInformationalThing (information which may be
            instantiated in  particular IBOs -- see
            #$instantiationOfAIT) and #$ConceptualWork (conceptual
            and/or artistic creations which may be instantiated in
            particular  IBOs -- see #$instantiationOfWork). An important
            specialization of this collection (which naturally includes
            most of the things asserted so far in the Cyc
            #$KnowledgeBase to be instances of
            #$InformationBearingObject) is #$HumanAccessibleIBO --
            objects which can be interpreted to yield information by
            #$Persons.  See also #$containsInformation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationBearingThing">
        <rdfs:label xml:lang="en">ibt</rdfs:label>
        <rdfs:comment>A collection of spatially-localized  individuals,
            including various actions and events as well as physical
            objects.  Each instance of #$InformationBearingThing (or
            IBT ) is an  item that contains information (for an agent
            who knows how to interpret it).   Examples: a copy of the
            novel _Moby_Dick_; a signal buoy; a photograph; an  elevator
            sign in Braille; a map; a US dollar bill; a resume; a
            musical score;  copies of the #$CycProgram.  For
            representations of the propositional content  of information
            bearing things, see #$PropositionalInformationThing; but
            note  that not all IBTs have a propositional content (cf.
            #$ArtObject).  An important specialization of
            #$InformationBearingThing is #$InformationBearingObject,
            which comprises all of those IBTs that are also physical
            objects (i.e.  #$PartiallyTangibles).  Though often a subtle
            task in particular contexts,  it is important to distinguish
            the various specializations of  #$InformationBearingThing
            from those of #$AbstractInformationalThing (whose  instances
            are the chunks of information instantiated in particular
            IBTs;  see #$instantiationOfAIT) and from those of
            #$ConceptualWork (whose  instances are the conceptual or
            artistic creations that are instantiated  in particular
            IBTs; see #$instantiationOfWork).  For instance,
            #$TextString  is a specialization of
            #$AbstractInformationalThing, #$TextualMaterial is  a
            specialization of #$InformationBearingThing, and
            #$TextualPCW is a  specialization of #$ConceptualWork; to
            conflate any of these with  another would be to make a
            category error .  Also note that events  in which
            information is transferred (see #$InformationTransferEvent)
            are  not considered instances of #$InformationBearingThing.
            Rather, such  transfer events have as one of their
            participants (see #$actors) some  instance of
            #$InformationBearingThing; though in cases where IBTs are
            themselves events this will require distinguishing very
            finely between  the event that encodes the information and
            the event that is the information transfer.  See also the
            sense-modality-based specializations,
            #$SoundInformationBearingThing and #$VisualInformationBearingThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>

        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationBearingWavePropagation">
        <rdfs:label xml:lang="en">information bearing wave propagation</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationBearingThing
            and #$WavePropagation.  Each instance of
            #$InformationBearingWavePropagation is a wave propagation
            event that carries information for interpreters who
            understand its conventions.  Notable specializations of
            #$InformationBearingWavePropagation include #$Music,
            #$VisualImage, and #$Utterance-IBT.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Signal"/>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationGathering">
        <rdfs:label xml:lang="en">gathering information</rdfs:label>
        <rdfs:comment>A specialization of both #$Action and
            #$InformationTransferEvent.  In each instance of
            #$InformationGathering, some instance of #$Agent gathers
            information about something.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationRecordingDevice">
        <rdfs:label xml:lang="en">#$InformationRecordingDevice</rdfs:label>
        <rdfs:comment>#$InformationRecordingDevice is a specialization
            of #$PhysicalDevice.  Each instance of
            #$InformationRecordingDevice is a device used for the
            recording of sensory information (i.e., audio and visual,
            but not encoded as character strings.)  So an instance would
            be your answering machine at home (an #$AnsweringMachine),
            your cam-corder (a #$VideoCamera), but NOT your address book
            or your copy of the Yellow Pages.   Note: A borderline case
            is a #$PersonalDigitalAssistant (such as an Apple Newton)
            used to record handwritten script.  If it then processes
            that information and converts it to ASCII characters, it has
            stopped being an #$InformationRecordingDevice as this
            constant is defined.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationRecordingProcess">
        <rdfs:label xml:lang="en">information-recording processes</rdfs:label>
        <rdfs:comment>A collection of events in which information is
            recorded, using an #$InformationRecordingDevice.  Every
            #$InformationRecordingProcess produces an #$InformationBearingObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBOCreation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationRemoving">
        <rdfs:label xml:lang="en">removing information</rdfs:label>
        <rdfs:comment>A specialization of #$InformationUpdating.  Each
            instance of #$InformationRemoving is an event in which
            information is removed from some information-bearing object
            (see the collection #$InformationBearingObject), so that
            after the event the remaining information content of the
            information-bearing object is only a proper part of what it
            started out to be.  Notable specializations of
            #$InformationRemoving include #$DeletingAFile and #$EliminatingAComputerVirus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationUpdating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationStore">
        <rdfs:label xml:lang="en">#$InformationStore</rdfs:label>
        <rdfs:comment>A specialization of
            #$PartiallyIntangibleIndividual.  Each instance of
            #$InformationStore is a tangible or intangible, concrete or
            abstract repository of information.  Wholly intangible
            instances of this collection include instances of
            #$AbstractInformationalThing and
            #$PropositionalInformationThing.  Some instances of
            #$InformationStore -- namely, instances of
            #$InformationBearingObject, such as copies of a newspaper at
            a newsstand -- are only partially intangible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationTransferEvent">
        <rdfs:label xml:lang="en">information transfers</rdfs:label>
        <rdfs:comment>A specialization of #$GeneralizedTransfer.  Each
            instance of #$InformationTransferEvent is an event in which
            information is transferred from a source
            (#$informationOrigin) to one or more destinations
            (#$informationDestination), where the source and the various
            destinations are either intelligent agents or
            #$InformationBearingThings (IBTs).  Examples include reading
            a book (transfer of information from the book to the
            reader), saying something to someone (transfer of
            information from the speaker to the listener), machine
            translation (transfer of information from an encoded IBT in
            the source language to an encoded IBT in the target
            language), OCR scanning (transfer of information from a
            visual information source to another IBT in a different
            format), carving initials in a tree (transfer of information
            from an agent to an IBT),  and making a speech (transfer of
            information from an agent to other agents).  See also the
            specialization #$InformationTransferPhysicalEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationTransferPhysicalEvent">
        <rdfs:label xml:lang="en">physical transfers of information</rdfs:label>
        <rdfs:comment>A specialization of #$InformationTransferEvent
            (q.v.) and #$PhysicalEvent each instance of which involves
            at least one #$PartiallyTangible, either as its source (see
            #$informationOrigin), as (at least one of) its
            destination(s) (see #$informationDestination), or both.  (A
            partially tangible source or destination, note, must
            pre-exist the transfer event.)  Indeed, most if not all
            actual information transfer events are physical events; but
            #$InformationTransferPhysicalEvent does in principle exclude
            those such as telepathic communications between disembodied
            spirits or other #$Agent-Intangibles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InformationUpdating">
        <rdfs:label xml:lang="en">information updating</rdfs:label>
        <rdfs:comment>A specialization of
            #$InformationTransferPhysicalEvent.  Each instance of
            #$InformationUpdating is an event in which the information
            content of an information bearing object (see the collection
            #$InformationBearingObject) is altered, either by removing
            or by adding information.  Important specializations of
            #$InformationUpdating are #$InformationRemoving and #$InformationAdding.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferPhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ingesting">
        <rdfs:label xml:lang="en">#$Ingesting</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalIntakeEvent.  Each
            instance of #$Ingesting is a complex process in which a
            thing is brought into some organism&apos;s mouth from the
            outside, is swallowed, and is moved to the organism&apos;s
            stomach.  Every instance of #$Ingesting has among its
            #$subEvents an instance of #$Swallowing which occurs after
            the intake (thus, although a particular chewing of gum is a
            #$BiologicalIntakeEvent, it is not an #$Ingesting unless the
            gum is swallowed.)  An ingesting event ends when the
            ingested stuff reaches the ingester&apos;s stomach (where an
            instance of #$DigestionEvent begins, provided that what was
            ingested is an instance of #$EdibleStuff).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
        <rdfs:subClassOf rdf:resource="#PassingThroughPortal"/>
        <rdfs:subClassOf rdf:resource="#UsingAnObject"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#EnclosingSomething"/>
        <rdfs:subClassOf rdf:resource="#PuttingSomethingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ingratitude">
        <rdfs:label xml:lang="en">ingratitude</rdfs:label>
        <rdfs:comment>Feeling of one that shows poor return for kindness
            received. Ungratefulness</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Inhaling">
        <rdfs:label xml:lang="en">inhalations</rdfs:label>
        <rdfs:comment>A specialization of both #$PassingThroughPortal
            and #$BiologicalIntakeEvent.  Each instance of #$Inhaling is
            a bodily event in which an animal takes air in through an
            appropriate portal (e.g., its mouth or nose) and passes it
            into its lungs.  Each instance of #$Breathing (q.v.) has an
            instance of #$Inhaling as a sub-event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
        <rdfs:subClassOf rdf:resource="#PassingThroughPortal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InherentlyVulgarWord">
        <rdfs:label xml:lang="en">inherently vulgar word</rdfs:label>
        <rdfs:comment>The collection of all words that are considered
            vulgar, no matter in what sense they are used. These are
            words that most people avoid saying in front of their
            mothers or religious leaders, in a job interview, or on a
            first date, and some people avoid using altogether. These
            words have inherent shock value in most social settings, and
            heavy use of them can cause a television show or movie to be
            rated inappropriate for young viewers. Words like
            #$Ass-TheWord and #$Bitch-TheWord are not
            #$InherentlyVulgarWords, because they have word senses that
            are not vulgar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Innocence">
        <rdfs:label xml:lang="en">innocence</rdfs:label>
        <rdfs:comment>Feeling of freedom from guilt or sin</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="InorganicStuff">
        <rdfs:label xml:lang="en">inorganic substances</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing.  Each
            instance of #$InorganicStuff is a tangible thing which is
            wholly composed of one or more types of inorganic
            #$Molecule.  Instances of #$InorganicStuff usually
            didn&apos;t originate as parts or products of living things.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Insect">
        <rdfs:label xml:lang="en">#$Insect</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass, and a
            specialization of #$Arthropod.  Each instance of #$Insect is
            an arthropod whose body is segmented into thirds, with three
            pairs of legs, a pair of antennae, and sometimes two pairs
            of wings.  Specializations of #$Insect include #$Bee, #$Ant,
            and #$Butterfly.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Arthropod"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InsideSurface">
        <rdfs:label xml:lang="en">inside surface</rdfs:label>
        <rdfs:comment>The collection of all inside surfaces of (surfaces
            of the interiors of) tangible things.  The tangible thing
            may have a #$Cavity or several cavities or passageways.
            Often the tangible thing can be thought of as a container of
            some sort.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Inspiration-Emotion">
        <rdfs:label xml:lang="en">inspiration - emotion</rdfs:label>
        <rdfs:comment>The seemingly involuntary element where intellect
            and emotions are clearer and quicker</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="InstanceTypeTernaryRuleMacroPredicate">
        <rdfs:label xml:lang="en">instance-type ternary rule macro predicates</rdfs:label>
        <rdfs:comment>A specialization of #$RuleMacroPredicate and
            #$TernaryPredicate.  Each instance of
            #$InstanceTypeTernaryRuleMacroPredicate relates a collection
            in its third argument place to an instance of #$Thing in its
            second argument place via an instance of #$BinaryPredicate
            in its first argument place.  Examples of instances of this
            collection include #$relationInstanceExists and #$relationInstanceAll.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#RuleMacroPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Instructions">
        <rdfs:label xml:lang="en">#$Instructions</rdfs:label>
        <rdfs:comment>A specialization of #$PropositionalConceptualWork.
            Each instance of #$Instructions is an abstract work that
            outlines a sequence of tasks to be performed by an agent.
            Positive examples of instantiations are instructions on a
            food package, verbal instructions, a musical score.
            Illustrative specializations include
            #$DirectionsToGetSomewhere and #$InvestmentGuide.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InsuranceOrganization">
        <rdfs:label xml:lang="en">insurance organization</rdfs:label>
        <rdfs:comment>Each instance of #$InsuranceOrganization is an
            #$Organization that is primarily or significantly engaged in
            the insurance industry or whose activities focus on that
            industry.  Both #$AetnaLifeAndCasualty-Corporation and The
            Texas State Board of Insurance would be instances of #$InsuranceOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InsuranceProvider">
        <rdfs:label xml:lang="en">insurances</rdfs:label>
        <rdfs:comment>A collection of organizations; a subcollection of
            #$ServiceOrganization. An instance of #$InsuranceProvider is
            an organization whose #$MainFunction is to provide financial
            and material protection to its clients in the event of
            sickness, death, natural disaster, loss, theft, lawsuits,
            etc. (Insurers may specialize in one or more of those
            areas.) Instances of #$InsuranceProvider may belong to
            either #$CommercialServiceOrganization or
            #$NonProfitOrganization (including insurance providers
            belonging to #$LegalGovernmentOrganization). Example
            instances include State Farm Insurance Co., Aetna Casualty
            Co., Lutheran Brotherhood, and all fifty members of U.S. #$StateMedicaidAdministrationOrganizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#InsuranceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Intangible">
        <rdfs:label xml:lang="en">#$Intangible</rdfs:label>
        <rdfs:comment>The collection of things that are not physical --
            are not made of, or encoded in, matter.  Every #$Collection
            is an #$Intangible (even if its instances are tangible), and
            so are some #$Individuals.  Caution: do not confuse
            `tangibility&apos; with `perceivability&apos; -- humans can
            perceive light even though it&apos;s intangible--at least in
            a sense.  For more on this issue, see the relevant #$cyclistNotes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>

    </owl:Class>
    <owl:Class rdf:ID="IntangibleExistingThing">
        <rdfs:label xml:lang="en">#$IntangibleExistingThing</rdfs:label>
        <rdfs:comment>A specialization of both #$IntangibleIndividual
            and #$SomethingExisting.  Instances of
            #$IntangibleExistingThing exist stably in time (unlike
            instances of #$Event), but lack any material parts (unlike
            instances of #$PartiallyTangible). Notable specializations
            of #$IntangibleExistingThing include #$DevisedPracticeOrWork
            and #$Agreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
    </owl:Class>
    <owl:Class rdf:ID="IntangibleIndividual">
        <rdfs:label xml:lang="en">intangible individual objects</rdfs:label>
        <rdfs:comment>The collection of wholly intangible   individuals,
            a specialization of both #$Intangible and #$Individual.
            Instances of #$IntangibleIndividual are immaterial, and thus
            do not have mass, color, or other tangible qualities.
            Examples include mathematical objects (such as numbers,
            functions, and relations), attributes, time intervals, space
            regions, and events.  Excluded are sets and collections
            because, although intangible, they are not individuals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntangibleObjectPredicate">
        <rdfs:label xml:lang="en">#$IntangibleObjectPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates used to ascribe
            properties to intangible objects.  As such, each instance of
            #$IntangibleObjectPredicate has at least one argument place
            (quite often including the first) constrained to accept only
            instances of #$IntangibleIndividual or some subcollection
            thereof.  Examples include #$arg3Isa and #$religionOfRule.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="IntangibleObjectRelatingPredicate">
        <rdfs:label xml:lang="en">intangible object relating predicate</rdfs:label>
        <rdfs:comment>A collection of #$IntangibleObjectPredicates used
            to assert relationships between intangible objects.  As
            such, each instance of #$IntangibleObjectRelatingPredicate
            has at least two of its argument-places constrained (see
            #$argIsa) to instances of #$IntangibleIndividual or some
            subcollection thereof. Examples include #$subAlgorithms,
            #$maxQuantValue, #$meanQuantValue, #$expectedValue,
            #$derivativesOfFunction, #$rangeOfDistribution,
            #$inverseQuantFunctions-Nonsymmetric, and #$lessLikelyThan.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Integer">
        <rdfs:label xml:lang="en">integers</rdfs:label>
        <rdfs:comment>A specialization of #$RationalNumber.  Each
            instance of #$Integer is a whole number with no fractional
            remainder.  An integer may be positive (e.g. 42), zero, or
            negative (e.g. -42).    Note that, in the KB browser, a
            fixed- or floating-point number representation such as
            `42.00&apos; should not be assumed to refer to the integer
            42. For it might only appear to correspond to that integer
            within the tolerance of its representation, and might in
            fact be an approximation to a non-integer number  such as
            42.0003.   Also note that, unlike #$Integer, #$SubLInteger
            (q.v.) is a collection of integer-denoting expressions in
            the CycL language rather than a collection of integers
            themselves.  Still, (#$genls #$SubLInteger #$Integer) holds,
            due to the fact that #$SubLInteger is a #$quotedCollection (q.v).)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#RationalNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="IntegerExtent">
        <rdfs:label xml:lang="en">integer extents</rdfs:label>
        <rdfs:comment>A specialization of #$Interval-Bounded and
            #$IntervalOnNumberLine.  Each instance of #$IntegerExtent is
            a bounded interval  which includes a contiguous set of
            integers (see #$Integer) and which includes nothing which is
            not an integer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntervalOnNumberLine"/>
        <rdfs:subClassOf rdf:resource="#Interval-Bounded"/>
    </owl:Class>
    <owl:Class rdf:ID="IntegerObject">
        <rdfs:label xml:lang="en">integer object</rdfs:label>
        <rdfs:comment>#$IntegerObject is the signed version of the
            integer  simple data type in C-like languages. Normally its
            size in memory is equal to the  word size of the particular implementation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntegerTypeByRange">
        <rdfs:label xml:lang="en">#$IntegerTypeByRange</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$IntegerTypeByRange is a collection of integers in a
            particular range from a minimal element to a maximal
            element.  For example, (#$IntegerFromFn 1 10), the
            collection of integers from 1 to 10 would be a member, since
            it has a minimal element, a maximal element, and all
            integers in between are instances of the collection.  See
            also #$integerBetween.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MeasurableScalarIntervalType"/>
    </owl:Class>
    <owl:Class rdf:ID="IntelligentAgent">
        <rdfs:label xml:lang="en">intelligent agents</rdfs:label>
        <rdfs:comment>A specialization of #$Agent-Generic (q.v.) whose
            instances are all agents capable of knowing and acting, and
            of employing their knowledge in their actions.  An
            intelligent agent #$knowsAbout certain things, and having
            #$beliefs (and possibly #$goals) concerning those things may
            influence its actions.  As with agents generally, an
            intelligent agent might be a single individual or might
            consist of a group of individual agents (see
            #$MultiIndividualAgent).  Thus persons are intelligent
            agents, and so are certain social beings like business and
            government organizations. Some non-human instances of
            #$Vertebrate that seem to be sentient and somewhat
            intelligent, such as (arguably) dogs and horses, can also be
            considered intelligent agents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntentionalMentalEvent">
        <rdfs:label xml:lang="en">#$IntentionalMentalEvent</rdfs:label>
        <rdfs:comment>A collection of (at least partially) mental events
            whose instances are characterized by intentionality: they
            are  of  or  about  some thing external to themselves.
            Thoughts and acts of perception are two common types of
            intentional mental events.  Thus, a particular act of
            thinking  about the Eiffel Tower and a particular act of
            seeing the  Eiffel Tower are both intentional mental events,
            each having  (at least) the Eiffel Tower as their object.
            Any thing whatsoever  can in principle be the object of an
            intentional mental event:  I can think about a certain
            physical object, an event, a relation,  an attribute, a
            proposition, a mental state (my own or another&apos;s),  a
            set, a collection, or anything else.  Mental events that are
            _not_ intentional, and thus not in this collection, include
            itches, pain experiences, and at least some instance of
            #$ExperiencingEmotion.  Note that, although they are
            indirectly  related (see e.g. #$PurposefulMentalActivity),
            the sense of   intentional  described above is not to be
            confused with its  other sense as an antonym of  accidental
            .  See also  #$IntentionalMentalState,
            #$objectOfMentalSituation, and  #$thinksAbout.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntentionalMentalSituation"/>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntentionalMentalSituation">
        <rdfs:label xml:lang="en">#$IntentionalMentalSituation</rdfs:label>
        <rdfs:comment>A collection of mental states and events whose
            instances are characterized by intentionality: they  are  of
            or  about  some thing external to themselves. Thoughts, acts
            of perception, and propositional attitudes are three common
            types of intentional mental situations.  Thus, a particular
            act of thinking about the Eiffel Tower, an event  of seeing
            the Eiffel Tower, and a given subject&apos;s believing  that
            the Eiffel Tower is in Paris are three intentional mental
            situations, all having (at least) the Eiffel Tower as their
            object.   Any thing whatsoever can in principle be the
            object of an  intentional mental situation: I can think
            about a given physical  object, an event, a relation, an
            attribute, a proposition, a  mental state (my own or
            another&apos;s), a set, a collection, or  anything else.
            (Note that the above mentioned belief about the  Eiffel
            Tower and Paris is arguably not itself about the
            _proposition_ that the Eiffel Tower is in Paris.  But now
            note  that my belief in the content of the sentence
            preceding this  one clearly _is_, in part, about that
            proposition.)  Mental  situations that are _not_
            intentional, and thus not in this  collection, include
            moods, itches, and pain experiences.  Note  that, although
            they are indirectly related (see e.g.
            #$PurposefulMentalActivity), the sense of  intentional
            described above is not to be confused with its other sense
            as  an antonym of  accidental .  See also
            #$IntentionalMentalEvent, #$IntentionalMentalState,
            #$objectOfMentalSituation, and  #$thinksAbout.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MentalSituation-SingleSubject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InterActorSlot">
        <rdfs:label xml:lang="en">inter-actor predicates</rdfs:label>
        <rdfs:comment>A specialization of #$BinaryPredicate.  Each
            instance of #$InterActorSlot is a binary predicate that
            relates two individuals who are participants in some
            particular event.  For example, #$authorOfPublication-IBT is
            an instance of #$InterActorSlot, since
            (#$authorOfPublication-IBT X Y) implies the existence of a
            #$Writing event in which X is the author and Y is the book
            written.  Other examples of #$InterActorSlot are
            #$agreeingAgents, #$artisticWorksCreated, #$spouse, and #$wornOn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterArgConstraintPredicate">
        <rdfs:label xml:lang="en">inter arg constraint predicate</rdfs:label>
        <rdfs:comment>The collection of  #$ArgConstraintPredicates used
            to put conditional constraints on polyadic relations in
            regard to two of their argument-places (or, in a few cases,
            to put a conditional constraint on relations in regard to
            two different features of one argument-place).  Each
            instance of #$InterArgConstraintPredicate specifies, with
            respect to a given #$Relation, that one of its
            argument-places (the  dependent  one) has a certain feature,
            contingent upon one (usually a different one) of its
            argument-place&apos;s (the  independent  one&apos;s) having
            a certain (possibly different) feature.  The  features  in
            question might be either argument-type specifications (see
            #$InterArgTypePredicate) or format specifications (see
            #$InterArgFormatPredicate).  An inter-argument constraint
            predicate PRED has argument-places for designating the
            relation and the two features; the identities of the
            relation&apos;s corresponding dependent and independent
            argument-places might be fixed (as in #$interArgIsa1-2) or
            might be variable and specified (by number) via two
            additional argument-places of PRED&apos;s (as in #$interArgIsa).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterArgFormatPredicate">
        <rdfs:label xml:lang="en">inter-arg format predicates</rdfs:label>
        <rdfs:comment>The subcollection of both
            #$InterArgConstraintPredicate and #$ArgFormatPredicate
            (qq.v.) whose instances are used to specify, for a given
            predicate PRED, a certain #$Format requirement on one of
            PRED&apos;s arguments (the  dependent  one), contingent upon
            one (usually, but not always, a different one) of
            PRED&apos;s arguments (the  independent  one) being an
            instance of (#$isa) a certain collection.  Currently, each
            instance of #$InterArgFormatPredicate is ternary, where its
            first argument (or  arg1 ) is the predicate PRED upon which
            the constraint is being placed, its arg2 the collection
            serving as the #$isa condition on PRED&apos;s independent
            argument, and its arg3 the #$Format that PRED&apos;s
            dependent argument is (conditionally) constrained to have.
            The (numerically-specified) identities of the arguments of
            PRED&apos;s that are to serve as the independent and
            dependent arguments are fixed for each instance of   #$InterArgFormatPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralEntryFormatPredicate"/>
        <rdfs:subClassOf rdf:resource="#InterArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterArgIsaPredicate">
        <rdfs:label xml:lang="en">inter-arg isa predicates</rdfs:label>
        <rdfs:comment>The subcollection of both #$InterArgTypePredicate
            and #$ArgIsaPredicate (qq.v.) whose instances are used to
            put conditional #$isa based argument-type constraints on
            polyadic relations in regards to two of their
            argument-places.  Each instance of #$InterArgIsaPredicate
            specifies, with respect to a given #$Relation, that one of
            its arguments (the  dependent  one) must be an instance of
            (#$isa) a certain collection, contingent upon another of its
            argument&apos;s (the  independent  one&apos;s) being an
            instance of a certain (possibly different) collection.  An
            inter-argument-isa predicate PRED has argument-places for
            designating the relation and the two collections serving as
            argument-types; the (numerically-specified) identities of
            the relation&apos;s corresponding dependent and independent
            arguments is in most cases fixed (as in #$interArgIsa1-2),
            but is in some cases variable and specified via two
            additional argument-places of PRED&apos;s (as in
            #$interArgIsa).  In cases of the former sort, where the
            relation&apos;s  argument-places are fixed, PRED is a
            #$TernaryPredicate that takes as it first argument (or  arg1
            ) a relation, as its arg2 the type specified for the
            relation&apos;s independent argument, and as its arg3 the
            type specified (contingently) for the dependent argument.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InterArgTypePredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgIsaPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterArgTypePredicate">
        <rdfs:label xml:lang="en">predicates specifying inter-argument types</rdfs:label>
        <rdfs:comment>The subcollection of both
            #$InterArgConstraintPredicate and #$ArgTypePredicate (qq.v.)
            whose instances are used to put conditional argument-type
            constraints on polyadic relations in regards to two of their
            argument-places.  Each instance of #$InterArgTypePredicate
            specifies, with respect to a given #$Relation, that one of
            its arguments (the  dependent  one) must be of a certain
            type, contingent upon another of its argument&apos;s (the
            independent  one&apos;s) being of a certain (possibly
            different) type.  Depending on the particular inter-arg-type
            predicate, an argument&apos;s  type  might be specified in
            terms of #$isa or #$genls or #$genlAttributes  (for more
            details see the nearest specializations of
            #$ArgTypePredicate and  #$InterArgTypePredicate).  An
            inter-argument-type predicate PRED has argument-places for
            designating the relation and the two argument-types; the
            (numerically-specified) identities of the relation&apos;s
            corresponding dependent and independent arguments is in most
            cases fixed (as in #$interArgIsa1-2), but is in some cases
            variable and specified via two additional argument-places of
            PRED&apos;s (as in #$interArgIsa).  In cases of the former
            sort, where the relation&apos;s  argument-places are fixed,
            PRED is a #$TernaryPredicate that takes as it first argument
            (or  arg1 ) a relation, as its arg2 the type specified for
            the relation&apos;s independent argument, and as its arg3
            the type specified (contingently) for the dependent argument.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InterArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgTypePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterExistingObjectPredicate">
        <rdfs:label xml:lang="en">predicates relating existing things</rdfs:label>
        <rdfs:comment>A specialization of both #$ObjectPredicate (q.v.)
            and #$BinaryPredicate.  Each instance of
            #$InterExistingObjectPredicate is a binary predicate that
            only relates pairs of #$SomethingExistings to each other.
            Thus both argument-places of such a predicate are
            constrained to instances (see #$argIsa) of
            #$SomethingExisting or some specialization thereof.
            Instances of #$InterExistingObjectPredicate include
            #$derivedFrom, #$cohabitants, #$capitalCity, and #$electricallyConnectedTo.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterPersonalRelationSlot">
        <rdfs:label xml:lang="en">human relationships (types of things)</rdfs:label>
        <rdfs:comment>An instance of #$PredicateCategory, and a
            specialization of #$InterExistingObjectPredicate.  Each
            instance of #$InterPersonalRelationSlot is a binary
            predicate used to represent relationships between two
            instances of #$Animal.  Instances of
            #$InterPersonalRelationSlot include #$mate, #$friends, and #$boss.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InterExistingObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="InterconvertibleUnitType">
        <rdfs:label xml:lang="en">#$InterconvertibleUnitType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$FunctionCategory.  Each instance IUT of
            #$InterconvertibleUnitType is a collection of
            #$UnitOfMeasure (q.v.) functions that are interconvertible.
            That is, each instance of IUT is a function used to measure
            quantities in units that are convertible into units measured
            by any of the other functions in IUT.  Examples of
            #$InterconvertibleUnitTypes include #$UnitOfTime,
            #$UnitOfDistance and #$UnitOfComputerStorageCapacity.  Thus,
            #$UnitOfTime includes the functions #$HoursDuration and
            #$MinutesDuration, and any duration denoted by applying one
            of these functions can also be expressed in terms of the
            other; e.g. (#$HoursDuration 1) equals (#$MinutesDuration
            60).  Note that not all specializations of #$UnitOfMeasure
            constitute interconvertible types.  For example,
            #$UnitOfRate has both #$TimesPerDay and #$MilesPerHour as
            instances;  but the quantities returned by either one of
            these functions are not convertible  into quantities
            returned by the other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionCategory"/>
    </owl:Class>
    <owl:Class rdf:ID="Interest-Feeling">
        <rdfs:label xml:lang="en">interest - feeling</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Interjection-SpeechPart">
        <rdfs:label xml:lang="en">interjections</rdfs:label>
        <rdfs:comment>The collection of all interjections, also called
            exclamations. Interjections often serve a purely pragmatic
            or discourse function,   and can often stand alone as
            utterances. Examples: &apos;ugh&apos;,
            &apos;abracadabra&apos;, and &apos;wow!&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InternalAnatomicalPart">
        <rdfs:label xml:lang="en">internal anatomical parts</rdfs:label>
        <rdfs:comment>#$InternalAnatomicalPart is a specialization of
            #$OrganismPart.  Each instance of #$InternalAnatomicalPart
            is a part of the internal anatomy of an organism.  Example
            subcollections include #$CirculatorySystem and #$MiddleEar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InternalCombustionPoweredDevice">
        <rdfs:label xml:lang="en">devices powered by an internal
            combustion engine</rdfs:label>
        <rdfs:comment>#$InternalCombustionPoweredDevice is a
            specialization of #$FuelPoweredDevice and
            #$SelfPoweredDevice.  Each instance of
            #$InternalCombustionPoweredDevice is a device powered by an
            internal combustion engine.  Notable specializations of
            #$InternalCombustionPoweredDevice include #$Motorcycle,
            #$Motorboat, and #$Bus-RoadVehicle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FuelPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#SelfPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InternalOrgan">
        <rdfs:label xml:lang="en">internal organs</rdfs:label>
        <rdfs:comment>The collection of organs which are internal body
            parts.  See #$InternalAnatomicalPart.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organ"/>
        <rdfs:subClassOf rdf:resource="#InternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InternationalOrganization">
        <rdfs:label xml:lang="en">international organization</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each instance of
            #$InternationalOrganization is an organization with
            international `scope&apos; -- that is, one which has
            substantial operations, physical facilities, or substantial
            membership in multiple countries.  International
            organizations may have persons, other organizations, or
            countries as members.  They may be political or commercial
            in nature.  International organizations with countries as
            members belong to the specialization
            #$InternationalOrganizationOfCountries.  Instances of
            #$InternationalOrganization include
            #$UnitedNationsOrganization, #$OPEC, and #$IBMInc.  See also #$internationalOrganizationMemberCountries.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InternationalOrganizationOfCountries">
        <rdfs:label xml:lang="en">international organization of countries</rdfs:label>
        <rdfs:comment>A collection of organizations; a specialization of
            #$InternationalOrganization.  Each instance of
            #$InternationalOrganizationOfCountries is an organization
            whose members are countries (as represented by their
            goverments).  Examples include the United Nations, NATO,
            SEATO, OAU, the League of Arab States, and OPEC.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternationalOrganization"/>
    </owl:Class>
    <owl:Class rdf:ID="InternationalWaters">
        <rdfs:label xml:lang="en">international waters</rdfs:label>
        <rdfs:comment>A specialization of #$BodyOfWater.  Each instance
            of #$InternationalWaters is a body of water that is
            considered to be accessible to international maritime
            traffic and trade.  International waters may be subject to
            the customs and laws of a particular country, or of the
            international community.  Examples include instances of
            #$ShippingLane-International, the #$HighSeas, and,
            ordinarily, territorial waters like (#$TerritorialSeaFn
            #$UnitedStatesOfAmerica), unless these have been closed to
            shipping in a particular context.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Interval-Bounded">
        <rdfs:label xml:lang="en">bounded intervals</rdfs:label>
        <rdfs:comment>A specialization of #$Interval-BoundedAbove and
            #$Interval-BoundedBelow.  Each instance of
            #$Interval-Bounded is an interval that has both upper and
            lower bounds.  Example: the interval comprised of real
            numbers from 3.5 to 4.5.  Note that #$Interval-Bounded is
            more general than #$IntegerExtent (q.v.) because
            #$Interval-Bounded includes dense, negative, imaginary and
            complex ranges and point values.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Interval-BoundedBelow"/>
        <rdfs:subClassOf rdf:resource="#Interval-BoundedAbove"/>
    </owl:Class>
    <owl:Class rdf:ID="Interval-BoundedAbove">
        <rdfs:label xml:lang="en">intervals that is bounded at the top</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$Interval-BoundedAbove is an interval that has
            an upper bound.  Example: the interval comprised by integers
            less than 10.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Interval-BoundedBelow">
        <rdfs:label xml:lang="en">intervals that is bounded at the bottom</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$Interval-BoundedBelow is an interval that has
            a lower bound.  Example: the interval comprised of integers
            greater than 10.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Interval-UnboundedAbove">
        <rdfs:label xml:lang="en">intervals that is unbounded at the top</rdfs:label>
        <rdfs:comment>A subcollection of #$ScalarIntervals that is not
            bounded at the top. It is disjoint with #$Interval-BoundedAbove.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Interval-UnboundedBelow">
        <rdfs:label xml:lang="en">intervals that is unbounded at the bottom</rdfs:label>
        <rdfs:comment>A subcollection of #$ScalarIntervals that is not
            bounded at the bottom. It is disjoint with #$Interval-BoundedBelow.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="IntervalBasedQuantitySlot">
        <rdfs:label xml:lang="en">interval based quantity slot</rdfs:label>
        <rdfs:comment>A specialization of #$QuantitySlot.  Each instance
            of #$IntervalBasedQuantitySlot is a binary predicate used to
            relate an object to a measurable quantity (that is, an
            instance of #$ScalarInterval).  The second argument to an
            instance of #$IntervalBasedQuantitySlot must be an instance
            of #$ScalarInterval; consequently, the #$arg2Isa for each
            instance of #$IntervalBasedQuantitySlot must be a
            specialization of #$ScalarInterval.  Each instance of
            #$IntervalBasedQuantitySlot has an #$arg2Format of
            #$IntervalEntry (q.v.); consequently, for each
            #$IntervalBasedQuantitySlot PRED, there can be multiple
            assertions of the form (PRED OBJ QUANT-1), (PRED OBJ
            QUANT-2), ..., (PRED OBJ QUANT-n), as long as the
            #$ScalarIntervals QUANT-1, QUANT-2, ..., QUANT-n overlap
            (see the predicate #$overlapsIntervals).  For example, one
            could assert both (#$heightOfObject OBJ
            (#$Foot-UnitOfMeasure 3 4)) and (#$heightOfObject OBJ
            (#$Foot-UnitOfMeasure 2 6)), since the two intervals in
            question overlap.  However, one could not assert both
            (#$heightOfObject OBJ (#$Foot-UnitOfMeasure 3 4)) and
            (#$heightOfObject OBJ (#$Foot-UnitOfMeasure 6)) in the same
            context, since these two intervals do not overlap.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QuantitySlot"/>
        <rdfs:subClassOf rdf:resource="#FunctionalSlot"/>
    </owl:Class>
    <owl:Class rdf:ID="IntervalOnNumberLine">
        <rdfs:label xml:lang="en">intervals (types of things)</rdfs:label>
        <rdfs:comment>A specialization of both #$ScalarInterval and
            #$NumericValue.   Each instance of #$IntervalOnNumberLine is
            an interval on the real number line.  For example, the
            phrase `numbers greater than zero  and less than or equal to
            10&apos; describes such an interval.  A common  special case
            of such an interval is that of a single point on the real
            number line, i.e. a particular number, such as five or 25.3.
            Note the interval need not be contiguous; e.g. the phrase
            `even integers  between Pi and the square root of 1000&apos;
            describes a legitimate  instance of #$IntervalOnNumberLine.
            The collection #$RealNumber  is itself a specialization of
            #$IntervalOnNumberLine since each  real number is itself a
            (degenerate) interval on the real number  line.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Interviewing">
        <rdfs:label xml:lang="en">interviewing</rdfs:label>
        <rdfs:comment>The collection of events in which one or more
            agents interviews one or more other agents for the purpose
            of gathering information (usually about the interviewees, or
            about something in which they have a vested interest).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationGathering"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Conversation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntransitiveFrame">
        <rdfs:label xml:lang="en">intransitive frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames for words that can be used
            intransitively, that is, without any complements at all.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntrinsicAxisOfObject">
        <rdfs:label xml:lang="en">intrinsic axes</rdfs:label>
        <rdfs:comment>The collection of all intrinsic axes of objects
            (where those objects can be either spatially localized or
            abstract), being the conventional or obvious axes depending
            on shape, movement or function of the object.  For example,
            for a chest-of-drawers, the intrinsic axes are
            top-to-bottom, side-to-side, and front-to-back.  See also
            #$AxisFn.  Each intrinsic axis is a direction relative to
            the object&apos;s orientation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Axis"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="IntrinsicStateChangeEvent">
        <rdfs:label xml:lang="en">events that inherently involves a
            change of state</rdfs:label>
        <rdfs:comment>A specialization of #$Event-Localized. Each
            instance of #$IntrinsicStateChangeEvent is an event
            characterized primarily by a change in some intrinsic
            property of at least one main actor involved in the event.
            Such intrinsic changes may include changes of a thing&apos;s
            color, temperature, device state, or size.  Events where the
            main change is extrinsic (such as a change in location or
            ownership) are not instances of #$IntrinsicStateChangeEvent.
            In events which have more than one actor, the event may be
            an #$IntrinsicStateChangeEvent for one actor but not for
            another.  For example, in a #$FasteningSafetyBelt event, the
            #$SafetySeatBelt (the device used) goes from unconnected to
            connected (to itself), which is an intrinsic change;
            however, the agent who does the fastening does not change
            intrinsically, but only in his configuration to the belt, an
            external object.  Another example: in a #$HairCuttingEvent,
            the hair that is barbered undergoes an
            #$IntrinsicStateChangeEvent due to its role in that kind of
            event, but the barber undergoes no intrinsic change due to
            the hair cutting.  Note that some events, such as an ice
            cube melting into a small puddle of water, could be
            represented either as an #$IntrinsicStateChangeEvent or as a
            #$PhysicalTransformationEvent, but not (within a single
            micro-theory) as both.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Invertebrate">
        <rdfs:label xml:lang="en">invertebrates</rdfs:label>
        <rdfs:comment>A specialization of #$Poikilotherm.  Each instance
            of #$Invertebrate is an animal that lacks a backbone.
            #$Invertebrate includes insects, molluscs, sea squirts,
            worms (in a large variety of worm phyla), and many others.
            Note: Although #$Invertebrate is a scientific category, it
            is not a standard taxon in the biological taxonomy, hence it
            is not an instance of #$BiologicalTaxon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrontAndBackSidedObject"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Poikilotherm"/>
        <rdfs:subClassOf rdf:resource="#WildAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Investigation">
        <rdfs:label xml:lang="en">#$Investigation</rdfs:label>
        <rdfs:comment>Collection of all instances of human inquiry where
            what is being sought is a deeper understanding of the nature
            of some #$Thing.  The subject of investigation could in
            principle be any one of a wide variety of entities: a
            philosophical problem, a criminal act, a natural phenomenon,
            etc..  The phenomenon under investigation may be actual or
            merely putative within the context of the representation.
            Also, the nature of the thing being investigated may be
            substantially different from what the #$investigatingAgent
            believes it to be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="InvoluntaryBodyMovement">
        <rdfs:label xml:lang="en">involuntary body movements</rdfs:label>
        <rdfs:comment>The collection of involuntary bodily movements,
            those movements in which an #$Animal&apos;s body does the
            action automatically -- the agent&apos;s consent
            doesn&apos;t enter into it.  Subsets of
            #$InvoluntaryBodyMovement include #$Heartbeating,
            #$Sneezing, #$Snoring, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Irony">
        <rdfs:label xml:lang="en">irony</rdfs:label>
        <rdfs:comment>The feeling or tone of something that points to
            something that is the opposite of what is expected or
            considered appropriate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="IrreflexiveBinaryPredicate">
        <rdfs:label xml:lang="en">irreflexive binary predicates</rdfs:label>
        <rdfs:comment>The subcollection of #$BinaryPredicate all of
            whose instances are irreflexive relations.  A predicate PRED
            is an instance of #$IrreflexiveBinaryPredicate only if PRED
            is a binary predicate such that, for every thing X that
            satisfies the (single-argument) constraints on both of
            PRED&apos;s argument-places, (#$not (PRED X X)) holds.  To
            be precise: each such X must satisfy any and all constraints
            on PRED given by #$arg1Isa, #$arg2Isa, and (if PRED is a
            type-level  predicate) #$arg1Genls and #$arg2Genls.  (Thus,
            any inter-argument constraints (see
            #$InterArgConstraintPredicate) that PRED might have are
            _not_ taken into consideration.)   Examples of irreflexive
            binary predicates include #$spouse, #$causes-ThingProp,
            #$northOf, and #$temporallyDisjoint.  Note this additional
            necessary condition for irreflexivity: To rule out  vacuous
            cases, the single-argument constraints on PRED&apos;s first
            and second argument-places must be jointly satisfiable.
            Thus the collection(s) to which PRED is related via
            #$arg1Isa (#$arg1Genls) must not be disjoint from that (any
            of those) to which PRED is related via #$arg2Isa
            (#$arg2Genls).  See also the shared #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Irritation">
        <rdfs:label xml:lang="en">irritation</rdfs:label>
        <rdfs:comment>Emotion of a person who is disturbed, nervously
            upset, without equanimity or patience as a result of being
            forced to endure something that s/he finds obnoxious,
            offensive, displeasing or distasteful</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Frustration"/>
    </owl:Class>
    <owl:Class rdf:ID="Island">
        <rdfs:label xml:lang="en">#$Island</rdfs:label>
        <rdfs:comment>A specialization of both #$LandBody and
            #$IslandOrIslandGroup.   Each instance of #$Island is a body
            of land surrounded by water.   #$Islands are typically much
            smaller in area than (instances of  the similarly-defined
            collection of) #$TrueContinents (q.v.),  though it would be
            rather arbitrary to try to distinguish these  types on the
            basis of size alone.  (And note that
            #$ContinentOfAustralia, e.g., is both an
            #$IslandOrIslandGroup  (q.v.) and a #$TrueContinent.)  For
            groups of #$Islands that form  a geographical cluster, see #$Archipelago.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandBody"/>
        <rdfs:subClassOf rdf:resource="#IslandOrIslandGroup"/>
    </owl:Class>
    <owl:Class rdf:ID="IslandOrIslandGroup">
        <rdfs:label xml:lang="en">islands or island group</rdfs:label>
        <rdfs:comment>A specialization of #$LandTopographicalFeature.
            Each instance of #$IslandOrIslandGroup is either an island,
            a group of islands (such as an #$Archipelago), or an area
            that includes part but not all of an island (see
            #$IslandSubregion).  Instances of #$IslandOrIslandGroup
            include groups of scattered islands that do not form a
            natural geographical area; the chief reason for including
            such groups is that they are geopolitical areas and/or were
            historically significant.  Instances include
            #$FrenchPolynesia, #$Cyclades, #$OuterHebrides-Archipelago,
            and #$Grenadines-Islands.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ItineraryDocument">
        <rdfs:label xml:lang="en">itineraries</rdfs:label>
        <rdfs:comment>A specialization of #$ScheduleDocument. Each
            instance of #$ItineraryDocument is a document that contains
            information about a trip, including the time/location of
            each leg of the trip, accomodations on the trip, and so
            forth. See also the related constants #$ConsultingASchedule,
            #$MakingTravelArrangements, and #$travelLegs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScheduleDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="January">
        <rdfs:label xml:lang="en">January</rdfs:label>
        <rdfs:comment>The collection of all Januaries,   the first month
            of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JapanesePerson">
        <rdfs:label xml:lang="en">Japanese people</rdfs:label>
        <rdfs:comment>These are the people who live in or are from Japan</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Jealous">
        <rdfs:label xml:lang="en">agents who is jealous</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            jealous. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Resentful"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Jealousy">
        <rdfs:label xml:lang="en">#$Jealousy</rdfs:label>
        <rdfs:comment>Intolerance of rivalry; feeling of suspicion and
            resentment of one&apos;s rivals.  This is a collection; for
            an explanation of a typical #$FeelingType, see #$Happiness.
            Note: #$Envy is related to covetousness, wanting (perhaps in
            the future) what someone else has; #$Jealousy is related to
            possessiveness, wanting to keep what is (or was or could
            have been) already yours.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Resentment"/>
    </owl:Class>
    <owl:Class rdf:ID="Joint-AnimalBodyPart">
        <rdfs:label xml:lang="en">#$Joint-AnimalBodyPart</rdfs:label>
        <rdfs:comment>A specialization of #$Joint-Physical and
            #$AnimalBodyPart.  Each instance of #$Joint-AnimalBodyPart
            is a juncture between the ends or edges of abutting bones of
            an animal&apos;s skeleton.  Joints are of several types
            mechanically (e.g., ball-and-socket, hinged).  Many major
            joints function as hinges, in which the ends of the abutting
            bones are joined with ligaments and cushioned by cartilege.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Joint-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Joint-Physical">
        <rdfs:label xml:lang="en">joint - physical</rdfs:label>
        <rdfs:comment>A specialization of #$Connection-Physical.  Each
            instance of #$Joint-Physical is a group consisting of parts
            of at least two instances of #$PartiallyTangible that are
            mechanically connected in the manner of a joint. Examples
            include an elbow, and a hinge joining a door to a frame.
            While each #$Joint-Physical is an instance of
            #$PartiallyTangible, and therefore has a determinate spatial
            boundary, there are many cases in which there are no easily
            describable boundaries between the parts of joint-connected
            objects that are parts of the joint, and those which are
            not. For example, consider a ball and socket joint
            connecting some hip bone to a femur. The boundaries of this
            joint are obscure due to the fact that exact boundaries of
            the socket portion of the hip and the ball of the femur are
            obscure. In contrast, the spatial boundaries of a joint
            comprising a detachable hinge, such as those that typically
            connect a door to frame, are clear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Connection-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JudicialAgent">
        <rdfs:label xml:lang="en">adjudicator</rdfs:label>
        <rdfs:comment>A specialization of #$SocialBeing.  Each instance
            of #$JudicialAgent is a person or organization whose
            responsibility it is to judge or evaluate.  Instances of
            #$JudicialAgent include officials at sporting events (see
            the collection #$SportsOfficial), judges of various
            competitions, as well as judges in the legal sense (see the
            collection #$Judge).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="July">
        <rdfs:label xml:lang="en">July</rdfs:label>
        <rdfs:comment>The collection of all Julys,   the seventh month
            of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JunctionOfPaths">
        <rdfs:label xml:lang="en">junctions</rdfs:label>
        <rdfs:comment>The collection of junctions of paths, each
            junction being an arrangement of three or more distinct
            instances of #$Path-Customary such that they are all locally
            connected to each other by joining at the #$JunctionOfPaths.
            It includes the case of two or more paths that
            &apos;cross&apos; at a junction (because four path segments
            are thereby joined), but not the case in which the end of
            one path simply joins the end of another path, and no
            others.  For junctions in #$PathSystems, see
            #$junctionInSystem.  (Determining what constitutes a
            #$JunctionOfPaths depends on the #$PathTypes of the joined
            paths; if it is #$River then only a junction of rivers
            qualifies, not the place where a road joins a river.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArrangementOfLikeObjects"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JunctionOfPipes">
        <rdfs:label xml:lang="en">junctions of pipes</rdfs:label>
        <rdfs:comment>The collection of all junctions of pipes or tubes.
            Each junction permits flow between any two
            #$Pipe-GenericConduits joined at that junction.  At any
            #$JunctionOfPipes, three or more distinct (non-overlapping)
            lengths of #$Pipe-GenericConduit must be joined at their
            ends at the junction.   (Some of the so-joined pipes may
            loop back to the same junction.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#JunctionOfPaths"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="June">
        <rdfs:label xml:lang="en">June</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarMonth.  Each
            instance of #$June is the sixth month of a particular year
            in the #$GregorianCalendar (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JustificationStrength">
        <rdfs:label xml:lang="en">assertion justification strength</rdfs:label>
        <rdfs:comment>Instances of #$JustificationStrength are attribute
            values which indicate the argumentational strength of a
            justification for an assertion in a context.  The two most
            important examples are #$Monotonic-JustificationStrength and
            #$Default-JustificationStrength.  See also #$assertionStrength.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="JustificationTruth">
        <rdfs:label xml:lang="en">justification truths</rdfs:label>
        <rdfs:comment>Instances of #$JustificationTruth are attribute
            values which indicate the provability status of a
            justification for an assertion in a context.  The two most
            important examples are #$True-JustificationTruth and
            #$False-JustificationTruth.  See also #$assertionTruth.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="JuvenileAnimal">
        <rdfs:label xml:lang="en">young animals</rdfs:label>
        <rdfs:comment>An instance of #$LifeStageType, and a
            specialization of #$Animal.  #$JuvenileAnimal is the
            collection of all animals that are not fully grown nor fully mature.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KEFacilitationPredicate">
        <rdfs:label xml:lang="en">ke facilitation predicate</rdfs:label>
        <rdfs:comment>This collection of predicates contains all
            predicates whose primary function is the relation of
            knowledge entry principles, rules, suggestions, expectations
            and procedures to Cyc constants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="KeywordVariableTemplate">
        <rdfs:label xml:lang="en">keyword variable template</rdfs:label>
        <rdfs:comment>The collection of CycL expressions in which
            keywords are allowed and treated as variables.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GenericArgTemplate"/>
    </owl:Class>
    <owl:Class rdf:ID="Killing-Biological">
        <rdfs:label xml:lang="en">#$Killing-Biological</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PhysicalDestructionEvent and #$AnimalActivity.  In each
            instance of #$Killing-Biological, one living organism ends
            (either intentionally or unintentionally) the life of
            another living organism.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#HarmingAnAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KindLevelPredicate">
        <rdfs:label xml:lang="en">kind level predicate</rdfs:label>
        <rdfs:comment>`Kind-level&apos; predicates express properties
            that apply to kinds of individuals rather than to individual
            themselves. Example: being extinct, as in `the lynx is
            nearly extinct&apos; -- this is not a property of any
            individual lynx, but rather of the species. NOTE: a
            kind-level predicate may admit type-level arguments in some
            arg positions, or may admit both type- and instance-level
            arguments (such is the case with underspecified predicates).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="KineticEnergyPoweredDevice">
        <rdfs:label xml:lang="en">#$KineticEnergyPoweredDevice</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of  #$KineticEnergyPoweredDevice does not have any
            on-board   energy source incorporated into it, at least not
            one supplying  the bulk of the power requirements of the
            device.  Instead,  its operating power is supplied by the
            kinetic energy from  something else in motion -- such as
            animal muscle power  (including human labor), wind energy,
            or hydraulic power.   Specializations of this collection
            include #$Pulley and  #$Piano-Acoustic.  (Cf.
            #$SelfPoweredDevice, which includes,  e.g., electric organs.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KnotShape">
        <rdfs:label xml:lang="en">knots (types of things)</rdfs:label>
        <rdfs:comment>The collection of shapes commonly known as knots</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KnowledgeBase">
        <rdfs:label xml:lang="en">kb</rdfs:label>
        <rdfs:comment>A specialization of #$Database-AbstractContent.
            Each instance of #$KnowledgeBase is a database (considered
            as an abstract repository of information rather than a
            physical storage device) containing knowledge about at least
            part of the world.  A notable specialization of
            #$KnowledgeBase is #$CycKB, the collection of all Cyc
            knowledge bases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Database-AbstractContent"/>
        <rdfs:subClassOf rdf:resource="#ClassificationSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KnowledgePackage-CW">
        <rdfs:label xml:lang="en">knowledge package - c w</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="KoreanPerson">
        <rdfs:label xml:lang="en">#$KoreanPerson</rdfs:label>
        <rdfs:comment>These are the people who live in or are from Korea
            (either north or south).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Lake">
        <rdfs:label xml:lang="en">lakes</rdfs:label>
        <rdfs:comment>A specialization of #$BodyOfWater.  Each instance
            of #$Lake is a land-locked body of water, typically but not
            necessarily of freshwater.  Two important specializations
            are #$FreshWaterLake (instances of which are fresh-water
            lakes) and #$InlandSea (instances of which are salt-water
            lakes).  Examples include #$LakeMaracaibo, #$LakeWinnipeg,
            #$LakeTanganyika, #$LochNess-Lake, #$LakeErie, #$LakeTahoe,
            #$CaspianSea, and #$DeadSea.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LandBody">
        <rdfs:label xml:lang="en">landmasses</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            instance of #$LandBody is a cohesive chunk of land
            surrounded by one or more bordering bodies of water.  Types
            of #$LandBody include the specializations #$Island and
            #$TrueContinent.  Instances include #$ContinentOfAustralia,
            #$Trinidad-Island, and #$Crete-Island-Greece.  Areas of land
            defined by human occupation or political boundaries, for
            example, #$NorthernCalifornia or #$NorthernIreland, are
            instances of #$GeographicalRegion, but not of #$LandBody.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LandStuff">
        <rdfs:label xml:lang="en">#$LandStuff</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing-Natural.
            Each instance of #$LandStuff is a portion of the stuff that
            the ground of a planet (at or near its land surface) is made
            of, including rocks, boulders, sand grains, soil, mud, lava,
            and mixtures of those things (such as islands or whole
            continents).  Examples of #$LandStuff include
            #$ContinentOfAustralia, #$CapeCod, Zion Hill, and the lava
            pouring out of #$MountEtna-Volcano.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LandTopographicalFeature">
        <rdfs:label xml:lang="en">#$LandTopographicalFeature</rdfs:label>
        <rdfs:comment>A collection of geographical regions  and a
            specialization of #$TopographicalFeature.  Each instance of
            #$LandTopographicalFeature is a region of land
            distinguishable  from surrounding regions by salient
            physical differences in surface texture,  three-dimensional
            shape, or elevation.  The collection includes features that
            are covered by snow or bodies of water.  Specializations of
            #$LandTopographicalFeature include #$Mountain, #$Crater, and
            #$Continent. Instances include the #$ArabianPeninsula,
            #$MountZion, the #$SanAndreasFault,  the
            #$GreatSmokyMountains, and the #$JavaTrench.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#InanimateObject-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LandTransportationDevice">
        <rdfs:label xml:lang="en">land vehicles</rdfs:label>
        <rdfs:comment>A specialization of #$TransportationDevice.  Each
            instance of #$LandTransportationDevice is a device used for
            transportation across land.  Specializations of
            #$LandTransportationDevice include the collections
            #$Automobile, #$Snowmobile, #$Truck, #$HorseCarriage,
            #$BabyCarriage, #$Bus-RoadVehicle, and #$SkateBoard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Language">
        <rdfs:label xml:lang="en">languages</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationConvention.
            Each instance of this collection is a generative system of
            signs for transmitting information. These signs are normally
            conventional and arbitrary in nature, though the case of
            body language is a (borderline) exception to this.     The
            reality of any given language consists in its being
            interpretable by some community (usually human -- cf.
            #$HumanLanguage). This is not quite true of
            #$ComputerLanguages, however such languages are only
            possible insofar as some kind of automation of the process
            of interpretation (by computers) has been effected. In the
            case of #$DeadLanguages, the community may not longer exist
            (although even if no-one can _speak_ such languages any
            longer, currently-interpretable texts often remain, cf., for
            example, #$AtticGreekDialect).    Languages are most often
            spoken, but not always (cf. #$SignLanguage). It is also
            worth noting that not every system of signs is a language; a
            certain richness of possible expression is required. Thus
            #$MorseCode, for example, though a
            #$CommunicationConvention, is not an instance of #$Language.
            Finally, this collection is not intended to cover the
            special vocabulary and usages of a scientific, professional
            or other group, or a characteristic style of speech or
            writing (e.g. &apos;Shakespearean language&apos;).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommunicationConvention"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Language-SpecificMicrotheory">
        <rdfs:label xml:lang="en">Cyc language-specific microtheories</rdfs:label>
        <rdfs:comment>Instances are collections of microtheories, each
            of which contains information pertinent to a single
            #$NaturalLanguage.  Examples include #$EnglishTemplateMt,
            #$EnglishParaphraseMt, and #$EnglishMt. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="LanguageGroupingType">
        <rdfs:label xml:lang="en">types of language grouping</rdfs:label>
        <rdfs:comment>An instance of #$SecondOrderCollection, and a
            specialization of #$ObjectType.  Each instance of
            #$LanguageGroupingType is a subcollection of #$HumanLanguage (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LargeIncorporatedBusiness">
        <rdfs:label xml:lang="en">incorporated businesses</rdfs:label>
        <rdfs:comment>#$LargeIncorporatedBusiness is a specialization of
            #$LegalCorporation and #$Business.  Each instance of
            #$LargeIncorporatedBusiness is a fairly large (at least
            several hundred employees) business corporation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LatitudeLine">
        <rdfs:label xml:lang="en">lines of latitude</rdfs:label>
        <rdfs:comment>The collection of lines around the earth which are
            parallel to the #$Equator.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#GeographicalPlace-1D"/>
        <rdfs:subClassOf rdf:resource="#SpaceLine-Empirical"/>
        <rdfs:subClassOf rdf:resource="#GeographicalLine-Intangible"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Arc"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Lattice-LatticeTheoretic">
        <rdfs:label xml:lang="en">lattice order</rdfs:label>
        <rdfs:comment>The collection of all mathmetical structures
            called &apos;lattices&apos; in Lattice Theory (this is not
            the same concept as the crystalline or grid lattices studied
            in Crystallography and Group Theory).  A
            #$Lattice-LatticeTheoretic is often defined in different but
            equivalent ways.  To define a lattice using ordering
            relation, it is a #$PartialOrdering ORDER in which each pair
            of elements of the #$baseSet S of ORDER has an R-smallest
            upper bound and an R-greatest lower bound, where R is the
            ordering relation on S.  To define a lattice using
            operations, it is a mathematical structure with two
            operations MEET and JOIN on the #$baseSet S of the structure
            that satisfy the commutative laws, the associative laws, the
            idempotent laws and the absorption laws.  Note that the
            correspondence of these two different ways of defining
            lattices is characterized by the following: for all X, Y in
            S, Y = (JOIN X Y) &lt;=&gt; R(X Y) &lt;=&gt; X = (MEET X Y).
            See #$meetFunctionOnLattice and #$joinFunctionOnLattice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartialOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LawEnforcementActivity">
        <rdfs:label xml:lang="en">law enforcement activity</rdfs:label>
        <rdfs:comment>The collection of all events performed with the
            purpose of enforcing laws, that are performed by people
            officially charged with this this duty. Includes most
            activities of law enforcement officials (such as police)
            including detection of crime, identification of offenders,
            and arrests.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LawEnforcementOfficer">
        <rdfs:label xml:lang="en">#$LawEnforcementOfficer</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$PersonWithOccupation.  Each instance of
            #$LawEnforcementOfficer is a person whose job is to detect,
            stop, and/or punish people engaged in illegal activities.
            The collection #$LawEnforcementOfficer includes members of
            local, state, and special police (e.g., transit police)
            forces, as well as federal agents (e.g., members of border
            patrols, national security agents).  Consequently, a given
            instance of #$LawEnforcementOfficer typically also belongs
            to one of the following collections: #$StateEmployee,
            #$LocalGovernmentEmployee, or #$NationalGovernmentEmployee
            (see #$PublicSectorEmployee).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LawEnforcementOrganization">
        <rdfs:label xml:lang="en">law-enforcement organizations</rdfs:label>
        <rdfs:comment>A specialization of both #$Organization and
            #$LegalAgent.  Each instance of #$LawEnforcementOrganization
            is an official organization whose purpose is to support or
            perform law enforcement.  Instances of
            #$LawEnforcementOrganization include organizations which are
            legally empowered to enforce laws (see the specialization
            #$PoliceOrganization), as well as information agencies (such
            as #$INTERPOL) whose purpose is to assist and coordinate
            police activities.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Layer">
        <rdfs:label xml:lang="en">#$Layer</rdfs:label>
        <rdfs:comment>A specialization of #$SheetOfSomeStuff.  Each
            instance of #$Layer is a sheet-like object situated
            adjacent, surface-to-surface, to at least one surface or
            layer or region on one side, and possibly to other layers or
            surfaces on both sides.  An instance of #$Layer may be part
            of a larger object, or it may be an independent whole
            object, such as a hide confined in a stack of hides.  An
            instance of #$Layer is _not_ an instance of #$FreeSheet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Leader">
        <rdfs:label xml:lang="en">chiefs</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$Leader is a person who heads an instance of
            #$Organization.  Typically, a leader of an organization
            makes major decisions on behalf of the whole organization,
            has the authority to direct the organization&apos;s
            personnel to carry out those decisions, and is empowered to
            engage or negotiate with external agents to achieve the
            organization&apos;s goals.  This collection includes leaders
            of sub-organizations of larger organizations, such as
            department heads within larger organizations.  Note that a
            single person may be a leader in more than one organization.
            See also the predicates #$hasLeaders and #$seniorExecutives,
            and the collection #$Manager.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LeapYear">
        <rdfs:label xml:lang="en">leap years</rdfs:label>
        <rdfs:comment>The collection of #$CalendarYears which are leap
            years; in the Julian &amp; Gregorian calendar systems these
            are calendar years in which February has 29 days</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LearnedActivity">
        <rdfs:label xml:lang="en">learned activities</rdfs:label>
        <rdfs:comment>This is the collection of activities which must
            first be learned before they can be performed--i.e., before
            any role which is a specPred of #$doneBy can be played.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Learning">
        <rdfs:label xml:lang="en">learning events</rdfs:label>
        <rdfs:comment>The collection of all events, brief or extended,
            in which an agent is acquiring information or know-how.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#ImprovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Leather">
        <rdfs:label xml:lang="en">#$Leather</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleThing. Each
            instance of #$Leather is a piece of tanned animal hide.
            Instances of #$Leather are commonly used as material inputs
            to the manufacture of shoes, gloves, upholstery, satchels
            and purses, saddles, and other items.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LeavingAPlace">
        <rdfs:label xml:lang="en">#$LeavingAPlace</rdfs:label>
        <rdfs:comment>A specialization of both #$TransferOut and
            #$Translation-LocationChange.  Each instance of
            #$LeavingAPlace is an event in which the performer (see the
            predicate #$performedBy) moves, under its own control and
            often under its own power, from one location to another.
            Notable specializations of #$LeavingAPlace include
            #$EvacuatingAPlace and #$ExitingAContainer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LeftAndRightSidedObject">
        <rdfs:label xml:lang="en">left and right sided objects</rdfs:label>
        <rdfs:comment>A #$LeftAndRightSidedObject is an object  with an
            intrinsic left side and an intrinsic right side.  By
            &apos;intrinsic&apos; we mean simply that there exists an
            established convention  according to which one side is
            considered &apos;Left&apos; and the other side is
            considered &apos;Right&apos;.  Usually, the two sides can be
            reliably  distinguished from one another.  Notice that a
            conventionally  distinguishable left and right do not
            necessarily imply a bottom and  top, or a front and back.
            Interestingly, it has proved impossible so far to find
            instances of objects with a left and right but no top,
            bottom, front or back.  It is unclear why this should be so,
            but itapparently pertains to human psychology in reasoning
            about directions. However, if an object has a conventionally
            distinguished top,  bottom, front, and back, then these
            suffice to determine an intrinsic  left and an intrinsic
            right.  Notice also--and this is crucial to the  whole
            conception--that while a #$LeftAndRightSidedObject may well
            have  a preferred orientation, changing this orientation
            does not change  what counts as &apos;left&apos; and what
            counts as &apos;right&apos;: if you turn me  upside down my
            left side does not become my right side and my right  side
            my left. If an entity does not obey this rule then it does
            not,  generally speaking, count as having a distinguishable
            left and  right--example: a houseplant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BilateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Leg">
        <rdfs:label xml:lang="en">legs</rdfs:label>
        <rdfs:comment>The collection of all #$Animal appendages used for
            locomotion overland, supporting the animal and moving it
            along by walking, running, etc.  Thus wings, fins, etc., are
            not #$Legs.  The #$Foot-AnimalBodyPart is considered part of
            the #$Leg</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Limb-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalAgent">
        <rdfs:label xml:lang="en">legal agents</rdfs:label>
        <rdfs:comment>A specialization of #$Agent.  Each instance of
            #$LegalAgent is an agent who has some status in a particular
            legal system.  At the very least, such an agent is
            recognized by some legal authority as having some kinds of
            rights and/or responsibilities as an agent (e.g., #$citizens
            of Germany), or as being subject to certain restrictions and
            penalties (e.g., a company that has been blacklisted by
            Iraq).  Thus, instances of #$LegalAgent include agents that
            may have property rights, may be taxed, may have a
            government identification number, may be sued, may have an
            address, or may buy or sell.  Note that membership in this
            collection is very much dependent upon context.  In some
            societies, only adult males and various kinds of state-run
            organizations would be included in #$LegalAgent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalAgreement">
        <rdfs:label xml:lang="en">legal agreements</rdfs:label>
        <rdfs:comment>An instance of #$ObjectType, and a specialization
            of #$Agreement.  Each instance of #$LegalAgreement is an
            agreement which has a legal status; that is, it is
            recognized as a valid agreement by some government.  Notable
            specializations of #$LegalAgreement include #$SalesContract,
            #$Visa-Permit, and #$Account.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalCode">
        <rdfs:label xml:lang="en">legal codes</rdfs:label>
        <rdfs:comment>A specialization of #$GovernmentCOC.  Each
            instance of #$LegalCode is a code of conduct consisting of
            all the laws that hold in some instance of
            #$GeopoliticalEntity.  One notable instance of #$LegalCode
            is #$LegalCode-ModernUnitedStates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GovernmentCOC"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalCorporation">
        <rdfs:label xml:lang="en">#$LegalCorporation</rdfs:label>
        <rdfs:comment>The collection of all #$Organizations which have
            been incorporated in accordance with the laws of a
            jurisdiction.  Each instance of #$LegalCorporation is a
            legal entity distinct from its owners and employees, and is
            afforded certain powers both by law and by its incorporating
            documents.  Instances of #$LegalCorporation may be either
            #$CommercialOrganizations or #$NonProfitOrganizations.  Each
            instance of #$LegalCorporation organized in the
            #$UnitedStatesOfAmerica is incorporated under the laws of a
            particular state, although it may be empowered to carry on
            activities in any state.  Most American jurisdictions
            require that one of the words or abbreviations
            `corporation&apos;, `company&apos;, `incorporated&apos;,
            `corp&apos;, `co&apos;, or `inc&apos; be included in the
            registered name of a corporation.  Instances of
            #$LegalCorporation include #$IBMInc and #$Cycorp.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalDocument">
        <rdfs:label xml:lang="en">legal documents</rdfs:label>
        <rdfs:comment>A specialization of #$OfficialDocument. Instances
            of this collection not only have the force of the law behind
            them (as most #$OfficialDocuments do) but also either must
            be prepared by a #$Lawyer in order to be legitimate, or
            their construction is strictly specified by the rule of law
            governing the parties bound by them.  While
            #$OfficialDocuments such as #$CreditReportDocuments may have
            legal force in some contexts, they are not considered
            #$LegalDocuments because their construction is not as
            tightly specified by law as that of #$LegalDocuments.  Also,
            #$LegalDocuments are distinguished as being created
            expressly for legal purposes. See also #$LegalAgreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OfficialDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalGovernmentOrganization">
        <rdfs:label xml:lang="en">legal government organization</rdfs:label>
        <rdfs:comment>#$LegalGovernmentOrganization is a specialization
            of #$GovernmentalOrganization and #$LegalAgent.  Each
            instance of #$LegalGovernmentOrganization is an organization
            which is a part of, and funded by, the government of a
            geopolitical entity.  Examples include the
            #$InternalRevenueService, #$UnitedStatesNavy, and
            #$CityCouncilOfAustin (TX).  Some instances of
            #$LegalGovernmentOrganizations have legal standing in courts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GovernmentalOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalHoliday">
        <rdfs:label xml:lang="en">national holidays</rdfs:label>
        <rdfs:comment>The subcollection of #$Holidays which are
            typically declared to be #$Holidays by the governments of
            western countries, and which are therefore days on which
            most people governed by that government do not work and on
            which students do not attend classes.  Such #$Holidays may
            coincide with #$ReligiousHolidays, especially where there is
            a government-sanctioned religion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Holiday"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LegalProfessional">
        <rdfs:label xml:lang="en">legal professionals</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$PersonWithOccupation.  Each instance of
            #$LegalProfessional is a person working in the field of law.
            Notable specializations of #$LegalProfessional include
            #$Lawyer, #$Judge, and #$Paralegal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelOfAConstruction">
        <rdfs:label xml:lang="en">#$LevelOfAConstruction</rdfs:label>
        <rdfs:comment>#$LevelOfAConstruction is a specialization of
            #$SpaceInAFixedHOC.  Each instance of a
            #$LevelOfAConstruction is a level, also called floor or
            story, of a #$ConstructionArtifact.  Levels are regions in
            space; they are not two-dimensional planes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceInAFixedHOC"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelOfDiscomfort">
        <rdfs:label xml:lang="en">discomfort levels</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            various levels of discomfort that may be felt by a
            perceptual agent.  Typically, the agent must be a living
            entity.  Typically, the sensation is an internal feeling,
            and is more of a long-lasting dull ache than a sharp pain
            (see: #$LevelOfPain).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelOfExhaustion">
        <rdfs:label xml:lang="en">#$LevelOfExhaustion</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            qualitative degrees of exhaustion that an animal may feel.
            For instance, the assertion (#$feelsSensation #$JimiHendrix
            #$LevelOfExhaustion #$Positive),  means that Jimi Hendrix
            feels some degree of physical exhaustion (a not unlikely
            state of affairs after one of his guitar solos). Note that
            this predicate is NOT properly used for purposes such as to
            describe metal fatigue, or the depletion of natural resources.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelOfPain">
        <rdfs:label xml:lang="en">#$LevelOfPain</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            qualitative levels of pain that may be felt by a perceptual
            agent.  Although the agent is often a living entity, this is
            not required.  The source of the pain could be either
            external or internal; in either case, the subjective feeling
            is generally `sharper&apos; and hopefully shorter-lived than
            just `a feeling of discomfort&apos; (see: #$LevelOfDiscomfort.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#LevelOfDiscomfort"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelOneAffix">
        <rdfs:label xml:lang="en">#$LevelOneAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LevelTwoAffix">
        <rdfs:label xml:lang="en">#$LevelTwoAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalItem">
        <rdfs:label xml:lang="en">lexical items</rdfs:label>
        <rdfs:comment>A subcollection of #$LinguisticObject (q.v.).
            #$LexicalItem is the collection of linguistic objects that
            are part of the lexicon of some natural language or other.
            Instances of #$LexicalItem include words as well as
            constituents of words, such as affixes (see #$LexicalWord,
            #$WordConstituent, and #$LexicalAffix).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalMicrotheory">
        <rdfs:label xml:lang="en">lexical microtheory</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalWord">
        <rdfs:label xml:lang="en">#$LexicalWord</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            subcollection of #$LexicalItem.  #$LexicalWord is the
            collection of all natural language words.  A lexical word is
            a  free  morpheme: it can appear in a phrase without being
            bound to  (i.e. concatenated with) another lexical item.
            (Cf. #$LexicalAffix.)  Note that different inflectional
            forms of a given word do not constitute distinct lexical
            words.  Instances of #$LexicalWord include
            #$Aluminum-TheWord, #$Confetti-TheWord, #$To-TheWord, #$Hang-Glide-MWW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalItem"/>
        <rdfs:subClassOf rdf:resource="#BaseWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalWordFormationProcess">
        <rdfs:label xml:lang="en">#$LexicalWordFormationProcess</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MorphologicalProcess"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalWordType">
        <rdfs:label xml:lang="en">lexical word types</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LexicalWordTypeByLanguage">
        <rdfs:label xml:lang="en">types of lexical word classified by language</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWordType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LifeStageType">
        <rdfs:label xml:lang="en">#$LifeStageType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of  #$ExistingObjectType. Each instance of #$LifeStageType
            is a collection all of whose instances are organisms that
            share a specific variety and level of biological and/or
            social development.  For example, one instance of
            #$LifeStageType is the collection #$HumanChild, which has as
            its instances all human children.  Other instances of
            #$LifeStageType include #$Larva, #$FloweryPlant, and
            (#$BacterialSporeFn #$Anthrax-Bacterium).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LifeThreateningCondition">
        <rdfs:label xml:lang="en">life-threatening conditions</rdfs:label>
        <rdfs:comment>A specialization of #$PhysiologicalCondition.
            Each instance of #$LifeThreateningCondition is  an ailment
            which, if left untreated, may cause the death of the
            organism  afflicted by it.  Specializations include
            #$Poisoning and #$Rabies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Light">
        <rdfs:label xml:lang="en">light (type)</rdfs:label>
        <rdfs:comment>This is the collection of events consisting of the
            propogation of electromagnetic radiation and associated with
            photons, a particle which lacks rest mass. Somewhat
            paradoxically, light has both a wavelike and a particle-like nature.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LighterThanAirCraft">
        <rdfs:label xml:lang="en">lighter-than-air crafts</rdfs:label>
        <rdfs:comment>#$LighterThanAirCraft is a specialization of
            #$AirTransportationDevice.  Each instance of
            #$LighterThanAirCraft is an air transportation device that
            depends on lighter-than-air gaseous substances for lift.
            For example, a blimp or hot-air balloon are types of #$LighterThanAirCraft.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AirTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LightingDevice">
        <rdfs:label xml:lang="en">lights</rdfs:label>
        <rdfs:comment>#$LightingDevice is a specialization of
            #$PoweredDevice.  Each instance of #$LightingDevice has the
            #$primaryFunction of providing light.  The light provided
            may be provided in different ways and for different
            specialized purposes.  For example, it may be for general
            illumination of a fixed area (as by instances of #$Candle,
            #$Lantern, #$ElectricLamp, and #$Streetlight); or it may be
            for specially directed illumination (as by instances of
            #$AutomotiveLight and #$Flashlight); or it may be for use in
            a signal or sign (as by instances of #$TrafficLight and
            #$IndicatorLight); or it may be for some other special
            purposes (as by instances of #$StrobeLight).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LightningEvent">
        <rdfs:label xml:lang="en">#$LightningEvent</rdfs:label>
        <rdfs:comment>A specialization of both #$Emission and
            #$ImmediateWeatherProcess.  In each instance of
            #$LightningEvent, a flashing of light is produced by the
            discharge of atmospheric electricity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Emission"/>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
        <rdfs:subClassOf rdf:resource="#ElectricalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Limb-AnimalBodyPart">
        <rdfs:label xml:lang="en">#$Limb-AnimalBodyPart</rdfs:label>
        <rdfs:comment>#$Limb-AnimalBodyPart is a specialization of
            #$Appendage-AnimalBodyPart and an instance of
            #$SymmetricAnatomicalPartType.  Each instance of
            #$Limb-AnimalBodyPart is a bilaterally symmetric
            #$Appendage-AnimalBodyPart that extends from the
            #$Trunk-BodyCore; including #$Arm, #$Leg,
            #$Wing-AnimalBodyPart, #$Flipper, and pectoral #$Fin.  A
            #$Finger, #$Toe, #$Hand, #$Tail-BodyPart, ... is not a #$Limb-AnimalBodyPart.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Line">
        <rdfs:label xml:lang="en">lines</rdfs:label>
        <rdfs:comment>A specialization of
            #$GeometricallyDescribableThing.  Each instance of #$Line is
            a one-dimensional path, either curved or straight, through
            one-, two-, or higher-dimensional space.  Examples include
            spatially localized objects, such as the equator, as well as
            abstract lines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Line-Straight">
        <rdfs:label xml:lang="en">straight lines</rdfs:label>
        <rdfs:comment>A specialization of #$Line. Each instance of
            #$Line-Straight is an endless straight line. Examples
            include spatially localized objects, as well as abstract lines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear-Straight"/>
        <rdfs:subClassOf rdf:resource="#Line"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LinePortion">
        <rdfs:label xml:lang="en">line portion</rdfs:label>
        <rdfs:comment>The collection of finite self-connected, i.e. one
            piece, portions of line.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LineSegment">
        <rdfs:label xml:lang="en">line segments</rdfs:label>
        <rdfs:comment>The collection of line segments. Instances of
            #$LineSegment are portions of lines with two end points and
            contain all colinear points between their end points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinePortion"/>
        <rdfs:subClassOf rdf:resource="#Linear-Straight"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Linear">
        <rdfs:label xml:lang="en">linear</rdfs:label>
        <rdfs:comment>The shape typee shared by anything that has only
            one discernible or relevant dimension.  Examples include
            geometric lines and line segments, curved line segments and
            arcs, and physical objects whose length is the only relevant
            dimension, e.g., a length of wire, if we are in a context in
            which other dimensions of the wire are small enough to be
            ignored, or the outer rim of a glass.  Also note that this
            this holds of anything which is linear even if the object
            does not remain in a single plane.  For instance, a
            spiral-shaped line or a length of string wrapped around a
            pencil may be linear despite the fact that they do not
            remain in a single two dimensional plane.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Linear-Planar">
        <rdfs:label xml:lang="en">linear - planar</rdfs:label>
        <rdfs:comment>An instance of #$ShapeType and a specialization of
            #$Linear.  Each instance of #$Linear-Planar is a line
            (either curved or straight) that remains in a single
            two-dimensional plane. Specializations of #$Linear-Planar
            include #$Arc and #$Linear-Straight.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Linear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Linear-Straight">
        <rdfs:label xml:lang="en">linear - straight</rdfs:label>
        <rdfs:comment>The shape type shared by all one-dimensional
            objects that are not curved.  This is very context
            dependent.  To take a very straightforward example, if
            building a deck the standards for an edge being deemed to be
            #$Linear-Straight may vary considerably from the standards
            for straightness when framing a home.  Important geometrical
            specializations are #$Line-Straight, #$HalfLine-Geometrical,
            and #$LineSegment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Linear-Planar"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LinearOrderAttributeType">
        <rdfs:label xml:lang="en">linear order attribute types</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$LinearOrderAttributeType is a collection of attributes
            such as mass, distance, charge, and others which have at
            least one conventional linear ordering.  Collections of
            overlapping instances of #$ScalarInterval may be instances,
            provided the intervals in question are being used
            exclusively to represent uncertainies about what we think
            are really scalar point values.  A collection of
            &apos;real&apos; intervals would count as a partial order
            and would not be   included.  Note that
            #$LinearOrderAttributeType excludes the instances of
            #$UnorderedAttributeType (e.g., gender).  Cf.
            #$CompositeScalarIntervalType and #$PartialOrderAttributeType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotallyOrderedCollection"/>
        <rdfs:subClassOf rdf:resource="#PartialOrderAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LinguisticObject">
        <rdfs:label xml:lang="en">linguistic objects</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$LinguisticObject is an intangible object
            that is part of some language or other, in a broad sense of
            part  whereby #$LinguisticObject&apos;s specializations
            include such diverse collections as #$Title, #$WordSense,
            #$SententialConstituent, #$NonlexicalLinguisticObject, and #$LinguisticAttribute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LinguisticObjectType">
        <rdfs:label xml:lang="en">linguistic object types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$LinguisticObjectType is a specialization of
            #$LinguisticObject (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="LinguisticRule">
        <rdfs:label xml:lang="en">linguistic rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LinguisticRuleConstraint">
        <rdfs:label xml:lang="en">linguistic rule constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticRuleElement"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LinguisticRuleElement">
        <rdfs:label xml:lang="en">linguistic rule elements</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Lion">
        <rdfs:label xml:lang="en">Panthera leo</rdfs:label>
        <rdfs:comment>The collection of large carnivorous feline mammals
            found in Africa.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FelidaeFamily"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Liquid-StateOfMatter">
        <rdfs:label xml:lang="en">liquid (type)</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible and an
            instance of #$MatterTypeByPhysicalState. Each instance of
            #$Liquid-StateOfMatter is an object of a single chemical
            species in the liquid state of matter. Objects in the liquid
            state of matter are at a temperature and pressure such that
            the molecules of the matter move freely relative to their
            neighbors, but are not excited enough to break free. Liquid
            objects are characterized at the macroscopic level by
            special qualities of flow, such as being pourable and
            conforming to whatever container they occupy.  Instances of
            #$Liquid-StateOfMatter include a quantity of liquid
            nitrogen, the water component of a gallon of seawater, a
            lump of mercury at room temperature, and some molten silver
            about to be poured into a teapot mold.  Counterexamples
            include a gallon of seawater (since it has dissolved
            minerals) and 190 proof ethanol (since it is 5% water).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LiquidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LiquidTangibleThing">
        <rdfs:label xml:lang="en">#$LiquidTangibleThing</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffStateType and a
            specialization of #$FluidTangibleThing; the collection of
            all portions of liquid.  Each instance of
            #$LiquidTangibleThing is a tangible thing that has similar
            properties to those exhibited by things in the
            #$Liquid-StateOfMatter.  Specifically, its volume is
            relatively constant at varying pressures, and it freely
            changes shape (e.g. to conform to the shape of its
            container).  Liquids can never be said to break.  Note that
            not all #$LiquidTangibleThings are in #$Liquid-StateOfMatter
            : state-of-matter attributes (see
            #$MatterTypeByPhysicalState) apply only to quantities
            consisting of a single type of substance, whereas liquids
            can be mixtures of different substances.  Examples of
            #$LiquidTangibleThings include all substances in the
            #$Liquid-StateOfMatter, such as the water in a
            room-temperature glass of beer; liquid/liquid mixtures like
            the beer itself; solutions of solids in liquids, such as sea
            water; emulsions, such as milk; and suspensions of solids in
            liquids, like blood.  Compare #$FluidTangibleThing and #$GaseousTangibleThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LispAtom">
        <rdfs:label xml:lang="en">atoms (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$LispObject. The collection
            of atomic objects in #$Lisp. Positive examples include
            numbers and symbols, negative examples include lists and vectors.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LispObject"/>
    </owl:Class>
    <owl:Class rdf:ID="LispConsObject">
        <rdfs:label xml:lang="en">lisp cons object</rdfs:label>
        <rdfs:comment>A specialization of #$LispObject. The collection
            of  cons  pairs in #$Lisp. The concept of the cons pair is
            closely linked the idea of a #$List (vis. #$LispListObject)
            in #$Lisp.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LispObject"/>
    </owl:Class>
    <owl:Class rdf:ID="LispListObject">
        <rdfs:label xml:lang="en">lists (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$LispObject. The collection
            of lists (i.e. sequences of #$LispObject) in #$Lisp.
            #$LispListObject objects are closely related to
            #$LispConsObject objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LispObject"/>
    </owl:Class>
    <owl:Class rdf:ID="LispObject">
        <rdfs:label xml:lang="en">#$LispObject</rdfs:label>
        <rdfs:comment>The generic data type of all lisp objects. This
            collection includes lists, symbols, strings, and all of the
            other data types of the  Common Lisp standard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
    </owl:Class>
    <owl:Class rdf:ID="LispSymbol">
        <rdfs:label xml:lang="en">#$LispSymbol</rdfs:label>
        <rdfs:comment>A specialization of #$LispObject. The collection
            of symbols in #$Lisp.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LispObject"/>
    </owl:Class>
    <owl:Class rdf:ID="List">
        <rdfs:label xml:lang="en">lists (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Tuple.  Each instance of
            #$List is a  finite sequence of things with a first and last
            member-position, with each member-position other than the
            last having a successor member-position.   As  with tuples
            generally, lists allow for repetition of their members, so
            that the same item can appear at multiple member-positions
            in the same list.  A list can  be represented formally as a
            function from a finite index set of counting numbers,
            beginning with one, into the domain of all #$Things (but
            note that #$Lists are _not_ explicitly represented as
            functions in the Cyc ontology).  Unlike an instance of
            #$Series (q.v.), a list is purely abstract (i.e. not
            spatio-temporal), and the only implied relation between an
            item and its successor in a list is the successor relation
            of the list itself.  Technically, #$List is more specific
            than #$Tuple only in that the index set (see
            #$tupleIndexSet) for a given list must be the counting
            numbers in their usual order (or some initial segment
            thereof), whereas the index set for a tuple, generally
            speaking, might be any set whatsoever.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#List"/>
        <rdfs:subClassOf rdf:resource="#Tuple"/>
    </owl:Class>
    <owl:Class rdf:ID="ListWithoutRepetition">
        <rdfs:label xml:lang="en">OSETs</rdfs:label>
        <rdfs:comment>A specialization of #$List.  An instance LIST of
            #$List is also an instance of #$ListWithoutRepetition just
            in case each of the members of LIST occurs in only one
            member-position in LIST.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WellOrdering"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="ListeningDeliberately">
        <rdfs:label xml:lang="en">#$ListeningDeliberately</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Agent
            deliberately facilitates and does #$Hearing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#Hearing"/>
        <rdfs:subClassOf rdf:resource="#AccessingAnIBT"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Listless">
        <rdfs:label xml:lang="en">agents who is listless</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            listless. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Listlessness">
        <rdfs:label xml:lang="en">apathy</rdfs:label>
        <rdfs:comment>The attribute-type associated with the feeling of
            listlessness: the felt experience of having little or no
            interest in or concern for what is going on around one.
            Note that a mere lack of interest in-itself is not a
            _feeling_, and thus is not sufficient for possessing an
            instance of   #$Listlessness; one&apos;s lack of interest
            must be consciously experienced as such.  (For the rationale
            behind treating feelings in terms of types -- i.e.
            collections -- of attributes, see the comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Liver">
        <rdfs:label xml:lang="en">livers</rdfs:label>
        <rdfs:comment>The collection of all living #$Animal livers.
            Each instance of #$Liver is a large compound
            #$InternalOrgan.  A #$Liver breaks down dead
            #$RedBloodCells, removes certain poisons and waste material
            from the blood stream, creates glycogen from sugars and
            proteins, stores glycogen, removes certain chemicals from
            the blood, secretes bile (#$BileTheSecretion) which is used
            for digestion,and regulates metabolism of carbohydrates,
            #$ProteinStuff, #$Vitamins, #$Minerals, and fats.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LivingLanguage">
        <rdfs:label xml:lang="en">living languages</rdfs:label>
        <rdfs:comment>A specialization of #$NaturalLanguage.  An
            instance of #$NaturalLanguage is an instance of
            #$LivingLanguage just in case it has at least one extant
            native speaker.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NaturalLanguage"/>
    </owl:Class>
    <owl:Class rdf:ID="LocalOrganization">
        <rdfs:label xml:lang="en">local organization</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$LocalOrganization is an organization having local
            `scope&apos; -- that is, its members are distributed in a
            local area (for example, in a #$Neighborhood, #$City, or
            rural region), or it has a local (as opposed to national or
            international) area of activity and concern.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocalProgram">
        <rdfs:label xml:lang="en">local programs</rdfs:label>
        <rdfs:comment>A specialization of #$ApplicationProgram. Each
            instance of #$LocalProgram is a program that cannot be
            accessed remotely (i.e. across a #$ComputerNetwork).
            #$LocalProgram is dijoint with #$ServerProgram, and the two
            form a partition of #$ComputerProgram-CW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ApplicationProgram"/>
    </owl:Class>
    <owl:Class rdf:ID="LocatingInIntendedPosition">
        <rdfs:label xml:lang="en">#$LocatingInIntendedPosition</rdfs:label>
        <rdfs:comment>A collection of events, and a subcollection of
            #$PuttingSomethingSomewhere.  In each instance of
            #$LocatingInIntendedPosition, an #$Agent guides an
            #$objectMoving to  an intended #$toLocation; that is, the
            #$toLocation corresponds to the  #$target of the motion.
            Examples include: placing a book in the  correct place on
            the library shelves, hanging a picture on the wall,  and
            screwing the top on a bottle.  Non-examples are:
            absent-mindedly  leaving a book on the floor (guided motion,
            but without a particular  target), and throwing a basketball
            through the hoop (not guided  motion, though the target is reached).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PuttingSomethingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocationStateAttribute">
        <rdfs:label xml:lang="en">location state attribute</rdfs:label>
        <rdfs:comment>A specialization of #$AttributeValue.  Each
            instance of #$LocationStateAttribute is an attribute of an
            object which indicates the nature of that object&apos;s location.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="LocativePrefix">
        <rdfs:label xml:lang="en">locative prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Locomotion-SolidSurface">
        <rdfs:label xml:lang="en">#$Locomotion-SolidSurface</rdfs:label>
        <rdfs:comment>The collection of all locomotion events in which
            the locomotor moves along, and is supported by, a
            #$SolidTangibleThing. Includes walking, slithering,
            somersaulting, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TranslationAlongASurface"/>
        <rdfs:subClassOf rdf:resource="#LocomotionProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocomotionEvent">
        <rdfs:label xml:lang="en">locomotion event</rdfs:label>
        <rdfs:comment>This is the collection of movement events in which
            the #$primaryObjectMoving is moving under its own control,
            and usually under its own power.  This entails that the
            moving object is an agent.  Most animals, many bacteria, and
            some robots are capable of #$LocomotionEvents; inanimate
            objects and plants are not.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocomotionEvent-Animal">
        <rdfs:label xml:lang="en">travel (type)</rdfs:label>
        <rdfs:comment>A specialization of #$LocomotionEvent,
            #$AnimalActivity, and  #$PurposefulAction.  In each instance
            of #$LocomotionEvent-Animal,  the object moving (see
            #$objectMoving) is an instance of #$Animal.   Notable
            specializations of #$LocomotionEvent-Animal include
            #$Climbing, #$Swimming-Generic, and #$WalkingOnTwoLegs.
            Other  specializations include types of events, such as
            #$Canoeing and  #$Skating, in which a person moves himself
            or herself using a  device to which s/he supplies the motive force.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocomotionProcess">
        <rdfs:label xml:lang="en">locomotion processes (types of things)</rdfs:label>
        <rdfs:comment>The collection of processes in which a
            #$providerOfMotiveForce moves from one place to another
            under, or as if under, its own control. This includes not
            only animals moving around autonomously (c.f.
            #$LocomotionProcess-Animal), but also locomoting devices
            such as cars, submarines, and airplanes, which are
            controlled either internally or remotely by distinct
            #$Agents, but share significant properties with locomoting
            #$Animals - notably that their trajectories are not just
            functions of forces such as gravity and resistance, but
            rather can have abrupt changes of direction or speed that
            are or appear purposeful. This collection also explicitly
            includes locomoting events in which the
            #$providerOfMotiveForce is a non-agent natural force such as
            gravity, so long as the object moving is or appears to be in
            control of its trajectory of motion. Thus someone downhill
            skiing or hang-gliding would be a positive example.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LocomotionProcess-Animal">
        <rdfs:label xml:lang="en">locomotion processes (types of things)</rdfs:label>
        <rdfs:comment>The collection of processes in which an animal
            moves from one place to another by its own power.  A
            #$LocomotionProcess-Animal is an activity considered as a
            #$TemporalStuffType, in which any time-slice of the activity
            can also be considered an instance of that activity.
            Subsets of #$LocomotionProcess-Animal include:
            #$AnimalWalkingProcess, #$Brachiating, #$Climbing,
            #$WheelchairLocomotionEvent, #$Boring-Locomotion, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationProcess"/>
        <rdfs:subClassOf rdf:resource="#LocomotionProcess"/>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent-Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LogicalConnective">
        <rdfs:label xml:lang="en">logical connective</rdfs:label>
        <rdfs:comment>A collection of mathematical objects, including
            the basic logical connectives.  Each instance of
            #$LogicalConnective is a #$Relation which takes one or more
            truth-valued expressions (sentences) as arguments and
            returns a truth-valued sentence.  The instances of
            #$LogicalConnective include #$and, #$or, #$not, and #$implies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
        <rdfs:subClassOf rdf:resource="#SententialRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="LogicalTruthConstant">
        <rdfs:label xml:lang="en">logical truth constant</rdfs:label>
        <rdfs:comment>The collection of #$CycLConstants which are
            defined in the #$LogicalTruthMt and necessary to use CycL to
            represent logical truths.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#LogicalTruthUnionConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="LogicalTruthImplementationConstant">
        <rdfs:label xml:lang="en">logical truth implementation constant</rdfs:label>
        <rdfs:comment>The collection of #$CycLConstants which are
            defined in the #$LogicalTruthImplementationMt and necessary
            for Cyc&apos;s implementation of reasoning about logical
            truths expressed in CycL.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CoreImplementationConstant"/>
        <rdfs:subClassOf rdf:resource="#LogicalTruthUnionConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="LogicalTruthUnionConstant">
        <rdfs:label xml:lang="en">logical truth union constant</rdfs:label>
        <rdfs:comment>The collection of constants that are required to
            be defined in order to support the implementation of CycL
            itself in Cyc.  It is the union of those specific to the
            CycL language (the elements of #$LogicalTruthConstant) and
            those specific to the Cyc implementation (the elements of #$LogicalTruthImplementationConstant).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CoreUnionConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="Loneliness">
        <rdfs:label xml:lang="en">lonely</rdfs:label>
        <rdfs:comment>The disagreeable feeling of being without company.
            This is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.  Some more specialized
            #$FeelingTypes are #$Loneliness, #$Solitude, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Lonely">
        <rdfs:label xml:lang="en">agents who is lonely</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being lonely.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LongPants">
        <rdfs:label xml:lang="en">#$LongPants</rdfs:label>
        <rdfs:comment>A specialization of #$Pants.  Each instance of
            #$LongPants is a pair of pants that covers the human hips
            and legs when worn.  This collection is disjoint with #$ShortPants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pants"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LongitudeLine">
        <rdfs:label xml:lang="en">lines of longitude</rdfs:label>
        <rdfs:comment>A line between the #$NorthPole and the
            #$SouthPole, intersecting the #$Equator at 90 degrees.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#GeographicalPlace-1D"/>
        <rdfs:subClassOf rdf:resource="#SpaceLine-Empirical"/>
        <rdfs:subClassOf rdf:resource="#GeographicalLine-Intangible"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Arc"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LookingForAThingOrTypeOfThing">
        <rdfs:label xml:lang="en">seeking</rdfs:label>
        <rdfs:comment>The most general collection of events in which an
            agent purposefully looks or searches for something.  The
            thing being looked for may be a particular individual or it
            may be anything that satisfies a certain description (see
            #$NoteAboutLookingForIndividualsVsTypes).  The thing being
            looked for may be tangible or intangible, timeless or
            temporally bounded. Visual perception is not necessarily
            involved in all instances of
            #$LookingForAThingOrTypeOfThing.  Examples include searching
            for the largest prime number less than 10 billion, Johnny
            looking for Santa Claus, Humans looking for intelligent
            life, Fred looking for any dictionary, Fred looking for
            Joe&apos;s dictionary, and Deep Blue searching for the best
            possible move.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LookingForSomething">
        <rdfs:label xml:lang="en">#$LookingForSomething</rdfs:label>
        <rdfs:comment>A specialization of #$Perceiving-Voluntary.  Each
            instance of #$LookingForSomething is an event in which an
            agent searches for some object.  Note that
            #$LookingForSomething includes cases in which the search is
            successful, and the object is found, as well as cases in
            which the search is unsuccessful, and the object is not found.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LookingForAThingOrTypeOfThing"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="LosingUserRights">
        <rdfs:label xml:lang="en">losses of user rights</rdfs:label>
        <rdfs:comment>A specialization of #$ChangeInUserRights.  In each
            instance of #$LosingUserRights, an agent loses a previously
            held right (i.e., an instance of #$UserRightsAttribute) to
            use some item.  The item in question is identified as the
            #$objectOfPossessionTransfer (q.v.) in the instance of
            #$LosingUserRights, and the agent is the #$fromPossessor
            (q.v.) in the instance of #$LosingUserRights.  The agent may
            or may not be acting deliberately (see the predicate
            #$deliberateActors) in the event; e.g., selling one&apos;s
            car is done on purpose, but having one&apos;s car
            repossessed usually isn&apos;t.  However, both of those
            events would be instances of the collection #$LosingUserRights.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Love">
        <rdfs:label xml:lang="en">#$Love</rdfs:label>
        <rdfs:comment>Strong affection for another agent arising out of
            kinship or personal ties.  Love may be felt towards things,
            too: warm attachment, enthusiasm, or devotion.  This does
            not, however, mean something as specialized/metaphorical as
            `Fred loves to eat ice cream&apos; or `Ethel loves to get
            her way.&apos;  #$Love is a collection, as further explained
            under #$Happiness.  Specialized forms of #$Love are
            #$Love-Romantic, platonic love, maternal love, infatuation,
            agape, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affection"/>
    </owl:Class>
    <owl:Class rdf:ID="Love-Romantic">
        <rdfs:label xml:lang="en">romantic love</rdfs:label>
        <rdfs:comment>The subcollection of #$Love that is romantic
            love-- to be distinguished from love between parents and
            children or between people and their pets.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Love"/>
    </owl:Class>
    <owl:Class rdf:ID="Loyalty">
        <rdfs:label xml:lang="en">loyalty</rdfs:label>
        <rdfs:comment>Combination of Respect and Faithfulness to
            something or someone .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Lung">
        <rdfs:label xml:lang="en">lungs</rdfs:label>
        <rdfs:comment>The collection of all lungs, the primary
            respiratory organs of #$AirBreathingVertebrates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MACAddress">
        <rdfs:label xml:lang="en">#$MACAddress</rdfs:label>
        <rdfs:comment>A specialization of #$IDString.  Each instance of
            #$MACAddress identifies a network card within a particular
            #$LocalAreaNetwork. #$IPAddresses, in contrast, identify
            machines on the #$Internet. A #$MACAddress is contained in
            the source and destination fields of a
            #$Frame-Network&apos;s header.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="MKSUnitOfMeasure">
        <rdfs:label xml:lang="en">meter-kilogram-second units of measure</rdfs:label>
        <rdfs:comment>A subcollection of #$UnitOfMeasure.
            #$MKSUnitOfMeasure is the collection of all the measurement
            functions whose results use the MKS (i.e.,
            meter-kilogram-second) system of measure to describe
            physical quantities.  Examples: #$MetersPerSecondPerSecond,
            #$Liter, #$MetricTon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="MacroRelation">
        <rdfs:label xml:lang="en">macro relations</rdfs:label>
        <rdfs:comment>Instances of #$MacroRelation are relations that
            have, in their definition, the schema for a class of
            (possibly quantified) formulas.  Each use of an instance of
            MacroRelation is in fact shorthand for an expression fitting
            this schema.  See also #$RuleMacroPredicates,
            #$TermMacroFunction, and #$ELRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="MailingAddress">
        <rdfs:label xml:lang="en">mailing addresses</rdfs:label>
        <rdfs:comment>A specialization of #$Address-LocationDesignator.
            Each instance of #$MailingAddress is a string that describes
            the mailing address of an individual or organization, and
            includes a street name and number, P.O. Box, or rural route
            and box number.  It also needs to include a city, state and
            zip code for mailings within the USA, and may also include a
            country name.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Address-LocationDesignator"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="MailingLocation">
        <rdfs:label xml:lang="en">mailing locations</rdfs:label>
        <rdfs:comment>A specialization of #$ContactLocation.  Each
            instance of #$MailingLocation is a location at which an
            agent can be contacted by mail.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MainVerb">
        <rdfs:label xml:lang="en">#$MainVerb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of verbs, excluding auxiliary verbs and modals
            (but including participles).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Verb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingAGesture">
        <rdfs:label xml:lang="en">#$MakingAGesture</rdfs:label>
        <rdfs:comment>The collection of acts of #$IBOCreation  done by
            an #$Animal (including #$Person) arranging its limbs or
            other  body parts (and whatever objects the limbs might be
            holding) in some  meaningful configuration (static or
            dynamic).  Vocal #$IBTGenerations  are not considered to be
            gestures (see #$MakingAnOralSound for this),  but they might
            be done in conjunction with gestures.      NB:
            #$MakingAGesture is NOT a subcollection of
            #$NonVerbalCommunicating;  at most, an instance of
            #$MakingAGesture is only half of a communication event.  And
            someone can make a gesture while alone, without using it for
            communication. Thus, only some gestures are #$subEvents of
            #$NonVerbalCommunicating. (But note that #$MakingAGesture IS
            a subcollection  of #$IBTGeneration-Original (q.v.), since
            every gesture encodes  information, whether or not it is
            used for communication in a  particular instance.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VisualInformationConveyingAct"/>
        <rdfs:subClassOf rdf:resource="#VoluntaryBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingAnAgreement">
        <rdfs:label xml:lang="en">making an agreement</rdfs:label>
        <rdfs:comment>A specialization of #$CreationEvent.  Each
            instance of #$MakingAnAgreement is an event in which two or
            more agents specify the terms of an agreement (see the
            collection #$Agreement) to which they will be agreeing
            parties (see the predicate #$agreeingAgents), and
            subsequently enter into that agreement.  Specializations of
            #$MakingAnAgreement include
            #$EngagementEventPart-BecomingEngaged, #$EmployeeHiring,
            #$DeclaringCeaseFire, and #$MakingAReservation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
        <rdfs:subClassOf rdf:resource="#CooperationEvent"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingAnOralSound">
        <rdfs:label xml:lang="en">#$MakingAnOralSound</rdfs:label>
        <rdfs:comment>The collection of actions in which the lips and
            other mouth parts are  used to make sound.
            #$MakingAnOralSound means the event in which sound  is
            produced more-or-less voluntarily, using the mouth, mouth
            portal,  lips, and tongue.--Kean, July 11, 1997</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#EmittingSound"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingFacialExpression">
        <rdfs:label xml:lang="en">making a facial expression</rdfs:label>
        <rdfs:comment>A specialization of #$BodyMovementEvent.  Each
            instance of #$MakingFacialExpression is an event during
            which the configuration of a particular animal&apos;s face
            changes.  Such a change is usually (but not always)
            associated with the expression of some emotion by the animal
            in question.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingSomething">
        <rdfs:label xml:lang="en">making events</rdfs:label>
        <rdfs:comment>A collection of creation events -- a
            specialization of both #$CreatingAnArtifact and
            #$PhysicalCreationEvent (qq.v.).  Each instance of this
            collection involves some #$PartiallyTangible thing being
            made (by some #$Agent) from raw materials or from parts. The
            end result (see #$productsCreated) might or might not be a
            #$Product. Examples include baking a loaf of bread and
            assembling a high-fidelity audio component. See also the
            more specialized #$Constructing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#CreatingAnArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingSomethingAvailable">
        <rdfs:label xml:lang="en">#$MakingSomethingAvailable</rdfs:label>
        <rdfs:comment>The collection of all activities in which an
            #$Agent makes it possible for another #$Agent to use (but
            not necessarily own) a good or service.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MakingTravelArrangements">
        <rdfs:label xml:lang="en">#$MakingTravelArrangements</rdfs:label>
        <rdfs:comment>The collection of all events in which an agent
            arranges for some kind of travel event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArrangingForSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MaleAnimal">
        <rdfs:label xml:lang="en">male animals</rdfs:label>
        <rdfs:comment>The collection of all male animals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MalePerson">
        <rdfs:label xml:lang="en">#$MalePerson</rdfs:label>
        <rdfs:comment>The collection of all male persons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MaleAnimal"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </owl:Class>
    <owl:Class rdf:ID="Malfunction">
        <rdfs:label xml:lang="en">malfunctions</rdfs:label>
        <rdfs:comment>A specialization of both #$SystemCondition and
            #$PhysicalEvent.  Each instance of #$Malfunction is a
            dynamic state of  impairment, in the sense that it has
            temporal aspects, it progresses dynamically, and so on; it
            is not just `being in some static state of error.&apos;
            Notable specializations of #$Malfunction include
            #$AgentBasedSystemMalfunction and #$AilmentCondition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#SystemCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Malnutrition">
        <rdfs:label xml:lang="en">malnutrition</rdfs:label>
        <rdfs:comment>A collection of physiological conditions caused by
            the lack of essential #$Nutrients (usually vitamins,
            minerals or proteins). Specialized forms of #$Malnutrition
            are: (1) #$DietaryDeficiencyCondition, in which the
            necessary nutrients are not ingested; and (2)
            #$Malnutrition-Secondary, in which the necessary nutrients
            are not properly metabolized.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mammal">
        <rdfs:label xml:lang="en">mammals</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass, and a sub-taxon
            of #$Vertebrate.  Each instance of #$Mammal is an
            air-breathing, warm-blooded animal which, if female, nurses
            its young with milk secreted by mammary glands. The skin of
            instances of #$Mammal is typically covered with hair (or
            sometimes hair modified into scales or plates, as in
            pangolins), but some types are almost hairless.  All mammals
            other than the Monotremes of Australia bear live young
            rather than laying eggs, and have teats, which on females
            are used for nursing the young.  Monotremes do not have
            teats, but both male and female produce milk from mammary glands.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#Homeotherm"/>
        <rdfs:subClassOf rdf:resource="#AirBreathingVertebrate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MammalCapabilityType">
        <rdfs:label xml:lang="en">#$MammalCapabilityType</rdfs:label>
        <rdfs:comment>This is the collection of types of action which
            can be done by any normal adult #$Mammal in typical
            circumstances, as opposed to types of action which can be
            done by only some mammals.  For example, #$Breathing is an
            instance, though #$Flying-FlappingWings is not, because all
            mammals breathe but only some fly.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanCapabilityType"/>
    </owl:Class>
    <owl:Class rdf:ID="Manager">
        <rdfs:label xml:lang="en">director</rdfs:label>
        <rdfs:comment>A specialization of #$AdministrativeStaffPerson.
            Each instance of #$Manager is a person whose primary job is
            to manage other people, directing their work activity in an
            #$Organization or for a #$Project.  A #$Manager tells his or
            her subordinate workers what to do.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdministrativeStaffPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ManipulatingFood">
        <rdfs:label xml:lang="en">manipulating food</rdfs:label>
        <rdfs:comment>Moving food or drink around, and doing things to
            it physically as part of its preparation, etc.  One example
            is moving food from plate to mouth.  Once the food has been
            placed in the mouth this event is over. Animals use paws or
            hands to manipulate food.  If the &apos;performer&apos; is a
            machine (a self-standing electric mixer, for example, or a
            blender) hands aren&apos;t needed, except to prepare the
            machine to do the activity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Manufacturing">
        <rdfs:label xml:lang="en">#$Manufacturing</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Manufacturing
            event, raw materials or component parts are combined to
            produce a product.  In a typical #$Manufacturing process,
            the motivation of the manufacturer is that the value of the
            #$outputs should exceed the value of the #$inputs.
            #$Manufacturing does not include related or supportive
            processes such as transporting the raw materials to the
            manufacturing site, scheduling done ahead of time, etc. --
            the concept #$ProductionEvent covers that bigger picture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ManufacturingOrganization">
        <rdfs:label xml:lang="en">manufacturer</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$ManufacturingOrganization is an organization whose main
            function (see #$MainFunction) is the manufacture or
            production of goods.  Instances of
            #$ManufacturingOrganization may be departments,
            suborganizations, companies, or conglomerate enterprises.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Map">
        <rdfs:label xml:lang="en">maps</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork.  Each
            instance of #$Map is a conceptual work that models a region
            of physical space by using graphical symbols (or possibly
            another code), often in conjunction with a natural language,
            to represent features such as the following: geographical
            areas (#$GeographicalRegion), topographical features
            (#$TopographicalFeature), political regions
            (#$GeopoliticalEntity), climate zones (#$ClimateCycleType),
            human artifacts (#$ConstructionArtifact), population
            densities (#$populationDensity).  Maps are generally
            intended to help an agent to orient itself in space or to
            understand some aspect(s) of a large spatial area.
            Instances of #$Map are physically instantiated in map copies
            (see the collection #$MapCopy), which may be on paper, in
            computerized geographical information systems, or in other forms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VisualArtifact-CW"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="March">
        <rdfs:label xml:lang="en">March</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarMonth. Each instance
            of #$March is the third month of a particular year in the
            #$GregorianCalendar (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MarineCorps">
        <rdfs:label xml:lang="en">marines (types of things)</rdfs:label>
        <rdfs:comment>A subcollection of #$BranchOfMilitaryService.
            Each instance of #$MarineCorps is a military branch, modern
            or historical, composed mainly of soldiers (i.e. combat
            personnel) who serve on ships or in conjunction with naval
            forces, and whose purpose is to defend or attack coastal areas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BranchOfMilitaryService"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MarinePersonnel">
        <rdfs:label xml:lang="en">#$MarinePersonnel</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryPerson.  Each
            instance of #$MarinePersonnel is a person who is a member of
            some instance of #$MarineCorps (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MarketingActivity">
        <rdfs:label xml:lang="en">marketing</rdfs:label>
        <rdfs:comment>The collection of events in which a product is
            made available or promoted for sale.  Includes advertising,
            press releases, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MakingSomethingAvailable"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#SalesActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MarkingOnASurface">
        <rdfs:label xml:lang="en">marking (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of both #$MaterialHandling and
            #$IBOCreation.  Each instance of #$MarkingOnASurface is an
            event in which visible markings are placed on a surface by
            an agent (see the collection #$Agent).  The marking may be
            done by adding material to a surface (as in instances of
            #$Painting-Activity) or removing material from a surface (as
            in instances of #$EngravingEvent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#IBOCreation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mass">
        <rdfs:label xml:lang="en">weight</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Instances
            of #$Mass may be either a fixed interval, such as two
            kilograms, or a range, such as a legal load for a certain
            type of trailer.  The more mass an object has, the greater
            is the force required to accelerate it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="MassEMailSending">
        <rdfs:label xml:lang="en">mass mailing</rdfs:label>
        <rdfs:comment>A specialization of #$EMailSending. Each instance
            of this collection is an #$Event in which somebody or
            something sends copies of an #$EMailMessage to many --
            typically hundreds or thousands -- of #$EMailAddresses.
            Commonly known as  spamming , the practice is often
            performed in an attempt to sell some product. Instances of
            #$MassEMailSending where the #$EMailMessages are received as
            well as sent also fall into the collection
            #$MassEMailCommunication. The #$EMailMessages sent during
            such events fall into the collection #$Spam-UnsolicitedEMail.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MarketingActivity"/>
        <rdfs:subClassOf rdf:resource="#ActsCommonlyConsideredCriminal"/>
        <rdfs:subClassOf rdf:resource="#EMailSending"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MassNoun">
        <rdfs:label xml:lang="en">#$MassNoun</rdfs:label>
        <rdfs:comment>The collection of all mass nouns.  Mass nouns are
            syntactically singular, and often they denote stufflike
            things. Example: &apos;water&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MassNoun-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MassNoun-Generic">
        <rdfs:label xml:lang="en">#$MassNoun-Generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all mass nouns.  Mass nouns are syntactically
            singular, and often they denote stufflike things. Example:
            &apos;water&apos;. This collection also includes proper mass
            nouns like &apos;Pepsi&apos;, agentive mass nouns like
            &apos;moisturizer&apos;, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MaterialHandling">
        <rdfs:label xml:lang="en">material handling</rdfs:label>
        <rdfs:comment>The collection of all actions in which some sort
            of material (solid, liquid, or gas) is handled or moved
            around. This includes actions done with the use of tools or
            machinery (such as shovels, dump trucks, or cranes), and is
            therefore not restricted to the kind of  handling  that is
            done with one&apos;s hands.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MaterialStrengthType">
        <rdfs:label xml:lang="en">#$MaterialStrengthType</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$MaterialStrengthType is a specific collection of
            attributes used in determining the strength of a material.
            Examples: #$Hardness, #$Malleability, #$Ductility, #$Elasticity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivedNumericScalarIntervalType"/>
    </owl:Class>
    <owl:Class rdf:ID="MathematicalObject">
        <rdfs:label xml:lang="en">individual mathematical objects</rdfs:label>
        <rdfs:comment>A specialization of both #$MathematicalThing and
            #$IntangibleIndividual.  Each instance of
            #$MathematicalObject is a purely abstract mathematical thing
            which is also an individual (see #$Individual).
            Specializations of #$MathematicalObject include
            #$Quantifier, #$RealNumber, #$Triangle, and #$TruthValue.
            Note that instances of #$SetOrCollection are not instances
            of #$MathematicalObject, since they are not instances of #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#MathematicalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MathematicalOrComputationalThing">
        <rdfs:label xml:lang="en">mathematical or computational objects</rdfs:label>
        <rdfs:comment>The collection of #$Intangible things that are
            intrinsically mathematical (see #$MathematicalThing) or
            computational (see #$ComputationalObject).  Instances of
            #$MathematicalOrComputationalThing are abstract in the very
            strong sense of being nonspatial, atemporal, and massless.
            Examples include numbers, sets, collections, relations,
            algorithms, and abstract character strings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Intangible"/>

    </owl:Class>
    <owl:Class rdf:ID="MathematicalOrdering">
        <rdfs:label xml:lang="en">mathematical ordering</rdfs:label>
        <rdfs:comment>The collection of all those #$RelationalStructures
            that are called &apos;orderings&apos;.  A
            #$MathematicalOrdering is usually described as an ordered
            pair &lt;S, R&gt; where S is a set and R is a binary
            relation on S that is transitive, i.e., for each X, Y and Z
            in S, R(X Y) and R(Y Z) imply R(X Z).  We do not have to
            define a #$MathematicalOrdering in Cyc as an ordered pair,
            but it is essential that each such #$MathematicalOrdering
            has a unique #$baseSet and a unique ordering relation.  We
            use, for each #$MathematicalOrdering ORDER,
            (#$orderingRelations ORDER PRED) to specify a binary
            predicate PRED, the restriction of which to the #$baseSet S
            of ORDER indicates the ordering relation R on S, and we
            require the collections that are used to specify the
            arguments to PRED to be supersets of S.  In principle, there
            could be different predicates PRED1 and PRED2 such that when
            restricted to the same #$baseSet S of a
            #$MathematicalOrdering ORDER, they order the elements of S
            exactly the same way.  When we said that there is a unique
            ordering relation R on S, we mean to ignore the difference
            between PRED1 and PRED2 when they are restricted to S, and
            treat the results of such restrictions the same, as far as
            they are used to talk about ORDER.  Subcollections of
            #$MathematicalOrdering include #$PartialOrdering,
            #$PartialOrdering-Strict, #$TreeOrdering,
            #$TreeOrdering-Strict, #$TotalOrdering,
            #$TotalOrdering-Strict, #$WellOrdering and
            #$Lattice-LatticeTheoretic, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationalStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MathematicalThing">
        <rdfs:label xml:lang="en">mathematical concepts</rdfs:label>
        <rdfs:comment>A specialization of
            #$MathematicalOrComputationalThing.  Each instance of
            #$MathematicalThing is an atemporal, nonspatial, purely
            mathematical thing.  #$MathematicalThing is partitioned into
            two main specializations, #$MathematicalObject and
            #$SetOrCollection (qq.v).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalOrComputationalThing"/>

    </owl:Class>
    <owl:Class rdf:ID="MatterTypeByPhysicalState">
        <rdfs:label xml:lang="en">states of matter</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$MatterTypeByPhysicalState is a collection of instances of
            #$PartiallyTangible (q.v.) that are in one of the basic
            physical states of matter. The only four instances of this
            collection are  #$Solid-StateOfMatter,
            #$Liquid-StateOfMatter, #$Gaseous-StateOfMatter,  and
            #$Plasma-StateOfMatter.  Although the chemical composition
            of a  substance does not change when its basic physical
            state changes, many  of its intrinsic physical properties do
            change -- including its density,  viscosity, brittleness,
            color, and size.  States of matter concern  the organization
            of matter at the molecular level, as determined by
            temperature and pressure. Sufficiently large changes in
            temperature or pressure will cause matter in one physical
            state to transform into another (see  #$StateOfMatterChangeEvent).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="May">
        <rdfs:label xml:lang="en">May</rdfs:label>
        <rdfs:comment>The collection of all Mays, the second month to
            start after the vernal equinox (in the Northern Hemisphere)
            in the #$GregorianCalendar and #$JulianCalendar.  May is the
            fifth month of the year in the #$GregorianCalendar.  May
            started as the third month of the year in the
            #$JulianCalendar, but after the beginning of the year was
            moved to the beginning of #$January it became the fifth
            month of the year.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MeasurableScalarIntervalType">
        <rdfs:label xml:lang="en">#$MeasurableScalarIntervalType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$MeasurableScalarIntervalType is a collection of
            #$ScalarIntervals which are quantifiable (i.e., they can be
            assigned a numeric value).  Instances of
            #$MeasurableScalarIntervalType include #$RateOfRotation,
            #$ConcentrationPerVolume, and #$Time-Quantity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotallyOrderedScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="MeasuringDevice">
        <rdfs:label xml:lang="en">measuring devices</rdfs:label>
        <rdfs:comment>#$MeasuringDevice is a specialization of
            #$PhysicalDevice.  Each instance of #$MeasuringDevice is a
            device used for measuring some quantity such as #$Distance,
            #$Volume, #$Temperature, etc.  Specializations of
            #$MeasuringDevice include #$Thermometer,
            #$Scale-MeasuringDevice, and #$Odometer.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MeasuringSomething">
        <rdfs:label xml:lang="en">measuring events</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulPhysicalAction.
            Each instance of #$MeasuringSomething is an event in which
            an agent uses a physical device to measure some physical
            attribute of a tangible object.  The last part of such an
            event involves the perception (and perhaps recording) of a
            result of the measurement (see the predicate
            #$measurementResult) by some instance of #$PerceptualAgent.
            See also the function #$MeasurementFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Evaluating"/>
        <rdfs:subClassOf rdf:resource="#UsingADevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MechanicalDevice">
        <rdfs:label xml:lang="en">mechanical devices</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$MechanicalDevice is a physical device which
            has at least one part that moves with respect to another one
            of its parts.  Thus a spoon is not an instance of
            #$MechanicalDevice, but a pair of scissors is, as are more
            complex devices such as vacuum cleaners and the #$SpaceShuttleChallenger.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#CommodityProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MediaProduct">
        <rdfs:label xml:lang="en">media products</rdfs:label>
        <rdfs:comment>A specialization of both #$Product and
            #$InformationStore.  Each instance of #$MediaProduct is an
            information store created for the purposes of media
            distribution (see #$MediaTransferEvent).  Specializations of
            #$MediaProduct include #$RecordedVideoProduct,
            #$MediaSeriesProduct, and #$NewsArticle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalCareEvent">
        <rdfs:label xml:lang="en">medical care</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$MedicalCareEvent is an event in which a medical care
            professional provides a medical service to some human or
            animal patient(s). Notable specializations of
            #$MedicalCareEvent include #$MedicalTesting,
            #$HospitalCareEvent, and #$Surgery.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalCareInstitution">
        <rdfs:label xml:lang="en">medical care institutions</rdfs:label>
        <rdfs:comment>#$MedicalCareInstitution is a specialization of
            #$OrganizationWithIndividualClients and
            #$MedicalCareOrganization.  Each instance of
            #$MedicalCareInstitution is a large organization that
            provides medical or psychiatric care and has facilities for
            patients to stay at least overnight.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualClients"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalCareOrganization">
        <rdfs:label xml:lang="en">medical care organization</rdfs:label>
        <rdfs:comment>#$MedicalCareOrganization is a specialization of
            #$HealthcareOrganization, #$MedicalCareProvider and
            #$ServiceOrganization.  Each instance of
            #$MedicalCareOrganization is an organization that provides
            some kind of medical care (note that an instance of
            #$MedicalCareOrganization may be a sub-organization of a
            larger organization).  Notable specializations of
            #$MedicalCareOrganization include #$MedicalCareInstitution,
            #$Hospital, and #$VeterinaryHospital.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareProvider"/>
        <rdfs:subClassOf rdf:resource="#HealthcareOrganization"/>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalCareProfessional">
        <rdfs:label xml:lang="en">health care professionals</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$MedicalCareProfessional is a person whose
            occupation principally involves medical care of patients,
            including surgery, psychological care, physical therapy,
            practical nursing, and dispensing drugs.  Notable
            specializations of #$MedicalCareProfessional include
            #$Doctor-Medical, #$Dentist, and #$Pharmacist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HealthProfessional"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProvider"/>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalCareProvider">
        <rdfs:label xml:lang="en">health care provider</rdfs:label>
        <rdfs:comment>A specialization of #$SocialBeing instances of
            which are agents -- either individuals or organizations --
            who provide medical care in a professional capacity.
            Specializations  of #$MedicalCareProvider include
            #$MedicalCareProfessional and  #$MedicalCareOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalPatient">
        <rdfs:label xml:lang="en">#$MedicalPatient</rdfs:label>
        <rdfs:comment>The #$Collection of instances of #$Animal while
            undergoing medical care - which includes routine
            examinations as well as treatment for injuries or illnesses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalSpecialtyType">
        <rdfs:label xml:lang="en">#$MedicalSpecialtyType</rdfs:label>
        <rdfs:comment>An instance of #$SiblingDisjointCollectionType,
            and a specialization of #$PersonTypeByOccupation. Each
            instance of #$MedicalSpecialtyType is a type of profession
            in the field of health care. Instances include
            #$Doctor-Medical, #$Dentist, and #$Nurse.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonTypeByOccupation"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalTesting">
        <rdfs:label xml:lang="en">medical tests</rdfs:label>
        <rdfs:comment>A specialization of #$MedicalCareEvent and
            #$Evaluating.  Each instance of #$MedicalTesting is a test
            done on a patient -- or, often, on a sample taken from the
            patient&apos;s body -- in order to gather information about
            the patient&apos;s general state of health, in order to help
            in making a diagnosis, or in order to determine or monitor
            the severity of a known condition of the patient.  Instances
            of #$MedicalTesting include individual blood tests, as well
            as individual MRIs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Evaluating"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MedicalTreatmentEvent">
        <rdfs:label xml:lang="en">medical treatments</rdfs:label>
        <rdfs:comment>A subcollection of #$MedicalCareEvent.  Each
            instance of #$MedicalTreatmentEvent is a procedure performed
            by one or more medical professionals to alleviate or
            ameliorate a #$PhysiologicalCondition (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#SimpleRepairing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MediterraneanScrub">
        <rdfs:label xml:lang="en">mediterranean scrub</rdfs:label>
        <rdfs:comment>A specialization of #$OutdoorLocation. Each
            instance is an area of shrub-dominated vegetation located in
            the Mediterranean basinand similar climatic regions in
            coastal parts  of California, Chile, South Africa, and
            southern Australia.  A variety  of aromatic herbaceous
            plants grow beneath low shrub thickets.  Source: The Times
            Atlas of the World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedTerrainGeologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MeetingSomeone">
        <rdfs:label xml:lang="en">#$MeetingSomeone</rdfs:label>
        <rdfs:comment>A collection of actions.  In a #$MeetingSomeone
            event, one #$Agent is moving and meets (comes into close
            proximity with) another #$Agent.  This may or may not be
            purposeful.  It may be performed by non-human animals, and
            occasionally by other sorts of #$Agents. Note: this does not
            mean `being introduced to someone&apos;, but rather `going
            to meet with someone&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EncounteringSomething"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MeetingTakingPlace">
        <rdfs:label xml:lang="en">#$MeetingTakingPlace</rdfs:label>
        <rdfs:comment>A specialization of #$SocialGathering.  Each
            instance of #$MeetingTakingPlace is an event in which people
            gather intentionally at a location for some common purpose:
            for example, to communicate with each other, share some
            experience, or transact some business.  Notable
            specializations of #$MeetingTakingPlace include
            #$StaffMeeting, #$ClassMeeting, and #$BusinessMeeting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Melting">
        <rdfs:label xml:lang="en">melting events</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, an object is heated to (and then above) its
            #$freezingPoint and is thereby changed from a
            #$Solid-StateOfMatter to a #$Liquid-StateOfMatter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MemorialMarker">
        <rdfs:label xml:lang="en">memorials</rdfs:label>
        <rdfs:comment>A specialization of #$SymbolicObject and
            #$ConstructionArtifact. Each instance of this collection is
            an artifact built to commemorate an individual, group of
            individuals or event. The collection includes gravestones,
            statues, and pyramids.  See #$honorsThing and its
            specializations. Large and imposing instances of
            #$MemorialMarker fall under the more specialized collection #$Monument.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#SymbolicObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Memory">
        <rdfs:label xml:lang="en">memory</rdfs:label>
        <rdfs:comment>A specialization of #$MentalInformation.  Each
            instance of #$Memory is the propositional content of a
            mental state in which a person recalls past events.  Most
            commonly those memories concern first-person experiences,
            but they may include recollections of anything that the
            person has learned in the past.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MentalInformation"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="MensClothing">
        <rdfs:label xml:lang="en">mens clothing</rdfs:label>
        <rdfs:comment>A specialization of #$Clothing-Generic.  Each
            specialization of #$MensClothing is a type of clothing item
            worn usually by men.  Specializations of #$MensClothing
            include #$Tuxedo and #$MensJockeyUnderwear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MentalInformation">
        <rdfs:label xml:lang="en">pieces of mental information</rdfs:label>
        <rdfs:comment>A specialization of
            #$PropositionalInformationThing.  Each instance of
            #$MentalInformation is the propositional content of a
            specific mental state (for example, a memory or a sensory
            perception) of an individual person.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="MentalSituation">
        <rdfs:label xml:lang="en">#$MentalSituation</rdfs:label>
        <rdfs:comment>A specialization of #$Situation-Temporal. Each
            instance of #$MentalSituation is a mental situation such as
            a person seeing the color red, or believing that his enemies
            control the CIA, or desiring that Fidel Castro shave his
            beard. An important subcollection of this collection is
            #$AtLeastPartiallyMentalEvent whice is the collection of
            mental situations that are events, such as thinking about
            something or tasting something. Other instances of
            #$MentalSituation are more  long-standing  and stable, and
            hence also instances of #$StaticSituation, e.g., believing
            something, or having some goal. Cf. #$MentalSituationFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MentalSituation-SingleSubject">
        <rdfs:label xml:lang="en">#$MentalSituation-SingleSubject</rdfs:label>
        <rdfs:comment>A specialization of #$MentalSituation (q.v.) each
            instance of which has a single agent (normally an
            #$IndividualAgent) as its  subject .  A subject in this
            sense is an agent who has, undergoes, experiences,
            entertains, or  performs the mental situation, as the case
            may be.  Instances  of #$MentalSituation-SingleSubject can
            be mental _events_ (see  #$AtLeastPartiallyMentalEvent) such
            as acts of perception or  mental _states_ (see
            #$MentalState) such as Alice&apos;s loving Bob.   This
            collection excludes any mental situations that have more
            than one subject, such as (perhaps) an event of mutual
            recognition  between two people, as well as any mental
            situations that have  no proper subject at all, such as
            (perhaps) an event of mass  hysteria or a state involving
            the Jungian  collective unconscious . It of course does not
            exclude a given mental situation merely  because it happens
            to _involve_ more than one agent; Alice&apos;s  loving Bob
            involves two people, but Alice is nevertheless its  only
            subject.  In most contexts, the mental situations of
            interest are mostly single-subject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MentalSituation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MentalSlot">
        <rdfs:label xml:lang="en">#$MentalSlot</rdfs:label>
        <rdfs:comment>A collection of binary predicates, each of which
            relates an agent to some formula or object to which it has
            some  cognitive connection, e.g. perceives, knows, or is
            aware of. It has two important specializations:
            #$CognitiveAwarenessPredicate, whose instances (e.g.
            #$tastes #$knowsAbout) relate an agent to that which the
            agent perceives or is otherwise aware of, and
            #$PropositionalAttitudeSlot, whose instances (e.g. #$beliefs
            and #$goals) relate an agent to an #$ELSentence-Assertible
            expressing the content of the agent&apos;s belief, goal, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AgentPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MetaFunction">
        <rdfs:label xml:lang="en">meta function</rdfs:label>
        <rdfs:comment>A subcollection of #$MetaRelation (q.v.).
            Instances of #$MetaFunction are used to make definitional
            (e.g. argument-type constraint or generalization) assertions
            about functions (and only functions).  As such, instances of
            #$MetaFunction have (at least) one of their own
            argument-places (usually, but not always, the first or  arg1
            ) constrained to be instances of #$Function-Denotational (or
            some subcollection thereof).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="MetaKnowledgePredicate">
        <rdfs:label xml:lang="en">metaknowledge predicates</rdfs:label>
        <rdfs:comment>A collection of predicates, each instance of which
            is used to state things about the Cyc system or the CycL
            language itself -- usually about a particular reified
            constant or assertion in the Knowledge Base.  Examples
            include #$myCreator, #$cyclistNotes, #$sharedNotes,
            #$salientAssertions, and #$assertionConclusionActionType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PossibleDefinitionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MetaLanguagePredicate">
        <rdfs:label xml:lang="en">meta language predicate</rdfs:label>
        <rdfs:comment>A subcollection of #$MetaKnowledgePredicate,
            instances of which are used (exclusively) to make statements
            that are primarily about expressions of the #$CycL language
            itself.  As such, instances of #$MetaLanguagePredicate have
            at least one of their argument-places constrained to
            instances (see #$argIsa) of #$CycLExpression or some
            specialization thereof (and such argument-places might or
            might not be  implicitly quoted ; see #$quotedArgument).
            But note that having such a constraint is a necessary and
            not a sufficient condition for being a metalanguage
            predicate.  For example, although both argument-places of
            #$causes-PropProp are constrained to instances of
            #$ELSentence-Assertible, a statement using that predicate is
            mainly  about  the states of affairs those sentences
            describe, as opposed to being about the sentences
            themselves.  In contrast, #$denotes (whose first argument is
            constrained to be a CycL term) is used to make semantic
            statements that are specifically about what the denotation
            of some term is.  Thus #$denotes is a
            #$MetaLanguagePredicate and #$causes-PropProp is not. A
            statement made with a #$MetaLanguagePredicate might be
            syntactic, semantic, or pragmatic in nature.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MetaPredicate">
        <rdfs:label xml:lang="en">meta-predicates</rdfs:label>
        <rdfs:comment>A subcollection of #$MetaRelation (q.v.).
            Instances of #$MetaPredicate are used to make definitional
            (e.g. argument-type constraint or generalization) assertions
            about predicates (and only predicates).  As such, instances
            of #$MetaPredicate have (at least) one of their own
            argument-places (usually, but not always, the first or  arg1
            ) constrained to be instances of #$Predicate (or some
            subcollection thereof).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="MetaRelation">
        <rdfs:label xml:lang="en">meta relation</rdfs:label>
        <rdfs:comment>A subcollection of #$Predicate.  Instances of
            #$MetaRelation are used to make definitional (e.g. arity or
            argument-constraint) assertions about relations.  As such,
            each instance of #$MetaRelation has (at least) one of its
            own argument-places (usually, but not always, the first or
            arg1 ) type-constrained to instances of #$Relation (or some
            subcollection thereof).  Note that all meta-relations are
            themselves _predicates_ (as opposed to functions or other
            non-predicate relations); the collection #$MetaRelation is
            so-named because its instances (unlike those of its
            specialization #$MetaPredicate) may admit non-predicate
            relations as arguments.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Metal">
        <rdfs:label xml:lang="en">#$Metal</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffCompositionType.
            Every instance of #$Metal is a tangible object having
            certain characteristic physical and chemical properties.
            Instances of #$Metal are good conductors of electricity and
            heat, and most instances of #$Metal are solids at room
            temperature (although all instances of #$Mercury, for
            example, are liquids at room temperature).  Solid instances
            of #$Metal have a shiny luster, and are highly malleable.
            Specializations of #$Metal include #$Mercury, #$Potassium,
            #$Brass, #$Lead, and #$Iron.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ElectricalConductor"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MetalAlloy">
        <rdfs:label xml:lang="en">#$MetalAlloy</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subcollection
            of #$Metal.  Each instance of #$MetalAlloy is a metallic
            stuff which is a homogeneous blend of at least one part of
            #$UnalloyedMetal with at least one other substance.
            #$MetalAlloy is not a subcollection of #$Mixture, because
            each instance of #$MetalAlloy is defined not only by the
            amounts and kinds of its #$constituents, but also (unlike a
            mixture) by the internal structures formed during its
            creation.  Furthermore, the creation process is typically
            more complex than #$Mixing.  Common metal alloys include the
            instances of #$Bronze-Stuff, #$Brass, and #$Steel.  Note
            that #$GalvanizedMetal is _not_ a subcollection of
            #$MetalAlloy, because every instance of #$GalvanizedMetal
            has a coating of some #$Zinc on its surface, and thus
            (unlike an alloy) the components of galvanized metals are
            not homogenously distributed throughout.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#Metal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MetricUnitPrefix">
        <rdfs:label xml:lang="en">metric unit prefix</rdfs:label>
        <rdfs:comment>Non-atomic term functions, like #$Kilo, which take
            a basic unit of measure, such as #$Gram, and add a metric
            prefix to it, creating a new derived unit of measure, such
            as #$Kilogram</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#UnaryFunction"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="Microorganism">
        <rdfs:label xml:lang="en">microorganisms</rdfs:label>
        <rdfs:comment>A specialization of both #$MicroscopicScaleObject
            and #$Organism-Whole.  Each instance of #$Microorganism is
            an organism too small to be seen by humans without the aid
            of a microscope.  Notable specializations of #$Microorganism
            include #$Protozoan, #$Virus, and #$ProkaryoticCell.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MicroscopicScaleObject">
        <rdfs:label xml:lang="en">microscopic objects</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$MicroscopicScaleObject is a partially tangible
            object which is so small that human beings cannot perceive
            it, except (perhaps) with the use of special devices such as
            #$Microscopes or #$ElectronMicroscopes.  Specializations of
            #$MicroscopicScaleObject include #$Molecule, #$Atom,
            #$SubAtomicParticle, #$Chloroplast, and #$Mitochondrion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Microtheory">
        <rdfs:label xml:lang="en">#$Microtheory</rdfs:label>
        <rdfs:comment>A specialization of #$AbstractInformationalThing.
            Each instance of #$Microtheory is an abstract informational
            thing that represents a context in Cyc.  Each microtheory
            (or &apos;mt&apos;) serves to group a set of assertions
            together that share some common assumptions; the assertions
            in an mt constitute the content of that mt.  Note that each
            assertion in the Cyc knowledge base must be explicitly
            stated to be true in at least one microtheory.  Assertions
            stated to be true in one mt will also be true  (by
            inference) in more specialized mts that depend on the
            content of that mt.  For example, if something is true in
            the #$HumanSocialLifeMt (q.v.), then it should by default be
            true in the more specialized #$UnitedStatesSocialLifeMt
            (q.v.).  Specialized microtheories are related to the more
            general microtheories on which they depend by the predicate
            #$genlMt (q.v.).  Note that every query is made in some mt,
            and the answer one gets to a query depends on the mt in
            which it is asked, since the only assertions which can be
            used to answer a query in an mt are those  explicitly stated
            to be true in that mt, or in some more general mt.  See also
            the predicate #$ist, which is used to relate an assertion to
            the microtheories in which it is true.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MicrotheoryDesignatingFunction-Denotational">
        <rdfs:label xml:lang="en">microtheory designating function denotational</rdfs:label>
        <rdfs:comment>The collection of denotational functions which
            specify that a #$ELSentence-Assertible  is to be interpreted
            in a given #$Microtheory.  It will be canonicalized and
            checked for well-formedness with respect to that
            microtheory.  Each microtheory-designating function has an
            argument which denotes a microtheory, and another argument
            which denotes a  #$ELSentence-Assertible.  It may have other
            arguments as well.  Use #$microtheoryDesignationArgnum and
            #$sentenceDesignationArgnum to specify these argument
            positions for each  microtheory-designating function.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MicrotheoryDesignatingRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="MicrotheoryDesignatingPredicate">
        <rdfs:label xml:lang="en">microtheory-designating predicates</rdfs:label>
        <rdfs:comment>The collection of  decontextualized  predicates
            (see #$decontextualizedPredicate) that specify that a given
            #$ELSentence-Assertible is to be interpreted in a given
            #$Microtheory. The sentence will be canonicalized and
            checked for well-formedness with respect to that
            microtheory.  Each microtheory-designating predicate thus
            takes a microtheory (see #$microtheoryDesignationArgnum) and
            an #$ELSentence-Assertible (see #$sentenceDesignationArgnum)
            as arguments.  It may take one or more other arguments as well.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MicrotheoryDesignatingRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MicrotheoryDesignatingRelation">
        <rdfs:label xml:lang="en">microtheory designating relation</rdfs:label>
        <rdfs:comment>The collection of #$Relations which specify that a
            #$ELSentence-Assertible is to be interpreted in a given
            #$Microtheory.  It will be canonicalized and checked for
            well-formedness with respect to that microtheory. Each
            microtheory-designating relation has an argument which
            denotes a microtheory, and another argument which denotes a
            #$ELSentence-Assertible.  It may have other arguments as
            well. Use #$microtheoryDesignationArgnum and
            #$sentenceDesignationArgnum to specify these argument
            positions for each microtheory-designating relation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="MicrotheoryPredicate">
        <rdfs:label xml:lang="en">microtheory predicates</rdfs:label>
        <rdfs:comment>A specialization of #$Predicate.  Each instance of
            #$MicrotheoryPredicate is a predicate used to describe the
            properties and relationships of instances of #$Microtheory.
            Instances of #$MicrotheoryPredicate include
            #$domainAssumptions, #$mtTime, #$genlMt,
            #$adheresToCodeOfConduct, #$ist-Agreement, and #$ist-Obligation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MicrotheoryType">
        <rdfs:label xml:lang="en">#$MicrotheoryType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$MicrotheoryType is a specialization of #$Microtheory.
            Instances of #$MicrotheoryType include the collections
            #$HypotheticalContext and #$GeneralMicrotheory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="Microwaving">
        <rdfs:label xml:lang="en">#$Microwaving</rdfs:label>
        <rdfs:comment>A collection of events in which a #$MicrowaveOven
            is used to heat food (or drink). After a #$Microwaving
            event, the food involved has been #$Microwaved.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Midday">
        <rdfs:label xml:lang="en">middays</rdfs:label>
        <rdfs:comment>A #$Midday is the daily event where the #$Sun is
            near its `highest&apos; position in the daily cycle.  A
            #$Midday overlaps the start of an #$Afternoon, and a
            #$Morning overlaps the start of a #$Midday.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MigratoryAnimal">
        <rdfs:label xml:lang="en">migratory animals</rdfs:label>
        <rdfs:comment>A subcollection of #$Animal; the collection of
            animals that change their dwelling place on a periodic,
            typically seasonal basis.  Such behavior is usually
            characteristic of particular types of #$BiologicalSpecies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryAircraft">
        <rdfs:label xml:lang="en">military aircraft</rdfs:label>
        <rdfs:comment>A subcollection of both #$MilitaryVehicle and
            #$AirTransportationDevice.  #$MilitaryAircraft is the
            collection of all aircraft used, or equipped to be used, for
            military purposes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Platform-Military"/>
        <rdfs:subClassOf rdf:resource="#MilitaryVehicle"/>
        <rdfs:subClassOf rdf:resource="#AirTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryAirplane">
        <rdfs:label xml:lang="en">#$MilitaryAirplane</rdfs:label>
        <rdfs:comment>#$MilitaryAirplane is a specialization of
            #$Airplane and #$MilitaryAircraft.  Each instance of
            #$MilitaryAirplane is an airplane typically used by the military.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Airplane"/>
        <rdfs:subClassOf rdf:resource="#MilitaryAircraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryBase-Grounds">
        <rdfs:label xml:lang="en">military bases</rdfs:label>
        <rdfs:comment>#$MilitaryBase-Grounds is a specialization of
            #$MilitaryFacility, #$ContactLocation,
            #$HumanlyOccupiedSpatialObject, and #$GroundsOfOrganization.
            Each instance of #$MilitaryBase-Grounds is a base, post, or
            fort controlled by a military organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GroundsOfOrganization"/>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#MilitaryFacility"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryEquipment">
        <rdfs:label xml:lang="en">#$MilitaryEquipment</rdfs:label>
        <rdfs:comment>#$MilitaryEquipment is a specialization of
            #$Artifact and #$PartiallyTangibleProduct.  Each instance of
            #$MilitaryEquipment is an artifact that is owned and used by
            some #$MilitaryOrganization. Examples include instances of
            weapons, vehicles, and uniforms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryFacility">
        <rdfs:label xml:lang="en">military facilities</rdfs:label>
        <rdfs:comment>#$MilitaryFacility is a specialization of
            #$ConstructionArtifact and #$Facility-Construct. Each
            instance of #$MilitaryFacility is a building or other type
            of construction that is used by a #$MilitaryOrganization.
            This is taken to also include a military training field,
            where there may not be a lot of construction (maybe only a
            fence surrounding it). More concrete examples include
            instances of #$MilitaryAirfield and #$MissileSilo. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Facility-Construct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryHardware">
        <rdfs:label xml:lang="en">military hardware</rdfs:label>
        <rdfs:comment>#$MilitaryHardware is a specialization
            of#$MilitaryEquipment and #$PhysicalDevice.  Each instance
            of #$MilitaryHardware is a type of physical device used by
            the military, thus including #$TransportationDevice-Vehicle,
            #$Weapons and #$CommunicationDevices. It however excludes
            #$MilitaryUniforms and #$Flags.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryEquipment"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryLandPlatform">
        <rdfs:label xml:lang="en">military land platform</rdfs:label>
        <rdfs:comment>#$MilitaryLandPlatform is a specialization of
            #$Platform-Military and #$LandTransportationDevice.  Each
            instance of #$MilitaryLandPlatform is used by the military
            to transport equipment, weapons, and/or personnel on land.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Platform-Military"/>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryOfficer">
        <rdfs:label xml:lang="en">#$MilitaryOfficer</rdfs:label>
        <rdfs:comment>A subcollection of #$MilitaryPerson. Each instance
            of this collection is a person who is a (commissioned or
            non-commissioned) officer in some #$MilitaryOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryOrganization">
        <rdfs:label xml:lang="en">military services</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$MilitaryOrganization is an organization whose function
            (and expertise) is the use of armed force, or the threat of
            such use, against enemies, especially other organized, armed
            enemies.  A military organization includes its fighting
            forces and their command structure, together with dedicated
            support services controlled by that military command.
            Typically, there are special conditions in the relationships
            between a #$MilitaryOrganization and its workers, going
            beyond what is expected in work agreements in civilian
            settings, including strict sanctions to enforce obedience.
            This collection includes #$GovernmentMilitaryOrganizations
            such as the armies, navies, and air forces of the
            world&apos;s governments, and in addition private armies,
            rebel armies, and organized mercenary units.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryPerson">
        <rdfs:label xml:lang="en">military personnel</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryAgent.  Each
            instance of #$MilitaryPerson is a person belonging to one of
            the national military services (see the collection
            #$BranchOfMilitaryService) of some instance of #$Country.
            Notable specializations of #$MilitaryPerson include
            #$ArmyPersonnel, #$NavyPersonnel, and #$MarinePersonnel.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NationalGovernmentEmployee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryVehicle">
        <rdfs:label xml:lang="en">#$MilitaryVehicle</rdfs:label>
        <rdfs:comment>#$MilitaryVehicle is a specialization of
            #$TransportationDevice-Vehicle and #$Platform-Military.
            Each instance of #$MilitaryVehicle would include things like
            airplanes and tanks, but exclude things like towed platforms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Platform-Military"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MilitaryWatercraft">
        <rdfs:label xml:lang="en">military watercraft</rdfs:label>
        <rdfs:comment>#$MilitaryWatercraft is a specialization of
            #$Watercraft and #$Platform-Military. Each instance of
            #$MilitaryWatercraft is a #$Watercraft used in a military
            context. A few notable specializations include nuclear
            submarines and destroyers, but transportation devices which
            are not vehicles could also be instances.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft"/>
        <rdfs:subClassOf rdf:resource="#Platform-Military"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mineral">
        <rdfs:label xml:lang="en">minerals</rdfs:label>
        <rdfs:comment>A specialization of #$InanimateThing-Natural.
            Each instance of #$Mineral is a piece of homogeneous
            inorganic physical substance that has a crystalline
            structure.  Specializations of #$Mineral include the
            collections #$Diamond, #$Turquoise-Gem, #$Jade-Gem, and #$Corundum.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MineralOre">
        <rdfs:label xml:lang="en">ore</rdfs:label>
        <rdfs:comment>A specialization of #$LandStuff.  Each instance of
            #$MineralOre is a piece of substance from which some
            instance(s) of #$Mineral (q.v.) can be extracted.
            Specializations of #$MineralOre include #$IronOre,
            #$BauxiteOre, and #$CopperOre.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Minister-Governmental">
        <rdfs:label xml:lang="en">#$Minister-Governmental</rdfs:label>
        <rdfs:comment>A specialization of both #$PublicOfficial and
            #$Manager.  Each instance of #$Minister-Governmental is a
            person who is responsible for managing the activities of
            some department or sub-organization of a (usually national)
            government.  Notable specializations of
            #$Minister-Governmental include
            #$PrimeMinister-HeadOfGovernment and #$Minister-Diplomatic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicOfficial"/>
        <rdfs:subClassOf rdf:resource="#Administrator"/>
        <rdfs:subClassOf rdf:resource="#Manager"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Misery">
        <rdfs:label xml:lang="en">misery</rdfs:label>
        <rdfs:comment>Feeling of unhappiness and wretched condition
            attending distress and suffering</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Grief"/>
    </owl:Class>
    <owl:Class rdf:ID="Mist">
        <rdfs:label xml:lang="en">mist</rdfs:label>
        <rdfs:comment>A kind of suspension in which particles of liquid
            are suspended in a gas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CloudlikeObject"/>
        <rdfs:subClassOf rdf:resource="#GaseousTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mistrust">
        <rdfs:label xml:lang="en">mistrust</rdfs:label>
        <rdfs:comment>An instance of #$FeelingType, #$Mistrust
            represents the feeling or attitude an agent has towards
            something that it considers unreliable, suspicious, or
            otherwise untrustworthy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Doubt"/>
    </owl:Class>
    <owl:Class rdf:ID="Mixing">
        <rdfs:label xml:lang="en">#$Mixing</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Mixing, two or
            more substances are combined to form a #$Mixture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#Incorporation-Physical"/>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mixture">
        <rdfs:label xml:lang="en">#$Mixture</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$Mixture is a homogeneous partially tangible
            thing composed of two or more different constituents (see
            the predicate #$constituents) which have been mixed.  The
            inputs to this mixing do not form chemical bonds among
            themselves, and at a later time the mixture may be separated
            back out into these inputs.  Specializations of #$Mixture
            include #$Blood, #$Mud, #$Air, and #$CarbonatedBeverage.
            Note that each instance of #$Mixture has a composition but
            not a structure; thus, the following are _not_ instances of
            #$Mixture, since all have some structure: a wet sponge, a
            person, or a portion of plywood.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mob">
        <rdfs:label xml:lang="en">knots (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Group.  Each instance of
            #$Mob is a group that contains a large number of objects or
            events of the same type.  Mobs typically have more members
            than would be feasible to enumerate or reify.  One rarely
            refers to particular members of a given mob; and when one
            does, it is usually only to relatively few of them.
            Examples: the #$Andes-Mountains is a mob of mountains; each
            instance of #$Galaxy is a mob of stars; a cupful of sand is
            a mob of grains of sand; and making popcorn involves a mob
            of corn kernel bursting events. See also #$MobFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Modal">
        <rdfs:label xml:lang="en">#$Modal</rdfs:label>
        <rdfs:comment>The collection of all modal auxiliary verbs.
            Modals have only tensed forms, do not inflect for person and
            number, and can take contracted negation. Example: `should&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuxVerb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Modal-Contracted">
        <rdfs:label xml:lang="en">#$Modal-Contracted</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all contracted modal forms. The only modals
            which can contract are &apos;would&apos; and
            &apos;will&apos;. Example: -ll from &apos;will&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Modal-Negated">
        <rdfs:label xml:lang="en">#$Modal-Negated</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ModalOperator">
        <rdfs:label xml:lang="en">modal operator</rdfs:label>
        <rdfs:comment>#$ModalOperator is a sub-collection of both
            #$SententialOperator and #$ModalPredicate.  All modal
            operators are non-truth-functional sentential operators.  A
            sentential operator takes one or more sentences as arguments
            and returns a sentence.  A sentential operator OP is
            non-truth-functional if the truth-value of the compound
            sentence, say, (OP SENT_1 ... SENT_n), is not completely
            determined by the truth values of the components, i.e., not
            completely determined by the truth values of SENT_1, ...,
            SENT_n.  Each #$ModalOperator must have some logical
            features in #$ModalityFeature, and may or may not have a
            `dual operator&apos; (see #$dualOperator).  This collection
            includes #$possible, #$subImplies and (#$ModalOpFn #$beliefs
            #$Lehmann), etc., but not #$not, #$and or #$implies, etc.,
            which are truth-functional operators.  Sub-collections of
            #$ModalOperator includes #$CommonModalOperator,
            #$UnaryModalOperator and #$BinaryModalOperator.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="ModernHumanResidence">
        <rdfs:label xml:lang="en">modern residences</rdfs:label>
        <rdfs:comment>A specialization of both #$HumanResidence and
            #$ModernShelterConstruction.  Each instance of
            #$ModernHumanResidence is a humanly constructed shelter of a
            modern type in which people live.  Such residences are the
            typical dwellings in the developed world of the late 20th
            century and may be found in the more affluent regions of the
            developing world.  Examples include houses in suburban
            `developments&apos;, modern apartment buildings,
            `modular&apos; homes, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ModernShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#HumanResidence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ModernMilitaryOrganization">
        <rdfs:label xml:lang="en">modern military organization</rdfs:label>
        <rdfs:comment>#$ModernMilitaryOrganization is a specialization
            of #$MilitaryOrganization.  Each instance of
            #$ModernMilitaryOrganization is a military organization of
            current (or recent) times that have modern equipment and
            methods.  Generally includes organizations making at least
            some use of high-tech military technology.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ModernNavalShip">
        <rdfs:label xml:lang="en">modern naval ships</rdfs:label>
        <rdfs:comment>A specialization of #$Ship and
            #$MilitaryWatercraft.  Each specialization of
            #$ModernNavalShip represented in the Knowledge Base is a
            type of ship that has been used at some time since the
            beginning of the Nineteenth Century primarily for naval
            purposes, such as military attack and defense,
            reconnaisance, support, rescue, or coastal monitoring.  Most
            instances of #$ModernNavalShip are specifically constructed
            for naval purposes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ship"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#MilitaryWatercraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ModernShelterConstruction">
        <rdfs:label xml:lang="en">modern shelter constructions</rdfs:label>
        <rdfs:comment>A specialization of both #$FixedStructure and
            #$HumanShelterConstruction.  Each instance of
            #$ModernShelterConstruction is a construction artifact that
            provides comfortable shelter for humans during some of their
            daily activities.  Instances of #$ModernShelterConstruction
            have the kinds of features found in modern-day buildings in
            Europe, the USA, and other technologically developed parts
            of the world, namely, amenities like doors, plumbing,
            electricity, and probably some kind of climate control
            system for maintaining humanly comfortable conditions
            indoors.  Examples include the #$NewYorkHiltonAtBroadway,
            the #$SydneyOperaHouse, and instances of the collection
            #$ModernHumanResidence (e.g., a newly built home in a
            suburban development or a renovated brownstone in New York City).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Modesty">
        <rdfs:label xml:lang="en">modesty</rdfs:label>
        <rdfs:comment>Feeling free from brashness, boldness or
            assertiveness. Has no connotation of inferiority; see Humility</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="ModularLattice">
        <rdfs:label xml:lang="en">modular lattices</rdfs:label>
        <rdfs:comment>The subcollection of #$Lattice-LatticeTheoretic
            that contains all those lattices called &apos;modular
            lattices&apos; by the lattice theorists.  A
            #$Lattice-LatticeTheoretic LATTICE (with the #$baseSet S,
            ordering relation R, meet operation MEET and join operation
            JOIN) is a #$ModularLattice if the following condition
            holds: for each X, Y and Z in S, if R(Z X) then (MEET X
            (JOIN Y Z)) = (JOIN (MEET X Y) (MEET X Z)).  Note that there
            are many conditions equivalent to the one above, one of
            which is the condition that for each X, Y and Z in S, if R(Z
            X) then (JOIN X (MEET Y Z)) = (MEET (JOIN X Y) (MEET X Z)).
            (Other equivalent conditions may be found by browsing the
            rules for #$ModularLattice.)  Note also that a
            #$DistributiveLattice satisfies this condition
            automatically, and therefore is a #$ModularLattice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Lattice-LatticeTheoretic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MolecularStuff">
        <rdfs:label xml:lang="en">molecular stuff</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Every instance of
            #$MolecularStuff is a portion of stuff composed of
            covalently-bonded molecules.  Thus, #$Water and #$DNAStuff
            are subcollections of #$MolecularStuff; each of their
            instances consists of covalently bonded molecules.  But
            instances of #$Salt-NaCl are not examples of
            #$MolecularStuff.  Also, #$Oxygen is not a subcollection of
            #$MolecularStuff, since #$Oxygen denotes anything composed
            of that element, not just O2 (molecular oxygen) and O3
            (ozone). </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Molecule">
        <rdfs:label xml:lang="en">molecules</rdfs:label>
        <rdfs:comment>A subcollection of #$ChemicalObject and
            #$ComplexPhysicalObject.  Each instance of #$Molecule is a
            microscopic-scale object whose component atoms are all
            chemically bonded to each other; typically, this means that
            the atoms are covalently bonded.  Examples: some instances
            of #$Molecule, including molecules of oxygen (O2), ozone
            (O3), water (H2O), carbon monoxide (CO), carbon dioxide
            (CO2), etc., contain covalently bonded atoms belonging to
            the collection #$Oxygen.  Some highly complex examples of
            #$Molecule are those belonging to the collection
            #$DNAMolecule.  See also #$MoleculeFn.    Note: #$Diamond
            and other macroscopic covalent solids are excluded from
            belonging to #$Molecule by the constraint that instances of
            #$Molecule are microscopic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComplexPhysicalObject"/>
        <rdfs:subClassOf rdf:resource="#ChemicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MoleculeTypeByChemicalCompoundType">
        <rdfs:label xml:lang="en">#$MoleculeTypeByChemicalCompoundType</rdfs:label>
        <rdfs:comment>A collection of specializations of #$Molecule.
            Each instance of #$MoleculeTypeByChemicalCompoundType is a
            collection of molecules characterized by the fact that all
            of its instances are molecules of a particular type of
            chemical compound (see #$ChemicalCompoundType).  Cf. the
            more specific collection #$MoleculeTypeByChemicalSpecies,
            which is a collection of collections whose instances have
            same chemical structure and formula.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Monday">
        <rdfs:label xml:lang="en">Mon</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Monday is the collection of all  (and
            only) mondays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MoneraKingdom">
        <rdfs:label xml:lang="en">Monera</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalKingdom, and a
            specialization of both #$Organism-Whole and
            #$ProkaryoticCell.  Each instance of #$MoneraKingdom is a
            one-celled prokaryotic organism (so each instance lacks a
            nuclear membrane, as well as other internal organelles).
            Specializations of #$MoneraKingdom include #$Bacterium,
            #$PseudomonasMallei, and #$EscherichiaColi.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#ProkaryoticCell"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MonetaryExchangeOfUserRights">
        <rdfs:label xml:lang="en">monetary transactions</rdfs:label>
        <rdfs:comment>A specialization of both #$ExchangeOfUserRights
            and #$MoneyTransaction.  Each instance of
            #$MonetaryExchangeOfUserRights is an event in which two
            instances of #$Agent (who are related to the event via
            specializations of the predicate #$exchangers) perform two
            reciprocal instances of #$TransferringPossession, one of
            which is an instance of #$MoneyTransfer.  The agent who
            performs the instance of #$MoneyTransfer (this agent is
            related to the event via the predicate #$buyer) gives some
            money to the other agent (who is related to the event via
            the predicate #$seller) in order to gain some user rights
            over an object possessed by the #$seller (this object is
            related to the event via the predicate #$objectPaidFor).
            The #$seller relinquishes some user rights over the
            #$objectPaidFor to the #$buyer, in exchange for the
            #$buyer&apos;s money (which is related to the event via the
            predicate #$objectTendered).  Notable specializations of
            #$MonetaryExchangeOfUserRights include #$Renting and #$Buying.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MoneyTransaction"/>
        <rdfs:subClassOf rdf:resource="#ExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MonetaryFlowRate">
        <rdfs:label xml:lang="en">#$MonetaryFlowRate</rdfs:label>
        <rdfs:comment>A specialization of #$MoneyRate.  Each instance of
            #$MonetaryFlowRate is an amount of money taken with respect
            to some unit of time.  Instances of #$MonetaryFlowRate
            include rates at which money is earned, spent, transferred,
            lost, and invested.  An example instance of
            #$MonetaryFlowRate is (#$DollarsPerHour 10), $10 dollars per hour.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MoneyRate"/>
    </owl:Class>
    <owl:Class rdf:ID="MonetaryValue">
        <rdfs:label xml:lang="en">monetary values</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval. Each
            instance of this collection is a value by means of which
            payments, wealth, capital, assets, etc., are measured.  Each
            instance of this collection is thus an abstract object, not
            to be confused with the physical objects used as legal
            tender. For those, see #$Currency, though it is worth noting
            that each coin, bill, etc. that is an instance of
            #$Currency, is typically _stably associated with_ some
            particular instance of #$MonetaryValue.    Nor is
            #$MonetaryValue to be confused with the many and varied
            social practices (such as a backed claim for a certain
            amount of physical wealth payable by the government on
            demand), which create money qua social institution and
            underpin all financial transactions. For that, see
            #$Money-DevisedPractice.     Since instances of
            #$MonetaryValue are not pure numbers but quantities of some
            particular currency, they are denoted by means of the
            collection #$UnitOfMoney. Each instance of this collection
            is a function which (like many Cyc functions which are
            instances of #$UnitOfMeasure) either takes one argument and
            returns a fixed amount of money, e.g. (#$Dollar-Australia 4)
            or takes two arguments and returns a range, e.g.
            (#$Shilling-Uganda 2 2000). Since currencies may appreciate
            or depreciate in value over time, and this information is
            sometimes relevant, it is possible to index instances of
            #$UnitOfMoney temporally by means of further functions. For
            example, ((#$USDollarFn 1997) 2) denotes the monetary value
            of 2 US dollars in the year 1997. See also #$MoneyTransfer,
            #$monetaryValueOfThing, #$cost, #$basicPrice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="MoneyRate">
        <rdfs:label xml:lang="en">money rates</rdfs:label>
        <rdfs:comment>A specialization of #$Rate.  Each instance of
            #$MoneyRate is an amount of #$MonetaryValue (q.v.) taken
            with respect to an amount of some other quantity: e.g.,
            $1.14 per gallon, $10,000 per acre, $250 per week, and $0.89
            per pound.  Notable specializations of #$MoneyRate include
            #$MoneyPerVolumeRate, #$MoneyPerAreaRate,
            #$MoneyPerMassRate, and #$MonetaryFlowRate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="MoneyTenderType">
        <rdfs:label xml:lang="en">types of money tender</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$MoneyTenderType is a collection of objects of a type
            commonly offered in payment for goods, services, fees,
            wage-work, and so on.  Notable instances of
            #$MoneyTenderType include #$Currency, #$CreditCard, and #$Check-TenderObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="MoneyTransaction">
        <rdfs:label xml:lang="en">#$MoneyTransaction</rdfs:label>
        <rdfs:comment>A specialization of both #$CommercialActivity and
            #$MoneyTransfer.  Each instance of #$MoneyTransaction is an
            event in which a transfer of money occurs, and the transfer
            is done in exchange for something else, according to some
            (implicit or explicit) agreement.  Thus, buying something,
            investing, making a donation, executing a bequest, and
            exchanging currency are all examples of money transactions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MoneyTransfer"/>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MoneyTransfer">
        <rdfs:label xml:lang="en">#$MoneyTransfer</rdfs:label>
        <rdfs:comment>A specialization of both #$ChangeInUserRights and
            #$PurposefulAction.  In each instance of #$MoneyTransfer,
            possession of some quantity of money is transferred from one
            agent to another.  The transfer in question may be done in
            exchange for some good(s) or service(s), according to some
            (implicit or explicit) agreement (in which case the transfer
            is an instance of #$MoneyTransaction, an important
            specialization of #$MoneyTransfer), but it need not be.
            Notable specializations of #$MoneyTransfer include #$Buying,
            #$Renting, and #$Paying.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MonocotSubclass">
        <rdfs:label xml:lang="en">#$MonocotSubclass</rdfs:label>
        <rdfs:comment>#$MonocotSubclass is a specialization of
            #$FloweringPlant and instance of #$BiologicalSubclass.  It
            is an angiosperm subclass containing taxa whose members have
            only one cotyledon in the embryo phase and lack normal
            secondary growth.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FloweringPlant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Monophthong-Vowel">
        <rdfs:label xml:lang="en">monophthong - vowel</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vowel"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MonthOfYearType">
        <rdfs:label xml:lang="en">#$MonthOfYearType</rdfs:label>
        <rdfs:comment>A collection of #$Collections.  Instances of
            #$MonthOfYearType are the canonical subcollections of
            #$CalendarMonth.  There are twelve of these in the
            #$JulianCalendar; for example, #$September is the collection
            of all Septembers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnnualTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionallyClassifiedDisjointTimeIntervalType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Monument">
        <rdfs:label xml:lang="en">monument</rdfs:label>
        <rdfs:comment>A specialization of #$MemorialMarker. Each
            instance of this collection is a #$MemorialMarker which is
            truly monumental - large, imposing, and awe-inspiring. See
            also the predicates #$artifactHonors and #$monumentHonors.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MemorialMarker"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#GeographicalThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Morning">
        <rdfs:label xml:lang="en">mornings</rdfs:label>
        <rdfs:comment>A #$Morning is an #$Event where the sun apparently
            `rises&apos; and `moves&apos; to its `highest&apos; position
            in the daily cycle, i.e. from a #$Sunrise to the ensuing
            noon. Each instance of #$Morning is #$contiguousAfter a
            night.  An #$Afternoon is #$contiguousAfter each #$Morning.
            The definition is more complex in polar regions in which it
            is possible that the sun does not rise or set during a day.
            See the #$cyclistNotes for an explanation of this case.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MorphologicalProcess">
        <rdfs:label xml:lang="en">#$MorphologicalProcess</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="MorphologicalRuleConstraint">
        <rdfs:label xml:lang="en">morphological rule constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticRuleConstraint"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MorphologicalRuleConstraint-Categorial">
        <rdfs:label xml:lang="en">morphological rule constraint - categorial</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MorphologicalRuleConstraint"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MorphologicalRuleConstraint-Semantic">
        <rdfs:label xml:lang="en">morphological rule constraint - semantic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MorphologicalRuleConstraint"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Motion-SolidAgainstSolid">
        <rdfs:label xml:lang="en">motion - solid against solid</rdfs:label>
        <rdfs:comment>In instances of #$Motion-SolidAgainstSolid the
            #$motionPathway-Complete is in contact with (#$touches)
            every #$objectMoving.  This collection is a
            #$TemporalStuffType so contact between #$objectMoving and
            #$motionPathway-Complete occurs throughout all #$timeSlices.
            The #$objectMoving and the #$motionPathway-Complete are
            solid objects.  Hockey pucks sliding, rolling, and spinning
            on ice exemplars.  Car transportation and #$SnowSkiing are a
            negative examples because many of the #$objectMovings in
            these events do not touch the pathway e.g. the car
            passengers, the skiers hat etc..  Instances of
            #$Motion-SolidAgainstSolid are involved as #$subEvents
            however.  The car&apos;s wheels, and the skier&apos;s skis
            are the respective #$objectMovings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalContactEvent"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Motorboat">
        <rdfs:label xml:lang="en">#$Motorboat</rdfs:label>
        <rdfs:comment>#$Motorboat is the specialization of
            #$Watercraft-Surface and #$TransportationDevice-Vehicle.
            Each instance of #$Motorboat is usually powered by motors
            (including in-board and out-board motors).  If a boat is
            primarily a #$Sailboat, but has a back-up motor to use when
            becalmed or piloting, that is not enough to make it a
            #$Motorboat.  To be more precise, this collection is the
            intersection of #$Watercraft-Surface,
            #$InternalCombustionPoweredDevice and #$TransportationDevice-Vehicle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalCombustionPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Watercraft-Surface"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Motorcycle">
        <rdfs:label xml:lang="en">#$Motorcycle</rdfs:label>
        <rdfs:comment>#$Motorcycle is a specialization of #$RoadVehicle
            and #$WheeledTransportationDevice.  Each instance of
            #$Motorcycle is a two-wheeled motorized personal transport
            device.  Unlike most #$Automobiles, a motorcycle lacks a cab
            or compartment to protect the driver from wind and weather.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MountableTransporter"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-GasolineEngine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MountableTransporter">
        <rdfs:label xml:lang="en">mountable transporter</rdfs:label>
        <rdfs:comment>A #$MountableTransporter is a transporter that one
            `rides&apos; or `rides on&apos; but does not `ride in&apos;.
            This collection was originally created to enable the
            following sorts of natural language interpretations.  Anyone
            who is said to `ride&apos; such an object is most likely to
            be the #$driverActor.  If someone `rides&apos; a non
            #$MountableTransporter (e.g. a train) is most likely not a
            #$driverActor but a #$passengers.  Positive exemplars
            include horses, jet skis, motorcycles, bicycles.  Negative
            exemplars include cars, trains, planes.  A borderline
            positive example is a skateboard.  When one `rides&apos; a
            skateboard one is most likely the #$driverActor, but, unlike
            typical #$MountableTransporters, one is also most likely not sitting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mountain">
        <rdfs:label xml:lang="en">#$Mountain</rdfs:label>
        <rdfs:comment>A specialization of #$LandTopographicalFeature.
            Each instance of #$Mountain is a topographical region on the
            planet Earth of significantly higher elevation than its
            surrounding area.  Mountains may occur individually or as
            part of a chain (see #$MountainRange).  Instances of
            #$Mountain include #$MountWhitney, #$DiamondHead-Mountain,
            #$MountKosciusko, #$AyersRock, and #$MountOlympus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#LandStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#Protrusion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MountainRange">
        <rdfs:label xml:lang="en">mountain ranges</rdfs:label>
        <rdfs:comment>A specialization of #$LandTopographicalFeature.
            Each instance of #$MountainRange is a natural group of
            mountains.  Instances of #$MountainRange include the
            #$RockyMountains, #$Andes-Mountains, and #$Alps-Mountains.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Mob"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Mouth">
        <rdfs:label xml:lang="en">#$Mouth</rdfs:label>
        <rdfs:comment>The collection of all animal mouths.  A mouth is a
            container #$AnimalBodyPart of an #$Animal.  It has an
            opening (a #$Portal) to the region outside the organism.
            Through that opening, the animal ingests tangible substances
            from the environment, such as food, water, air, etc.
            Additional activities, such as #$Chewing, may occur in the
            #$Mouth, and it may participate in other activities such as
            talking, kissing, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movement-NonPeriodic">
        <rdfs:label xml:lang="en">non-periodic movements</rdfs:label>
        <rdfs:comment>A specialization of #$MovementEvent.  Each
            instance of #$Movement-NonPeriodic is a movement event in
            which the moving object (see the predicate #$objectMoving)
            does not return to a previous location or orientation, or
            returns to a previous location or orientation only in a
            non-regular manner.  An example of a #$Movement-NonPeriodic
            would be the motion of a basketball being dribbled by a
            basketball player as she runs downcourt.  For contrast, see #$Movement-Periodic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movement-Periodic">
        <rdfs:label xml:lang="en">periodic movements</rdfs:label>
        <rdfs:comment>A specialization of #$MovementEvent.  Each
            instance of #$Movement-Periodic is a movement event in which
            the moving object (see the predicate #$objectMoving) returns
            repeatedly to a certain location or orientation at more or
            less regular time intervals.  Examples of
            #$Movement-Periodic include the motion of a seesaw one
            afternoon, the dribbling of a basketball in place by Magic
            Johnson, and the motion of a slinky going down a staircase
            as it periodically changes its orientation through a fixed,
            repetive series of orientations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movement-Rotation">
        <rdfs:label xml:lang="en">#$Movement-Rotation</rdfs:label>
        <rdfs:comment>A specialization of #$MovementEvent.  In each
            instance of  #$Movement-Rotation the most salient moving
            object (see  #$primaryObjectMoving) rotates (see
            #$objectRotating). That is, the object rotates about an axis
            (see  #$axisOfRotation) that spatially intersects it (or
            goes  through a hole in it).  Examples include the daily
            rotation of the Earth on its axis and the rotation of a
            clock hand about its fastened end.  A non-example is the
            orbiting of the Earth around the sun, as the axis of the
            orbit does not spatially intersect the Earth.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movement-TranslationEvent">
        <rdfs:label xml:lang="en">movements from one place to another</rdfs:label>
        <rdfs:comment>A specialization of #$Translocation.  Each
            instance of #$Movement-TranslationEvent is an event in which
            an object (an instance of #$SomethingExisting) moves some
            distance (so that at some point in the event, the
            object&apos;s center of mass changes location with respect
            to the relevant frame of reference).  The moving object need
            not move completely out of its original spatial extent; for
            example, a building moving one foot to the left undergoes a
            #$Movement-TranslationEvent.  Instances of
            #$Movement-TranslationEvent include events in which the
            movement ends in the same place it started from (e.g. one
            lap of a race car around the Indianapolis race track, or a
            trip to the grocery store and back).  In such cases (all of
            which are instances of the specialization
            #$Translation-NoLocationChange), the to and from locations
            of the movement (see the predicates #$toLocation and
            #$fromLocation) are identical.  In other cases of
            #$Movement-TranslationEvent (e.g. the movement of the
            baseball during a home run hit by Roger Maris), the to and
            from locations are different; in these cases, the movement
            events are also instances of #$Translation-LocationChange (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movement-TranslationProcess">
        <rdfs:label xml:lang="en">movement processes</rdfs:label>
        <rdfs:comment>#$Movement-TranslationProcess is the subcollection
            of #$Movement-TranslationEvents whose insatnces can be
            pragmatically considered to be continuous processes.  In any
            instance of #$Movement-TranslationProcess, all time-slices
            of that process are also themselves instances of
            #$Movement-TranslationProcess.    Note that walking is a
            type of #$Movement-TranslationProcess, even though it
            involves some nonzero accelerations and jerks.  A
            non-example would be a plot of the various residences
            you&apos;ve lived in (``moved to&apos;&apos;) over the
            course of your lifetime; another non-example would be
            Captain Kirk beaming up to the Enterprise; another would be
            the ``tunneling&apos;&apos; of an electron in a tunnel
            diode.  </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#MovementProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MovementEvent">
        <rdfs:label xml:lang="en">moves (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$GeneralizedTransfer.  Each
            instance of #$MovementEvent is an event in which at least
            one object translates some distance, or in which at least
            one object moves from one rotational orientation to another
            rotational orientation.  Each instance of #$MovementEvent is
            thus a rotation or translation of some object (an instance
            of #$SomethingExisting), where the movement occurs relative
            to a frame of reference which is not part of the rotating or
            translating object.  Notable specializations of
            #$MovementEvent include #$Translocation,
            #$Rotation-NonPeriodic, and #$Movement-Periodic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementOrShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MovementOrShapeChangeEvent">
        <rdfs:label xml:lang="en">movement or shape changes</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalEvent whose
            instances include translational or rotational movements of
            whole objects (see #$MovementEvent), objects changing shape
            (see #$ShapeChangeEvent), as well as events in which salient
            parts of an object move or change shape in relation to the
            reference frame of the whole object.  For example, although
            a ticking grandfather clock is not normally undergoing
            either a #$MovementEvent or a #$ShapeChangeEvent, it can
            still be said to be moving -- and thus undergoing a
            #$MovementOrShapeChangeEvent -- in virtue of the fact that a
            salient part of the clock, the pendulum, is swinging.  (Of
            course, the pendulum itself is periodically undergoing
            #$Movement-Rotation, and the tip of the pendulum is
            undergoing a #$Movement-TranslationEvent.)  As a negative
            example, a catatonic person should not be thought of as
            undergoing any #$MovementOrShapeChangeEvent.  Although blood
            moves through such a person&apos;s veins, her lungs expand
            and contract, and so on, these things would not normally be
            considered salient enough to entail that the person herself
            was undergoing a movement or shape change event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MovementProcess">
        <rdfs:label xml:lang="en">#$MovementProcess</rdfs:label>
        <rdfs:comment>A specialization of #$MovementEvent and an
            instance of #$TemporalStuffType. Each instance MOTION of
            #$MovementProcess is a movement event that can be considered
            as a continuous motion.  That is, (i) motion happens without
            interruption throughout MOTION and thus (ii) every
            time-slice of MOTION is  itself a #$MovementProcess.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Movie-CW">
        <rdfs:label xml:lang="en">movie titles</rdfs:label>
        <rdfs:comment>A specialization of #$VideoConceptualWork.  Each
            instance of #$Movie-CW is an abstract work whose
            performances are instances of #$MovieShowing.  Notable
            instances are #$CitizenKane-TheMovie and #$StarWars-TheMovie.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MediaProduct"/>
        <rdfs:subClassOf rdf:resource="#VideoConceptualWork"/>
    </owl:Class>
    <owl:Class rdf:ID="MovingAComputerFile">
        <rdfs:label xml:lang="en">moving a computer file</rdfs:label>
        <rdfs:comment>A specialization of
            #$InformationTransferPhysicalEvent. In each instance of
            #$MovingAComputerFile, a computer reads a file, creates a
            new file with the same contents in a different location (see
            #$CopyingAComputerFile) and then deletes the original file
            (see #$DeletingAFile).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferPhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MultiDirectionalCommunication">
        <rdfs:label xml:lang="en">dialog</rdfs:label>
        <rdfs:comment>A collection of complex information transfer
            events. Each instance of #$MultiDirectionalCommunication is
            an event in which more than one agent is involved as a
            #$senderOfInfo. For example, a conversation or a debate, as
            opposed to a speech or lecture. The predicate
            #$infoContributed is used to correlate each sending agent
            with the information s/he transmits in such an event. For
            communication acts having only one sender, see #$CommunicationAct-Single.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MultiIndividualAgent">
        <rdfs:label xml:lang="en">groups of people acting together</rdfs:label>
        <rdfs:comment>The collection of all #$Agent-Generics that each
            consist of other #$Agent-Generics operating together.
            Usually the constituent agents form some kind of #$Group
            that itself acts as an #$Agent-Generic.  Examples: a
            #$LegalCorporation, a #$GeographicalAgent, a #$Neighborhood
            or an #$Industry-Localized.  Although it would be a positive
            exemplar of (#$GroupFn #$Agent), the &apos;group of people
            whose first names all start with the letter
            &apos;B&apos;&apos; is a negative exemplar of
            #$MultiIndividualAgent. In almost all contexts, such a group
            will not act as an #$Agent in any way.  It is less cohesive
            than some of the least cohesive kinds of
            #$MultiIndividualAgents such as #$CrowdOfPeople.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MultiWordForConstantPred">
        <rdfs:label xml:lang="en">#$MultiWordForConstantPred</rdfs:label>
        <rdfs:comment>The specialization of #$MultiWordPhrasePredicate
            whose instances map phrases to Cyc constants.  See also #$MultiWordForFormulaPred.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiWordPhrasePredicate"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MultiWordPhrasePredicate">
        <rdfs:label xml:lang="en">#$MultiWordPhrasePredicate</rdfs:label>
        <rdfs:comment>A collection of #$NLSemanticPredicates.  Each
            instance of #$MultiWordPhrasePredicate specifies a
            multi-word phrase and its CycL translation.  The phrase
            consists of a sequence of strings, beginning or ending with
            a head word (an instance of #$EnglishWord) whose form can
            vary.  For instance, the assertion (#$compoundString
            #$Chamber-TheWord ( of   commerce ) #$CountNoun
            #$ChamberOfCommerce) means that the strings  chamber of
            commerce  and  chambers of commerce  both denote the CycL
            term #$ChamberOfCommerce.  Specializations of
            #$MultiWordPhrasePredicate are: #$MultiWordForConstantPred,
            whose instances map phrases to CycL constants,
            #$MultiWordForFormulaPred, whose instances map phrases to
            #$NLTemplateExpressions and #$MultiWordForStringPred, whose
            instances map phrases to strings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="MulticellularOrganism">
        <rdfs:label xml:lang="en">multicellular organisms</rdfs:label>
        <rdfs:comment>#$MulticellularOrganism is a specialization of
            #$Organism-Whole.  Each instance of #$MulticellularOrganism
            is an organism that is composed of more than one cell.  In
            other words, this is the collection of all instances of
            #$Organism-Whole that are not instances of #$SingleCellOrganism.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Multigraph">
        <rdfs:label xml:lang="en">multigraph</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$PathSystem.  Each instance of
            #$Multigraph is an instance of #$PathSystem in which the
            only points are nodes in the system and all paths are made
            of links (i.e., no intermediate points along links).
            Sometime such a system is called a graph or multi-graph in
            graph theory.  A #$Multigraph consists of nodes
            interconnected by links, with loops on single nodes allowed,
            and with multiple links between the same two nodes also
            allowed.  (For a graph with no parallel links and no loops,
            see #$SimpleGraph-GraphTheoretic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PointFinitePathSystem"/>
        <rdfs:subClassOf rdf:resource="#RelationalStructure"/>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Muscle">
        <rdfs:label xml:lang="en">#$Muscle</rdfs:label>
        <rdfs:comment>A specialization of #$MuscleTissue.  Each instanc
            of #$Muscle is an organ that is essentially a mass of muscle
            tissue controlled by a nerve (see #$Nerve) and that by
            contracting moves or restricts the motion of one or more
            #$AnimalBodyParts to which it is connected.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#MuscleTissue"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MusclePoweredDevice">
        <rdfs:label xml:lang="en">muscle powered devices</rdfs:label>
        <rdfs:comment>#$MusclePoweredDevice is a specialization of
            #$KineticEnergyPoweredDevice. Each instance of
            #$MusclePoweredDevice is a device which is powered by animal
            muscle power (including human labor).  Specializations of
            #$MusclePoweredDevice include #$Wagon, #$Bicycle, and #$Canoe.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#KineticEnergyPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MuscleTissue">
        <rdfs:label xml:lang="en">#$MuscleTissue</rdfs:label>
        <rdfs:comment>A specialization of #$OrganismPart. Each instance
            of #$MuscleTissue is a quantity of muscle tissue; that is,
            tissue composing biological organs that converts chemical
            energy into mechanical energy. Note that as this collection
            is a specialization (via #$OrganismPart) of
            #$BiologicalLivingObject, it only covers  undetached  muscle
            parts. An important specialization of this collection is
            #$Muscle, the collection of masses of #$MuscleTissue
            attached at both ends that are controlled by nerves, and
            move one or more body parts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MuscularSystem">
        <rdfs:label xml:lang="en">#$MuscularSystem</rdfs:label>
        <rdfs:comment>A specialization of both #$InternalAnatomicalPart
            and #$AnimalBodyPart.  Each instance of #$MuscularSystem is
            composed of all the muscles in the body of an individual
            animal, where those muscles are considered as a functional
            whole.  As a system, the muscles of an individual animal
            work together to enable foot motions in locomotion, pumping
            in circulation, breathing in respiration, biting and chewing
            and swallowing in eating, and so on.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#InternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Music">
        <rdfs:label xml:lang="en">music</rdfs:label>
        <rdfs:comment>A specialization of both
            #$SoundInformationBearingThing and #$Artifact-Intangible.
            Each instance of #$Music is a particular sound produced by
            actions such as singing, whistling, playing an instrument,
            playing recorded music, and so on.  Music has certain
            features that distinguish it from random noise (though
            recognizing them may depend upon a specific cultural
            background); such features usually include variations of
            pitch over time (i.e., melody), multiple (somehow) related
            pitches sounding at one time (i.e., some kind of harmony),
            and/or some regular temporal pattern to the component sounds
            (i.e., rhythm).  Instances of #$Music include the debut
            performance of Beethoven&apos;s Fifth Symphony, Leonard
            Bernstein&apos;s rendition of the Ninth Symphony with the
            BPO in Berlin in 1989, a particular playing of a particular
            CD of Bernstein&apos;s 1989 Ninth in Berlin, and the Messiah
            sing-in in Austin, TX, in 1995. This collection is not to be
            confused with #$MusicalText or #$MusicalTextCopy (qq.v.),
            which refer to the represented instructions which musicians
            often follow in order to create #$Music.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
        <rdfs:subClassOf rdf:resource="#SoundInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="MutuallyDisjointIntervalCollectionType">
        <rdfs:label xml:lang="en">types of mutually disjoint collection
            of temporal objects</rdfs:label>
        <rdfs:comment>A collection of collections. Any element, X, which
            is an instance of #$MutuallyDisjointIntervalCollectionType
            is a collection of interval types X1, X2, X3,..., whose
            instances are temporallyDisjoint ; that is, each instance of
            X1 has no temporal intersection with any instance of X2 or
            X3 or...; each instance of X2 has no temporal intersection
            with any instance of X1 or X3 or...; etc. For example,
            consider DayOfWeekType, whose instances are Monday,
            Tuesday,... It is true that (#$isa #$DayOfWeekType
            #$MutuallyDisjointIntervalCollectionType), because no Monday
            can temporally intersect any Tuesday or Wednesday or....; no
            Tuesday can temporally intersect any Monday or Wednesday
            or...; etc. Other elements of
            MutuallyDisjointIntervalCollectionType include
            #$DayOfWeekType, #$CalendarSeasonType, #$HourOfDayType, and
            so on. See also #$TemporallyDisjointTemporalObjectType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SecondOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="NLCollection">
        <rdfs:label xml:lang="en">n l collection</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLTerm"/>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="NLContextSpecificationPredicate">
        <rdfs:label xml:lang="en">Cyc-NL context specification predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPragmaticPredicate-New"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLGenerationFunction">
        <rdfs:label xml:lang="en">n l generation function</rdfs:label>
        <rdfs:comment>The collection of all #$NLFunctions that denote
            non-atomic terms used for generating natural language.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="NLGenerationPredicate">
        <rdfs:label xml:lang="en">NL generation predicates</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLImplementationConstant">
        <rdfs:label xml:lang="en">n l implementation constant</rdfs:label>
        <rdfs:comment>The collection of constants that are included in a
            Cyc Knowledge Base only in order to support or enable one or
            more natural language processing capabilities. These
            constants are not used to represent common sense knowledge;
            nor are they used to represent knowledge shared by a
            significant subset of humans, such as specialized domain
            knowledge (e.g. the knowledge of experts in  some field of
            study, such as nuclear physics).</rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="NLMorphologyCollection">
        <rdfs:label xml:lang="en">NL morphology collections</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLMorphologyTerm"/>
        <rdfs:subClassOf rdf:resource="#NLCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="NLMorphologyFunction">
        <rdfs:label xml:lang="en">NL morphology functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLMorphologyTerm"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="NLMorphologyPredicate">
        <rdfs:label xml:lang="en">NL morphology predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPredicate"/>
        <rdfs:subClassOf rdf:resource="#NLMorphologyTerm"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLMorphologyTerm">
        <rdfs:label xml:lang="en">NL morphology terms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLTerm"/>

    </owl:Class>
    <owl:Class rdf:ID="NLPhrase">
        <rdfs:label xml:lang="en">n l phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NLPhraseType">
        <rdfs:label xml:lang="en">types of natural-language phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all subcollections, or types, of #$NLPhrase.
            Any instance of this collection is itself a collection of #$NLPhrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TermPhrasesConstraint"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="NLPragmaticPredicate">
        <rdfs:label xml:lang="en">Cyc-NL pragmatic predicates</rdfs:label>
        <rdfs:comment>The collection of all #$NLPredicates used to
            describe pragmatic properties of words and phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLPragmaticPredicate-New">
        <rdfs:label xml:lang="en">Cyc-NL pragmatics predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            collection has as its instances the ``new&apos;&apos;
            pragmatic           predicates that take as their first
            argument either an instance of #$CycLNLAssertion and as
            their second argument an instance           of something
            which will indicate the pragmatic force of the assertion.
            See the different instances of this collection to see the
            possibilities. These are the only pragmatic predicates
            that are used in the NL Trie.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPragmaticPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLPredicate">
        <rdfs:label xml:lang="en">Cyc-NL predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of predicates which are used to make assertions
            in the Cyc lexicon. Many of these predicates are mentioned
            in the NLU and NLG code.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLTerm"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="NLRolePredicate">
        <rdfs:label xml:lang="en">Cyc-NL role predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLSemanticPredicate">
        <rdfs:label xml:lang="en">Cyc-NL semantic predicates</rdfs:label>
        <rdfs:comment>these are semantic predicates for CycL</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLSentence">
        <rdfs:label xml:lang="en">n l sentence</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all strings of words, in any natural language,
            which form sentences.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sentence"/>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#TextString"/>
        <rdfs:subClassOf rdf:resource="#NLPhrase"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="NLSyntacticPredicate">
        <rdfs:label xml:lang="en">Cyc-NL syntactic template predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            predicates which make up the Cyc lexicon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLTemplateGenerationPredicate">
        <rdfs:label xml:lang="en">NL template generation predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLGenerationPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NLTerm">
        <rdfs:label xml:lang="en">Cyc-NL terms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>

    </owl:Class>
    <owl:Class rdf:ID="NLWord-IBT">
        <rdfs:label xml:lang="en">n l word - i b t</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NLWord-Phonological">
        <rdfs:label xml:lang="en">phonological word forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NLWordForm">
        <rdfs:label xml:lang="en">word forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NTupleOfIntervals">
        <rdfs:label xml:lang="en">#$NTupleOfIntervals</rdfs:label>
        <rdfs:comment>A specialization of #$Tuple (q.v.).  Each instance
            of #$NTupleOfIntervals  is a tuple whose members (see
            #$tupleMembers) are all scalar intervals.   Notable
            specializations of #$NTupleOfIntervals include
            #$ScalarInterval  (whose instances are single-membered
            tuples), #$VectorInterval, and #$ComplexNumber.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Tuple"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Name">
        <rdfs:label xml:lang="en">names (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$LexicalWord. Each instance
            of this collection is a (proper) name -- a word by which an
            entity is designated and distinguished from others -- for
            e.g. #$Cassandra-TheName, #$Sidney-TheName. Note that this
            collection contains names not just for people, but for other
            nameable entities (such as pets, intelligent computer
            programs...). However, the most notable specializations of
            this collection are #$HumanGivenName and #$HumanSurname. For
            a representation of the actual string of letters which makes
            up any given name, see #$ProperNameString and its
            specializations (and see #$nameSpelling for relating the two).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NamedRoadway">
        <rdfs:label xml:lang="en">named roadways</rdfs:label>
        <rdfs:comment>#$NamedRoadway is a specialization of
            #$Street-Generic.  Each instance of #$NamedRoadway is named
            part (stretch or segment) of roadways.  (Not roadway the
            stuff.)  Instances are named pieces of roadways (or highways
            or streets) which have names and lengths, and (usually)
            intersect with other roads. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Street-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Narrative">
        <rdfs:label xml:lang="en">#$Narrative</rdfs:label>
        <rdfs:comment>A specialization of #$PropositionalConceptualWork.
            Each instance of #$Narrative is an abstract work that
            recounts a sequence of events (in chronological order or in
            such a manner that their temporal order can be ascertained)
            involving some agent or agents.  Instances of #$Narrative
            may be fictional or factual and, accordingly, may involve
            instances of #$Person or instamces of #$FictionalCharacter.
            Important specializations of #$Narrative include #$Novel-CW
            and #$Biography.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NationalGovernmentEmployee">
        <rdfs:label xml:lang="en">national government employees</rdfs:label>
        <rdfs:comment>A specialization of #$GovernmentEmployee.  Each
            instance of #$NationalGovernmentEmployee is a person who is
            employed by the national government of some instance of
            #$Country.  Instances of #$NationalGovernmentEmployee would
            include, among others, heads of national governments,
            diplomats, and members of a nation&apos;s armed forces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GovernmentEmployee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NationalOrganization">
        <rdfs:label xml:lang="en">national organization</rdfs:label>
        <rdfs:comment>#$NationalOrganization is a specialization of
            #$Organization whose scope of operations and ownership or
            membership is primarily confined to a particular #$Country
            (but to no smaller subdivision within that country - see
            #$StateOrProvinceWideOrganization and #$LocalOrganization).
            Examples of  #$NationalOrganization are the Daughters of the
            American Revolution and the National Association for the
            Advancement of Colored People in the United States, and the
            Red Guards and the Young Pioneers in China (PROC).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NationalPostalService">
        <rdfs:label xml:lang="en">national postal services</rdfs:label>
        <rdfs:comment>#$NationalPostalService is a specialization of
            #$PostalService.  Each instance of #$NationalPostalService
            is a postal service managed by the national government of
            its particular country.  The United States Postal Service
            would be an example, but United Parcel Service, since it is
            a private business, wouldn&apos;t be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NationalOrganization"/>
        <rdfs:subClassOf rdf:resource="#PostalService"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NationalTaxAgency">
        <rdfs:label xml:lang="en">national tax agencies</rdfs:label>
        <rdfs:comment>#$NationalTaxAgency is a specialization of
            #$LegalGovernmentOrganization and #$NationalOrganization.
            Each instance of #$NationalTaxAgency is a revenue agency
            that is part of the government of a #$Country, and which is
            concerned primarily with collecting tax money (from national
            taxes) from the residents of that #$Country.  This
            collection does _not_ include customs agencies and agencies
            that collect minor fees only.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NationalOrganization"/>
        <rdfs:subClassOf rdf:resource="#LawEnforcementOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nationalism">
        <rdfs:label xml:lang="en">nationalism</rdfs:label>
        <rdfs:comment>A particularly strong feeling analogous to
            #$Patriotism. While it is possible to express #$Patriotism
            without disparaging other countries, #$Nationalism usually
            implies disdain of other countries.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrideOfMembership"/>
    </owl:Class>
    <owl:Class rdf:ID="Nationality">
        <rdfs:label xml:lang="en">#$Nationality</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$Nationality is the collection of all people residing in
            some country. Instances include #$UnitedStatesPerson,
            #$FrenchPerson, and #$AustralianPerson.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonTypeByGeoPoliticalAffiliation"/>
    </owl:Class>
    <owl:Class rdf:ID="NaturalLanguage">
        <rdfs:label xml:lang="en">natural languages</rdfs:label>
        <rdfs:comment>A specialization of #$Language.  Each instance of
            #$NaturalLanguage is a language which is used for human
            communication, and which has evolved naturally. (It is
            disjoint with #$ConstructedLanguage.) Instances thus include
            dead languages such as Ancient Greek and Latin, but
            concocted languages such as Esperanto are not included.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Language"/>
        <rdfs:subClassOf rdf:resource="#HumanLanguage"/>
    </owl:Class>
    <owl:Class rdf:ID="NaturalTangibleStuff">
        <rdfs:label xml:lang="en">naturally-occurring substances</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType and a
            sub-collection of #$PartiallyTangible.  Each instance of
            #$NaturalTangibleStuff is a naturally occurring partially
            tangible thing. Specializations of #$NaturalTangibleStuff
            include #$LandStuff, #$Wood, and #$Air.  Man-made materials
            are _not_ instances of #$NaturalTangibleStuff.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NavalShipBase">
        <rdfs:label xml:lang="en">naval bases</rdfs:label>
        <rdfs:comment>#$NavalShipBase is a specialization of
            #$MilitaryBase-Grounds.  Each instance of #$NavalShipBase is
            a naval base with facilities for #$ModernNavalShips or
            operated by a #$Navy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryBase-Grounds"/>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Navigating">
        <rdfs:label xml:lang="en">navigating events</rdfs:label>
        <rdfs:comment>The collection of all events in which the
            performer determines the location of an object in some frame
            of reference, and determines the direction the object should
            travel to reach some destination.  Navigating usually
            involves using some devices (compass, clock, etc.) as aids</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Evaluating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NavigationDevice">
        <rdfs:label xml:lang="en">navigational devices</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$NavigationDevice is a device used for
            #$Navigating, i.e., for taking the bearings and plotting the
            course of someone or something travelling -- often in some
            transportation device -- through some medium.  Notable
            specializations of #$NavigationDevice include #$Sextant and #$Compass.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Navy">
        <rdfs:label xml:lang="en">#$Navy</rdfs:label>
        <rdfs:comment>#$Navy is a specialization of
            #$BranchOfMilitaryService.  Each instance of #$Navy is a
            military organization (contemporary or historical) composed
            mainly of seaborne forces, and/or forces responsible for
            military operations on water and adjacent coastal areas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BranchOfMilitaryService"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NavyPersonnel">
        <rdfs:label xml:lang="en">navy men</rdfs:label>
        <rdfs:comment>A specialization of #$MilitaryPerson. Each
            instance of #$NavyPersonnel is a person who is a member of
            some instance of #$Navy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NegativeInteger">
        <rdfs:label xml:lang="en">negative integers</rdfs:label>
        <rdfs:comment>A specialization of #$Integer.  An instance INT of
            #$Integer is also an instance of #$NegativeInteger if and
            only if INT is less than zero.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <rdfs:subClassOf rdf:resource="#NegativeIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#NonPositiveInteger"/>
        <rdfs:subClassOf rdf:resource="#NegativeNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="NegativeIntegerExtent">
        <rdfs:label xml:lang="en">#$NegativeIntegerExtent</rdfs:label>
        <rdfs:comment>The collection of #$IntegerExtents which include
            only #$NegativeIntegers</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#NonPositiveIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#NegativeScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="NegativeNumber">
        <rdfs:label xml:lang="en">negative numbers</rdfs:label>
        <rdfs:comment>A specialization of #$RealNumber.  An instance
            REAL of #$RealNumber is also an instance of #$NegativeNumber
            just in case REAL is less than 0.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <rdfs:subClassOf rdf:resource="#NegativeScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#NonPositiveNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="NegativePrefix">
        <rdfs:label xml:lang="en">negative prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NegativeScalarInterval">
        <rdfs:label xml:lang="en">negative scalar intervals</rdfs:label>
        <rdfs:comment>For a measurable negative quantity, the ordered
            sequence of possible values may be thought of as a line.
            #$NegativeScalarIntervals are the line segments (or points)
            on such a line, representing a range of consecutive values,
            all less than 0.  An important subcollection is
            #$NegativeNumber the instances of which correspond to the
            non-positive part of the Real Number Line.  Instances of
            #$NegativeScalarInterval are either contiguous sets of
            points there (i.e., a range of numbers) or just single
            points there (i.e., a #$NegativeNumber).  Instances of
            #$NegativeScalarInterval for which there is some unit of
            measure (e.g. volts, degrees fahrenheit) are not instances
            of #$NegativeScalarInterval.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Negotiating">
        <rdfs:label xml:lang="en">negotiations</rdfs:label>
        <rdfs:comment>A collection of #$Communicating events.  In a
            #$Negotiating, an #$Agent communicates facts and changes in
            the #$Agent&apos;s attitude or conditions to another
            #$Agent, with the (ostensible) purpose of their reaching an #$Agreement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MultiDirectionalCommunication"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NeoClassicalBaseWordForm">
        <rdfs:label xml:lang="en">neo-classical base word forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BaseWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NeoClassicalPrefix">
        <rdfs:label xml:lang="en">neo classical prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nerve">
        <rdfs:label xml:lang="en">nerves</rdfs:label>
        <rdfs:comment>The collection of all nerves.  Each instance of
            #$Nerve is a bundle of many nerve fibers (#$Axons) covered
            with a wrapping of #$ConnectiveTissue.  Sensory nerves (see
            #$SensoryNerve) carry nerve impulses to the central nervous
            system; motor nerves (see #$MotorNerve) carry impulses to
            the muscles.  Most nerves are mixed, containing axons of
            both motor and sensory neurons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConnectedPhysicalPathSystem"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Tree-PathSystem"/>
        <rdfs:subClassOf rdf:resource="#CordlikeObject"/>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nervous">
        <rdfs:label xml:lang="en">agents who is nervous</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            nervous. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NervousSystem">
        <rdfs:label xml:lang="en">nervous systems</rdfs:label>
        <rdfs:comment>The collection of all #$Animals&apos; nervous
            systems.  A #$NervousSystem is composed of all the #$Nerves,
            #$Brain, and #$SpinalCord of an animal, and enables the
            animal to sense (#$perceives) things and react to them
            reflexively (from the spine), by instinct (in the
            #$BrainStem, #$Cerebellum, or #$Cerebrum), and or by
            deliberation (in the #$Cerebrum).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConnectedPhysicalPathSystem"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#InternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nervousness">
        <rdfs:label xml:lang="en">#$Nervousness</rdfs:label>
        <rdfs:comment>Feeling of nervousness and excitability.  One can
            be nervous ABOUT something in particular, or one can have
            undirected feelings of anxiety.   For the former, state an
            assertion of the form (#$feelsTowardsObject AGT OBJ
            #$Nervousness DEGREE) or (#$feelsTowardsEvent AGT EVNT
            #$Nervousness DEGREE); but for the latter (undirected
            feelings of anxiety) use (#$feelsEmotion AGT #$Nervousness).
            Note: This is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.  A more specialized
            #$FeelingType than #$Nervousness is #$Panic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Neutron">
        <rdfs:label xml:lang="en">neutrons</rdfs:label>
        <rdfs:comment>A specialization of #$Nucleon.  Each instance of
            #$Neutron is a nucleon with an electrical charge of 0.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Nucleon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="News">
        <rdfs:label xml:lang="en">#$News</rdfs:label>
        <rdfs:comment>A specialization of
            #$PropositionalInformationThing.  Each instance of #$News
            consists of some factual information about recent events in
            the world (or #$geographicalSubRegions thereof).  News is
            commonly embodied in newspapers and communicated through
            radio and television news broadcasts. Note that #$News does
            not include as instances any instance of #$NewsArticle
            (q.v.). Rather, an instance of #$News might be the content
            of a #$NewsArticle, and could be the content of distinct #$NewsArticles</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="Night">
        <rdfs:label xml:lang="en">#$Night</rdfs:label>
        <rdfs:comment>#$Night is a specialization of
            #$QualitativeTimeOfDay, and it is the temporal complement of
            #$DaytimeHours.  Each instance of #$Night is
            #$contiguousAfter an instance of #$DaytimeHours, and vice
            versa.  Each instance of #$Night intersects two different
            #$CalendarDays.  Each instance of #$Night is
            #$temporallyStartedBy a #$Dusk, #$temporallyFinishedBy a
            #$Dawn, #$contiguousAfter a #$Sunset, and has a #$Sunrise
            which is #$contiguousAfter it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NobleGasElement">
        <rdfs:label xml:lang="en">#$NobleGasElement</rdfs:label>
        <rdfs:comment>A specialization of
            ElementStuffTypeByNumberOfProtons.  Each instance of
            #$NobleGasElement is a type of element that does _not_
            readily form compounds with other types of elements.
            Instances of #$NobleGasElement are highly stable, due to the
            fact that they have the maximum number of electrons possible
            in their outer shell.  The six instances of
            #$NobleGasElement are #$Helium, #$Neon, #$Argon, #$Krypton,
            #$Xenon, and #$Radon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElementStuffTypeByNumberOfProtons"/>
    </owl:Class>
    <owl:Class rdf:ID="NonCategoryChangingAffix">
        <rdfs:label xml:lang="en">non category changing affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WordConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonLeapYear">
        <rdfs:label xml:lang="en">#$NonLeapYear</rdfs:label>
        <rdfs:comment>The collection of #$CalendarYears which are not
            leap years; i.e., calendar years in which February has 28 days</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonNegativeInteger">
        <rdfs:label xml:lang="en">non-negative integers</rdfs:label>
        <rdfs:comment>#$NonNegativeInteger is the sub-collection of
            #$Integer that excludes the negative integers.  Each
            instance of #$NonNegativeInteger is a whole number greater
            than or equal to zero -- for example, 0, 1, 2, 3, ....</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#Cardinal-Mathematical"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeNumber"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="NonNegativeIntegerExtent">
        <rdfs:label xml:lang="en">non-negative integer extents</rdfs:label>
        <rdfs:comment>The collection of #$IntegerExtents which include
            no #$NegativeIntegers</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#IntegerExtent"/>
    </owl:Class>
    <owl:Class rdf:ID="NonNegativeNumber">
        <rdfs:label xml:lang="en">non-negative numbers</rdfs:label>
        <rdfs:comment>#$NonNegativeNumber is the sub-collection of
            #$RealNumber that excludes the negative reals.  Each
            instance of #$NonNegativeNumber is a  number greater than or
            equal to zero -- for example, 0, 0.173, Pi, 4, and 101.
            Quantities measured in units -- for example,
            (#$SecondsDuration 4) and (#$Mile 42) -- are not instances
            of #$NonNegativeNumber, but rather are instances of its
            super-collection #$NonNegativeScalarInterval.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="NonNegativeScalarInterval">
        <rdfs:label xml:lang="en">non-negative scalar intervals</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  An instance
            INTERVAL of #$ScalarInterval is also an instance of
            #$NonNegativeScalarInterval just in case INTERVAL is a
            non-negative number or quantity.  Instances of
            #$NonNegativeScalarInterval include all instances of
            #$NonNegativeNumber (q.v.), as well as non-negative
            quantities such as (#$Meter 212), (#$Kilogram 5), and
            (#$SecondsDuration 0).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPersonAnimal">
        <rdfs:label xml:lang="en">#$NonPersonAnimal</rdfs:label>
        <rdfs:comment>The collection of all instances of #$Animal that
            are not instances of #$Person.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPhysicalPartPredicate">
        <rdfs:label xml:lang="en">#$NonPhysicalPartPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates. Instances of
            #$NonPhysicalPartPredicate are used to describe the
            relationship between a #$PartiallyIntangible and its
            non-physical parts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPositiveInteger">
        <rdfs:label xml:lang="en">non-positive integers</rdfs:label>
        <rdfs:comment>A specialization of #$Integer.  An instance INT of
            #$Integer is also an instance of #$NonPositiveInteger if and
            only if INT is less than or equal to zero.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPositiveIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#NonPositiveNumber"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPositiveIntegerExtent">
        <rdfs:label xml:lang="en">non-positive integer extents</rdfs:label>
        <rdfs:comment>The collection of #$IntegerExtents which include
            no #$PositiveIntegers</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPositiveScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#IntegerExtent"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPositiveNumber">
        <rdfs:label xml:lang="en">non-positive numbers</rdfs:label>
        <rdfs:comment>A specialization of #$RealNumber.  An instance
            REAL of #$RealNumber is also an instance of
            #$NonPositiveNumber just in case REAL is less than or equal
            to zero.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPositiveScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPositiveScalarInterval">
        <rdfs:label xml:lang="en">non-positive scalar intervals</rdfs:label>
        <rdfs:comment>For a measurable non-positive  quantity, the
            ordered sequence of possible values may be thought of as a
            line. #$NonPositiveScalarIntervals are the line segments (or
            points)  on such a line, representing a range of consecutive
            values, all equal to  or less than 0. An important
            subcollection is #$NonPositiveNumber the    instances of
            which correspond to the non-positive part of the Real Number
            Line. Instances of #$NonPositiveNumber are either contiguous
            sets of  points there (i.e., a range of numbers) or just
            single points there (i.e.,  a number). Instances of
            #$NonPositiveScalarInterval for which there is  some unit of
            measure (e.g. volts, degrees fahrenheit) are not instances
            of  #$NonPositiveNumber.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPoweredDevice">
        <rdfs:label xml:lang="en">non-powered devices</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$NonPoweredDevice is a device which does not
            need to have any kind of energy supplied to it in order for
            it to perform its intended function. Examples of
            #$NonPoweredDevices include tables, floor mats, bookshelves,
            shirts, and coat hangars.  A hammer would not be an instance
            of #$NonPoweredDevice, since it requires kinetic energy to
            perform its intended function.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonProfitCorporation">
        <rdfs:label xml:lang="en">non-profit corporations</rdfs:label>
        <rdfs:comment>A specialization of both #$LegalCorporation and
            #$NonProfitOrganization.  Each instance of
            #$NonProfitCorporation is a legal corporation which is
            engaged in not-for-profit activities.  Typical instances of
            #$NonProfitCorporation have no shareholders or owners,
            although they are commonly governed by a board (see the
            collection #$BoardOfDirectors).  Most instances of
            #$NonProfitCorporation have official non-profit standing
            with a government, and thus do not pay corporate income
            taxes. Instances of #$NonProfitCorporation include
            #$PlannedParenthood, #$SierraClub, and #$HabitatForHumanity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonProfitOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonProfitEmployee">
        <rdfs:label xml:lang="en">non-profit worker</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$PersonWithOccupation (q.v.) who are employed by some
            non-profit organization, such as a college, museum, or
            charity foundation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonProfitOrganization">
        <rdfs:label xml:lang="en">non profit organization</rdfs:label>
        <rdfs:comment>#$NonProfitOrganization is a specialization of
            #$Organization.  Each instance of #$NonProfitOrganization is
            an organization that is not operated with the purpose of
            making a profit.  Instances of #$NonProfitOrganization have
            members, rather than owners.  Charities, clubs, schools,
            political action groups, political parties and churches are
            usually instances of #$NonProfitOrganization.  Instances of
            #$NonProfitOrganizations are often exempt from certain taxes
            in particular jurisdictions.  Specific examples of elements
            of #$NonProfitOrganization are #$RedCrossSociety-National
            and #$RomanCatholicChurch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonPublishedText">
        <rdfs:label xml:lang="en">unpublished texts</rdfs:label>
        <rdfs:comment>A specialization of #$TextualMaterial, and thus of
            #$InformationBearingObject (IBO). Each instance of this
            collection is (a physical copy of) a text that has not yet
            been published. It may have been rejected for publication
            (e.g. a rejected book manuscript) or it may not be intended
            for publication (e.g. a memo or personal letter). It is, of
            course, disjoint with #$PublishedMaterial.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonVerbalCommunicating">
        <rdfs:label xml:lang="en">non verbal communicating</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            subcollection of #$Communicating. Each instance of
            #$NonVerbalCommunicating is a transmission of information by
            means of some bodily movement other than speaking.
            Subcollections include #$ShakingHands and #$Cuddling, since
            such actions by definition are communications involving two
            actors. (Note that #$MakingAGesture (q.v.) is NOT a
            subcollection of #$NonVerbalCommunicating; instances of
            #$MakingAGesture are merely information-encodings. They may
            or may not be #$subEvents of #$NonVerbalCommunicating events.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nonagon">
        <rdfs:label xml:lang="en">nonagon</rdfs:label>
        <rdfs:comment>The collection of all nine-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NongradableAdjective">
        <rdfs:label xml:lang="en">#$NongradableAdjective</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Adjective"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NonlexicalLinguisticObject">
        <rdfs:label xml:lang="en">#$NonlexicalLinguisticObject</rdfs:label>
        <rdfs:comment>The collection of linguistic objects which are not
            morphemes, but which nonetheless make up part of a language
            system; e.g., the parts of speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nose">
        <rdfs:label xml:lang="en">#$Nose</rdfs:label>
        <rdfs:comment>Facial organ used in smelling and breathing</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#Protrusion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nostalgia">
        <rdfs:label xml:lang="en">nostalgia</rdfs:label>
        <rdfs:comment>The collection of feelings of homesickness, a kind
            of wistful longing for things experienced in the past.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Noun">
        <rdfs:label xml:lang="en">nouns</rdfs:label>
        <rdfs:comment>The collection of all nouns.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#OpenClassWord"/>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NounPhrase">
        <rdfs:label xml:lang="en">noun phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all possible noun phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPhrase"/>
        <rdfs:subClassOf rdf:resource="#NounPhrase"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <owl:equivalentClass rdf:resource="#NLPhrase"/>
        <owl:equivalentClass rdf:resource="#NounPhrase"/>
        <owl:equivalentClass rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NounPhraseModifyingFrame">
        <rdfs:label xml:lang="en">noun phrase modifying frame</rdfs:label>
        <rdfs:comment>This frame is used for adverbs which can modify a
            noun phrase.            Examples: `then&apos; as in `the
            president then&apos; and `even&apos; as in            `even
            the president&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForAdverbs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NounProducingAffix">
        <rdfs:label xml:lang="en">noun-creating affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NounProducingSuffix">
        <rdfs:label xml:lang="en">noun producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NounProducingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="November">
        <rdfs:label xml:lang="en">November</rdfs:label>
        <rdfs:comment>The collection of all Novembers,   the eleventh
            month of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NuclearPoweredDevice">
        <rdfs:label xml:lang="en">nuclear-powered devices</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of #$NuclearPoweredDevice is a device which uses
            nuclear fission or fusion reactions as a source of its
            power.  Specializations of #$NuclearPoweredDevice include
            #$NuclearSubmarine and #$NuclearAircraftCarrier.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#NuclearProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NuclearProduct">
        <rdfs:label xml:lang="en">nuclear products</rdfs:label>
        <rdfs:comment>An instance of #$ProductType.  This collection
            comprises all marketable goods and services relating to the
            generation and use of nuclear energy.  Some subsets of
            #$NuclearProduct include #$NuclearWeapon, #$NuclearFuel, and
            #$NuclearReactor. Also included in this collection are
            #$NuclearServiceEvents -- the class of events where
            technical assistance is rendered in nuclear-related matters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nucleon">
        <rdfs:label xml:lang="en">nucleons</rdfs:label>
        <rdfs:comment>A specialization of #$SubAtomicParticle.  Each
            instance of #$Nucleon is a subatomic particle found in some
            atomic nucleus (see the collection #$AtomicNucleus).
            #$Nucleon has two subcollections, #$Proton and #$Neutron.
            Every instance of #$AtomicNucleus is composed of some number
            of #$Nucleons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubAtomicParticle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Number-General">
        <rdfs:label xml:lang="en">#$Number-General</rdfs:label>
        <rdfs:comment>A specialization of #$MathematicalObject and
            #$ScalarPointValue. Each instance of this collection is one
            of a series of mathematical objects often denoted by symbols
            of unique meaning in a fixed order that can be derived by
            counting (even if, in the case of the reals, it is not
            always defined which number is directly &apos;next to&apos;
            a given number). This is the most general collection of
            numbers; specializations include #$RealNumber,
            #$ComplexNumber, #$PrimeNumber, #$Probability,
            #$ConcentrationByWeight, and whatever else might count as a
            numeric quantity. Note, however, that this collection does
            not include transfinite cardinals such as #$Aleph-1 (see the
            #$cyclistNotes on #$Cardinal-Mathematical), nor does it
            include instances of #$ScalarInterval which may be arranged
            on a comparative spectrum (e.g. (#$LowAmountFn QUALITY)
            (#$MediumAmountFn QUALITY), (#$HighAmountFn QUALITY)) but
            which cannot receive a discrete, absolute, quantitative value.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Interval-Bounded"/>
    </owl:Class>
    <owl:Class rdf:ID="Number-SP">
        <rdfs:label xml:lang="en">#$Number-SP</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all numbers used as words. This includes
            spelled-out numbers, like &apos;five&apos;, and digits, like &apos;5&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner-Numeric"/>
        <rdfs:subClassOf rdf:resource="#CountNoun"/>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NumberObject">
        <rdfs:label xml:lang="en">#$NumberObject</rdfs:label>
        <rdfs:comment>The number data type.   In the context of
            #$ProgrammingDomainVocabularyMt, it is entirely undetermined
            how this data type is implemented.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="NumberPrefix">
        <rdfs:label xml:lang="en">number prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="NumericComparisonPredicate">
        <rdfs:label xml:lang="en">#$NumericComparisonPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$ComparisonPredicate.  The
            collection of binary predicates used  to compare instances
            of #$ScalarInterval (q.v.) with respect to their  numeric or
            quantitative properties.  Instances include #$greaterThan,
            #$greaterThanOrEqualTo, and #$numericallyEquals.  These are
            effectively  the mathematical relations of greater-than et
            al., generalized to  hold between scalars of all sorts,
            including quantitative intervals as  well as point values
            (see #$ScalarPointValue).  Generally speaking, a given
            numeric comparison predicate holds between two scalars only
            if they are both instances of the same
            #$TotallyOrderedScalarIntervalType (q.v.).  See also
            #$valuesShareScale and #$colinearValues.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComparisonPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="NumericQuantifier">
        <rdfs:label xml:lang="en">numeric quantifier</rdfs:label>
        <rdfs:comment>Numeric quantifiers denote a numeric value which
            is the result of applying the function specified in the
            second argument to all of the elements of the set expression
            denoted by the first argument.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryFunction"/>
        <rdfs:subClassOf rdf:resource="#EvaluatableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="NumericString">
        <rdfs:label xml:lang="en">numeric string</rdfs:label>
        <rdfs:comment>A specialization of #$SubLString.  Each instance
            of #$NumericString is a string comprised entirely of
            numerals. For example:  1 ,  98287465 , and  7237846 , but
            not  3.14 .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Nurse">
        <rdfs:label xml:lang="en">nurses</rdfs:label>
        <rdfs:comment>The class of health professionals who provide
            various aspects of hands-on health care to patients.  Nurses
            do not usually diagnose or decide on treatments, but they
            administer medicines and treatments, perform medical tests,
            give regular care to hospitalized patients, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Nutrient">
        <rdfs:label xml:lang="en">nutrients</rdfs:label>
        <rdfs:comment>A specialization of #$EdibleStuff.  Each instance
            of #$Nutrient is a substance considered necessary or
            beneficial in the diet of a person or animal.  If a food or
            a pill is sold in a package, often the nutrients in the food
            or pill are listed on the package label.  Specializations of
            #$Nutrient include #$EdibleSodium, #$ProteinStuff,
            #$EdibleCalcium, #$EdibleIron, and #$Vitamin.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ObjectPredicate">
        <rdfs:label xml:lang="en">#$ObjectPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to
            ascribe characteristics or properties (taken in a very broad
            sense) to individual objects.  As such, each instance of
            #$ObjectPredicate has an #$arity of 2 or greater and has at
            least one argument place (often including the first)
            constrained (see #$argIsa) to instances of #$Individual or
            some subcollection thereof. Examples include
            #$likesAsFriend, #$connectedTo, and #$arg3Isa.  See also #$CollectionPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ObjectPronoun">
        <rdfs:label xml:lang="en">#$ObjectPronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all object pronouns. Object pronouns can
            replace the direct object, indirect object, or oblique
            object noun in a sentence, but not the subject noun.
            Example: &apos;them&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ObjectReferenceDataType">
        <rdfs:label xml:lang="en">#$ObjectReferenceDataType</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerDataType. The
            collection of data types whose elements reference or  point
            to another program object. In some programming languages
            (such as #$C-ComputerLanguage)  object references may
            actually be implemented as physical memory addresses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#ComputerDataType"/>
    </owl:Class>
    <owl:Class rdf:ID="ObjectType">
        <rdfs:label xml:lang="en">types of objects</rdfs:label>
        <rdfs:comment>The collection of all collections that are
            object-like  in at least one respect. A collection COL is
            object-like just in case there is some sense of `part&apos;
            according to which any (or nearly any) given proper part of
            an instance of COL is _not_ itself an instance of COL; when
            this happens COL is said to be object-like with respect to
            that sense of `part&apos;. More precisely, for a collection
            COL to be an instance of #$ObjectType it is sufficient that
            there be some specialization PARTPRED of #$parts such that,
            for any OBJ1 and OBJ2 (with OBJ1 and OBJ2 distinct), if
            (#$isa OBJ1 COL) and (PARTPRED OBJ1 OBJ2), then _not_ (#$isa
            OBJ2 COL).  (Also sufficient for COL&apos;s being an
            object-type is that there be some specialization INVPARTPRED
            of the inverse of #$parts (see #$genlInverse) such that
            (INVPARTPRED OBJ2 OBJ1), with everything else remaining the
            same as above.)  Note that neither of the above sufficient
            conditions for COL&apos;s being an object-type is strictly
            necessary: some exceptions are allowed.  Thus as long as
            either one of the above conditionals holds in _nearly_ all
            cases, COL should be considered an instance of #$ObjectType.
            Here are two examples.  Consider #$Automobile.  Take an
            instance of that, say my car.  Now take one of the proper
            #$physicalParts of my car, say the steering wheel.  The
            steering wheel is _not_ an instance of #$Automobile.  And
            the same would be true for any proper physical part of any
            car.  So #$Automobile is an #$ObjectType.  Consider
            #$LeapYear. No proper #$timeSlices of a leap year is itself
            a leap year.  So #$LeapYear is an #$ObjectType.  See
            #$StuffType for the contrasting (though not disjoint) notion
            of being stuff-like.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="ObjectTypeByColor">
        <rdfs:label xml:lang="en">object type by color</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ObjectTypeByColor is a collection of objects that are the
            same with respect to having a common color. Indicate a
            particular object&apos;s #$Color with one of the following
            predicates: #$significantColorOfObject, #$mainColorOfObject,
            or #$uniformColorOfObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Objecting-CommunicationAct">
        <rdfs:label xml:lang="en">objects (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationAct-Single.  In
            each instance of #$Objecting-CommunicationAct, some #$Agent
            objects to something.  Propositions representing the
            objection are related to the act by the predicate
            #$informStatement.  An objection may be communicated to the
            agent(s) that the objector believes responsible for the
            objectionable state of affairs, or it may be raised with a
            third party or parties.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Disapproval-CommunicationAct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Obligation">
        <rdfs:label xml:lang="en">#$Obligation</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subcollection of
            #$SupposedToBeMicrotheory.  Each instance of the collection
            #$Obligation is a microtheory which contains assertions
            describing what some agent (the #$obligatedAgent) is obliged
            to do, or make true, for one or more other agents, possibly
            including society in general.  An obligation is the most
            general case of some agent owing something to another.
            Obligations may be undertaken in conjunction with various
            kinds of #$Agreements.   Unlike an agreement, however, an
            obligation need not have a second known party (though some
            do).  An obligation can exist and be understood without
            identifying another particular agent as the `holder&apos; of
            the obligation -- and that may be true, even if the
            beneficiary (#$obligationOwedTo) can be identified.  For
            example, assuming that parents have an obligation to care
            for their children, it is not clear with whom a parent has
            `agreed&apos; to take care of his or her child.  Some common
            ways to incur an obligation are through social transactions
            (e.g., family duties, friendship, favors) or through
            financial transactions (e.g., a #$PaymentObligation).   In
            addition, obligations may be imposed on those who are
            subject to one or more instances of #$CodeOfConduct, e.g.,
            #$LegalCode-ModernUnitedStates,
            #$SportsRulesOf-BoxingSportsEvent, #$OfficeCodeOfConductMt.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Observing">
        <rdfs:label xml:lang="en">observing</rdfs:label>
        <rdfs:comment>A collection of information-gathering events in
            which an  agent or group of agents acquire information by
            observing some thing  or event.  The observation may be
            mediated by equipment, such a  binoculars, video cameras,
            body wires, an intercom, and other aids to  real-time
            observation, and direct sensory perception on the part of a
            #$PerceptualAgent is not required, although in cases of
            group  observation, we require that there be at least one
            member of the group  playing the role of #$recipientOfInfo
            in the #$Observing. Positive  examples: a military
            unit&apos;s following air traffic by means of radar or  a
            submarine crew&apos;s tracking the progress of another
            submarine by means  of sonar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationGathering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ObtainingPermission">
        <rdfs:label xml:lang="en">obtaining permission</rdfs:label>
        <rdfs:comment>The collection of events in which one #$Agent gets
            permission from another #$Agent to do something.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ocean">
        <rdfs:label xml:lang="en">#$Ocean</rdfs:label>
        <rdfs:comment>A specialization of #$Sea. Each instance of
            #$Ocean is one of the oceans of the world.  This includes
            #$TheOceanSea, the interconnected expanse of salt water
            covering 71% of the Earth&apos;s surface, and of which the
            other oceans are subregions.  Examples: #$AtlanticOcean,
            #$ArcticOcean, #$IndianOcean, #$PacificOcean.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sea"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OceanLiner">
        <rdfs:label xml:lang="en">ocean liner</rdfs:label>
        <rdfs:comment>#$OceanLiner is a specialization of
            #$PublicTransportationDevice and #$Ship.  Each instance of
            #$OceanLiner is a ship that is designed to comfortably
            transport a large number of people across an ocean .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Ship"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Octagon">
        <rdfs:label xml:lang="en">octagons</rdfs:label>
        <rdfs:comment>The collection of all eight-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="October">
        <rdfs:label xml:lang="en">October</rdfs:label>
        <rdfs:comment>The collection of all Octobers,   the tenth month
            of the year in the #$GregorianCalendar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OddNumber">
        <rdfs:label xml:lang="en">odd numbers</rdfs:label>
        <rdfs:comment>The collection of all odd numbers (integers),
            including positive and negative odd numbers, but not
            including any infinite &apos;numbers&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="Offendedness-Feeling">
        <rdfs:label xml:lang="en">offendedness - feeling</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Irritation"/>
    </owl:Class>
    <owl:Class rdf:ID="Offering-CommunicationAct">
        <rdfs:label xml:lang="en">offers (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationAct-Single.
            Each instance of #$Offering-CommunicationAct is a
            communication act in which somebody offers to do something,
            furnish something, or make something the case. See also the
            #$IllocutionaryForce associated with these actions, #$Offer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OfficialDocument">
        <rdfs:label xml:lang="en">official documents</rdfs:label>
        <rdfs:comment>A specialization of
            #$HardcopyInformationBearingObject. Each instance of
            #$OfficialDocument is a document that can be used as the
            basis, proof, or support of some fact (such as a
            person&apos;s nationality, marital status, credit, or
            qualifications; or the ownership or transfer of property,
            etc.). #$OfficialDocuments are typically generated, issued,
            and/or certified by relevant institutions (as with
            #$Passports or #$StockCertificates), but they also include
            unique personal documents (such as wills) which meet certain
            standards to be accepted in support of facts. Instances of
            #$OfficialDocument include: #$BirthCertificates,
            #$TaxReturns, insurance policies, #$PostageStamps, receipts,
            #$PackingSlips and student ID cards. A notable
            specialization of this collection is #$LegalDocument. See
            also #$OfficialDocumentType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Oil">
        <rdfs:label xml:lang="en">oil</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffCompositionType, and
            a specialization of #$OrganicStuff.  Each instance of #$Oil
            is a portion of some type of typically viscous, primarily
            hydrophobic (i.e., _not_ readily soluble in water) liquid
            hydrocarbon.  Notable specializations of #$Oil include
            #$CookingOil, #$HeatingOil, and #$Petroleum-CrudeOil.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Omnivore">
        <rdfs:label xml:lang="en">#$Omnivore</rdfs:label>
        <rdfs:comment>A specialization of #$Heterotroph (q.v.) and an
            instance of #$OrganismClassificationType.  Instances of
            #$Omnivore are those animals whose natural diets consist of
            both plants (or plant parts or plant-derived products) and
            animals (or animal parts or animal-derived products).  Thus
            a human vegetarian is still omnivorous, since meat is part
            of our  natural  diet.  Specializations of this collection
            include #$Pig, #$Bear, and #$Person. See also #$Herbivore
            and #$Carnivore.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Heterotroph"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OneStoryBuilding">
        <rdfs:label xml:lang="en">one-story buildings</rdfs:label>
        <rdfs:comment>#$OneStoryBuilding is a specialization of
            #$Building.  Each instance is a building with exactly one story.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OneToOneFunction">
        <rdfs:label xml:lang="en">one to one function</rdfs:label>
        <rdfs:comment>A specialization of #$Function-MathematicalObject
            each instance of which is a function that always maps
            distinct argument-sequences to distinct values; i.e. it
            never  maps two different elements of its domain to the same
            element  of its range.  Such a function is sometimes called
            an _injection_, and if it is also a mapping onto a given
            set, (see #$functionOntoSet) it is called a _bijection_ with
            respect to that set.  (Thus a one-to-one function is a
            bijection with respect to its own range.)  See also
            #$DomainOfFunctionFn, #$RangeOfFunctionFn, and  #$valueOfFunctionForArgs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
    </owl:Class>
    <owl:Class rdf:ID="OpenClassWord">
        <rdfs:label xml:lang="en">open-class words</rdfs:label>
        <rdfs:comment>The collection of all words which are members of
            open lexical classes, namely those with a potentially
            unlimited membership. Example: #$Adjectives, #$Nouns, #$Verbs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OpenCycDefinitionalPredicate">
        <rdfs:label xml:lang="en">#$OpenCycDefinitionalPredicate</rdfs:label>
        <rdfs:comment>The collection of predicates considered
            definitional  for the purposes of the review of
            #$PublicConstants  being done in preparation for OpenCyc.
            Where CONST is a #$PublicConstant,  a  definitional GAF  for
            CONST is any asserted #$CycLClosedAtomicSentence  (PRED
            CONST ARG2..ARGN) such that PRED is an
            #$OpenCycDefinitionalPredicate.  See also #$PublicConstant-DefinitionalGAFsOK.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="OpenSourceComputerProgram">
        <rdfs:label xml:lang="en">#$OpenSourceComputerProgram</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerProgram-CW.
            #$OpenSourceComputerProgram is the collection of programs
            for which the #$ComputerCode-Source is available to anyone
            who owns a copy of the program.  That means owners are free
            to run, copy, distribute, study, change, and improve the
            software.  Some prominent instances of
            #$OpenSourceComputerProgram are the #$ApacheWebServer --
            which operates a significant number of the world&apos;s web
            sites, #$BIND-TheProgram -- that provides the domain name
            service for the Internet, the #$Linux operating system, GNU
            software packages, and many computer games.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerProgram-CW"/>
    </owl:Class>
    <owl:Class rdf:ID="OperatingSystem">
        <rdfs:label xml:lang="en">#$OperatingSystem</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerProgram-CW.  Each
            instance of #$OperatingSystem is a program that provides an
            environment in which a user can execute instances of
            #$ApplicationProgram (q.v.) on the hardware of a computer.
            That is, running copies of instances of #$OperatingSystem
            serve as systems that look for and understand user commands,
            regulate how system resources are used by application
            programs, handle the internal operations of computers, and
            so on.  Note that #$OperatingSystem is disjoint with
            #$ApplicationProgram and #$OperatingSystemKernel (q.v.), and
            that together these three collections partition #$ComputerProgram-CW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerProgram-CW"/>
    </owl:Class>
    <owl:Class rdf:ID="OperatingSystemKernel">
        <rdfs:label xml:lang="en">#$OperatingSystemKernel</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerProgram-CW and an
            instance of #$ComputerProgramTypeByFunction.  Each instance
            of #$OperatingSystemKernel is a computer program that
            functions as the kernel of an instance of #$OperatingSystem
            (q.v.).  Some functions of kernels include controlling the
            interface between user programs and hardware devices, and
            scheduling processes.  Not every operating system has a
            kernel, but all Linux operating systems come with a Linux
            kernel (see #$LinuxKernel-TheProgram).  Important
            specializations or #$OperatingSystemKernel are #$Microkernel
            and #$MonolithicKernel (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerProgram-CW"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrderOfMagnitudeInterval">
        <rdfs:label xml:lang="en">magnitudes</rdfs:label>
        <rdfs:comment>#$OrderOfMagnitudeInterval, a specialization of
            #$ScalarInterval, is the collection of intervals which
            represent significant differences in quantity, for the
            various types of measurable properties.  The most familiar
            case is for numbers, in which orders of magnitudes typically
            correspond with powers of 10; thus, in any given numerical
            quantity, the 100&apos;s dominate the 10&apos;s or the
            units, which are negligible with respect to the hundreds.
            Similar scales could be identified for any measurable
            property.  For example, for #$Time-Quantity, some intervals
            which represent orders of magnitude are:
            #$AFewSecondsDuration, #$AFewMinutesDuration,
            #$AFewHoursDuration, #$AFewDaysDuration,
            #$AFewWeeksDuration, etc.  Note that orders of magnitude for
            the same measurable property may differ between
            microtheories; e.g., the orders of magnitude for
            #$Time-Quantity in a `GeologicalTimeMt&apos; would be much
            larger than those listed above, which are relevant for human
            perceptions and activities.          Any two attributes
            which represent amounts of the same kind of property (e.g.,
            time, distance) and which are also instances of
            #$OrderOfMagnitudeInterval will be assumed to differ so
            substantially in size that the smaller one (and values
            associated with it) will be insignificant compared to the
            larger interval (and values associated with it).  That is,
            in general and as a default, if ORD1 and ORD2 are two
            different instances of #$OrderOfMagnitudeInterval which are
            also instances of the same type of #$AttributeValue (e.g.,
            #$Speed, #$Mass, #$Density), then one is negligible with
            respect to the other.  To know which dominates the other, we
            need additional knowledge about their relative size, e.g.,
            that ORD2 is a #$followingValue of (i.e., &apos;bigger&apos;
            than) ORD1.  See also #$negligibleWRT, #$followingValue.
            The predicate #$orderOfMagnitude (q.v.) is used to relate
            particular quantities to the appropriate instance of
            #$OrderOfMagnitudeInterval.  For example, two days -- in
            Cyc, (#$DaysDuration 2) -- has the #$orderOfMagnitude #$AFewDaysDuration.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="Ordering-CommunicationAct">
        <rdfs:label xml:lang="en">#$Ordering-CommunicationAct</rdfs:label>
        <rdfs:comment>A collection of actions, many of which are speech
            acts. In each instance of this collection, somebody orders
            somebody to do something. See also the #$IllocutionaryForce
            associated with this action, #$Command.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Requesting-CommunicationAct"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Organ">
        <rdfs:label xml:lang="en">organs</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart.  Each
            instance of #$Organ is a part of an animal that has a
            specialized physiological function  and is more or less
            localized within the animal.  Examples include hearts,
            kidneys, and tongues.  Specializations include
            #$InternalOrgan and #$ExternalOrgan.  Note that, in most
            contexts, a distributed system like a #$NervousSystem or a
            (#$SkinOnFn #$WholeBody) is not an #$Organ.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganicStuff">
        <rdfs:label xml:lang="en">organic substances</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each instance of
            #$OrganicStuff is a tangible thing composed of one or more
            types of organic #$Molecule.  Instances of #$OrganicStuff
            usually have their origin in the bodies (or other products)
            of living things.  Since some organic substances can be
            synthesized, #$OrganicStuff is not a subcollection of
            #$NaturalTangibleStuff.  Chemically, instances of
            #$OrganicStuff have fairly (or very) complex carbon-based
            structures.  Examples include all instances of the
            collections #$Oil, #$DNAStuff, #$Alcohol-Compound, #$Ivory,
            and #$AnimalBodyPart.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Organism-Whole">
        <rdfs:label xml:lang="en">organisms</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalLivingObject.
            Each instance of #$Organism-Whole is a biological living
            object (BLO) that is a whole, and not part of some other
            BLO.  Most instances of #$Organism-Whole are capable of
            existing and reproducing while physically separate from
            other organisms (with allowances for eating and mating).
            Abnormal BLOs which are nonetheless considered to be
            instances of #$Organism-Whole include instances of #$Virus,
            as well as sterile hybrids and colony organisms, like those
            in slime molds or the instances of #$PortugueseManOfWar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismClassificationType">
        <rdfs:label xml:lang="en">#$OrganismClassificationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganismClassificationType is a sub-collection of
            #$Organism-Whole (q.v.), where membership in that
            sub-collection is determined by satisfaction of  some set of
            classificatory criteria accepted by some scientific
            community.  The scientific types in
            #$OrganismClassificationType may or may not correspond to
            naive categories of organisms, and, in addition, although
            they are scientific, they might not be officially accepted
            biological taxons at the standard taxonomic levels.
            (#$Invertebrate is an example.)  Compare
            #$BiologicalTaxonType.  Note that
            #$OrganismClassificationType is _not_ an instance of
            #$SiblingDisjointCollectionType, since there are scientific
            classifications along different dimensions.  Many
            specializations of #$OrganismClassificationType are,
            however, instances of #$SiblingDisjointCollectionType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismConstituentType">
        <rdfs:label xml:lang="en">types of organism constituents</rdfs:label>
        <rdfs:comment>The collection of all collections whose instances
            are frequently #$physicalDecompositions of an
            #$Organism-Whole.   Instances of #$OrganismConstituentType
            include all specs of #$OrganismPart, as well as things like
            (#$LiquidFn #$Water) and #$Cell.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismPart">
        <rdfs:label xml:lang="en">#$OrganismPart</rdfs:label>
        <rdfs:comment>A specialization of both #$PhysicalPartOfObject
            and #$BiologicalLivingObject. Each instance of
            #$OrganismPart is an anatomical part of an organism.  This
            collection includes the gross anatomical parts and
            microscopic anatomical parts of every individual of every species.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismPartType">
        <rdfs:label xml:lang="en">types of organism part</rdfs:label>
        <rdfs:comment>The collection of all the types of
            #$OrganismParts.  An #$OrganismPartType  is a
            characterization of body parts of #$Animals, #$PlantParts,
            or parts of other organisms by structure and/or function.
            Some instances of this collection include #$SpinalColumn,
            #$Eyelash, #$Petal, etc.  #$OrganismPartType is not
            organized along species/order/class/phylum/... taxonomic lines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismConstituentType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismTypeByComplexity">
        <rdfs:label xml:lang="en">#$OrganismTypeByComplexity</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganismTypeByComplexity is a collection of
            #$Organism-Whole.  This collection has exactly two disjoint instances.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganismTypeByHabitat">
        <rdfs:label xml:lang="en">#$OrganismTypeByHabitat</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganismTypeByHabitat is a collection of organisms (i.e.,
            a specialization of #$Organism-Whole) all of whom share the
            same sort of habitat.  Instances of #$OrganismTypeByHabitat
            include #$AquaticOrganism and #$TerrestrialOrganism.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Organization">
        <rdfs:label xml:lang="en">institutions</rdfs:label>
        <rdfs:comment>The collection of all organizations.  Each
            instance of #$Organization is a group whose group-members
            are instances of #$IntelligentAgent. In each instance of
            #$Organization, certain relationships and obligations exist
            between the members of the organization, or between the
            organization and its members.  Instances of #$Organization
            include both informal and legally constituted organizations.
            Each instance of #$Organization can undertake projects,
            enter into agreements, own property, and do other tasks
            characteristic of agents; consequently, #$Organization is a
            specialization of the collection #$Agent.  Notable
            specializations of #$Organization include
            #$LegalGovernmentOrganization, #$CommercialOrganization, and #$GeopoliticalEntity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-NonNatural"/>
        <rdfs:subClassOf rdf:resource="#MultiIndividualAgent"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationByEntityType">
        <rdfs:label xml:lang="en">#$OrganizationByEntityType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganizationByEntityType is a subcollection of
            #$Organization whose instances are all the same type of
            legal entity.  For example, the collections
            #$LegalCorporation, #$Partnership, and #$Association are all
            instances of #$OrganizationByEntityType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationOfPeopleOnly">
        <rdfs:label xml:lang="en">organization of people only</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$OrganizationOfPeopleOnly is an organization each of
            whose members (see the predicate #$hasMembers) is an
            instance of #$Person.  Examples of
            #$OrganizationOfPeopleOnly include a human nuclear family, a
            carpool, or a sports team. Negative examples include
            #$UnitedNationsOrganization or #$OrganizationOfAmericanStates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationPolicy">
        <rdfs:label xml:lang="en">policies</rdfs:label>
        <rdfs:comment>A specialization of #$Agreement.  Each instance of
            #$OrganizationPolicy is an agreement which contains the
            terms of some policy of a particular organization.
            Instances of #$OrganizationPolicy would include U.S. Federal
            government hiring policies, a policy governing a
            corporation&apos;s charitable or political donations, or a
            school dress code.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationRepresentative">
        <rdfs:label xml:lang="en">company reps</rdfs:label>
        <rdfs:comment>#$OrganizationRepresentative is a specialization
            of #$PersonWithOccupation. Each instance of
            #$OrganizationRepresentative is officially sanctioned to act
            on behalf of an organization during interactions with agents
            who are not part of that organization.  Such a person will
            often be a member of the organization (e.g., an employee),
            but need not be.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationTypeByActivityType">
        <rdfs:label xml:lang="en">types of organization classified by activity</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganizationTypeByActivityType is a subcollection of
            #$Organization whose instances all engage in the same types
            of activities.  #$OrganizationTypeByActivityType thus does
            not distinguish among instances of #$Organization on the
            basis of the type of industry they are engaged in (see
            #$OrganizationTypeByIndustry), but, rather, on the basis of
            the kinds of things the #$Organizations do.  Examples of
            instances of #$OrganizationTypeByActivityType include
            #$ResearchOrganization, #$SellingOrganization, and #$ServiceOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationTypeByCustomers">
        <rdfs:label xml:lang="en">types of organization classified by customers</rdfs:label>
        <rdfs:comment>A collection of three disjoint collections,
            #$OrganizationWithBusinessCustomers,
            #$OrganizationWithIndividualCustomers, and
            #$OrganizationWithoutCustomers.  The #$Organizations that
            are instances of the collections which are instances of
            #$OrganizationByClients are distinguished by the types of
            customers they serve or by their lack of customers
            (customers being used here in the sense of #$customers).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationTypeByGeographicReach">
        <rdfs:label xml:lang="en">types of organization classified by
            geographical reach</rdfs:label>
        <rdfs:comment>A collection of four disjoint collections,
            #$InternationalOrganization, #$NationalOrganization,
            #$StateOrProvinceWideOrganization, and #$LocalOrganization.
            The #$Organizations that are instances of the collections
            which are instances of #$OrganizationTypeByGeographicReach
            are distinguished by their primary scope of activity,
            membership and ownership within a particular geographic
            region.  #$Organizations such as #$City,
            #$State-UnitedStates, and #$IndependentCountry are not
            specailizations of any of the instances of
            #$OrganizationTypeByGeographicReach.  Because instances of
            #$City or #$State-UnitedStates are not confined in terms of
            activity to a particular geographic region, those
            collections are not specializations of, respectively,
            #$LocalOrganization or #$StateOrProvinceWideOrganization. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationTypeByIndustry">
        <rdfs:label xml:lang="en">types of organization classified by industry</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance   of
            #$OrganizationTypeByIndustry is a set distinguished by the
            nature of the industry engaged in by the set members.
            Examples of instances of #$OrganizationTypeByIndustry
            include #$EntertainmentOrRecreationOrganization,
            #$HealthcareOrganization, and #$InsuranceOrganization.
            Because this collection represents a generic facetting of
            #$Organizations, it is not uncommon for many instances of
            #$Organization to be members of more that one collection
            that is an instance of #$OrganizationTypeByIndustry.  For
            example, the collection #$MortgageLender is a specialization
            of both #$FinancialOrganization and #$RealEstateOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationTypeByStructuralCharacteristic">
        <rdfs:label xml:lang="en">types of organization classified by
            structural characteristic</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OrganizationTypeByStructuralCharacteristic is a collection
            whose instances are distinguished by structural
            characteristics.  For example, the collections
            #$ChainOrganization, #$BranchOrganization and #$Department
            are all instances of
            #$OrganizationTypeByStructuralCharacteristic.  An instance
            of #$ChainOrganization is distinguished by the structure
            which exists among the parent company and the
            #$subOrganizations through which it operates.  Similarly,
            instances of #$BranchOrganization are distinguished by the
            fact that they are part of a larger structure.  Instances of
            #$Department are distinguished by the fact that they are
            formal groups within a larger organizational structure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationWithBusinessClients">
        <rdfs:label xml:lang="en">organization with business clients</rdfs:label>
        <rdfs:comment>#$OrganizationWithBusinessClients is the
            specialization of #$Organization.  Each instance of
            #$OrganizationWithBusinessClients is an #$Organization whose
            #$clients are primarily businesses or other #$Organizations,
            rather than individuals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithClients"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationWithBusinessCustomers">
        <rdfs:label xml:lang="en">organization with business customers</rdfs:label>
        <rdfs:comment>#$OrganizationWithBusinessCustomers is a
            specialization of #$OrganizationWithBusinessClients.  An
            instance of #$OrganizationWithBusinessCustomers sells goods
            and/or services to #$customers, most of whom are businesses
            or other #$Organizations, rather than individual #$Persons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithBusinessClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationWithClients">
        <rdfs:label xml:lang="en">organization with clients</rdfs:label>
        <rdfs:comment>The collection of #$Organization which regularly
            provide goods or services to non-members, as opposed to
            organizations that do not provide goods or services to
            non-members [see #$clients,  #$OrganizationWithoutClients].
            Important specializations are
            #$OrganizationWithIndividualClients and #$OrganizationWithBusinessClients.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationWithIndividualClients">
        <rdfs:label xml:lang="en">organization with individual clients</rdfs:label>
        <rdfs:comment>#$OrganizationWithIndividualClients is a
            specialization of #$Organization.  Each instance of
            #$OrganizationWithIndividualClients is an organization whose
            #$clients are primarily individuals, rather than businesses
            or other #$Organizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithClients"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationWithIndividualCustomers">
        <rdfs:label xml:lang="en">organization with individual customers</rdfs:label>
        <rdfs:comment>A specialization of
            #$OrganizationWithIndividualClients.  Each instance of
            #$OrganizationWithIndividualCustomers sells goods and/or
            services to customers, most of whom are individual
            #$Persons, rather than businesses or other #$Organizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationalChart">
        <rdfs:label xml:lang="en">organizational chart</rdfs:label>
        <rdfs:comment>A collection of #$InformationStores and a
            subcollection of #$StructuredInformationSource.  Each
            instance of #$OrganizationalChart graphically or in outline
            fashion depicts information about the control structure or
            resource use structure of an organization.  E.g., a diagram
            of Exxon Corporation&apos;s top managers showing their
            reporting structure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndexedInformationSource"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationalTransfer">
        <rdfs:label xml:lang="en">organizational transfers</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulPhysicalAction.
            Each instance of #$OrganizationalTransfer is an event in
            which an agent (an instance of #$IntelligentAgent) changes
            membership with respect to an organization (an instance of
            #$Organization).  So instances of #$OrganizationalTransfer
            include a particular person&apos;s becoming a  member of
            some organization, ceasing to be a member of some
            organization, or switching from one organization to another.
            Instances of #$OrganizationalTransfer may be voluntarily
            undertaken by the transferee, but they may also be done by
            some other agent (perhaps against the transferee&apos;s
            will).  Notable specializations of #$OrganizationalTransfer
            include #$EmployeeHiring, #$EmploymentTermination, and #$GraduatingEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GroupTransfer"/>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#ChangeOfStatusEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationalTransferIn">
        <rdfs:label xml:lang="en">joining (type of thing)</rdfs:label>
        <rdfs:comment>A subcollection of #$OrganizationalTransfer.  In
            each instance of #$OrganizationalTransferIn, an agent (an
            instance of #$IntelligentAgent) gains membership in some
            organization.  Note that the agent may also, but need not,
            lose membership in some other organization.  Instances of
            #$OrganizationalTransferIn would include hiring someone at a
            company or admitting a nation to NATO.  Note that any event
            in which an agent leaves one organization to join another
            would be an instance of both #$OrganizationalTransferIn and
            #$OrganizationalTransferOut (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransfer"/>
        <rdfs:subClassOf rdf:resource="#GroupTransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OrganizationalTransferOut">
        <rdfs:label xml:lang="en">#$OrganizationalTransferOut</rdfs:label>
        <rdfs:comment>A specialization of #$OrganizationalTransfer.
            Each instance of #$OrganizationalTransferOut is an event in
            which some agent (an instance of #$IntelligentAgent) loses
            membership in some organization.  Instances of
            #$OrganizationalTransferOut would thus include lay-offs,
            expulsions, and excommunications.  Note that any event in
            which an agent leaves one organization to join another would
            be an instance of both #$OrganizationalTransferIn (q.v.) and #$OrganizationalTransferOut.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransfer"/>
        <rdfs:subClassOf rdf:resource="#GroupTransferOut"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OutdoorLocation">
        <rdfs:label xml:lang="en">outdoor locations</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion.  Each
            instance of #$OutdoorLocation is a region of outdoor space;
            i.e. a region that is directly subject to atmospheric
            weather.  Thus, the collection #$OutdoorLocation does _not_
            include as instances any instances of #$UnderwaterLocation
            (q.v.) or any places that are underground (see
            #$Underground).  Specializations of #$OutdoorLocation
            include #$MountainRange, #$Stream, and #$Highway.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OutdoorLocationByWeatherType">
        <rdfs:label xml:lang="en">outdoor location by weather type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$OutdoorLocationByWeatherType is a collection of
            #$OutdoorLocations with similar weather. Notable instances
            are #$Snowy, #$Sunny, and #$Cloudy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="OutdoorRecreationArea">
        <rdfs:label xml:lang="en">outdoor recreation areas</rdfs:label>
        <rdfs:comment>A specialization of #$OutdoorLocation and
            #$Artifact.  Each instance of #$OutdoorRecreationArea is an
            area designed to provide a venue for outdoor entertainment.
            Specializations include #$AmusementPark,
            #$SwimmingPool-Outdoor, #$SkiSlope, #$GolfCourse and
            #$DrivingRange.  A natural beach that has not been crafted
            by human hands to serve as a venue for entertainment is not
            an instance of #$OutdoorRecreationArea, but a beach with
            lifeguards or snack bars or a scenic trail is an instance of #$OutdoorRecreationArea.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
    </owl:Class>
    <owl:Class rdf:ID="OuterGarment">
        <rdfs:label xml:lang="en">outer garments</rdfs:label>
        <rdfs:comment>A specialization of #$ClothingItem.  Each instance
            of #$OuterGarment is a piece of clothing that is worn
            outside of other garments.  A common purpose of outer
            garments is to protect their wearers and/or their
            wearers&apos; inner garments from outside elements (for
            example, instances of the specialization #$RainCoat protect
            their wearers and their wearers&apos; inner garments from
            getting wet during a rain storm).  An instance of
            #$OuterGarment may also be a robe of office or position,
            such as an academic gown or a bishop&apos;s mantle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Garment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Oval">
        <rdfs:label xml:lang="en">#$Oval</rdfs:label>
        <rdfs:comment>A subset of #$GeometricallyDescribableThing. Each
            element of #$Oval is (roughly) an ellipse. Examples include
            spatially localized objects, such as the Indianapolis Motor
            Speedway, as well as abstract ellipses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OviparousAnimal">
        <rdfs:label xml:lang="en">#$OviparousAnimal</rdfs:label>
        <rdfs:comment>#$OviparousAnimal is a specialization of
            #$NonPersonAnimal.  Each instance of #$OviparousAnimal is an
            animal that hatches from eggs expelled from its
            mother&apos;s body.  Cf. #$ViviparousAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ovum">
        <rdfs:label xml:lang="en">#$Ovum</rdfs:label>
        <rdfs:comment>A specialization of #$Gamete.  Each instance of
            #$Ovum is a specialized gamete cell produced by meiosis (see
            #$Meiosis) in the reproductive tract of a female animal.
            Each ovum usually has half the number of chromosomes that a
            regular body cell does, and when fertilized by a sperm cell
            (see #$SpermCell), it becomes a zygote and continues to
            develop into a mature individual animal.  See also
            #$FemaleAnimal, #$SexualReproductionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Gamete"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="OxidationProcess">
        <rdfs:label xml:lang="en">#$OxidationProcess</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, some amount of #$Oxygen reacts with
            (`reduces&apos;) another substance and releases energy in
            the process.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChemicalReaction"/>
        <rdfs:subClassOf rdf:resource="#HeatProductionProcess"/>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Oxide">
        <rdfs:label xml:lang="en">oxide</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffCompositionType and
            a specialization of #$InanimateThing.  Each instance of
            #$Oxide is a portion of stuff in which each molecule
            consists of a combination of oxygen atoms with one or more
            atoms of another element.  Specializations of #$Oxide
            include #$IronOxide (i.e. rust), #$CarbonDioxide, and
            (#$PureFn #$Water) (i.e. the collection of portions of
            chemically pure water).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PPCompFrame">
        <rdfs:label xml:lang="en">p p comp frame</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all frames for words that take a prepositional
            phrases complement.  The two major specs of #$PPCompFrame
            are #$TransitivePPCompFrame and #$DitransitivePPCompFrame.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PackagedProduct">
        <rdfs:label xml:lang="en">#$PackagedProduct</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PartiallyTangibleProduct and #$PackagedObject.  Each
            instance of #$PackagedProduct is a complete packaged
            product, including everything the customer gets when the
            product is purchased, i.e. the main product itself (see
            #$mainProduct), along with any packaging materials, manuals,
            instructions, warranty cards, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Panic">
        <rdfs:label xml:lang="en">panic</rdfs:label>
        <rdfs:comment>Overmastering and unreasoning, often groundless,
            fear or fright</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Distress"/>
        <rdfs:subClassOf rdf:resource="#Nervousness"/>
    </owl:Class>
    <owl:Class rdf:ID="Pants">
        <rdfs:label xml:lang="en">#$Pants</rdfs:label>
        <rdfs:comment>#$Pants is a specialization of #$Clothing-Bottom.
            Each instance of #$Pants is a clothing item worn on the
            lower torso and legs.  Notable specializations of #$Pants
            include #$ShortPants and #$LongPants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Bottom"/>
        <rdfs:subClassOf rdf:resource="#EnvelopingCovering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Paper">
        <rdfs:label xml:lang="en">paper</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleProduct.  Each
            instance of #$Paper is a portion of paper, considered as a
            &apos;stuff&apos; out of which things can be made.
            Specializations of #$Paper include #$Cardboard,
            #$SheetOfPaper, and #$Bill-Currency.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Paper-IBO">
        <rdfs:label xml:lang="en">paper - i b o</rdfs:label>
        <rdfs:comment>A specialization of #$InformationBearingObject.
            Each instance of this collection is an artifact in the form
            of one or more sheets of #$Paper, containing markings (see
            #$VisualMark) that may be interpreted as encoding
            information.  #$Paper-IBOs are often textual (i.e instances
            of #$TextualMaterial) but not always (c.f. #$MapCopy, for
            instance).  When they consist of more than one sheet of
            paper, these are often bound together, as in a #$BookCopy or #$MagazineCopy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Parallelogram">
        <rdfs:label xml:lang="en">parallelogram</rdfs:label>
        <rdfs:comment>The collection of all four-sided    #$Polygons,
            any side of which is parallel    to another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Quadrilateral"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ParaphraseMicrotheory">
        <rdfs:label xml:lang="en">Cyc paraphrase microtheories</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all microtheories containing assertions that
            specify a way to paraphrase an individual CycL expression or
            type of CycL expression. The body of assertions visible from
            a given #$ParaphraseMicrotheory constitutes a theory for
            paraphrasing CycL within certain parameters, such as a
            single natural language or a specific application.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#TheoryMicrotheory"/>
    </owl:Class>
    <owl:Class rdf:ID="PartOfAnHSC">
        <rdfs:label xml:lang="en">parts of a building (types of things)</rdfs:label>
        <rdfs:comment>#$PartOfAnHSC is a specialization of
            #$ConstructionArtifact and #$PhysicalPartOfObject.  Each
            instance of #$PartOfAnHSC is a  built-in  part of some
            #$HumanShelterConstruction; that is, each instance is built
            with the intention of remaining a part of the construction.
            Notable specializations of #$PartOfAnHSC include
            #$FloorInAConstruction, #$PartOfBuilding, and #$WallOfAConstruction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartOfBuilding">
        <rdfs:label xml:lang="en">parts of a building (types of things)</rdfs:label>
        <rdfs:comment>#$PartOfBuilding is a specialization of
            #$PartOfAnHSC.  Each instance of #$PartOfBuilding is a part
            of a building that is &apos;built-in&apos;, that is, built
            with the intention of remaining as part of the building.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartOfAnHSC"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartOfRoomInAConstruction">
        <rdfs:label xml:lang="en">parts of a room</rdfs:label>
        <rdfs:comment>A specialization of #$PartOfBuilding.  Each
            instance of #$PartOfRoomInAConstruction is a part of some
            room in a construction artifact (see the collection
            #$RoomInAConstruction).  The collection
            #$PartOfRoomInAConstruction includes as instances both solid
            parts, such as instances of #$Mantel, as well as enclosed
            regions, such as those contained by cabinets and cupboards.
            Note that instances of #$PartOfRoomInAConstruction are
            required to be features which are &apos;built-in&apos;; that
            is, built with the intention of remaining as part of the room.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartPredicate">
        <rdfs:label xml:lang="en">part predicates</rdfs:label>
        <rdfs:comment>A collection of #$ObjectPredicates that are used
            to relate a given individual to its (tangible or intangible)
            parts or components of a certain sort.  Each instance of
            #$PartPredicate has an arity (see #$arity) of 2, and both
            argument places are constrained (see #$argIsa) to instances
            of #$Individual or some subcollection thereof.  Each
            instance PRED of  #$PartPredicate is a specialization of the
            predicate #$parts (q.v.); i.e.  either (#$genlPreds PRED
            #$parts) or (#$genlInverse PRED #$parts) holds. Notable
            examples include #$physicalDecompositions, #$subEvents, and #$subOrganizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PartTimeWorker">
        <rdfs:label xml:lang="en">part time worker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and
            specialization of #$Employee. Each #$PartTimeWorker is
            employeed part time by some agent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartialDenotationalFunction">
        <rdfs:label xml:lang="en">partial denotational functions</rdfs:label>
        <rdfs:comment>A specialization of   #$Function-Denotational
            whose instances are partial functions:  functions that do
            not have well-defined values for everything  to which they
            can legally be applied.  More precisely,   an (N-ary)
            function F is partial if it is #$undefined   -- i.e. returns
            no value -- for one or more (length N sequences of)  things
            that meet its (respective) argument-constraints.  An
            example of a #$PartialDenotationalFunction is #$TangentFn
            because although  (#$Degree-UnitOfAngularMeasure 90) and
            (#$Degree-UnitOfAngularMeasure 270)  both meet its
            argument-constraints, #$TangentFn is undefined for both.
            Another example of a #$PartialDenotationalFunction is
            #$BorderBetweenFn.    As the #$arg1Isa and #$arg2Isa for
            this binary function are both   #$GeographicalRegion (and
            there are no further-restricting arg[N]Genl   constraints on
            the function), #$BorderBetweenFn can be applied to any
            pair of geographical regions whatsoever.  But of course not
            all pairs of   regions are such that they share a border.
            Thus it is correct to assert, for   example, (#$undefined
            (#$BorderBetweenFn #$Albania #$UnitedStatesOfAmerica)).
            Instances of #$Function-Denotational that are not partial
            are  #$TotalDenotationalFunctions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="PartialOrderAttributeType">
        <rdfs:label xml:lang="en">#$PartialOrderAttributeType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PartialOrderAttributeType is a specialization of
            #$AttributeValue whose instances are subject to a partial
            ordering by some binary relation which is reflexive,
            antisymmetric, and transitive.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="PartialOrdering">
        <rdfs:label xml:lang="en">partial ordering</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is a reflexive, transitive and antisymmetric relation on
            the #$baseSet S of ORDER.  R is reflexive on S if and only
            if for each X in S, R(X X).  R is transitive on S if and
            only if for each X, Y and Z in S, R(X Y) and R(Y Z) imply
            R(X Z).  R is antisymmetric on S if and only if for each X
            and Y in S, R(X Y) and R(Y X) imply X = Y.  For example, if
            you take a set of #$Lists and take the #$subLists relation
            restricted to this set, then you have a #$PartialOrdering
            because the #$subLists relation is reflexive, transitive and
            antisymmetric.  Since the ordering relation in each
            #$PartialOrdering is reflexive and transitive, the
            collection #$PartialOrdering is a subcollection of
            #$QuasiOrdering. Subcollections of #$PartialOrdering include
            #$TreeOrdering, #$TotalOrdering and
            #$Lattice-LatticeTheoretic.  If you want a
            #$MathematicalOrdering in which the ordering relation is
            irreflexive, see #$PartialOrdering-Strict.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QuasiOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartialOrdering-Strict">
        <rdfs:label xml:lang="en">strict partial order</rdfs:label>
        <rdfs:comment>The collection of all #$MathematicalOrderings
            ORDER in which the ordering relation R is an irreflexive and
            transitive relation on the #$baseSet S of ORDER, i.e., for
            each X in S, R(X X) does not hold, and for each X, Y and Z
            in S, R(X Y) and R(Y Z) imply R(X Z).  For example, if one
            takes the set of all people, and the relation &apos;__ is
            older than ...&apos; on this set, one gets a
            #$PartialOrdering-Strict, since the relation &apos;__ is
            older than ...&apos; is irreflexive and transitive on this
            set.  Note that the important difference between a
            #$PartialOrdering (q.v.) and a #$PartialOrdering-Strict is
            that the ordering relation of the former is reflexive, while
            that of the latter is irreflexive.  Note also that the
            ordering relation R of a #$PartialOrdering-Strict ORDER is
            in fact antisymmetric (i.e., for each X and Y in S, R(X Y)
            and R(Y X) imply X = Y) and asymmetric (i.e., for each X and
            Y in S, R(X Y) and R(Y X) can never be both true) on the
            #$baseSet S. This is because both antisymmetry and asymmetry
            follow from transitivity and irreflexivity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartiallyCloudCovered">
        <rdfs:label xml:lang="en">partially cloud covered</rdfs:label>
        <rdfs:comment>An instance of #$DegreeOfCloudiness and a
            specialization of #$OutdoorLocation. Each instance is an
            #$OutdoorLocation having some cloud cover but not enough to
            completely block out all direct sunlight.  Direct sunlight
            comes and goes as clouds occluding the sun pass.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cloudy"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartiallyCommutativeRelation">
        <rdfs:label xml:lang="en">partially commutative relations</rdfs:label>
        <rdfs:comment>A collection of #$Relations  and an instance of
            #$RelationTypeByLogicalFeature (q.v.).  Each instance  of
            #$PartiallyCommutativeRelation PARTCOM is a predicate or
            function  that is commutative in some, but not all, of its
            argument-places (see  #$commutativeInArgs).  More precisely,
            suppose for example that PARTCOM  is a predicate (function)
            that is commutative only in its odd-numbered
            argument-places, and that PARTCOM holds among (has the value
            VAL for) a  given sequence of arguments SEQ.  It follows
            that PARTCOM also holds among  (has the same value VAL for)
            any other sequence SEQ-PRIME obtainable from  SEQ by
            permuting some or all of the odd-numbered members of SEQ
            while  keeping all of its even-numbered members fixed.  Note
            that PARTCOM must  have an arity (see #$arity) of at least
            three and _cannot_ be an instance  of #$CommutativeRelation
            (as any instance of the latter is commutative  in _all_ of
            its argument-places).  Instances of
            #$PartiallyCommutativeRelation include #$pathsJoinAt,
            #$formsBorderBetween, and #$BlockOfStreetBetweenFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="PartiallyIntangible">
        <rdfs:label xml:lang="en">partially intangible things</rdfs:label>
        <rdfs:comment>The collection of things that either are wholly
            intangible (see #$Intangible) or have at least one
            intangible (i.e. immaterial) part (see #$intangibleParts).
            This includes intangible individuals, such as instances of
            #$Number-General or #$Agreement, as well as non-individuals
            (all of which are intangible), i.e. instances of
            #$SetOrCollection.  It also includes things that have both
            tangible and intangible components (see
            #$CompositeTangibleAndIntangibleObject), such as a printed
            copy of a newspaper (as its information content is
            intangible) or a person (as her mental states are intangible).</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="PartiallyIntangibleIndividual">
        <rdfs:label xml:lang="en">partially intangible individuals</rdfs:label>
        <rdfs:comment>A specialization of both #$Individual and
            #$PartiallyIntangible.  Each instance of
            #$PartiallyIntangibleIndividual is an individual that has at
            least some intangible (i.e. immaterial) component.  The
            instance might be partly tangible (e.g. a copy of a book)
            and thus be a #$CompositeTangibleAndIntangibleObject, or it
            might be fully intangible (e.g. a number or an agreement)
            and thus be an instance of #$IntangibleIndividual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PartiallyTangible">
        <rdfs:label xml:lang="en">tangible things</rdfs:label>
        <rdfs:comment>A subcollection of #$SpatialThing-Localized and
            #$TemporalThing.  Each instance of #$PartiallyTangible has a
            tangible (i.e. material) part and a temporal extent (i.e. it
            exists in time).  It might or might not also have an
            intangible part.  For example, a particular copy of a book
            is made of matter, has temporal extent, and also has an
            intangible part: the information content of the text
            markings on its pages.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
    </owl:Class>
    <owl:Class rdf:ID="PartiallyTangibleProduct">
        <rdfs:label xml:lang="en">goods</rdfs:label>
        <rdfs:comment>A specialization of both #$PartiallyTangible and
            #$Product.  Each instance of #$PartiallyTangibleProduct is a
            product that has some tangible component and may, but need
            not, also have an intangible component.  Instances of
            #$PartiallyTangibleProduct include copies of a newspaper,
            photographs, videotapes of `Star Wars&apos;, sacks of flour,
            lumber, and mobile homes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Particle">
        <rdfs:label xml:lang="en">#$Particle</rdfs:label>
        <rdfs:comment>A specialization of both #$PartiallyTangible and
            #$InanimateThing.  Each instance of #$Particle is a smallish
            liquid or solid tangible thing, usually small enough to be
            blown about by ordinary gusts of wind, and possibly much
            smaller.  Specializations of #$Particle include the
            collections #$CornMeal, #$SandParticle, #$Sawdust,
            #$DustParticle, and #$Sugar-Table.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Partnership">
        <rdfs:label xml:lang="en">#$Partnership</rdfs:label>
        <rdfs:comment>#$Partnership is a specialization of
            #$Organization.  Each instance of #$Partnership is an
            organization that has been formally organized as a
            partnership pursuant to partnership agreements.  In the
            #$UnitedStatesOfAmerica, most instances of #$Partnership are
            organized pursuant to specific statutes.  #$GeneralPartners
            of a #$Partnership are jointly and severally liable for the
            debts and other liabilities of the #$Partnership.  The
            liability of #$LimitedPartners is limited in accordance with
            the governing partnership agreement.  The
            #$PartnershipPartners of an instance of #$Partnership may be
            individuals or entities.  For example, an instance of
            #$LimitedPartnership may have an instance of
            #$LegalCorporation as its #$GeneralPartner and individuals
            as its #$LimitedPartners.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Party-Celebration">
        <rdfs:label xml:lang="en">#$Party-Celebration</rdfs:label>
        <rdfs:comment>The collection of party events and other similar
            celebrations such as baby showers.  #$Persons gather
            intentionally at a location in order to communicate or share
            some experience, and to enjoy themselves, but (unlike a
            #$MeetingTakingPlace) business is rarely transacted at a
            #$Party-Celebration, or at least is beside the official
            point of the party. Note: as with most collection worth
            naming, there are borderline cases here; e.g., Tupperware parties.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PassingThroughPortal">
        <rdfs:label xml:lang="en">passing through portal</rdfs:label>
        <rdfs:comment>A collection of movement events.  In an instance
            of #$PassingThroughPortal, an object goes from one spatial
            region to another by passing through a #$Portal between the
            regions.  Examples: a portion of food passing from the
            stomach to the small intestine; a person walking through a
            door from the outdoors into a house.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Passion">
        <rdfs:label xml:lang="en">passion</rdfs:label>
        <rdfs:comment>Intense longing for somebody or something regarded
            as essential to one&apos;s well-being or happiness</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affection"/>
    </owl:Class>
    <owl:Class rdf:ID="PassivizableFrame">
        <rdfs:label xml:lang="en">passivizable frame</rdfs:label>
        <rdfs:comment>The collection of all frames which can be used in
            the passive voice, i.e. where an object of the active voice
            use of this frame &apos;becomes&apos; the syntactic (though
            not semantic) subject in the passive voice, and the subject
            of the active voice use of the frame can optionally become a
            &apos;by&apos;-PP syntactic (though not semantic) object.
            Examples are #$TransitiveNPCompFrame,
            #$DitransitiveNPCompFrame and the
            #$DitransitivePPCompFrames:. &apos;John likes Mary&apos;
            -&gt; &apos;Mary is liked (by John)&apos;, &apos;John gives
            Mary a book&apos; -&gt; &apos;Mary is given a book (by
            John)&apos;, &apos;John gives a book to Mary&apos; -&gt;
            &apos;A book is given to Mary (by John)&apos;</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcategorizationFrame"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Passport">
        <rdfs:label xml:lang="en">passports</rdfs:label>
        <rdfs:comment>A specialization of #$LegalDocument and
            #$IDDocument.  Each instance of #$Passport is a document
            issued to a person by the government of a country of which
            s/he is a citizen, in order to identify that person as a
            citizen of that country while s/he is travelling outside of
            its borders. It can also be used for ID purposes back home.
            #$Passports typically expire after a set period of time and
            require renewal. Countries generally allow only one valid
            passport per citizen.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#LegalDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pasteurization">
        <rdfs:label xml:lang="en">pasteurizations</rdfs:label>
        <rdfs:comment>The heating of a milk product in order to kill off
            microorganisms that might make it spoil.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Path-Customary">
        <rdfs:label xml:lang="en">#$Path-Customary</rdfs:label>
        <rdfs:comment>A specialization of #$Path-Spatial.  Each instance
            of #$Path-Customary is a spatial path which was either
            designed as a path by some intelligent agent, or which has a
            significant known function as a path for movement.  Examples
            include roads, railroads, sea-lanes, cowpaths, boardwalks,
            tubes, channels, blood vessels, fibers, wires, and
            communication links. An instance of #$Path-Customary may be
            either an instance of #$Path-Simple (in which case it would
            be a path with two distinct ends, not forming a cycle) or an
            instance of #$Path-Cyclic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Spatial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Path-Cyclic">
        <rdfs:label xml:lang="en">#$Path-Cyclic</rdfs:label>
        <rdfs:comment>The collection of all cyclic paths, i.e. paths
            that form cycles, circles, loops or circuits.  An instance
            of #$Path-Cyclic is a #$Path-Generic that can be described
            as a cycle, i.e., a thing like a #$Path-Simple except that
            the ends of the path join at one point.   A #$Path-Cyclic
            cannot cross itself (as in a figure-eight) nor double back
            along itself.  More formally, let PATH1 and PATH2 be two
            #$Path-Simples.  Suppose that each end-point of PATH1 is an
            end point of PATH2 and vice versa, and for each X, X is a
            point on both PATH1 and PATH2 only if X is an end point of
            both paths.  Then PATH1 and PATH2 together form a
            #$Path-Cyclic.  We allow &apos;loops&apos;; a loop is a
            cycle with only one point on it, looping from the point
            right back to itself.   Each loop of a path system is a
            special instance of #$Path-Cyclic.  For differences between
            a cycle and a loop in the same #$PathSystem, see
            #$loopInSystem and #$cycleInSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>

    </owl:Class>
    <owl:Class rdf:ID="Path-Generic">
        <rdfs:label xml:lang="en">generic paths</rdfs:label>
        <rdfs:comment>A collection of things that are paths or can be
            considered paths.  Each #$Path-Generic is either a a
            non-self-crossing path (see #$Path-Simple) or a cycle (see
            #$Path-Cyclic).  A #$Path-Generic may be spatio-temporally
            abstract (e.g. links in Graph Theory; see #$Multigraph),
            spatially-located but intangible (e.g. a #$LatitudeLine
            might be used as a path in some system; see #$Path-Spatial
            and its specializations), or fully concrete (such as a road,
            railroad, sea-lane, cowpath, pipe, blood vessel, fiber, or
            wire; see #$Path-Customary and #$PathArtifact).
            #$Path-Generic includes anything that is used as a path in
            some #$PathSystem (q.v.).  If a #$Path-Generic is a
            #$Path-Customary, then it might or might not have a
            specified #$PathSystem in which it is a path; if the
            #$Path-Generic is not a #$Path-Customary, then it can only
            be a path in some given #$PathSystem.  For example, an
            orange is not a customary path, but it can be a path for
            ants in a specified ant path system.  For any
            #$Path-Generic, there can be a #$Traversal (q.v.) of
            something moving along the entirety of that path (and a
            single #$Traversal can cross itself, double back along
            itself, or go back and forth along some part of a
            #$Path-Generic any number of times.)  Note that
            #$Path-Generic is _not_ a subcollection of #$Individual,
            because there is nothing in principle to prevent a
            mathematical set or a collection from being  used as a path
            in some path system. For similar reasons, few if any
            (non-empty) collections or sets can definitively be
            considered disjoint with  #$Path-Generic.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="Path-Simple">
        <rdfs:label xml:lang="en">#$Path-Simple</rdfs:label>
        <rdfs:comment>An instance of #$Collection, and a specialization
            of #$Path-Generic. Each instance of #$Path-Simple is a path
            with two distinct ends that do not  overlap  each other (in
            the case of spatial paths, the two ends are spatially
            disjoint). Since no instance of #$Path-Simple has ends that
            join at one point, #$Path-Simple is disjoint with
            #$Path-Cyclic.  Although instances of #$Path-Simple have
            distinct ends, some instances may have more than two things
            that are its  end-points .  For example, a path between
            Austin and Pittsburgh can also be a path between Texas and
            Pennsylvania.  Notable specializations of #$Path-Simple
            include #$Pipe-GenericConduit, #$Nerve, and #$Stream.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
    </owl:Class>
    <owl:Class rdf:ID="Path-Spatial">
        <rdfs:label xml:lang="en">#$Path-Spatial</rdfs:label>
        <rdfs:comment>A specialization of both #$Path-Generic and
            #$SpatialThing-Localized.  Each instance of #$Path-Spatial
            is a path that has spatial extent, and that joins spatially
            located things.  So instances of #$Path-Spatial include
            roads, corridors, wires, blood vessels, and nerves; however,
            purely abstract paths, such as those in kinship diagrams and
            mathematics, are _not_ instances of #$Path-Spatial.
            Instances of #$Path-Spatial may be pre-existing paths in a
            #$CustomarySystemOfLinks (q.v.) or they may be paths in some
            specially specified #$PathSystem (q.v.) consisting of
            spatial paths.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PathArtifact">
        <rdfs:label xml:lang="en">#$PathArtifact</rdfs:label>
        <rdfs:comment>A specialization of both #$ConstructionArtifact
            and #$Path-Customary.  Each instance of #$PathArtifact is a
            spatial path made by humans or animals.  Instances of
            #$PathArtifact include #$ErieCanal, #$WellandShipCanal,
            #$ChampsElysee, #$WallStreet, and #$Highway101CA.  Note that
            each of these artifacts is a single, particular path; to
            refer to a whole system of #$PathArtifacts, use #$PathArtifactSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PathArtifactSystem">
        <rdfs:label xml:lang="en">#$PathArtifactSystem</rdfs:label>
        <rdfs:comment>#$PathArtifactSystem is a specialization of
            #$Artifact-NonAgentive, #$InanimateThing, and
            #$CustomarySystemOfLinks.  Each instance of
            #$PathArtifactSystem is an artificial system consisting of
            several instances of #$PathArtifact (q.v.). Important
            specializations of #$PathArtifactSystem include
            #$ComputerNetwork, #$RoadSystem, and #$SewerSystem</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#CustomarySystemOfLinks"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PathChain">
        <rdfs:label xml:lang="en">path chains</rdfs:label>
        <rdfs:comment>A specialization of #$List.  Each path chain is a
            #$List LIST = (X(1) Y(1) X(2) Y(2) ... X(n) Y(n) X(n+1))
            satisfying the following conditions: (i) each X(k) is a
            #$Thing (q.v.) and each Y(k) is a #$Path-Generic (q.v.),
            i.e., the length of LIST is an odd number greater than 2,
            every even-numbered position in LIST is a #$Path-Generic,
            and every odd-numbered item is a #$Thing.  (ii) Each
            #$Path-Generic in LIST joins the points just before and
            after it in LIST.  That is to say, (iia) if the kth item
            PATH in LIST is a #$Path-Simple (q.v.), and if A is the
            (k-1)th item and B is the (k+1)th item in LIST, then
            (#$pathBetween PATH A B) holds, and (iib) if the kth item
            CYCLE is a #$Path-Cyclic (q.v.), and if A is the (k-1)th
            item and B is the (k+1)th item in LIST, then (#$pointOnCycle
            A CYCLE) holds and A = B.  Note that the concatenation of
            all the paths (simple or cyclic) in such a list results in a
            #$Traversal (q.v.).  For example, letting PATH1 and PATH2 be
            instances of #$Path-Simple and CYCLE a #$Path-Cyclic, if
            (#$pathBetween PATH1 A B), (#$pathBetween PATH2 B C) and
            (#$pointOnCycle C CYCLE), then (#$TheList A PATH1 B PATH2 C
            CYCLE C) is a #$PathChain.  Note that although each instance
            of #$PathChain determines a unique instance of #$Traversal
            that is from X(1) to X(n+1), many different #$PathChains may
            determine the same #$Traversal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="PathForWheeledVehicles">
        <rdfs:label xml:lang="en">#$PathForWheeledVehicles</rdfs:label>
        <rdfs:comment>A specialization of #$PathArtifact.  Each instance
            of #$PathForWheeledVehicles is an artifact whose primary
            function is to serve as a path along which wheeled vehicles
            may move or park. Often such paths are paved, but they need
            not be.  Specializations of #$PathForWheeledVehicles include
            #$AirplaneRunway, #$ParkingLot, and #$Roadway.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidSurfacePathThroughAir"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#PathArtifact"/>
        <rdfs:subClassOf rdf:resource="#SurfaceOnTangibleObject"/>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PathSystem">
        <rdfs:label xml:lang="en">path systems</rdfs:label>
        <rdfs:comment>The collection of all specified systems of paths
            and links, including both tangible path systems (such as the
            system of streets in a city) and abstract path systems (such
            as a multigraph).  Each instance of #$PathSystem consists of
            a nonempty set of points (where each point is an instance of
            #$Thing, and is related to the instance of #$PathSystem via
            the predicate #$pointInSystem), a set of nodes (a subset of
            the set of points -- each node is related to the instance of
            #$PathSystem via the predicate #$nodeInSystem) a set of
            links (where each link is an instance of #$Path-Simple, and
            is related to the instance of #$PathSystem via the predicate
            #$linkInSystem), and optionally a set of loops (where each
            loop is an instance of #$Path-Cyclic, and is related to the
            instance of #$PathSystem via the predicate #$loopInSystem).
            In order to specify which link is between which two nodes in
            the system, which point is on which link in the system,
            which node is on which loop in the system, and so on, see
            the following predicates: #$pathBetween, #$pointOnPath,
            #$pointOnCycle, #$betweenOnPath, #$linkBetweenInSystem,
            #$junctionInSystem, #$deadEndInSystem,
            #$isolatedNodeInSystem, and #$connectedInSystem.  Notable
            specializations of #$PathSystem include
            #$Semi-DirectedPathSystem, #$Multigraph, and
            #$SimplePathSystem.  In order to specify the subsystem
            relation between path systems, see the predicate #$subPathSystems.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="PathSystemCycLConstant">
        <rdfs:label xml:lang="en">path system cyc l constant</rdfs:label>
        <rdfs:comment>The collection of CycL constants specifically
            created to state things about #$PathSystems (q.v.) and their components.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="PathSystemType-Structural">
        <rdfs:label xml:lang="en">#$PathSystemType-Structural</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PathSystemType-Structural is a collection of path systems
            that share a certain kind of structrue.  Examples include
            #$PointFinitePathSystem, #$NodeFinitePathSystem,
            #$LinkFinitePathSystem, #$FinitaryJunctionPathSystem,
            #$SimplePathSystem, #$Multigraph, #$FiniteMultigraph,
            #$SimpleGraph-GraphTheoretic, #$ConnectedPathSystem,
            #$Semi-DirectedPathSystem, #$DirectedPathSystem,
            #$BidirectedPathSystem, #$DirectedAcyclicPathSystem,
            #$BoundedDirectedPathSystem, #$DirectedMultigraph,
            #$DirectedGraph, #$DirectedAcyclicGraph,
            #$BoundedDirectedAcyclicGraph, and #$NetworkFlowSystem-Bounded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="PathType">
        <rdfs:label xml:lang="en">#$PathType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PathType is a collection that is a subcollection of
            #$Path-Generic.  There are several types of path, according
            to the medium or surface the path goes through or over.  In
            addition, the collection #$PathArtifact can be broken down
            into more specific #$PathTypes.  At a #$JunctionOfPaths, the
            joined paths all have at least one #$PathType in common.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Patience">
        <rdfs:label xml:lang="en">patience</rdfs:label>
        <rdfs:comment>Feeling of a person that endures trials, pains,
            provocation or waiting  calmly or without complaint</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Calmness-Feeling"/>
    </owl:Class>
    <owl:Class rdf:ID="Patriotism">
        <rdfs:label xml:lang="en">patriotism</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrideOfMembership"/>
    </owl:Class>
    <owl:Class rdf:ID="Paying">
        <rdfs:label xml:lang="en">#$Paying</rdfs:label>
        <rdfs:comment>A specialization of #$MoneyTransaction.  Each
            instance of #$Paying is an event in which one agent (the
            payer, who is related to the event via the predicate
            #$payer) pays money to another agent (the payee, who is
            related to the event via the predicate #$toPossessor).  In
            each instance of #$Paying, the payer gives the payee full
            use rights (see the constant #$FullUseRights) to the money
            transferred to the payee. Instances of #$Paying include the
            following: (1) all instances of #$Buying and #$Renting
            (qq.v.) contain (at least one) sub-event which is an
            instance of #$Paying; (2) making charitable contributions;
            (3) paying off one&apos;s gambling debts; (4) paying an
            employee&apos;s salary or a child&apos;s allowance.  Writing
            a check or offering a credit card in payment are sub-events
            of paying events; such payings are successful only if the
            check is not lost or stolen, if it clears the bank, and so
            on.  On the other hand, filling out a pledge card (e.g., for
            United Way) is _not_ considered an instance of #$Paying, or
            even a sub-event of an instance of #$Paying, because it does
            not involve or initiate any legal reassignment of rights to
            the money.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferringOwnership"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#MoneyTransaction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PayingCasualUseFee">
        <rdfs:label xml:lang="en">paying casual use fee</rdfs:label>
        <rdfs:comment>#$PayingCasualUseFee is the collection of events
            in which one agent pays a fee to another in exchange for the
            right to use something that the latter controls Examples:
            paying a parking fee, paying a bridge or highway toll,
            paying an admissions fee to an art museum.
            #$PayingCasualUseFee covers usage that is temporary and
            possibly not exclusive.  For longer-term use arrangements,
            see #$Renting.  Note: events in #$PayingCasualUseFee are
            both payings and collectings (cf. #$Buying).  The agent
            doing the paying is the #$buyer, and the agent doing the
            collecting is the #$seller.  The object accessed is the #$objectPaidFor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PejorativePrefix">
        <rdfs:label xml:lang="en">pejorative prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PenetratingAComputerNetwork">
        <rdfs:label xml:lang="en">penetrating a computer network</rdfs:label>
        <rdfs:comment>A specialization of
            #$Cracking-CompromisingSecurity. Each instance of this
            collection is an event in which unauthorized access to a
            #$ComputerNetwork occurs. See also #$Hacker, #$AttackByComputerOperationActionType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#ActsCommonlyConsideredCriminal"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Penguin">
        <rdfs:label xml:lang="en">penguin</rdfs:label>
        <rdfs:comment>The collection of marine flightless birds native
            to the #$SouthernHemisphere-Region.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Bird"/>
        <rdfs:subClassOf rdf:resource="#FlightlessBird"/>
        <rdfs:subClassOf rdf:resource="#Waterfowl"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pensive">
        <rdfs:label xml:lang="en">#$Pensive</rdfs:label>
        <rdfs:comment>A feeling of deep thoughtfulness, reflection, or
            introspection, and sometimes melancholia.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Pentagon">
        <rdfs:label xml:lang="en">pentagons</rdfs:label>
        <rdfs:comment>The collection of all five-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Perceiving">
        <rdfs:label xml:lang="en">#$Perceiving</rdfs:label>
        <rdfs:comment>A specialization of both #$SingleDoerAction and
            #$InformationTransferPhysicalEvent.  Each instance of
            #$Perceiving is an event in which an agent (an instance of
            #$PerceptualAgent) acquires information through the exercise
            of its senses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationTransferPhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#IntentionalMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Perceiving-Involuntary">
        <rdfs:label xml:lang="en">involuntary perception</rdfs:label>
        <rdfs:comment>A collection of mental events, a subcollection of
            #$Perceiving. Each instance of this collection is a
            perceptual event in which the agent involuntarily receives
            senory information. Thus, if I am in a room, and a light is
            turned on, I would see the light reflected off of the walls,
            but without any effort on my part.  On the other hand,
            actively searching for something with my eyes would not be
            an instance of this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Perceiving-Voluntary">
        <rdfs:label xml:lang="en">voluntary perception</rdfs:label>
        <rdfs:comment>A specialization of both #$Perceiving and
            #$PurposefulAction.  Each instance of #$Perceiving-Voluntary
            is a perceptual event in which the perceiving agent does not
            merely passively receive sensory information, but actively
            filters or directs how it is perceiving.  Thus, searching
            for a set of lost keys would be an instance of
            #$Perceiving-Voluntary, as would straining to hear
            something, but merely hearing a balloon pop next to one
            would _not_.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PerceivingSlot">
        <rdfs:label xml:lang="en">#$PerceivingSlot</rdfs:label>
        <rdfs:comment>A collection of predicates. Each instance of
            #$PerceivingSlot is a binary predicate relating a perceiver
            and an object or event (not a sense-datum) that s/he
            perceives in the mode specified by the predicate; e.g.,
            sees, hears, smells, tactuallyPerceives, tastes. Assertions
            that use a predicate belonging to #$PerceivingSlot imply
            that some perception event occurs during the time that the
            assertion holds. See also #$Perceiving and its subcollections.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CognitiveAwarenessPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PerceptualAgent">
        <rdfs:label xml:lang="en">perceptual agents</rdfs:label>
        <rdfs:comment>The collection of all sentient agents.  Instances
            of #$PerceptualAgent are #$IndividualAgents (q.v.) capable
            of performing acts of #$Perceiving (q.v.).  In many cases
            information that a perceptual agent gathers through
            perceiving can influence certain other of the agent&apos;s actions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualAgent"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Permission">
        <rdfs:label xml:lang="en">#$Permission</rdfs:label>
        <rdfs:comment>A specialization of #$Agreement.  Each instance of
            #$Permission is an agreement specifying some rights or
            privileges which have been granted to an instance of #$Agent
            (q.v.).  A permission may be an informal agreement between
            individuals, but many instances are formal and involve
            permissions granted by a government authority to some agent.
            Notable specializations of #$Permission include
            #$License-LegalAgreement and #$Visa-Permit.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="Person">
        <rdfs:label xml:lang="en">#$Person</rdfs:label>
        <rdfs:comment>The collection of all human beings.  Something is
            an instance of #$Person just in case it is a member of the
            species Homo Sapiens, and thus #$Person is an instance of
            #$BiologicalSpecies in the #$BiologyMt.  Persons are the
            most intelligent kind of #$Primate, and the only kind known
            to be naturally capable of speaking a language.  #$Person
            excludes non-human legal persons, who are, however, included
            in the collection #$LegalAgent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>

        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructResident"/>
        <rdfs:subClassOf rdf:resource="#HomoGenus"/>
        <rdfs:subClassOf rdf:resource="#Primate"/>
        <rdfs:subClassOf rdf:resource="#ViviparousAnimal"/>
        <rdfs:subClassOf rdf:resource="#Omnivore"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByActivity">
        <rdfs:label xml:lang="en">#$PersonTypeByActivity</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PersonTypeByActivity is a collection of #$Persons that
            classifies people by some kind of activity that they do on a
            regular basis.  Examples include #$Student, #$Tourist, and
            #$HornPlayer.  If the differentiating activity is one that
            is normally done as a career or job, it is preferable to
            make the collection an instance of the more specific
            #$PersonTypeByOccupation (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByCulture">
        <rdfs:label xml:lang="en">#$PersonTypeByCulture</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PersonTypeByCulture is the collection of all and only
            those persons who participate (see #$cultureParticipants) in
            some particular human culture.  Examples include
            #$FrenchPerson and #$EthnicGroupOfAustralianAborigines.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByEthnicity">
        <rdfs:label xml:lang="en">ethnic groups</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$PersonTypeByCulture.   Each instance of
            #$PersonTypeByEthnicity is a collection of people who
            participate in a common #$HumanCulture defined on the basis
            of  ethnic origin.  Instances of #$PersonTypeByEthnicity
            include  #$EthnicGroupOfVietnamese,
            #$EthnicGroupOfNativeAmericansOfTheUS, and  #$EthnicGroupOfHutu.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonTypeByCulture"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByGeoPoliticalAffiliation">
        <rdfs:label xml:lang="en">#$PersonTypeByGeoPoliticalAffiliation</rdfs:label>
        <rdfs:comment>A collection of collections.  This collection
            exists to make it easier to refer to that dimension or facet
            of a person&apos;s behavior, attitudes, and beliefs
            (culture) which derives from, or is influenced by, the
            person&apos;s geo-political affiliations (citizenship,
            voting rights, or some rights and obligations of political
            participation and protection).  This facet of culture is
            slightly different from that which derives from residence in
            a place.  For that, see #$PersonTypeByGeographicResidence.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonTypeByCulture"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByOccupation">
        <rdfs:label xml:lang="en">#$PersonTypeByOccupation</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$PersonTypeByActivity (q.v.).  Each instance of
            #$PersonTypeByOccupation is a collection of workers (see
            #$PersonWithOccupation) and is defined in terms of the kind
            of work done.  The various instances of
            #$PersonTypeByOccupation correspond to jobs of all kinds,
            and not just to those colloquially called  professions .
            Examples include #$ComputerProgrammerProfessional,
            #$FoodServiceEmployee, #$MedicalCareProfessional,
            #$SalesRepresentative, #$Brewer, and many others.  See also #$PersonTypeByPositionInOrg.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonTypeByActivity"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonTypeByPositionInOrg">
        <rdfs:label xml:lang="en">types of position</rdfs:label>
        <rdfs:comment>A collection of collections.  A
            #$PersonTypeByPositionInOrg is a collection representing a
            type of position in an organization.  More precisely,  each
            instance of #$PersonTypeByPositionInOrg is the collection of
            instances of #$PersonWithOccupation who hold a position of a
            particular given type within some #$Organization or other.
            For example, #$VicePresident-CorporateOfficer is the
            collection of all persons who are vice presidents of a
            corporation, regardless of which corporation it might be.
            Some other instances of #$PersonTypeByPositionInOrg are
            #$Mayor, #$CampaignManager, #$Director-Movie, #$Chairman,
            and #$Resident-Medical.  Obviously, which position-types are
            filled in a given organization partly depends on the type of
            organization it is; thus cities have mayors while business
            firms do not.  Note that #$PersonTypeByPositionInOrg is
            _not_ a specialization of #$PersonTypeByOccupation (q.v.);
            the latter categorizes workers according to the kinds of
            activities they perform at work rather than the positions
            they hold in their respective organizations, and the typical
            activities of a vice president of a toy manufacturer (e.g.)
            are likely to be very unlike those of a bank vice president.
            Note also that, since all instances of instances of
            #$PersonTypeByPositionInOrg are #$PersonWithOccupations, not
            everyone who would colloquially be said to  hold a position
            in an organization  necessarily qualifies; consider the
            life-long homemaker who is also a volunteer  Candy Striper
            at a local hospital, or the international jet-setter with a
            conscience who hasn&apos;t worked a day in his life but
            serves as the honorary chairperson of a charitable organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonWithOccupation">
        <rdfs:label xml:lang="en">#$PersonWithOccupation</rdfs:label>
        <rdfs:comment>The collection of persons who have a (skilled or
            unskilled) occupation.  Most (but not all) instances of
            #$PersonWithOccupation spend a significant part of their
            waking hours doing activities that are characteristic of
            their occupations.  Typically their actions are performed
            for pay (but not always: consider a  starving artist  who is
            unable to sell any of her works).  Note that a
            #$PersonWithOccupation need not be working over the entire
            duration of when s/he has an occupation; e.g. college
            professors on summer break and the temporarily unemployed
            still have occupations.  Most reified specializations of
            #$PersonWithOccupation classify workers according to their
            job titles, the kinds of work they perform, or the skills
            involved; while a few exploit other (usually quite broad)
            features of their working lives (e.g. #$SelfEmployedWorker
            and #$DeskWorker).  But note that many collections
            corresponding to what are colloquially considered
            professions or occupations (e.g. #$Lifeguard, #$StockBroker,
            #$Housekeeper, and many others) are _not_ specializations of
            #$PersonWithOccupation, as those collections include people
            for whom the work in question is not their occupation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonalCheck">
        <rdfs:label xml:lang="en">personal checks</rdfs:label>
        <rdfs:comment>A specialization of #$Check-TenderObject. Each
            instance of #$PersonalCheck is a check issued to a person
            who has a #$CheckingAccount (q.v.) with a bank.  Each
            instance of #$PersonalCheck is inscribed with a unique
            checking account number, as well as information about the
            person to whom it is issued (usually, this information will
            include the person&apos;s name and mailing address).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Check-TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonalComputer">
        <rdfs:label xml:lang="en">personal computers</rdfs:label>
        <rdfs:comment>A specialization of #$SingleUserComputer. Each
            instance of this collection is a small, single-user
            #$Computer, such as a desktop computer, a laptop computer or
            a palm computer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputerHardwareItem"/>
        <rdfs:subClassOf rdf:resource="#Computer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PersonalProduct">
        <rdfs:label xml:lang="en">personal products</rdfs:label>
        <rdfs:comment>A specialization of #$Product.  Each instance of
            #$PersonalProduct is a service or tangible product designed
            for the physical body of a person, including clothing,
            accessories, personal care products (e.g., deodorant, hand
            soap) and devices (e.g., razors, heating pads), cosmetics,
            and personal services such as massages and manicures.  These
            are products or services which a person would seek out or
            apply to him/herself; i.e., it excludes products used on the
            body of a person by physicians (e.g., scalpels), dentists
            (e.g., dental drills), or morticians.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PharmaceuticalDispensingOrganization">
        <rdfs:label xml:lang="en">pharmacies</rdfs:label>
        <rdfs:comment>#$PharmaceuticalDispensingOrganization is a
            specialization of #$HealthcareOrganization.  Each instance
            of #$PharmaceuticalDispensingOrganization provides
            prescription drugs to members of the general public.  This
            collection does not include drug manufacturing companies
            like Squibb or drug store chains like Walgreens.  Positive
            examples include the pharmacy within the Albertsons on
            Research Boulevard in Austin and a mail order prescription
            drug provider.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HealthcareOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pharmacist">
        <rdfs:label xml:lang="en">pharmacists</rdfs:label>
        <rdfs:comment>The collection of professionals who are trained
            and licensed to prepare and distribute legal drugs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pharmacy">
        <rdfs:label xml:lang="en">local pharmacies</rdfs:label>
        <rdfs:comment>#$Pharmacy is a specialization of
            #$PharmaceuticalDispensingOrganization,
            #$CommercialServiceOrganization, and
            #$SingleSiteLocalOrganizationWithClients.  Each instance of
            #$Pharmacy is a  (local-level) organization which sells
            mainly prescription drugs, but usually also carries
            non-prescription drugs and other medical supplies that might
            be needed by a family or individual.  Sometimes these are
            free-standing stores, sometimes departments within other
            stores (like drugstores and supermarkets).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PharmaceuticalDispensingOrganization"/>
        <rdfs:subClassOf rdf:resource="#ServiceEstablishment"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PharmacyProductType">
        <rdfs:label xml:lang="en">pharmacy products</rdfs:label>
        <rdfs:comment>The collection of pharmaceutical product types,
            including drugs and pharmaceutical devices.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
    </owl:Class>
    <owl:Class rdf:ID="Philosopher">
        <rdfs:label xml:lang="en">philosopher</rdfs:label>
        <rdfs:comment>A specialization of #$Person; in the context of
            #$HumanActivitiesMt this collection is an instance of
            #$PersonTypeByActivity, in the context of #$JobMt it is an
            instance of #$PersonTypeByOccupation.  Each instance of
            #$Philosopher is a person who habitually thinks about
            philosophical matters such as what is or might be, what we
            can know, how we can know anything, etc. In the contemporary
            era most philosophers are academics or professionals, but a
            significant number (now and historically) don&apos;t fit
            this profile.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhoneNumber">
        <rdfs:label xml:lang="en">phone numbers (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString. Each
            instance of #$PhoneNumber is a character string that can be
            used to call a particular #$Telephone.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Phoneme">
        <rdfs:label xml:lang="en">phoneme</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtomicSymbol-Abstract"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhraseStructureConstraint">
        <rdfs:label xml:lang="en">phrase structure constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticRuleConstraint"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhraseStructureConstraint-Semantic">
        <rdfs:label xml:lang="en">phrase structure constraint - semantic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhraseStructureConstraint"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalAmountSlot">
        <rdfs:label xml:lang="en">measures (types of things)</rdfs:label>
        <rdfs:comment>An instance of #$PredicateCategory, and a
            specialization of #$IntervalBasedQuantitySlot.  Each
            instance of #$PhysicalAmountSlot is a binary predicate used
            to relate a spatial thing (i.e., an instance of some
            specialization of #$SpatialThing) to one of its quantifiable
            physical attributes (such as its length, mass, or volume).
            Instances of #$PhysicalAmountSlot include #$lengthOfObject,
            #$volumeOfObject, #$massOfObject, and #$depthOfObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntervalBasedQuantitySlot"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttributeDescriptionSlot"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalAttributeDescriptionSlot">
        <rdfs:label xml:lang="en">physical attribute describing predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$BinaryPredicate and
            #$PhysicalFeatureDescribingPredicate.  Each instance of
            #$PhysicalAttributeDescriptionSlot relates some spatial
            thing to an instance of #$PhysicalAttribute which
            characterizes that thing.  The attribute may or may not be a
            quantifiable property.  Examples of
            #$PhysicalAttributeDescriptionSlot include
            #$objectEmitsOdor, #$viscosityOfSubstance,
            #$diameterOfObject, #$shapeOfObject, and #$xzCrossSectionShapeType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalFeatureDescribingPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalAttributeOfTangibleOnly">
        <rdfs:label xml:lang="en">physical attribute of tangible only</rdfs:label>
        <rdfs:comment>The collection of #$PhysicalAttributes    that can
            sensibly be ascribed and restricted to paradigmatic   cases
            of     #$PartiallyTangible things, such     as physical
            bodies.  Subcollections include #$Density,   #$Rigidity,
            #$Mass, etc.  A negative example   is #$AFewYearsDuration,
            which is a #$PhysicalAttribute of   #$TemporalThings but not
            of #$PartiallyTangible   things.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalCompositionPredicate">
        <rdfs:label xml:lang="en">composition predicate</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to relate
            a partially tangible thing to its partially tangible parts
            or components, where those parts or components might or
            might not be spatially continuous or discrete.  Each
            instance of #$PhysicalCompositionPredicate has an arity of
            2, and both argument places are constrained (see #$argIsa)
            to instances of #$PartiallyTangible, or some subcollection
            thereof. Each instance of #$PhysicalCompositionPredicate is
            a specialization of the predicate #$physicalDecompositions
            (q.v.); consequently, for each instance PRED of
            #$PhysicalCompositionPredicate, either (#$genlPreds PRED
            #$physicalDecompositions) or (#$genlInverse PRED
            #$physicalDecompositions) holds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
        <rdfs:subClassOf rdf:resource="#PartPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalContactEvent">
        <rdfs:label xml:lang="en">#$PhysicalContactEvent</rdfs:label>
        <rdfs:comment>A collection of physical events in which two or
            more objects are in physical contact (see #$touches) for at
            least part of the event&apos;s duration. Note that, although
            most #$PhysicalEvents involve some kind of touching, only
            those for which contact is salient should be instances of
            #$PhysicalContactEvent.  For events involving continuous
            contact and events in which contact is made, respectively,
            see the specializations #$ContinuousPhysicalContactEvent and #$PhysicalContactMakingEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalContactSituation"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalContactLocation">
        <rdfs:label xml:lang="en">physical contact locations</rdfs:label>
        <rdfs:comment>A specialization of #$Place, #$ContactLocation,
            and #$HumanShelterConstruction.  Each instance of
            #$PhysicalContactLocation is the principal place where an
            #$Agent can be physically found.  A person&apos;s physical
            contact location would typically be a home or office.   For
            an organization, it typically would be the location of its
            place of business or its headquarters.  Note that a purely
            procedural method for getting in touch with someone, such as
            their Post Office Box number in a certain city, is not a #$PhysicalContactLocation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalContactSituation">
        <rdfs:label xml:lang="en">situations involving physical contact</rdfs:label>
        <rdfs:comment>The collection of all temporal situations in which
            two or more tangible objects are touching (see #$touches)
            for at least part of the situation&apos;s duration.  This
            includes an object&apos;s rubbing against another, objects
            colliding, as well as static touching configurations.  Note
            that, although most types of #$PhysicalEvents involve some
            kind of touching, only those types for which contact is
            salient should be subcollections of  #$PhysicalContactSituation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalCreationEvent">
        <rdfs:label xml:lang="en">#$PhysicalCreationEvent</rdfs:label>
        <rdfs:comment>The collection of all #$CreationEvents in which
            something #$PartiallyTangible is created.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationOrDestructionEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalCreationOrDestructionEvent">
        <rdfs:label xml:lang="en">events in which something is created
            or destroyed or both</rdfs:label>
        <rdfs:comment>A specialization of #$CreationOrDestructionEvent.
            During each instance of
            #$PhysicalCreationOrDestructionEvent, one or more physical
            objects (instances of #$PartiallyTangible) come into or go
            out of existence.  If the object created or destroyed in an
            event is not physical (e.g., if it is an agreement or a
            conceptual work), then the event should be an instance of
            the more general collection #$CreationOrDestructionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalDestructionEvent">
        <rdfs:label xml:lang="en">physical destruction events</rdfs:label>
        <rdfs:comment>The collection of all #$DestructionEvents in which
            something #$PartiallyTangible is destroyed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationOrDestructionEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalDevice">
        <rdfs:label xml:lang="en">#$PhysicalDevice</rdfs:label>
        <rdfs:comment>A specialization of both #$Artifact and
            #$SolidTangibleProduct. Each instance of #$PhysicalDevice is
            an artifact with a relatively rigid, set shape, designed for
            a specific use or  to perform a specific function.
            Specializations of #$PhysicalDevice thus include (among
            others) #$RoadVehicle, #$Motorboat, #$HandTool, and
            #$PlumbingFixture.  Note that artifacts which can only be
            used  in a very loose or metaphorical sense, such as
            instances of #$Sculpture, #$FlowerBed, or
            #$Advertisement-IBT, are _not_ instances of
            #$PhysicalDevice.  Moreover, artifacts which have a specific
            use or function, but which do not have a relatively rigid,
            set shape are _not_ instances of #$PhysicalDevice; for this
            reason, neither #$GasolineFuel nor #$AntiFreeze are
            specializations of #$PhysicalDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComplexPhysicalObject"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalEvent">
        <rdfs:label xml:lang="en">physical events</rdfs:label>
        <rdfs:comment>A specialization of #$Event-Localized.  Each
            instance of #$PhysicalEvent is a spatially localized event
            involving one or more physical objects or stuffs.
            #$PhysicalEvents typically involve interaction among
            #$PartiallyTangibles.  But note that a physical event might
            consist in the creation, destruction, movement, or a change
            in some physical feature of a single salient physical
            object.  (See #$PhysicalCreationEvent,
            #$PhysicalDestructionEvent, #$MovementEvent, and
            #$IntrinsicStateChangeEvent.)  For a contrasting (though not
            necessarily disjoint) collection, see #$StrictlyMentalEvent.
            For events that have both physical and mental components,
            see the specialization #$CompositePhysicalAndMentalEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalFeatureDescribingPredicate">
        <rdfs:label xml:lang="en">#$PhysicalFeatureDescribingPredicate</rdfs:label>
        <rdfs:comment>An instance of #$PredicateCategory.  Each instance
            of #$PhysicalFeatureDescribingPredicate is a predicate
            relating a spatial thing (an instance of #$SpatialThing
            (q.v.)) to one or more of its physical properties (see, for
            example, the specialization
            #$PhysicalAttributeDescriptionSlot), or to other spatial
            things to which it bears certain spatial or physical
            relations (see, for example, the specialization
            #$ConnectionPredicate).  Instances of
            #$PhysicalFeatureDescribingPredicate include
            #$above-Directly, #$physicallyContains, #$touchesDirectly,
            #$temperatureOfObject, and #$spans-Bridgelike.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalFilter">
        <rdfs:label xml:lang="en">physical filter</rdfs:label>
        <rdfs:comment>#$PhysicalFilter is a specialization of
            #$NonPoweredDevice.  Each instance of #$PhysicalFilter is a
            simple physical filter device, which allows some
            materials/objects to pass through, while preventing others
            from doing so.  Some notable specializations are
            #$CoffeeFilter and #$WindowScreen.  Natural filters do not
            fall within this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalPartPredicate">
        <rdfs:label xml:lang="en">physical part predicates</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to relate
            a partially tangible thing to its distinct, identifiable,
            non-diffuse, partially tangible parts.  Each instance of
            #$PhysicalPartPredicate has an #$arity of 2, and both
            argument places are constrained (see #$argIsa) to instances
            of #$PartiallyTangible, or some subcollection thereof.  Each
            instance of #$PhysicalPartPredicate is a specialization of
            the predicate #$physicalParts (q.v.); consequently, for each
            instance PRED of #$PhysicalPartPredicate, either
            (#$genlPreds PRED #$physicalParts) or (#$genlInverse PRED
            #$physicalParts) holds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCompositionPredicate"/>
        <rdfs:subClassOf rdf:resource="#PartPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalQuantity">
        <rdfs:label xml:lang="en">physical quantities</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval. Each
            #$PhysicalQuantity  is #$ScalarInterval that can measure a
            physical aspect of some instance of #$TemporalThing.
            Specializations include #$Time-Quantity, #$Mass, and #$Area.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalSeries">
        <rdfs:label xml:lang="en">physical series</rdfs:label>
        <rdfs:comment>A specialization of both #$Series and
            #$PartiallyTangible.  Each instance of #$PhysicalSeries is a
            group of partially tangible objects ordered in a linear
            fashion, most likely according to some spatial relationship.
            Instances would include a group of people in line at a
            ticket booth, or the vertebrae in a person&apos;s spine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Series"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalSynthesis">
        <rdfs:label xml:lang="en">physical synthesis</rdfs:label>
        <rdfs:comment>The collection of #$CreationEvents where two or
            more instances of #$PartiallyTangible come together to form
            an instance of #$PartiallyTangible, which is the #$outputsCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#Synthesis-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalTransformationEvent">
        <rdfs:label xml:lang="en">#$PhysicalTransformationEvent</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PhysicalDestructionEvent and #$PhysicalCreationEvent. In
            each instance of #$PhysicalTransformationEvent at least one
            thing ceases to exist and at least one thing comes into
            existence (and usually at least some portion of the thing(s)
            destroyed becomes incorporated into the thing(s) created).
            An important specialization of this collection is
            #$PhysicalTransformationProcess, the collection of
            #$PhysicalTransformationEvents that are also instances of
            #$TemporalStuffType. See also the predicate #$transformedInto.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalCreationEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicalTransformationProcess">
        <rdfs:label xml:lang="en">transformation processes</rdfs:label>
        <rdfs:comment>The collection of #$PhysicalTransformationEvents
            that also are instances of #$TemporalStuffType.  That is,
            each of their temporal parts is also a
            #$PhysicalTransformationEvent, in which something is
            destroyed and something created.   Note:  It is often the
            case that a #$PhysicalTransformationEvent is NOT a
            #$PhysicalTransformationProcess --- e.g., there may be
            several preparation stages, and then at the end everything
            is brought together and the foaming starts, or the butterfly
            emerges, or whatever transformation occurs.  So
            #$PhysicalTransformationProcess is a small subcollection of
            #$PhysicalTransformationEvent (qv).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysicallyAttackingAnAgent">
        <rdfs:label xml:lang="en">#$PhysicallyAttackingAnAgent</rdfs:label>
        <rdfs:comment>The collection of events in which one #$Agent (or
            a small group of #$Agents) physically attacks another
            #$Agent (or small group of #$Agents.)  Each assassination
            attempt is an example of such an event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ViolentAction"/>
        <rdfs:subClassOf rdf:resource="#AttackOnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysiologicalCondition">
        <rdfs:label xml:lang="en">physiological conditions</rdfs:label>
        <rdfs:comment>A specialization of #$SystemCondition.  Each
            instance of #$PhysiologicalCondition involves an
            #$Organism-Whole being in some physiological state that is
            not  typical for that organism&apos;s species, modulo
            considerations about the organism&apos;s sex or (in some
            cases) subspecies.  Thus #$Menstruating, though not typical
            among all persons, is part of being a healthy adult female,
            and so is not a specialization of #$PhysiologicalCondition
            (though it is a type of #$PhysiologicalProcess);
            #$Pregnancy, on the other hand, is a specialization of
            #$PhysiologicalCondition.  Note that some but not all
            #$PhysiologicalConditions are events; but they are all
            #$Situation-Temporals. Thus each physiological condition has
            a temporal start and end, though in some cases (e.g.
            dwarfism) these will be the same as the start and end of the
            life of the organism.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SystemCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysiologicalConditionType">
        <rdfs:label xml:lang="en">health conditions</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PhysiologicalConditionType is a specialization of
            #$PhysiologicalCondition (q.v.), and thus a type of
            physiological state into which some organisms can enter.
            Instances of #$PhysiologicalConditionType include  #$Cancer,
            #$PsychologicalAilment, #$Infection, and #$Malnutrition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysiologicalFunction">
        <rdfs:label xml:lang="en">physiological functions</rdfs:label>
        <rdfs:comment>The collection of those #$PhysiologicalProcesses
            that serve some end for their doers, which may be cells,
            tissues, or whole organisms; for example, #$Photosynthesis-Plant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysiologicalProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PhysiologicalProcess">
        <rdfs:label xml:lang="en">physiological processes</rdfs:label>
        <rdfs:comment>The collection of events in which an organism does
            (typically unconsciously) some process which involves
            alteration of that agent&apos;s physiological state.  A
            #$PhysiologicalProcess is normally one that is done by
            organisms (or parts of organisms) in the course of living.
            A large subcollection of #$PhysiologicalProcess is
            #$BodilyFunctionEvent, including its subcollections
            #$Respiration, #$DigestingInStomach, and #$Heartbeating.
            (Compare this collection with #$PhysiologicalCondition,
            whose instances are more episodic than process-like.) </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Piety">
        <rdfs:label xml:lang="en">piety</rdfs:label>
        <rdfs:comment>Strong religious feeling and devotion to religious practice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Loyalty"/>
    </owl:Class>
    <owl:Class rdf:ID="Pipe-GenericConduit">
        <rdfs:label xml:lang="en">#$Pipe-GenericConduit</rdfs:label>
        <rdfs:comment>A specialization of #$FluidConduit; the collection
            of all enclosed tubular fluid conduits with openings at both
            ends.  #$Pipe-GenericConduit encompasses both human-made
            pipes as well as natural pipes, found naturally occurring in
            the environment or in an organism&apos;s body (like #$BloodVessels).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CylindricalHollowObject"/>
        <rdfs:subClassOf rdf:resource="#FluidConduit"/>
        <rdfs:subClassOf rdf:resource="#Container"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PipeEndToCavityJunction">
        <rdfs:label xml:lang="en">pipe end to cavity junction</rdfs:label>
        <rdfs:comment>The collection of junctions, in each of which some
            #$Pipe-GenericConduit ends at a #$Cavity of larger diameter
            than the pipe, allowing flow or access between them.  The
            flange where a water pipe enters a water tank is one
            example, as is the junction of the esophagus and the stomach
            in animals.  See also the predicate #$pipeEndsAtCavity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Portal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PipingSystem-Generic">
        <rdfs:label xml:lang="en">piping system</rdfs:label>
        <rdfs:comment>The collection of all #$Groups of
            #$Pipe-GenericConduits that form an interconnected system
            wherein fluid (liquid or gaseous) can flow from one
            component to other components connected to it by
            #$JunctionOfPipes junctions.  Parts of a generic conduit
            system may be temporarily closed off; also, parts may be
            open to the outside environment.  Examples: the plumbing
            system of a house, the piping at an oil refinery, a
            cardiovascular system.  It may also include reservoirs,
            pumps, storage, valves, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConnectedPhysicalPathSystem"/>
        <rdfs:subClassOf rdf:resource="#CustomarySystemOfLinks"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pity">
        <rdfs:label xml:lang="en">#$Pity</rdfs:label>
        <rdfs:comment>An instance of #$FeelingType.  Each instance of
            #$Pity is a feeling of sorrow for another agent on account
            of the undesirable  state of affairs that agent is in.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Place">
        <rdfs:label xml:lang="en">#$Place</rdfs:label>
        <rdfs:comment>A specialization of both #$SpatialThing-Localized
            and #$SomethingExisting.  Each instance of #$Place is a
            spatial thing which has a relatively permanent location.
            Thus, in a given microtheory, each #$Place is stationary
            with respect to the frame of reference of that microtheory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Place-NonAgent">
        <rdfs:label xml:lang="en">non-agent-like places</rdfs:label>
        <rdfs:comment>A collection of places which are not agent-like.
            Some things can be both places and exhibit agency; e.g., the
            #$CityOfMiamiFL is a region in #$Florida-State, and it also
            can enter into agreements with other cities (see
            #$GeopoliticalEntity).  Each instance of #$Place-NonAgent is
            a #$Place that does NOT have any agency, e.g., #$LakeErie
            and #$OuterSpace.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Plain-Topographical">
        <rdfs:label xml:lang="en">plain - topographical</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PlanActionRestrictionPredicate">
        <rdfs:label xml:lang="en">#$PlanActionRestrictionPredicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Instances are used to
            express durationalconstraints, constraints relating to
            temporal ordering, and subeventual commitments relating to
            reified #$PurposefulActions that are represented in the
            deontic contexts of #$Plans.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PlaneFigure-Geometrical">
        <rdfs:label xml:lang="en">plane figure - geometrical</rdfs:label>
        <rdfs:comment>A specialization of #$Figure-Geometrical.
            Instances of #$PlaneFigure-Geometrical are parts of some
            plane [#$FlatSurface] that are bounded by some angular or
            cuved lines. This collection includes, for instance,
            #$Polygons and disks.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Figure-Geometrical"/>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Planet">
        <rdfs:label xml:lang="en">planets</rdfs:label>
        <rdfs:comment>A specialization of #$HeavenlyBody.  Each instance
            of #$Planet is a planet either in Earth&apos;s solar system
            or elsewhere in the universe.  Instances of #$Planet include
            #$PlanetEarth, #$PlanetJupiter, and #$PlanetVenus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Spheroid"/>
        <rdfs:subClassOf rdf:resource="#AstronomicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PlanningDomainMicrotheory">
        <rdfs:label xml:lang="en">Cyc planning domain microtheories</rdfs:label>
        <rdfs:comment>A specialization of #$Microtheory.  Each instance
            of #$PlanningDomainMicrotheory is a microtheory created to
            store knowledge relevant to performing planning activities.
            Such a microtheory will act as the main receptacle for any
            information that is relevant to the planning problem - i.e.,
            background contexts, whether these be general or specific.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Plant">
        <rdfs:label xml:lang="en">#$Plant</rdfs:label>
        <rdfs:comment>#$Plant is the collection of all plants; it is a
            member of the #$BiologicalKingdom and contains the primary
            subjects of #$Biology.  Plants are typically stationary,
            living, whole organisms; the cells of plants generally lack
            cholesterol and have cell walls that include substances of
            #$Cellulose.  Most, though not all, plants are capable of
            making sugars by #$Photosynthesis-Plant processes and have
            green parts.  Some example subsets of #$Plant are the
            collections #$RoseBush, #$SpruceTree, and #$Moss.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TopAndBottomSidedObject"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#EukaryoticOrganism"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#PlantBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Plant-NonWoody">
        <rdfs:label xml:lang="en">herbaceous plants</rdfs:label>
        <rdfs:comment>The collection of non-woody, herbaceous #$Plants.
            Those #$Plants such as grasses, herbs, wildflowers, etc.
            which are fairly low-growing, often annual, and don&apos;t
            grow woody stems.  Excludes large, hard bamboos, and Balsa.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Plant-Woody">
        <rdfs:label xml:lang="en">woody plants</rdfs:label>
        <rdfs:comment>A specialization of #$Plant and
            #$TerrestrialOrganism. Each instance of #$Plant-Woody is a
            plant whose trunk, stems, or branches (and usually roots)
            are woody.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PlantBLO">
        <rdfs:label xml:lang="en">plants or plant parts</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalLivingObject that
            includes all plants and parts of plants.  #$PlantBLO is thus
            the  union  (see #$collectionUnion) of #$Plant and
            #$PlantPart (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PlantPart">
        <rdfs:label xml:lang="en">plant parts</rdfs:label>
        <rdfs:comment>A specialization of #$PlantBLO and #$OrganismPart.
            Each instance of this collection is a physical part of some
            #$Plant.  An important specialization of this collection is
            #$BotanicalOrgan; but #$PlantPart also includes many smaller
            plant parts which display a similar level of organization --
            they have vascular tissue, ground tissue, and an epidermis
            -- but are not included in the traditional understanding of
            a #$BotanicalOrgan (i.e. leaves, stems, roots and flowers).
            See also #$PlantPartType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#PlantBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PlantProduct">
        <rdfs:label xml:lang="en">plant products</rdfs:label>
        <rdfs:comment>The collection of #$Products that are plants or
            plant parts (individually or in bulk), or substances derived
            from plants, which are produced by people or countries and
            made available for use, sale or exchange.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Plasma-StateOfMatter">
        <rdfs:label xml:lang="en">plasma - state of matter</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible and an
            instance of #$MatterTypeByPhysicalState. Each instance of
            #$Plasma-StateOfMatter is an object in the plasma state of
            matter. Matter existing in this state is at sufficiently
            high temperatures and pressures (for the kind of matter it
            is) that all molecules are completely ionized and those ions
            move freely away from each other.  Plasmas don&apos;t exist
            naturally on Earth, but do exist inside stars.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Plastic">
        <rdfs:label xml:lang="en">plastics</rdfs:label>
        <rdfs:comment>#$Plastic is a specialization of
            #$ArtificialMaterial.  Each instance of #$Plastic is a piece
            of some type of plastic.  This collection includes plastics
            of all kinds: artifical, mostly polymeric, inedible, organic
            moldable hydrocarbons.  Some common types are #$Rayon,
            #$Nylon, polyethylene, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Platform-Military">
        <rdfs:label xml:lang="en">platform - military</rdfs:label>
        <rdfs:comment>#$Platform-Military is a specialization of
            #$MilitaryHardware and #$TransportationDevice.  Each
            instance of #$Platform-Military is a transportation device
            which can carry military equipment such as #$Weapons,
            personnel and communications equipment. When a
            #$Platform-Military is armed with a #$Weapon, such as a
            #$Tank-Vehicle, it will result in a type of #$WeaponSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryHardware"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pleasure-Feeling">
        <rdfs:label xml:lang="en">#$Pleasure-Feeling</rdfs:label>
        <rdfs:comment>Agreeable feeling of gratification or satisfaction</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="PlumbingFixture">
        <rdfs:label xml:lang="en">plumbing</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$PlumbingFixture is a device whose primary
            function is to be a functional, significant part of some
            plumbing system (see the constant
            #$PlumbingSystem-Building).  Notable specializations of
            #$PlumbingFixture include #$Pipe-Plumbing, #$Toilet, and #$ShowerHead.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Poikilotherm">
        <rdfs:label xml:lang="en">cold-blooded animals</rdfs:label>
        <rdfs:comment>A specialization of #$Animal and an instance of
            #$OrganismClassificationType.  Each instance of
            #$Poikilotherm is a  cold-blooded  animal.  That is, each
            instance is an animal whose body temperature is determined
            mainly by its surrounding environmental temperature.  Cf. #$Homeotherm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PointFinitePathSystem">
        <rdfs:label xml:lang="en">point finite path systems</rdfs:label>
        <rdfs:comment>The collection of all #$PathSystems each of which
            has at most finitely many &apos;points&apos; on each link,
            i.e., the collection of every #$PathSystem SYS such that for
            each link LINK in SYS, (#$TheSetOf X (#$and (#$elementOf X
            (#$PointsInSystemFn SYS)) (#$pointOnPath X LINK))) is
            finite.  (See also #$pointInSystem.)  Note that in
            #$PathSystems, &apos;points&apos; may occur along links
            between nodes (see #$nodeInSystem), while nodes themselves
            are always &apos;points&apos; of the system.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="PolishingSomething">
        <rdfs:label xml:lang="en">polishing events</rdfs:label>
        <rdfs:comment>A specialization of #$Rubbing.  In each instance
            of #$PolishingSomething, a surface of an object is made
            smooth and glossy by rubbing that surface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
        <rdfs:subClassOf rdf:resource="#Rubbing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PolitenessOfSpeech">
        <rdfs:label xml:lang="en">politeness levels of speech</rdfs:label>
        <rdfs:comment>Politeness attributes apply to individual word
            senses of words or phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PoliticalDispute">
        <rdfs:label xml:lang="en">political dispute</rdfs:label>
        <rdfs:comment>The class of all political disputes, including
            serious political controversies and skirmishes between
            individuals, organizations or countries.   Such a dispute
            involves some question of public policy, as opposed to
            purely personal or commercial issiues.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoliticalEvent"/>
        <rdfs:subClassOf rdf:resource="#DisputeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PoliticalEvent">
        <rdfs:label xml:lang="en">political events</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction.  Each
            instance of #$PoliticalEvent is an action that has an
            important political character.  Many official acts by
            instances of #$RegionalGovernment are included in this
            collection -- e.g. passing legislation, instances of
            #$DeclaringWar -- as are actions which affect the structure
            or composition of govermental bodies (e.g. resigning from
            office).  More broadly, many events which involve candidates
            for office, instances of #$PoliticalOrganization, or other
            actors with power to affect political institutions are
            included -- political fundraising events, letter-writing
            campaigns, and so on.  Events which have only unintended
            political ramifications, such as a polluting event which
            prompts a movement for stricter environmental regulations,
            are not included in this collection.  An individual voting
            (see the collection #$Voting) in an election for public
            office is an instance of #$PoliticalEvent, but in other
            cases, it seems necessary to have participants who
            individually or as a group have some level of political
            influence. So, most instances of #$PublicProtesting are
            instances of #$PoliticalEvent, but perhaps a single
            individual holding a placard is not.  A well-known
            politician switching parties is a #$PoliticalEvent (even if
            she is in private life), but perhaps JohnDoe switching
            parties is not. Another borderline case: the influencing of
            a government official by a private lobbyist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PoliticalOrganization">
        <rdfs:label xml:lang="en">political organization</rdfs:label>
        <rdfs:comment>A specialization of #$AdvocacyOrganization and
            #$IdeologicalOrganization.  Each instance of
            #$PoliticalOrganization is an organization whose members
            share some common political, social, or economic values and
            goals, and whose main function  is to achieve those goals by
            influencing governmental powers, or by helping persons who
            favor the views and interests of its members to win
            elections or otherwise obtain governmental power.  The
            collection #$PoliticalOrganization includes instances of
            #$PoliticalParty and also instances of
            #$PoliticalInterestGroup.  Note that governmental bodies
            (such as a #$CityCouncil) are not considered instances of
            #$PoliticalOrganization.  Although such governmental bodies
            often act in political arenas, that is not their primary function.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AdvocacyOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PoliticalParty">
        <rdfs:label xml:lang="en">political parties</rdfs:label>
        <rdfs:comment>A specialization of #$PoliticalOrganization.  Each
            instance of #$PoliticalParty is an organization that
            primarily seeks to elect candidates to public office or have
            members continue holding public office, and which is
            identified as a party affiliation by persons holding or
            seeking public office.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoliticalOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Politician">
        <rdfs:label xml:lang="en">#$Politician</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByActivity.  Each
            instance of #$Politician is a person who is involved in
            politics.  Specializations of #$Politician include
            #$HeadOfState, #$ElectoralCandidate, and #$HeadOfPoliticalParty.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Polygon">
        <rdfs:label xml:lang="en">polygons</rdfs:label>
        <rdfs:comment>A specialization of
            #$TwoDimensionalGeometricThing. Each instance of #$Polygon
            is a closed two-dimensional planar object consisting of
            straight line segments (see the collection #$LineSegment)
            joined end to end. Examples include spatially localized
            objects, such as a flat sheet of paper, as well as abstract polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PlaneFigure-Geometrical"/>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Polygon3DShaped">
        <rdfs:label xml:lang="en">#$Polygon3DShaped</rdfs:label>
        <rdfs:comment>The collection of all three-dimensional objects
            all of whose surfaces (see the predicate #$objectSurfaces)
            are polygons (see #$Polygon).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PortableObject">
        <rdfs:label xml:lang="en">portable objects</rdfs:label>
        <rdfs:comment>A specialization of #$HumanScaleObject.  Each
            instance of #$PortableObject is a tangible object that is
            not  fastened down  and is light enough for an average human
            (or, more to the point, for its average intended user) to
            move easily.  For many instances of #$PortableObject,
            portability is important for the fulfillment of their
            primary functions;  for example, an article of clothing (an
            instance of #$SomethingToWear),  a hand-guided tool (an
            instance of #$HandTool), a coin or dollar bill (an instance
            of #$Currency), or a flashlight (an instance of
            #$Flashlight) would be pretty useless if they weren&apos;t
            portable.  In other cases, making a device portable, or
            making a portable version of a device, simply provides a
            convenience, as with the subcollections #$PortableTelevision
            and #$PortableStereoSystem.  Note that #$Tool is not a
            subcollection of #$PortableObject, since many tools are
            heavy and/or stationary.  A borderline example of a
            #$PortableObject would be a heart/lung machine; although the
            beneficiary of its primary function is in no position to
            move it around, the physicians and nurses who also are
            using  it can and do exactly that.  The same goes for a
            playpen; the kids in it had better _not_ be able to move it
            around, but the adults who set it up and put them there can
            and do move it.   A borderline non-example would be a car;
            even though its user can make it move around, that is more a
            controlling action than a transporting action --- i.e., the
            car is doing the transporting in that case, not the driver.
            A borderline example is a cat; even though it moves under
            its own power, it is light enough for its owner to pick it
            up and move it around.  A borderline example is a bed or a
            dresser; though too heavy to lift, its owners can generally
            move it around (by sliding, disassembling and reassembling,
            and so on).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Portal">
        <rdfs:label xml:lang="en">#$Portal</rdfs:label>
        <rdfs:comment>A specialization of both #$Path-Spatial and
            #$Cavity.   Each instance of #$Portal is an opening -- in a
            surface, through a tube, or whatever -- with or without a
            covering (although any covering is not itself typically part
            of the portal).  Specializations include #$Doorway, #$Valve,
            and #$BodilyOrifice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Spatial"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PortalCovering">
        <rdfs:label xml:lang="en">portal covering</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleThing.  Each
            instance of #$PortalCovering is a solid tangible object that
            covers a portal.  Instances of #$PortalCovering may be
            either flexible or rigid, and they may be either fixed in
            place or removable.  Examples include windows (in buildings
            or automobiles), doors, shutters, screens, draperies, window
            blinds, convertible tops, lids, and corks.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Covering-Object"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PositiveInteger">
        <rdfs:label xml:lang="en">positive integers</rdfs:label>
        <rdfs:comment>A specialization of #$Integer.  An instance INT of
            #$Integer is an instance of #$PositiveInteger just in case
            INT is an integer greater than 0.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PositiveIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#PositiveNumber"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeInteger"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </owl:Class>
    <owl:Class rdf:ID="PositiveIntegerExtent">
        <rdfs:label xml:lang="en">#$PositiveIntegerExtent</rdfs:label>
        <rdfs:comment>The collection of #$IntegerExtents which include
            only #$PositiveIntegers</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeIntegerExtent"/>
        <rdfs:subClassOf rdf:resource="#PositiveScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="PositiveNumber">
        <rdfs:label xml:lang="en">positive numbers</rdfs:label>
        <rdfs:comment>A specialization of #$RealNumber.  An instance
            NUMBER of #$RealNumber is also an instance of
            #$PositiveNumber just in case NUMBER is greater than zero.
            Instances of #$PositiveNumber include 42 and 0.17, but not 0
            or -5.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <rdfs:subClassOf rdf:resource="#PositiveScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="PositiveScalarInterval">
        <rdfs:label xml:lang="en">positive scalar intervals</rdfs:label>
        <rdfs:comment>For a measurable positive (&gt; 0) quantity, the
            ordered sequence of possible values may be thought of as a
            line. #$PositiveScalarIntervals are the line segments (or
            points) on such a line,  representing a range of consecutive
            values, all greater than 0.  The most common case is where
            the line is just the positive part of the Real Number Line,
            and in fact where the #$PositiveScalarInterval is either a
            contiguous set of points there (i.e., a range of numbers) or
            just a single point there (i.e., a number). Another common
            case is where the line has some unit of measure marked off,
            such as meters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessiveMarker">
        <rdfs:label xml:lang="en">#$PossessiveMarker</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all contracted possessive endings which attach
            to nouns.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessiveMarker-Pl">
        <rdfs:label xml:lang="en">#$PossessiveMarker-Pl</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all contracted possessive endings which attach
            to plural nouns. In English, this is only s&apos;, as in &apos;boys&apos;&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PossessiveMarker"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessiveMarker-Sg">
        <rdfs:label xml:lang="en">#$PossessiveMarker-Sg</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all contracted possessive endings which attach
            to singular nouns. In English, this is only &apos;s, as in &apos;boy&apos;s&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PossessiveMarker"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessivePhrase">
        <rdfs:label xml:lang="en">possessive phrase</rdfs:label>
        <rdfs:comment>The collection of possessive phrases.  Examples:
            Sally&apos;s ,  kids&apos; .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPhrase"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessivePronoun">
        <rdfs:label xml:lang="en">#$PossessivePronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all possessive pronouns. Possessive pronouns
            can replace possessive nouns. Example: &apos;my&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessivePronoun-Post">
        <rdfs:label xml:lang="en">#$PossessivePronoun-Post</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all possessive pronouns which occur as
            predicative complements. Example: &apos;mine&apos;, as in
            &apos;This book is mine&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossessivePronoun-Pre">
        <rdfs:label xml:lang="en">#$PossessivePronoun-Pre</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner-Definite"/>
        <rdfs:subClassOf rdf:resource="#PossessivePronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PossibleDefinitionalPredicate">
        <rdfs:label xml:lang="en">possible definitional predicate</rdfs:label>
        <rdfs:comment>The collection of all instances of #$Predicate
            which normally or sometimes are considered
            ``definitional&apos;&apos; and thus may be used in an
            instance of #$VocabularyMicrotheory. If the use of a
            predicate is primarily definitional, it should be an
            instance of #$DefinitionalPredicate, if it is only
            occasionally definitional use the more specific, #$SometimesDefinitionalPredicate</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PostQuant-SP">
        <rdfs:label xml:lang="en">post quant - s p</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all quantifiers which can appear
            post-nominally. Example: &apos;all&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PostalCode">
        <rdfs:label xml:lang="en">#$PostalCode</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString.  Each
            instance of #$PostalCode is a character string used by a
            postal service to designate a particular geographic area.
            For example, the code used by the #$USPostalService for
            central downtown Austin, TX, is `78701&apos;.  Important
            specializations of #$PostalCode include
            #$InternationalPostalCode and #$ZipCode.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="PostalService">
        <rdfs:label xml:lang="en">postal services</rdfs:label>
        <rdfs:comment>#$PostalService is a specialization of
            #$LegalGovernmentOrganization and #$ShippingOrganization.
            Each instance of #$PostalService is an organization, usually
            government-run, usually national in scope, which has the
            main function of shipping letters and packages among people
            and organizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShippingOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Posture">
        <rdfs:label xml:lang="en">positions (types of things)</rdfs:label>
        <rdfs:comment>An instance of #$UnorderedAttributeType, and a
            specialization of #$AnimalPhysiologicalAttribute.  Each
            instance of #$Posture is a kind of bodily configuration or
            orientation had by some instances of #$Animal.  Instances of
            #$Posture include #$UprightPosture and #$SittingPosture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Power">
        <rdfs:label xml:lang="en">power</rdfs:label>
        <rdfs:comment>A specialization #$Rate.  Each instance of #$Power
            is an amount of energy per some unit of time.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="PoweredDevice">
        <rdfs:label xml:lang="en">mechanisms (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDevice.  Each
            instance of #$PoweredDevice is a device that requires some
            power input in order to perform its intended function(s).
            The power supplied might be muscle power, kinetic energy,
            electricity, fuel-generated, and so on.  Note that
            #$PoweredDevice and #$NonPoweredDevice partition the
            collection #$PhysicalDevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrecipitationCloud">
        <rdfs:label xml:lang="en">precipitation clouds</rdfs:label>
        <rdfs:comment>The collection of clouds that emit
            #$PrecipitationParticles in instances of #$PrecipitationProcess.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#CloudInSky"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrecipitationParticle">
        <rdfs:label xml:lang="en">precipitation (type)</rdfs:label>
        <rdfs:comment>A specialization of both #$InanimateThing-Natural
            and #$Particle.  Each instance of #$PrecipitationParticle is
            a particle of liquid or solid water emitted by a cloud in
            some instance of #$PrecipitationProcess (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Particle"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrecipitationProcess">
        <rdfs:label xml:lang="en">precipitation processes</rdfs:label>
        <rdfs:comment>A specialization of #$ImmediateWeatherProcess,
            #$FallingEvent, and #$EmittingStuff.  Each instance of
            #$PrecipitationProcess is a  meteorological process in which
            atmospheric clouds precipitate rain, snow, or some other
            form of precipitation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationProcess"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#FallingProcess"/>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Predicate">
        <rdfs:label xml:lang="en">CycL predicates</rdfs:label>
        <rdfs:comment>A specialization of #$TruthFunction (q.v.).  Each
            instance of #$Predicate is either a property of things (see
            #$UnaryPredicate) or a relationship holding between two or
            more things.  Like other truth-functions, predicates, or
            rather the expressions that represent or denote them, are
            used to form sentences.  More precisely, any CycL expression
            that denotes an instance of #$Predicate (and only such an
            expression) can appear in the  0th  (or  arg0 ) position
            (i.e. as the term following the opening parenthesis) of a
            #$CycLAtomicSentence (q.v.).  Important specializations of
            #$Predicate include #$UnaryPredicate, #$BinaryPredicate,
            #$TernaryPredicate, #$QuaternaryPredicate, and
            #$QuintaryPredicate.  Note that, despite its name,
            #$Predicate is a collection of _relations_, and not a
            collection of expressions that represent or denote such relations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TruthFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="PredicateCategory">
        <rdfs:label xml:lang="en">predicate category</rdfs:label>
        <rdfs:comment>A collection of collections, and a specialization
            of #$RelationshipType.  Each instance of #$PredicateCategory
            is a collection of #$Predicates.  The predicates in a given
            predicate category represented in the Knowledge Base are
            typically those sharing some common feature(s) considered
            significant enough that the collection of all such
            predicates is useful to reify.  Although what constitutes a
            significant common feature  is difficult to specify
            precisely, there are many clear-cut cases. Instances of
            #$PredicateCategory include #$TemporalPartPredicate,
            #$IntervalBasedQuantitySlot, #$FunctionalSlot,
            #$InterActorSlot, #$TransitiveBinaryPredicate, and
            #$PropositionalAttitudeSlot.  See also the comment on #$Predicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationshipType"/>
    </owl:Class>
    <owl:Class rdf:ID="PredicateDenotingFunction">
        <rdfs:label xml:lang="en">predicate-denoting functions</rdfs:label>
        <rdfs:comment>The collection of all denotational functions that
            always return instances of #$Predicate.  Examples include
            #$Kappa and #$AssistantFn.  For instance, the NAT
            `(#$AssistantFn #$unitCommander)&apos; denotes the role of
            being an assistant unit commander in some military situation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="PredicativeFrame">
        <rdfs:label xml:lang="en">predicative frame</rdfs:label>
        <rdfs:comment>Frames for adjectives that can be used
            predicatively, like &apos;happy&apos; in &apos;Chris is happy&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FrameForAdjectives"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrefixCategory">
        <rdfs:label xml:lang="en">prefix category</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixCategory"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="PrefixRule">
        <rdfs:label xml:lang="en">prefix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrefixRule-Derivational">
        <rdfs:label xml:lang="en">derivational prefix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixRule-Derivational"/>
        <rdfs:subClassOf rdf:resource="#PrefixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Prefixation">
        <rdfs:label xml:lang="en">prefixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affixation-WordFormationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PregnancyEndingEvent">
        <rdfs:label xml:lang="en">#$PregnancyEndingEvent</rdfs:label>
        <rdfs:comment>The collection of events which terminate a
            pregnancy, including birth, abortion, and miscarriage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrepaidTelephoneCard">
        <rdfs:label xml:lang="en">telephone cards</rdfs:label>
        <rdfs:comment>An instance of #$MoneyTenderType and a
            specialization of both #$Card and #$PhysicalDevice. Each
            instance of this collection allows a user to make telephone
            calls by debiting the price of the call from the
            #$MonetaryValue (q.v.) remaining on the card. The value on
            the card may be encoded on a magnetic strip on the card, or
            kept track of by the company that issued the card.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PreparingFoodItem">
        <rdfs:label xml:lang="en">preparing food</rdfs:label>
        <rdfs:comment>A specialization of #$PreparingFoodOrDrink.  Each
            instance of #$PreparingFoodItem is an event in which a
            single item of #$Food is prepared to make it ready to eat.
            For example, instances of #$MakingToast, roasting a turkey,
            or #$BakingBread.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PreparingFoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PreparingFoodOrDrink">
        <rdfs:label xml:lang="en">events in which food or drink is prepared</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PurposefulPhysicalAction and #$HumanActivity. Each
            instance of #$PreparingFoodOrDrink is an event in which an
            instance of #$FoodOrDrink is created.  An instance of
            #$PreparingFoodOrDrink may be an event in which preparation
            is done `from scratch&apos;, using raw ingredients, or it
            may be an event in which semi-prepared or `convenience&apos;
            products (such as cake mixes, margarita mixes, or frozen
            foods) are used. Typical sub-events (see the predicate
            #$subEvents) in instances of #$PreparingFoodOrDrink include
            activities commonly performed by cooks and/or bartenders,
            including instances of #$ChoppingSomething, #$CookingFood,
            #$BakingFood, or #$MixingAlcoholicDrinks. Each instance of
            #$PreparingFoodOrDrink ends when the item prepared is ready
            to eat.  Notable specializations of #$PreparingFoodOrDrink
            include #$GrillingFood, #$SteamingFood, and #$PreparingABeverage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Preposition">
        <rdfs:label xml:lang="en">prepositions</rdfs:label>
        <rdfs:comment>The collection of all prepositions. Prepositions
            are function words which usually take a noun phrase
            complement. They usually express temporal, spatial, or other
            relations. Example: `at&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Preposition-Of">
        <rdfs:label xml:lang="en">preposition - of</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            preposition &apos;of&apos;. It has unique syntactic
            functions, for example, occurring after quantifiers, so it
            is treated as a separate part of speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Preposition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrepositionalPhrase">
        <rdfs:label xml:lang="en">prepositional phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all possible prepositional phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NLPhrase"/>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Prescriber">
        <rdfs:label xml:lang="en">prescriber</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByActivity, and a
            specialization of #$MedicalCareProfessional.  Each instance
            of #$Prescriber is a person who can prescribe medication.
            Instances include doctors, as well as non-physician prescribers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrescriptionDrug">
        <rdfs:label xml:lang="en">prescription drugs</rdfs:label>
        <rdfs:comment>A specialization of #$DrugProduct. The collection
            of drugs that require a doctor&apos;s permission before
            obtaining or consuming them. See also #$DrugPrescription,
            #$prescribedDrug, #$prescriptionFilled and #$prescriptionFor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DrugProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Preservative-Food">
        <rdfs:label xml:lang="en">#$Preservative-Food</rdfs:label>
        <rdfs:comment>A specialization of #$FoodIngredientOnly.  Each
            instance of #$Preservative-Food is a substance which can be
            added to food to prevent spoilage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodIngredientOnly"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PreservingFood">
        <rdfs:label xml:lang="en">preserving food</rdfs:label>
        <rdfs:comment>A specialization of both #$ManipulatingFood and
            #$IntrinsicStateChangeEvent.  Each instance of
            #$PreservingFood is an  event in which a single item of food
            or drink (an instance of the  collection #$FoodAndDrink) is
            acted on to prevent it from spoiling (see the collection #$Spoiling).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ManipulatingFood"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="President-HeadOfGovernmentOrHeadOfState">
        <rdfs:label xml:lang="en">national presidents</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$President-HeadOfGovernmentOrHeadOfState is a person who
            holds the title of president of some #$Country, whether that
            title belongs to a position which is #$HeadOfState or
            #$HeadOfGovernment (or both). Examples: Boris Yeltsin,
            #$BillClinton, Jiang Zemin, Lee Dung-Hui.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HeadOfState"/>
        <rdfs:subClassOf rdf:resource="#PresidentOfOrganization"/>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PresidentOfOrganization">
        <rdfs:label xml:lang="en">presidents of an organization</rdfs:label>
        <rdfs:comment>A collection of people.  An instance of
            #$PresidentOfOrganization is a person who is among the
            highest leaders of some organization. Presidents often
            represent their organizations to outside entities, and may
            or may not have day-to-day authority within their organizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pride">
        <rdfs:label xml:lang="en">#$Pride</rdfs:label>
        <rdfs:comment>Self-esteem based upon one&apos;s actions,
            possessions, or relationships.  #$Vanity is not necessarily
            entailed by #$Pride.  This is a collection; see #$Happiness.
            More specialized #$FeelingTypes include #$PrideOfMembership,
            #$PrideOfAccomplishment, #$Vanity, #$Patriotism, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Approval"/>
        <rdfs:subClassOf rdf:resource="#SelfConfidence"/>
    </owl:Class>
    <owl:Class rdf:ID="PrideOfAccomplishment">
        <rdfs:label xml:lang="en">pride of accomplishment</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingOfCompetence"/>
        <rdfs:subClassOf rdf:resource="#Pride"/>
    </owl:Class>
    <owl:Class rdf:ID="PrideOfMembership">
        <rdfs:label xml:lang="en">pride of membership</rdfs:label>
        <rdfs:comment>The feeling of pride in belonging to an
            organization or group.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pride"/>
        <rdfs:subClassOf rdf:resource="#Loyalty"/>
    </owl:Class>
    <owl:Class rdf:ID="Primate">
        <rdfs:label xml:lang="en">primates</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalOrder, and a sub-taxon
            of #$Eutheria.  Each instance of #$Primate has a relatively
            large brain case, an unfused radius and ulna in the
            forelimbs, an unfused tibia and fibula in the hind limbs,
            and opposable thumbs.  Notable specializations of #$Primate
            include #$Person, #$Orangutan, #$Gorilla, and #$Baboon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Eutheria"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrimeMinister-HeadOfGovernment">
        <rdfs:label xml:lang="en">prime ministers</rdfs:label>
        <rdfs:comment>A specialization of #$HeadOfGovernment.  Each
            instance of #$PrimeMinister-HeadOfGovernment is a person who
            holds the political office of Prime Minister in some
            instance of #$Country.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Minister-Governmental"/>
        <rdfs:subClassOf rdf:resource="#HeadOfGovernment"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrimitiveScalarIntervalType">
        <rdfs:label xml:lang="en">#$PrimitiveScalarIntervalType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PrimitiveScalarIntervalType is a specialization of
            #$ScalarInterval whose instances are totally ordered by some
            relation (See #$TotallyOrderedCollection).  Moreover, each
            instance of #$PrimitiveScalarIntervalType is a type of
            quantity (such as mass) that is not derived from other
            quantities.  Instances of #$PrimitiveScalarIntervalType
            include #$Time-Quantity, #$Mass, and #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotallyOrderedScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="PrimitiveTemporalPredicate">
        <rdfs:label xml:lang="en">primitive temporal predicates</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalPredicate (q.v.)
            whose instances  relate individual time points only.  Thus,
            each instance of  #$PrimitiveTemporalPredicate has both of
            its argument-places  constrained to instances (see #$argIsa)
            of #$TimePoint.  Instances include #$after and
            #$simultaneousWith (and those are in fact the  only two
            primitive temporal predicates reified in the Cyc knowledge
            base).  Compare #$ComplexTemporalPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PrivateSectorEmployee">
        <rdfs:label xml:lang="en">private sector employees</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$PrivateSectorEmployee is a worker who is not
            paid a salary or wage by any governmental organization.  For
            example, employees of publicly traded corporations are
            instances of #$PrivateSectorEmployee.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrivateSectorOrganization">
        <rdfs:label xml:lang="en">private sector organization</rdfs:label>
        <rdfs:comment>The collection of all #$Organizations that operate
            in what is thought of as the private sector and that have no
            governmental component.  Instances of
            #$PrivateSectorOrganizations may be either
            #$CommercialOrganizations or #$NonProfitOrganizations.
            Examples of #$PrivateSectorOrganizations include #$IBMInc,
            #$Cycorp, #$FloridaNationalBank, and #$SierraClub.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrivatelyHeldCorporation">
        <rdfs:label xml:lang="en">privately-held corporations</rdfs:label>
        <rdfs:comment>#$PrivatelyHeldCorporation is a specialization of
            #$PrivatelyHeldOrganization and #$LegalCorporation.  Each
            instance of #$PrivatelyHeldCorporation is an incorporated
            business whose stock, if it exists, is not traded publicly
            on any stock exchange. Businesses that are traded publicly
            are instances of #$PubliclyHeldCorporation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrivatelyHeldOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PrivatelyHeldOrganization">
        <rdfs:label xml:lang="en">privately held organization</rdfs:label>
        <rdfs:comment>The collection of all instances of #$Organization
            whose securities or other ownership interests are held by a
            (usually small) group of individuals or entities, and whose
            securities are forbidden by law to be traded among members
            of the general public.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProbabilisticCycLConstant">
        <rdfs:label xml:lang="en">probabilistic cyc l constant</rdfs:label>
        <rdfs:comment>The collection of those Cyc constants
            (individuals, collections, predicates, functions, and
            non-atomic terms) created to enable probabilistic reasoning
            (of various kinds).</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="Probability">
        <rdfs:label xml:lang="en">probability</rdfs:label>
        <rdfs:comment>The collection of all possible probabilities.  A
            #$Probability is the probability value that an assertion is
            true, expressed as a real number between zero (for
            &apos;certainly false&apos;) and one (for &apos;certainly
            true&apos;).  #$Probability is available for probabilistic
            reasoning; see #$ProbabilisticCycLConstant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="ProblemSolvingCntxt">
        <rdfs:label xml:lang="en">psc</rdfs:label>
        <rdfs:comment>The collection of microtheories that are used in
            applications as a means to reason about particular
            situations.  Every original query takes place in some
            #$ProblemSolvingCntxt (as opposed to a #$GeneralMicrotheory)
            which has access --- via the #$genlMt relation --- to other
            relevant microtheories, all the way up to the most general
            one, the #$BaseKB.  A #$ProblemSolvingCntxt is usually
            created temporarily for the problem at hand, and is
            discarded after the problem is dealt with (unlike a
            #$GeneralMicrotheory, which is created for lasting use).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Product">
        <rdfs:label xml:lang="en">#$Product</rdfs:label>
        <rdfs:comment>A collection of temporal things.  Instances of
            #$Product are individual goods, services, investments,
            etc.-- basically anything that is offered (or may be
            exchanged) for money or trade.  Typically, #$Products are
            things that are intended to be sold or used for some kind of
            service in exchange for money at least once in their
            lifetime.  Examples include a Lexus sedan, a package of
            McDonald&apos;s french fries, a massage, a bouquet of
            flowers, a share in a money market fund, the services of a
            real estate agent, a research satellite.  See also #$Artifact.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProductByGenericType">
        <rdfs:label xml:lang="en">generic products</rdfs:label>
        <rdfs:comment>A collection of collections; a subcollection of
            #$ProductType (q.v.).  Instances of #$ProductByGenericType
            are product-types that are not specific to any particular
            #$BrandName.  Examples include #$Computer and #$ToiletPaper.
            Non-examples include #$MacintoshComputer and #$SubaruCar.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
    </owl:Class>
    <owl:Class rdf:ID="ProductStandard">
        <rdfs:label xml:lang="en">product standards</rdfs:label>
        <rdfs:comment>A specialization of #$Specification.  Each
            instance of #$ProductStandard is a precise description
            applied to the instances of a particular instance of
            #$ProductType.  Manufacturers of that product type agree
            explicitly or in practice, or they may obey a government
            requirement, to make product designs following the
            specifications stated in the standard, so that products
            within the type will all have certain features in common.
            For example, telephones and television sets fulfil certain
            product standards.  The resultant interchangeability allows
            compatibility with other devices and products, with public
            utilities, commercial trading expectations, and government
            purchasing requirements.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Specification"/>
    </owl:Class>
    <owl:Class rdf:ID="ProductType">
        <rdfs:label xml:lang="en">#$ProductType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$ProductType is a collection of #$Products (q.v.) -- i.e. a
            kind of substances, objects, or actions -- that are produced
            (or performed) and sold as products.  Examples of
            #$ProductType include #$GiftCertificate, #$HardDiskDrive,
            #$PlasticWrap, and #$ServiceEvent.  Non-examples include
            #$Bread, since not all bread is produced to be sold (think
            home-made ); but its subcollection (#$ProductFn #$Bread) is
            a product-type.  On the other hand, there are some
            microtheoretic contexts whose domain assumptions are such
            that collections whose instances are _commonly_ (but not
            exclusively) sold as products (e.g. #$Bread, #$DairyProduct)
            count as #$ProductTypes in those contexts; #$BuyingMt and
            #$BrandNameProductGMt are two such contexts.  Note that
            #$ProductType is not a subcollection of either #$ObjectType
            or #$StuffType, because some product-types are of one but
            not the other of these kinds (e.g. #$Ketchup is a
            #$StuffType but not an #$ObjectType).  Also note that not
            every conceivable subcollection of #$Product constitutes a
            #$ProductType; only those subcollections that correspond (in
            some broad sense) to categories under which products are
            produced, bought, or sold should be product-types.
            Product-types that are specific to a single #$BrandName
            should be made instances of the specialization
            #$ProductTypeByBrand; those that are specified by both
            #$BrandName and #$ProductVersion should be made instances of
            the even more specialized #$ProductTypeByBrandVersion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="Production-Generic">
        <rdfs:label xml:lang="en">production</rdfs:label>
        <rdfs:comment>The collection of instances of #$CreationEvent,
            each of which is a production event, regardless of whether
            it is a commercial production, a biological production, or
            something that involves both.  The   distinction between
            #$Production-Generic and #$CreationEvent is suble; one   can
            create a mess, but not produce one. More precisely, a
            production event appears to require that the activity be
            directed, in some sense, by a &apos;telos,&apos;s or
            &apos;end&apos; (nym).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProductiveLexicalAffix">
        <rdfs:label xml:lang="en">#$ProductiveLexicalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
    </owl:Class>
    <owl:Class rdf:ID="ProfessionalOffice">
        <rdfs:label xml:lang="en">professional office</rdfs:label>
        <rdfs:comment>#$ProfessionalOffice is a specialization of
            #$SingleSiteLocalOrganizationWithClients.  Each instance of
            #$ProfessionalOffice is an organization located at a single
            site and comprising one or more professionals (physicians,
            dentists, lawyers, accountants, etc.), their support staff,
            and clients.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramArithmeticOperator">
        <rdfs:label xml:lang="en">program arithmetic operator</rdfs:label>
        <rdfs:comment>This is the collection of arithmetical operators
            found in programming languages.  For example, the  ++
            increment operator in the C programming language is arithmetical.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramAssignmentOperator">
        <rdfs:label xml:lang="en">program assignment operator</rdfs:label>
        <rdfs:comment>This is the collection of assignment operators
            found in programming languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramCondition">
        <rdfs:label xml:lang="en">#$ProgramCondition</rdfs:label>
        <rdfs:comment>The collection of all things that are evaluable in
            the current context by the currently running program to be
            either ``true&apos;&apos; or ``false&apos;&apos;.  In Lisp
            this would include any value; any which do not evaluate to
            NIL, being considered ``true&apos;&apos;.  In most unrelated
            computer languages there is a far greater restriction on the
            membership of this collection.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="ProgramConstant">
        <rdfs:label xml:lang="en">program constant</rdfs:label>
        <rdfs:comment>The collection of all constants used in computer programs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramExpression"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramExpression">
        <rdfs:label xml:lang="en">program expression</rdfs:label>
        <rdfs:comment>This is the collection of all      program steps
            that instantiate a value in some sense. For example,
            calling a function that returns a value can be considered an
            expression,     since the value returned can  stand in  for
            the expression in the surrounding     context of the program.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramSyntaxObject"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramFunction">
        <rdfs:label xml:lang="en">#$ProgramFunction</rdfs:label>
        <rdfs:comment>A specialization of #$ProgramStep. This is the
            collections of all named subroutines that can be  used in
            computer programs. This includes operators, functions,
            methods,  procedures, and macros.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramStep"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramIdentifier">
        <rdfs:label xml:lang="en">#$ProgramIdentifier</rdfs:label>
        <rdfs:comment>This is the collection of all identifiers that can
            be found in computer programs. Included are variables, named
            constants, function names, macro names.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramExpression"/>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramLogicalOperator">
        <rdfs:label xml:lang="en">program logical operator</rdfs:label>
        <rdfs:comment>This is the collection of logical operators found
            in programming languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramObject">
        <rdfs:label xml:lang="en">program object</rdfs:label>
        <rdfs:comment>A specialization of #$ComputerAIS. #$ProgramObject
            is the collection of all data structures that are explicitly
            referenced in computer programs. All data types are
            considered to be specializations of this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramOperator">
        <rdfs:label xml:lang="en">program operator</rdfs:label>
        <rdfs:comment>This is the collection of operators found in
            programming languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramFunction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramRelationalOperator">
        <rdfs:label xml:lang="en">program relational operator</rdfs:label>
        <rdfs:comment>This is the collection of relational operators
            found in programming languages.  For example, the  &gt;=
            operator in the C programming language is relational.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramSpecification">
        <rdfs:label xml:lang="en">program specifications</rdfs:label>
        <rdfs:comment>A specialization of #$Specification. Each instance
            of this collection is not a computer program itself (i.e.
            lines of code), but an abstract characterization of how a
            program should behave.  For instance, a sorting program can
            be specified by requiring that the program&apos;s output be
            a list of the same elements as the input such that no
            element follows an element that is greater than it. A
            notable example of a #$ProgramSpecification is UNIX - which
            is not (contrary to popular belief) an operating system per
            se, but a specification to which many different operating
            systems (instances of #$UnixOS) conform. Note that instances
            of #$ProgramSpecification do not necessarily specify single,
            discrete programs -- thus many of the internet&apos;s  RFC
            protocol-establishing documents (see
            #$RequestForComments-Internet) fall into this collection. An
            important specialization of this collection is #$AbstractProgrammingLanguage.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Specification"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramStep">
        <rdfs:label xml:lang="en">#$ProgramStep</rdfs:label>
        <rdfs:comment>The collection of all linear steps that are part
            of some piece of software [#$SoftwareObject].
            Instantiations of each #$ProgramStep operate as a serial
            process, although instantiations of multiple program steps
            for the same program may run in parallel or asynchronously.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SoftwareObject-Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramStepSequence">
        <rdfs:label xml:lang="en">program step sequence</rdfs:label>
        <rdfs:comment>A linear series of program steps that can be
            considered as a program step in its own right.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramStep"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramSyntaxObject">
        <rdfs:label xml:lang="en">#$ProgramSyntaxObject</rdfs:label>
        <rdfs:comment>The collection of all  chunks  of computer code
            which have independent meaning to a programmer cognizant of
            the language in which they are written.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ComputerCode-Source"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgramVariable">
        <rdfs:label xml:lang="en">program variable</rdfs:label>
        <rdfs:comment>The collection of all variables used in computer programs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramExpression"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProgrammingAComputer">
        <rdfs:label xml:lang="en">#$ProgrammingAComputer</rdfs:label>
        <rdfs:comment>A specialization of #$IBTGeneration-Original. Each
            instance of this collection is an event in which some
            #$Agent programs some #$Computer by physically typing a copy
            of the program into it. For particularly clever or expert
            programming feats, see #$Hacking. See also
            #$WritingAComputerProgram -- the collection of events in
            which some #$Agent creates a #$ComputerProgram-CW (of course
            many instances of #$WritingAComputerProgram will also be
            instances of #$ProgrammingAComputer).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#UsingADevice"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration-Original"/>
        <rdfs:subClassOf rdf:resource="#ComputerActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProjectileLauncher">
        <rdfs:label xml:lang="en">projectile launcher</rdfs:label>
        <rdfs:comment>#$ProjectileLauncher is a specialization of
            #$Conveyance-Stationary and #$PoweredDevice.  Each instance
            of #$ProjectileLauncher is a physical device used to launch
            a #$Projectile-Device. A few notable specializations are
            #$Slingshots, #$Guns, and #$MissileLaunchers. The launcher
            and projectile start out at the same location, possibly even
            as parts of the same object, but once the projectile is
            fired it leaves the launcher. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conveyance-Stationary"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProjectileMotion">
        <rdfs:label xml:lang="en">projectile motion</rdfs:label>
        <rdfs:comment>A specialization of #$Movement-TranslationEvent.
            Each instance of #$ProjectileMotion is a movement event in
            which no forces other than gravity are acting on the moving
            object. Notable specializations of #$ProjectileMotion
            include #$FallingProcess and #$TumblingMotion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProkaryoticCell">
        <rdfs:label xml:lang="en">prokaryotic organisms</rdfs:label>
        <rdfs:comment>A specialization of #$SingleCellOrganism.  Each
            instance of #$ProkaryoticCell is a single-celled organism
            that lacks both a  nucleus and mitochondria. Notable
            specializations of #$ProkaryoticCell include #$Bacterium,
            #$MoneraKingdom, and #$BlueGreenAlgae.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SingleCellOrganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pronoun">
        <rdfs:label xml:lang="en">pronouns</rdfs:label>
        <rdfs:comment>The collection of all pronouns. Pronouns are
            indexicals which can replace nouns. Example: `she&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperCountNoun">
        <rdfs:label xml:lang="en">#$ProperCountNoun</rdfs:label>
        <rdfs:comment>The collection of all proper count nouns. Proper
            nouns are usually capitalized, and they usually denote some
            particular person, place, or thing.  Many proper nouns
            cannot be preceded by a determiner, and many have no plural
            form.  Example: `Dallas&apos;.  Although one might think
            that names for languages e.g. ``Cherokee&apos;&apos; are
            #$ProperCountNouns, they are actually #$MassNouns.  One test
            is to see if you can ``too much X&apos;&apos; or ``a lot of
            X&apos;&apos; without a distinct plural form.  For example
            ``too much Crest&apos;&apos; vs *``too much
            Q-tips&apos;&apos; and ``a lot of Coke&apos;&apos; vs *``a
            lot of Q-tip&apos;&apos; suggest that ``crest&apos;&apos;
            and ``coke&apos;&apos; are mass nouns, whereas
            ``Q-tip&apos;&apos; is a count noun.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CountNoun-Generic"/>
        <rdfs:subClassOf rdf:resource="#ProperNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperMassNoun">
        <rdfs:label xml:lang="en">#$ProperMassNoun</rdfs:label>
        <rdfs:comment>The collection of all proper mass nouns. Proper
            mass nouns are usually capitalized.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MassNoun-Generic"/>
        <rdfs:subClassOf rdf:resource="#ProperNoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNamePredicate-ExcludedFromNPParser">
        <rdfs:label xml:lang="en">proper name predicates that is
            excluded from the NP parser</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProperNamePredicate-General"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNamePredicate-General">
        <rdfs:label xml:lang="en">general proper name predicates</rdfs:label>
        <rdfs:comment>Elements of #$ProperNamePredicate-General are all
            the lexical predicates that can be used to register the
            information that a certain STRING is (one of the) name(s) of
            a certain FORT. This includes members of both
            #$ProperNamePredicate-Strict and #$ProperNamePredicate-Loose.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StringIndexingSlot"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNamePredicate-Loose">
        <rdfs:label xml:lang="en">loose proper name predicates</rdfs:label>
        <rdfs:comment>Instances of #$ProperNamePredicate-Loose are all
            the lexical predicates that can be used for the purpose of
            temporarily and rapidly registering the information that a
            certain STRING is (one of the) name(s) for a certain FORT.
            The salient feature of the predicates that are instances of
            #$ProperNamePredicate-Loose is that assertions made using
            those predicates are not guaranteed to contain all the
            grammatical information that would be necessary to handle
            morphological variants of the strings that appear in those
            assertions. For example, such assertions would not contain
            information on whether the STRING argument, can or cannot be
            pluralized when referring to the FORT argument. A
            prototypical example of such a predicate would be
            #$termStrings. Compare to #$ProperNamePredicate-Strict.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProperNamePredicate-ExcludedFromNPParser"/>
        <rdfs:subClassOf rdf:resource="#ProperNamePredicate-General"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNamePredicate-Strict">
        <rdfs:label xml:lang="en">strict proper name predicates</rdfs:label>
        <rdfs:comment>Elements of #$ProperNamePredicate-Strict are all
            the lexical predicates that can be used to register the
            information that a certain STRING is (one of the) name(s) of
            a certain FORT. This only includes predicates that are used
            for permanent and thorough lexification. Assertions using
            predicates that are members of this collection contain all
            the grammatical information that is necessary to deal with
            issues such as pluralization. Compare to #$ProperNamePredicate-Loose.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProperNamePredicate-General"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNameString">
        <rdfs:label xml:lang="en">names</rdfs:label>
        <rdfs:comment>A specialization of #$IDString. Each instance of
            this collection is a proper name considered as a character
            string. Instances of #$ProperNameString include city names
            (e.g.  Dallas ), person names (e.g.  Douglas  -- see
            #$HumanNameString), brand names (e.g.  Jello  -- see
            #$BrandName), company names (e.g.  Apple ), book titles,
            etc. Note that it is also possible to consider proper names
            not as character strings but as instances of #$LexicalWord
            -- for that, see #$Name and its specializations (and see
            #$nameSpelling to relate the two).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProperNoun">
        <rdfs:label xml:lang="en">#$ProperNoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all proper nouns.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Noun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Proposal">
        <rdfs:label xml:lang="en">#$Proposal</rdfs:label>
        <rdfs:comment>A specialization of both #$SupposedToBeMicrotheory
            and #$IntangibleExistingThing.  Each instance of #$Proposal
            is a potential agreement in the &apos;proposal&apos; stage
            -- i.e., a potential agreement which is under consideration
            but which has not yet been adopted.  The making and
            consideration of #$Proposals is an important part of such
            activities as #$Negotiating and legislative #$Debate
            (qq.v.).  Examples of #$Proposals include instances of
            #$BidOnSale, job offers, proposed codes of conduct
            (including proposals for new #$Laws), and proposed punishments.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="ProposedPublicConstant">
        <rdfs:label xml:lang="en">proposed public constant</rdfs:label>
        <rdfs:comment>The collection of all constants proposed for
            inclusion in the first release of OpenCyc.  See its
            specializations for proposed public constants for which
            particular kinds of preparatory review and clean-up work has
            been done.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="ProposedPublicConstant-CommentOK">
        <rdfs:label xml:lang="en">proposed public constant - comment o k</rdfs:label>
        <rdfs:comment>The collection of all CycL constants proposed for
            inclusion in the first release of OpenCyc and whose comments
            have been reviewed (and possibly edited) and deemed
            acceptable.  For constants that are already public and have
            had their comments reviewed, see #$PublicConstant-CommentOK.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProposedPublicConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="ProposedPublicConstant-DefinitionalGAFsOK">
        <rdfs:label xml:lang="en">proposed public constant -
            definitional g a fs o k</rdfs:label>
        <rdfs:comment>The collection of all constants proposed for
            inclusion in the first release of OpenCyc and whose
            definitional GAFs (roughly, those in which the proposed
            public constant appears in the arg1 position, and which are
            not lexical or about things internal to the Cyc system
            itself) have been reviewed (and possibly edited) and deemed acceptable.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProposedPublicConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="ProposedPublicConstant-NL">
        <rdfs:label xml:lang="en">proposed public constant - n l</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProposedPublicConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="Proposition">
        <rdfs:label xml:lang="en">#$Proposition</rdfs:label>
        <rdfs:comment>A collection of intangible individuals.  Each
            instance of #$Proposition is an abstract propositional thing
            that has some truth value in some context or world.  A
            proposition is assumed to be representable (at least in
            principle) by a sentence in some formal or natural language.
            But it should _not_ be assumed that propositions are
            themselves intrinsically linguistic items in the way that
            sentences or formulae are.  Indeed, propositions are often
            viewed as extra-linguistic, intensional entities that (while
            not sentences themselves) are represented or expressed by
            meaningful sentences (or, on some versions of this view, by
            concrete tokens of sentences).  On such a view it is
            possible for distinct sentences (either from the same
            language or from different languages) to express the very
            same proposition; e.g. &apos;Snow is white.&apos;,
            &apos;White is the color of snow.&apos;, &apos;Schnee ist
            weiss.&apos; (in German), and (arguably)
            &apos;(#$relationAllInstance #$objectHasColor #$SnowMob
            #$WhiteColor)&apos; (in CycL).  Similarly, it is sometimes
            the case that a single sentence -- when used in different
            contexts -- will express distinct propositions; e.g. &apos;I
            am hungry.&apos; said by you and said by me.  Most formal
            languages (such as a first-order predicate calculus) and
            natural languages (such as English) include the resources
            for composing expressions that represent propositions from
            component expressions (that might or might not themselves
            represent other propositions).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Information-Content"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PropositionPredicate">
        <rdfs:label xml:lang="en">proposition predicate</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to make
            statements that are in part about the proposition expressed
            by a given sentence. As such, each instance of
            #$PropositionPredicate has at least one argument place
            constrained (see #$argIsa) to instances of
            #$ELSentence-Assertible, and is such that the meaning of the
            predicate depends on the proposition (see #$Proposition)
            expressed by the sentence (as opposed to the sentence&apos;s
            syntactic form or truth-value).  Instances of this
            collection include #$causes-SitProp and #$alleged.  An
            important specialization is #$PropositionalAttitudeSlot (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PropositionalAttitudeSlot">
        <rdfs:label xml:lang="en">#$PropositionalAttitudeSlot</rdfs:label>
        <rdfs:comment>An instance of #$PredicateCategory.  Each instance
            of #$PropositionalAttitudeSlot is a binary predicate
            relating an agent to a proposition to which the agent bears
            a certain propositional attitude (e.g., belief, doubt, or
            knowledge).  The first argument place of each
            #$PropositionalAttitudeSlot is constrained to instances of
            #$Agent-Generic, while the second argument place is
            constrained to instances of #$ELSentence-Assertible.
            Instances of #$PropositionalAttitudeSlot include #$goals,
            #$beliefs, #$knows, and #$expects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionPredicate"/>
        <rdfs:subClassOf rdf:resource="#MentalSlot"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="PropositionalConceptualWork">
        <rdfs:label xml:lang="en">written works</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork. Each
            instance of #$PropositionalConceptualWork is an abstract
            work constituted at least in part by propositional
            information.  Propositional information is information which
            has a truth value in some context (see #$Proposition).
            Typically, instances of #$PropositionalConceptualWork will
            be works whose instantiations are comprised of (or merely
            contain) one or more spoken or written sentences. Positive
            examples of #$PropositionalConceptualWork include any
            instances of #$ProseLiteraryWork-CW (including instances of
            #$AcademicEssay and #$ExpositoryArticle).  A positive
            example that is not a literary work is any instance of
            #$MusicalComposition that has lyrics which express
            propositions; another positive example is a mostly graphical
            advertisement that also includes text which expresses propositions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PropositionalInformationThing">
        <rdfs:label xml:lang="en">pit (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationStore and
            #$Microtheory.  Each instance of
            #$PropositionalInformationThing (or  PIT ) is an abstract
            object -- a chunk of information consisting of one or more
            propositions.  The propositional content of a PIT is not
            essentially encoded in any particular language, and it may
            be representable in many languages.  PITs are used to
            represent the informational contents of
            #$InformationBearingThings.  Objects or events which are
            instances of #$InformationBearingThing are linked to the
            abstract PIT contents they embody using the predicate
            #$containsInformation (see also the function #$PITOfIBTFn).
            An instance of #$PropositionalInformationThing may be
            something as simple as the information content of a command
            to stop one&apos;s vehicle, expressed in a road sign or in a
            traffic officer&apos;s gesture, or it may be something as
            complex as the entire contemporary knowledge of
            #$Mathematics, embodied in many and various sources.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="ProtectiveAttire">
        <rdfs:label xml:lang="en">protective clothes</rdfs:label>
        <rdfs:comment>#$ProtectiveAttire is a specialization of
            #$SomethingToWear.  Each instance of #$ProtectiveAttire is
            something to wear that is designed to protect its wearer
            from the elements or from injury.  Notable specializations
            of #$ProtectiveAttire include the collections #$SnowGoggles,
            #$SurgicalGlove, #$WeldingMask, #$Helmet, #$BoxingHeadGear,
            #$FaceMaskForCatcher, #$FirefightersCoat, #$RainGear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SomethingToWear"/>
        <rdfs:subClassOf rdf:resource="#Covering-Object"/>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#DefenseSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProtectiveSystem">
        <rdfs:label xml:lang="en">protective systems</rdfs:label>
        <rdfs:comment>#$ProtectiveSystem is the collection of objects
            that are supposed to prevent damage. Instances of
            #$ProtectiveSystem will either lower something&apos;s
            vulnerability or lower the #$DegreeOfDamage it incurs in a
            situation.  Also, instances of #$ProtectiveSystem can either
            be part of the object protected or distinct from it.  This
            collection includes both natural systems (e.g., turtle
            shells and cacti thistles) as well as intentionally designed
            systems (e.g., shields and barricades).  To refer to the
            latter specifically, use #$DefenseSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ProtistaKingdom">
        <rdfs:label xml:lang="en">Protista</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalKingdom and a
            specialization of #$EukaryoticOrganism.  Each instance of
            #$ProtistaKingdom is a eukaryotic organism that is _not_ a
            plant, animal, or fungus.  All unicellular eukaryotic
            organisms are instances of #$ProtistaKingdom, although not
            all instances of #$ProtistaKingdom are unicellular
            organisms.  Notable specializations of #$ProtistaKingdom
            include #$Protozoan, #$SlimeMold, and #$Algae-LikeProtist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EukaryoticOrganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Proton">
        <rdfs:label xml:lang="en">protons</rdfs:label>
        <rdfs:comment>A specialization of #$Nucleon.  Each instance of
            #$Proton is a nucleon which has an #$ElectricalCharge of +1.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Nucleon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Protozoan">
        <rdfs:label xml:lang="en">protozoa</rdfs:label>
        <rdfs:comment>The collection of protozoa; a subcollection of
            #$SingleCellOrganism.  Instances of #$Protozoan are also
            instances of #$EukaryoticCell.  Subcollections include
            #$Amoeba and many others.  Protozoa lack cell walls made of
            cellulose.  Many protozoa are motile, using pseudopoda,
            cilia, or flagella to move.  Some cause diseases in larger
            organisms.  The class #$Protozoan is an instance of
            #$BiologicalSubkingdom in many classification systems,
            sometimes placed under the #$ProtistaKingdom.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SingleCellOrganism"/>
        <rdfs:subClassOf rdf:resource="#EukaryoticCell"/>
        <rdfs:subClassOf rdf:resource="#ProtistaKingdom"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Protrusion">
        <rdfs:label xml:lang="en">#$Protrusion</rdfs:label>
        <rdfs:comment>The collection of all outcroppings which stick out
            from other objects.  Instances of this collection are all
            #$externalParts of some large object.  Examples of subsets
            of this collection are #$Mountains and #$Tail-BodyParts</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Proud">
        <rdfs:label xml:lang="en">agents who is proud</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being proud.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PsychologicalAilment">
        <rdfs:label xml:lang="en">psychological disorders</rdfs:label>
        <rdfs:comment>The collection of ailments that are classified as
            psychological due to their origin and/or manifestation in
            the mind of the sufferer rather than (or at least in
            addition to, and perhaps causing) manifestations in the
            sufferer&apos;s body. Having a brain tumor is not an
            instance of this collection, but imagining that you have one
            is an instance of #$PsychologicalAilment , and so is the
            deep case of depression you fall into once you believe
            (rightly or wrongly) that you have a brain tumor. Some
            subcollections of this collection are the collections
            #$Phobia, #$Depression-PsychologicalCondition, and #$PanicAttack.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PublicConstant">
        <rdfs:label xml:lang="en">public constant</rdfs:label>
        <rdfs:comment>The collection of CycL constants that   are
            included in the public release of Cyc, OpenCyc.  Instances
            of   #$PublicConstant include all constants that denote
            things in the  so-called Upper Cyc Ontology, along with some
            constants that   denote things in the Middle and Lower Cyc Ontologies.</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="PublicConstant-CommentOK">
        <rdfs:label xml:lang="en">public constant - comment o k</rdfs:label>
        <rdfs:comment>The collection of all existing #$PublicConstants
            whose comments have been reviewed (and possibly edited) and
            deemed acceptable for release as part of OpenCyc.  Note that
            #$PublicConstant-CommentOK is _not_ asserted to be a
            specialization of #$PublicConstant; so asserting that a
            given thing is an instance of the former  does not render
            the assertion that the thing is an instance of the latter redundant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="PublicConstant-DefinitionalGAFsOK">
        <rdfs:label xml:lang="en">public constant - definitional g a fs
            o k</rdfs:label>
        <rdfs:comment>The collection of all #$PublicConstants whose
            definitional GAFs  (see #$OpenCycDefinitionalPredicate) have
            been reviewed, edited if necessary, and deemed acceptable
            for public release as part of OpenCyc.  Note that
            #$PublicConstant-DefinitionalGAFsOK is _not_ asserted to be
            a specialization of #$PublicConstant; so asserting that a
            given thing is an instance of the former  does not render
            the assertion that the thing is an instance of the latter redundant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="PublicEvent">
        <rdfs:label xml:lang="en">#$PublicEvent</rdfs:label>
        <rdfs:comment>The collection of #$Events which occur in front
            of, or in the contemporaneous awareness of, a large number
            of #$Persons -- #$ThePublic.  Usually these are intended to
            be public events, such as the Olympics, a public beheading, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PublicOfficial">
        <rdfs:label xml:lang="en">public officials</rdfs:label>
        <rdfs:comment>A subcollection of #$PublicSectorEmployee and an
            instance of #$PersonTypeByPositionInOrg.  Each instance of
            #$PublicOfficial is a person who holds a position that is
            directly involved with some aspect of governing a country
            (or subregion of a country).  Many public offices in
            democratically governed countries are filled by election;
            some are filled by appointment.  In other countries, public
            offices are sometimes filled by succession or by military
            decree.  Note that public offices are represented in Cyc in
            terms of the collections of officials who hold those offices
            (e.g. #$Mayor and #$UnitedStatesPresident) together with
            axioms describing the responsibilities  those offices entail.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PublicSectorEmployee">
        <rdfs:label xml:lang="en">public sector employees</rdfs:label>
        <rdfs:comment>A specialization of #$Professional-Adult and
            #$Employee.  Each instance of #$PublicSectorEmployee is a
            person employed by a local, state (or provincial), or
            national government.  This collection includes those who are
            employed directly in government administration (for example,
            elected and appointed officials, tax officers, and police
            and military personnel) as well as those who are employed in
            support services wholly funded by the government (for
            example, postal employees, public school teachers,
            firefighters, and unionized government workers).  Although
            numerous subcollections of #$PublicSectorEmployee constitute
            instances of #$PersonTypeByOccupation (q.v.), work in the
            public sector displays too much variation for
            #$PublicSectorEmployee to be considered an occupation-type
            in its own right.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PublicTransportationDevice">
        <rdfs:label xml:lang="en">public transportation device</rdfs:label>
        <rdfs:comment>#$PublicTransportationDevice is a specialization
            of #$TransportationDevice-Vehicle and
            #$HumanlyOccupiedSpatialObject.  Each instance of
            #$PublicTransportationDevice is a vehicle used for mass
            public transportation. Examples include  #$Bus-RoadVehicle,
            #$Train-TransportationDevice, #$Ferry. #$TaxiCab is  a non example.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PubliclyHeldCorporation">
        <rdfs:label xml:lang="en">#$PubliclyHeldCorporation</rdfs:label>
        <rdfs:comment>A specialization of both #$Business and
            #$LegalCorporation.  Each instance of
            #$PubliclyHeldCorporation is an incorporated business whose
            stock (see the collection #$Stock) is traded publicly on
            some stock exchange or other public securities market.
            Businesses that are not traded publicly are instances of
            #$PrivatelyHeldCorporation (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PubliclyHeldOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
    </owl:Class>
    <owl:Class rdf:ID="PubliclyHeldOrganization">
        <rdfs:label xml:lang="en">publicly held organization</rdfs:label>
        <rdfs:comment>The collection of all #$CommercialOrganizations
            whose securities or other ownership interests are freely
            tradable among members of the general public, usually on an
            instance of #$FinancialExchange.  In the
            #$UnitedStatesOfAmerica, instances of
            #$PubliclyHeldOrganizations are usually either
            #$LegalCorporations or #$LimitedPartnerships.  Each instance
            of #$PubliclyHeldOrganization in the #$UnitedStatesOfAmerica
            must be registered with the
            #$SecuritiesAndExchangeCommission under the Securities
            Exchange Act of 1934 and is regulated by the #$SecuritiesAndExchangeCommission.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PublishedMaterial">
        <rdfs:label xml:lang="en">publications (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$InformationStore.  Each
            instance of #$PublishedMaterial is either a conceptual work
            (an instance of #$ConceptualWork) with instantiations which
            have been produced for distribution, or an
            information-bearing thing (an instance of
            #$InformationBearingThing) which has been produced for
            distribution.  Note that  published  here does not mean
            printed and physically distributed , since intangible
            information-bearing things can be published using the
            #$WorldWideWeb-Concrete, or broadcast on the airwaves.
            Notable specializations of #$PublishedMaterial include
            #$Book-CW, #$RecordedVideoProduct, and #$RecordedSoundProduct.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PulverizationEvent">
        <rdfs:label xml:lang="en">#$PulverizationEvent</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalDestructionEvent.
            In each instance of #$PulverizationEvent, some instance of
            #$SolidTangibleThing is reduced to a large number of small
            particles (see the collection #$Particle) through the
            application of a force.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Pump-Generic">
        <rdfs:label xml:lang="en">pumps</rdfs:label>
        <rdfs:comment>A specialization of #$SolidTangibleThing.  Each
            instance of  #$Pump-Generic is a natural or mechanical pump,
            and is thus capable (see the predicate #$behaviorCapable) of
            pumping fluid from one spatial region to another.  Notable
            specializations of #$Pump-Generic include #$Heart,
            #$GasolinePump, and #$OilPump.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Punctuation-SP">
        <rdfs:label xml:lang="en">#$Punctuation-SP</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all punctuation marks. Example: &apos;?&apos;
            or &apos;,&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PureSubstance">
        <rdfs:label xml:lang="en">#$PureSubstance</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs. Each instance of
            #$PureSubstance is a chemically pure portion of stuff
            belonging to some particular #$ChemicalSubstanceType (e.g.
            #$Water or #$Cellulose). `Chemically pure&apos; applies to a
            piece of stuff which has no sub-portions that fail to
            conform to the chemical composition of its (single)
            #$ChemicalSubstanceType. In typical contexts, most common
            portions of a #$ChemicalSubstanceType will not be instances
            of #$PureSubstance . For example, a piece of pencil lead,
            though mostly carbon, will not be an instance since it is
            not pure carbon and any portion of ordinary tap water will
            contain too many impurities. Many sub-portions of either a
            piece of pencil lead or portion of tap water will fail to
            conform to the chemical composition of either carbon or
            water. Some instances of #$ChemicalSubstanceType are
            subcollections of #$PureSubstance in most contexts but not
            in all. In typical domestic contexts, for example, a piece
            of ordinary distilled water would be an instance of
            #$PureSubstance . However, in a clean room or microchip
            manufacturing context, ordinary distilled water would
            probably be considerd impure (see #$ImpureCompound). In
            general, to refer to a pure instance of a substance one can
            use the function #$PureFn, e.g. (#$PureFn #$Carbon). Note
            that #$PureFn has #$PureSubstance as a #$resultGenl . Since
            this kind of purity is relative to specified chemical
            composition only, #$PureSubstance (and #$PureFn) does not
            pertain to mixtures in Cyc (such as #$Air). Cf. #$Mixture,
            #$ChemicalSubstanceType. See also #$PureSubstanceType and #$ImpureCompound.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PureSubstanceType">
        <rdfs:label xml:lang="en">#$PureSubstanceType</rdfs:label>
        <rdfs:comment>An instance of #$SecondOrderCollection.  Each
            instance of #$PureSubstanceType is both a specialization of
            #$PureSubstance (q.v.) and a specialization of some instance
            of #$ChemicalSubstanceType (q.v.).  Each instance of
            #$PureSubstanceType is characterized by the properties of
            the instance of #$ChemicalSubstanceType of which it is a
            specialization, and by the fact that each of its instances
            is chemically pure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TangibleStuffCompositionType"/>
    </owl:Class>
    <owl:Class rdf:ID="PurposefulAction">
        <rdfs:label xml:lang="en">intentional actions</rdfs:label>
        <rdfs:comment>A specialization of both #$Action and
            #$AtLeastPartiallyMentalEvent.  Each instance of
            #$PurposefulAction is an action consciously, volitionally,
            and purposefully done by (see #$performedBy) at least one actor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PurposefulMentalActivity">
        <rdfs:label xml:lang="en">purposeful mental activities</rdfs:label>
        <rdfs:comment>A subcollection of #$StrictlyMentalEvent, i.e.,
            those involving intentional mental activity on the part of
            at least one performer (see #$performedBy).    Solving a
            math problem, planning an attack, performing a thought
            experiment are all examples of #$PurposefulMentalActivity.
            However, daydreaming or having undesired obsessive thoughts
            are not examples.  A borderline example might be arriving at
            the solution to a math problem in one&apos;s sleep after
            intentionally working on the problem during the previous day.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntentionalMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#StrictlyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PurposefulPhysicalAction">
        <rdfs:label xml:lang="en">purposeful composite physical and
            mental activities</rdfs:label>
        <rdfs:comment>The collection of
            #$CompositePhysicalAndMentalEvents that are performed
            purposively (see #$performedBy).  This collection is the
            collection-intersection of #$PurposefulAction and
            #$CompositePhysicalAndMentalEvent.  Since each instance of
            #$PurposefulPhysicalAction is also an instance of
            #$CompositePhysicalAndMentalEvent, each instance has both a
            mental and a physical component. Driving a car would be an
            instance of #$PurposefulPhysicalAction since it involves
            mental and physical functioning on the part of the
            performing agent and is done purposively.  Crashing a car,
            conversely, would not normally be an instance (unless the
            driver purposefully caused the crash).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PuttingOnAClothingItem">
        <rdfs:label xml:lang="en">#$PuttingOnAClothingItem</rdfs:label>
        <rdfs:comment>A specialization of #$HumanActivity.  Each
            instance of #$PuttingOnAClothingItem is an event in which
            some wearable item is donned.  Such an event may be
            performed either by the wearer or by someone else (e.g.,
            putting on a horse&apos;s bridle or a child&apos;s mittens).
            After an instance of #$PuttingOnAClothingItem occurs, there
            exists an instance of #$WearingSomething (q.v.); namely, the
            situation in which the item donned is #$wornOn the body of
            the wearer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConcealingFromSight"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PuttingSomethingSomewhere">
        <rdfs:label xml:lang="en">#$PuttingSomethingSomewhere</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$PuttingSomethingSomewhere is an event in which an #$Agent
            guides a moving object to a new location.  This #$Agent is
            often, but not always, the #$providerOfMotiveForce in the
            event.  The #$Agent, or some instrument under its control,
            must accompany the #$objectMoving along its
            #$motionPathway-Complete.  For example, someone lifting a
            crate, or steering a car, and placing it in some location
            (e.g., a garage), carries out an instance of
            #$PuttingSomethingSomewhere.  The #$providerOfMotiveForce
            and the #$objectMoving (the focal object moving) must be distinct.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#GuidingAMovingObject"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="PyramidShape">
        <rdfs:label xml:lang="en">pyramid shape</rdfs:label>
        <rdfs:comment>A specializationt of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$PyramidShape is a three-dimensional object having a
            polygon as its base, and having triangles as its other
            faces. Examples include spatially localized objects, such as
            the pyramids of Egypt, as well as abstract pyramids.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon3DShaped"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Quadrilateral">
        <rdfs:label xml:lang="en">quadrilateral</rdfs:label>
        <rdfs:comment>The collection of all four-sided    #$Polygons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Qualifier">
        <rdfs:label xml:lang="en">qualifier</rdfs:label>
        <rdfs:comment>A collection of attribute values.  General
            concepts such as security or influence have more specific
            subconcepts (e.g., influence of Iran in OPEC) which result
            from delimiting aspects of the concept in specific ways (of
            Iran, in OPEC).  #$Qualifier is a collection of such ways.
            For instance, (#$OfFn #$Iran) and (#$InFn #$OPEC) are
            #$Qualifiers, by means of which the concept of Iranian
            influence in OPEC can be expressed: (#$InfluenceFn (#$OfFn
            #$Iran) (#$InFn #$OPEC)).  As the preceding indicates, in
            CycL a #$Qualifier is often denoted by a non-atomic term
            using a #$QualifyingFunction (q.v.).  In addition to
            delimiting concepts such as the #$SocialOrEconomicAttributes
            mentioned above, #$Qualifiers can also be used to specify
            specializations (subcollections) of a given collection by
            means of the function #$CollectionQualificationFn.  For
            example, the collection of events in which Iranian influence
            in OPEC increases can be denoted by qualifying the very
            broad collection #$IncreaseEvent:
            (#$CollectionQualificationFn #$IncreaseEvent (#$OfFn
            (#$InfluenceFn (#$OfFn #$Iran) (#$InFn #$OPEC)))).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="QualitativeTimeOfDay">
        <rdfs:label xml:lang="en">times of day</rdfs:label>
        <rdfs:comment>A specialization of #$RegularlyRepeatedEvent. Each
            instance of #$QualitativeTimeOfDay is a celestial event such
            as a dawn (see #$Dawn), a morning (see #$Morning), an
            evening (see #$Evening), etc.  On #$PlanetEarth, qualitative
            times of day are synchronized with the rotation of the earth
            about its axis, but the absolute timing of qualitative times
            of day depends upon such factors as the season and the
            observer&apos;s location on the planet&apos;s surface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>

        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Quantifier">
        <rdfs:label xml:lang="en">quantifier</rdfs:label>
        <rdfs:comment>A collection of mathematical objects.  Each
            instance of #$Quantifier represents a relationship between a
            variable and a formula.  In Cyc, a quantifier binds the
            variable found in its first argument within the formula that
            appears as its second argument.  Instances of #$Quantifier
            in CycL include #$forAll, #$thereExists,
            #$thereExistExactly, #$thereExistAtLeast, #$thereExistAtMost.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScopingRelation"/>
        <rdfs:subClassOf rdf:resource="#SententialRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="Quantifier-SP">
        <rdfs:label xml:lang="en">quantifier - s p</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all quantifying words. Quantifiers can modify
            nouns. Example: &apos;most&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="QuantifyingIndexical">
        <rdfs:label xml:lang="en">#$QuantifyingIndexical</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all inherently quantified indexicals. Example: &apos;everything&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="QuantitySlot">
        <rdfs:label xml:lang="en">quantity slot</rdfs:label>
        <rdfs:comment>A specialization of #$BinaryAttributePredicate.
            Each instance of #$QuantitySlot is a binary predicate that
            relates a thing to some quantity.  In many, but not all,
            cases the quantity in question will be a measure of some
            dimension -- e.g. mass, volume, or area -- of the thing to
            which it is related by the #$QuantitySlot.  The second
            argument place of each #$QuantitySlot is constrained to
            instances of #$ScalarInterval.  Instances of #$QuantitySlot
            include #$moneyTransferred, #$freezingPoint, #$massOfObject,
            and #$areaOfObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryAttributePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="QuasiOrdering">
        <rdfs:label xml:lang="en">quasi-orderings</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is a reflexive and transitive relation on the #$baseSet S
            of ORDER, i.e., for each X in S, R(X X) holds, and for each
            X, Y and Z in S, if R(X Y) and R(Y Z) then R(X Z).  For
            example, if you take the set of all people in the states
            today, and take the relation &apos;__ is at least as tall as
            ...&apos; (i.e., either __ is as tall as ...  or __ is
            taller than ...) on this set, you get a #$QuasiOrdering
            because this relation is reflexive and transitive on the set
            of all people in the states today.  Note that the
            #$QuasiOrdering in this example is neither a
            #$PartialOrdering nor a #$PartialOrdering-Strict.
            Subcollections of #$QuasiOrdering include #$PartialOrdering,
            #$TreeOrdering, #$TotalOrdering and #$Lattice-LatticeTheoretic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="QuaternaryFunction">
        <rdfs:label xml:lang="en">#$QuaternaryFunction</rdfs:label>
        <rdfs:comment>A specialization of both #$FixedArityFunction and
            #$QuaternaryRelation (qq.v.).  Each instance of
            #$QuaternaryFunction is a function that always takes four
            arguments at a time, i.e. has the arity (see #$arity) 4.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#QuaternaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="QuaternaryPredicate">
        <rdfs:label xml:lang="en">#$QuaternaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$QuaternaryRelation and
            #$Predicate.   #$QuaternaryPredicate is the collection of
            all predicates whose arity (see #$arity) is 4.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#QuaternaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="QuaternaryRelation">
        <rdfs:label xml:lang="en">#$QuaternaryRelation</rdfs:label>
        <rdfs:comment>The collection of all fixed-arity relations of
            arity 4 (see #$arity).  The most notable specializations of
            #$QuaternaryRelation are #$QuaternaryPredicate and
            #$QuaternaryFunction (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="QuintaryFunction">
        <rdfs:label xml:lang="en">#$QuintaryFunction</rdfs:label>
        <rdfs:comment>A specialization of both #$QuintaryRelation and
            #$Function-Denotational. An instance of
            #$Function-Denotational FUNC is an instance of
            #$QuintaryFunction if and only if FUNC has an #$arity of 5.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#QuintaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="QuintaryPredicate">
        <rdfs:label xml:lang="en">#$QuintaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$Predicate and
            #$QuintaryRelation.  #$QuintaryPredicate is the collection
            of all predicates whose arity (see #$arity) is 5.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QuintaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="QuintaryRelation">
        <rdfs:label xml:lang="en">#$QuintaryRelation</rdfs:label>
        <rdfs:comment>The collection of all fixed-arity relations of
            arity 5 (see #$arity).  The most notable specializations of
            #$QuintaryRelation are #$QuintaryPredicate and
            #$QuintaryFunction (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="RadiallySymmetricObject">
        <rdfs:label xml:lang="en">radially symmetric object</rdfs:label>
        <rdfs:comment>The collection of objects which are radially
            symmetric, such as wheels, starfish, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RadioWave">
        <rdfs:label xml:lang="en">radio waves</rdfs:label>
        <rdfs:comment>A specialization of #$ElectromagneticRadiation.
            Each instance of #$RadioWave is an instance of
            electromagnetic radiation having a wavelength in the range
            from approximately 1 centimeter (1x10^8 #$Angstrom) to
            3,000,000 meters (3x10^18 #$Angstrom), and a frequency of
            approximately 10^8 #$Hertz to 10^2 #$Hertz.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RailroadStation-Physical">
        <rdfs:label xml:lang="en">railroad station - physical</rdfs:label>
        <rdfs:comment>A specialization of both #$Building and
            #$TransportFacility.  Each instance of
            #$RailroadStation-Physical is a building located near
            railroad tracks whose primary purpose is to be a place where
            trains discharge and receive passengers (and possibly freight).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Railway">
        <rdfs:label xml:lang="en">#$Railway</rdfs:label>
        <rdfs:comment>#$Railway is a specialization of
            #$TransportFacility and #$PathForWheeledVehicles.  Each
            instance of #$Railway is a pathway made of railroad tracks
            and used for train transportation.  It includes main lines
            and sidings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#PathForWheeledVehicles"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RainProcess">
        <rdfs:label xml:lang="en">showers</rdfs:label>
        <rdfs:comment>A specialization of #$PrecipitationProcess.  Each
            instance of #$RainProcess is an event in which the condensed
            liquid water in one or more clouds forms droplets (or ice
            cystals which subsequently melt in mid-air) substantial
            enough to fall to the surface of the planet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Raindrop">
        <rdfs:label xml:lang="en">raindrops</rdfs:label>
        <rdfs:comment>The collection of drops of liquid water emitted by
            clouds in instances of #$RainProcess.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rainwater"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rainwater">
        <rdfs:label xml:lang="en">rainwater</rdfs:label>
        <rdfs:comment>The collection of liquid water that falls as rain
            from instances of #$RainProcess.  #$Raindrops are composed
            of #$Rainwater, as are puddles left over after a #$RainStorm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LiquidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RainySeason">
        <rdfs:label xml:lang="en">rainy seasons</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear.  Each instance
            of #$RainySeason is the wettest season of the year during an
            annual climate cycle (in terms of having the most intense
            preciptation) in a particular region.  Note that
            #$RainySeason is _not_ a specialization of #$CalendarSeason.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rate">
        <rdfs:label xml:lang="en">rates</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$Rate is an amount of some property (e.g.,
            distance traveled or money spent), taken with respect to
            some unit of time.  Instances of #$Rate include, for
            example, the instances of #$Speed (e.g., 55 mph),
            #$Frequency (e.g., 55 kHz), and #$MonetaryFlowRate (e.g., 55
            cents per minute).  See also #$UnitOfRate, the collection of
            functions used to measure rates (e.g., #$DollarsPerYear, #$MetersPerSecond).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="RateOfRotation">
        <rdfs:label xml:lang="en">#$RateOfRotation</rdfs:label>
        <rdfs:comment>A collection of scalar rates of rotation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="RationalNumber">
        <rdfs:label xml:lang="en">rational numbers</rdfs:label>
        <rdfs:comment>A specialization of #$RealNumber.  A number NUM is
            an instance of #$RationalNumber just in case NUM can be
            expressed as the quotient of two integers.  For example,
            3/4, 2 1/8, 0.3333333..., 11/5.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="Reading">
        <rdfs:label xml:lang="en">reading</rdfs:label>
        <rdfs:comment>A specialization of #$Perceiving-Voluntary and
            #$AccessingAnIBT.  Each instance of #$Reading is an act of
            reading an instance of #$TextualMaterial.  Acts of #$Reading
            may be performed for any of a number of purposes: e.g., in
            order to extract some sort of information from a text, for
            entertainment, to impart the content of the text to others
            (if an instance of #$ReadingAloud (q.v.)), or to test
            reading skills.  A person can read visually (see
            #$Reading-Visual) or by touch (e.g. reading Braille; see #$Reading-Tactile).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#AccessingAnIBT"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Real1-Infinity">
        <rdfs:label xml:lang="en">#$Real1-Infinity</rdfs:label>
        <rdfs:comment>#$Real1-Infinity is the subcollection of
            #$RealNumber that excludes numbers less than 1.  Each
            instance of #$Real1-Infinity is a number greater than or
            equal to 1.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PositiveNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="RealEstate">
        <rdfs:label xml:lang="en">#$RealEstate</rdfs:label>
        <rdfs:comment>A specialization of #$Place-NonAgent.  Each
            instance of #$RealEstate is either a parcel of land or a
            land-based property that can be bought, sold, or rented.
            Notable specializations of #$RealEstate include
            #$GroundsOfOrganization, #$Building, and #$ModernShelterConstruction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RealNumber">
        <rdfs:label xml:lang="en">real numbers</rdfs:label>
        <rdfs:comment>The collection of real numbers; a specialization
            of both  #$IntervalOnNumberLine and #$ScalarPointValue
            (qq.v.).  Each  instance of #$RealNumber is a single point
            on the real number  line, which has no upper or lower
            bounds.  Specializations  of this collection include
            #$Integer, #$RationalNumber, and  #$NegativeNumber.  Note
            that #$RealNumber is also a specialization  of
            #$ComplexNumber (q.v.), and any instance of the former
            constitutes a degenerate case of the latter, in that the
            value  along the real&apos;s  imaginary axis  is zero (cf. #$ImaginaryNumber).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComplexNumber"/>
        <rdfs:subClassOf rdf:resource="#IntervalOnNumberLine"/>
        <rdfs:subClassOf rdf:resource="#ScalarPointValue"/>
    </owl:Class>
    <owl:Class rdf:ID="Rebelliousness-Feeling">
        <rdfs:label xml:lang="en">rebelliousness - feeling</rdfs:label>
        <rdfs:comment>A feeling of opposition against authority or the
            status quo.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Receiving">
        <rdfs:label xml:lang="en">receiving</rdfs:label>
        <rdfs:comment>A specialization of #$TransferIn.  Each instance
            of #$Receiving is an event in which something `comes
            in&apos; to an object.  Typically, a receiving has
            associated with it an instance of #$Translocation (q.v.); a
            particular receiving and its associated translocation(s) are
            related by the predicate #$transferInSubEvent.  If the thing
            which `comes in&apos; is an instance of #$PartiallyTangible
            (such as a baseball, or a SCUD missile), then its reception
            is an instance of the specialization #$ReceivingAnObject
            (q.v.).  If the translocation associated with the receiving
            is an instance of #$WavePropagation (such as a radio
            broadcast, or heat radiation from the Sun), then the
            receiving is an instance of the specialization
            #$ReceivingAWave (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReceivingAWave">
        <rdfs:label xml:lang="en">receiving a wave</rdfs:label>
        <rdfs:comment>A specialization of #$Receiving.  Each instance of
            #$ReceivingAWave is an event in which an instance of
            #$WavePropagation (q.v.) is received at some location (the
            location is related to the instance of #$WavePropagation by
            the predicate #$toLocation).  Instances of #$ReceivingAWave
            include a CD player receiving an infrared signal from a
            remote control, a person hearing a sound of distant thunder,
            and a radio telescope receiving signals from a celestial body.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Receiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReceivingAnObject">
        <rdfs:label xml:lang="en">receiving an object</rdfs:label>
        <rdfs:comment>#$ReceivingAnObject is a specialization of
            #$Receiving.  An instance of #$ReceivingAnObject is an event
            in which there is some #$PartiallyTangible which is the
            #$objectMoving, i.e., the thing which  comes in  to the
            receiver (the #$toLocation).  For example, the
            #$objectMoving on an occasion when Lynn Swann received a
            pass from Terry Bradshaw during a Steelers&apos; game would
            be a football (i.e., some instance of #$Football-American)
            and the passing/receiving event itself would be an instance
            of #$ReceivingAnObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Receiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReciprocalPronoun">
        <rdfs:label xml:lang="en">#$ReciprocalPronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all reciprocal pronouns. Reciprocal pronouns
            are indexicals which are used in reciprocal contexts.
            Example: &apos;each other&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RecordedSoundProduct">
        <rdfs:label xml:lang="en">#$RecordedSoundProduct</rdfs:label>
        <rdfs:comment>#$RecordedSoundProduct is a specialization of
            #$AudioRecordedObject, #$PartiallyTangibleProduct and
            #$PublishedMaterial.  Each instance of
            #$RecordedSoundProduct is (a particular copy of) a sound
            recording which is mass-produced -- i.e. it is one of a
            class of similar recordings with the same information content.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RecordedVideoProduct">
        <rdfs:label xml:lang="en">recorded video products</rdfs:label>
        <rdfs:comment>#$RecordedVideoProduct is a specialization of
            #$PublishedMaterial, #$VideoRecordedObject, and
            #$PartiallyTangibleProduct.  Each instance of
            #$RecordedVideoProduct is a video recording which is one of
            a class of similar recordings with the same information content.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
        <rdfs:subClassOf rdf:resource="#MediaProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RecoveringFromAilment">
        <rdfs:label xml:lang="en">#$RecoveringFromAilment</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$RecoveringFromAilment, some member of
            #$BiologicalLivingObject recovers from an #$AilmentCondition
            it has at the beginning of this recovery period.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#ImprovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rectangle-2D">
        <rdfs:label xml:lang="en">rectangle - 2 d</rdfs:label>
        <rdfs:comment>A subcollection of #$Polygon. Each instance of
            #$Rectangle-2D is a planar two dimensional intangible
            geometric object with four sides, whose angles are all right
            angles. Examples include the space occupied by rectangular
            physical objects, such as a cross section (see
            #$xyCrossSection) of a new dollar bill. Note that the dollar
            bill is not an instance of this collection, but it has a
            resembling shape (see #$Rectangular). An old and wrinkled
            dollar bill would have an approximately rectangular shape.
            Typical instances of #$Rectangle-2D are therefore intangible
            surfaces and abstract geometrical objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Parallelogram"/>
        <rdfs:subClassOf rdf:resource="#Equiangular"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rectangular3DShape">
        <rdfs:label xml:lang="en">three-dimensional rectangles</rdfs:label>
        <rdfs:comment>A specialization of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$Rectangular3DShape is a three-dimensional object each of
            whose faces is a rectangle. Examples include spatially
            localized objects, such as a barge, as well as some abstract parallelipipeds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon3DShaped"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReferenceWork">
        <rdfs:label xml:lang="en">reference works</rdfs:label>
        <rdfs:comment>A specialization of #$TextualPCW.  Each instance
            of #$ReferenceWork is a conceptual work providing a more or
            less non-speculative,  fact-oriented , comprehensive
            description of some knowledge domain.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TextualPCW"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReflexiveBinaryPredicate">
        <rdfs:label xml:lang="en">reflexive binary predicates</rdfs:label>
        <rdfs:comment>A collection of predicates; the specialization of
            #$BinaryPredicate whose instances are reflexive relations.
            Each instance of #$ReflexiveBinaryPredicate is a binary
            predicate PRED with the following property: for every X that
            satisfies the argument constraints for both argument
            positions of PRED (see #$admittedArgument), (PRED X X). Note
            that a predicate PRED can be an instance of
            #$ReflexiveBinaryPredicate only if each argument constraint
            for its first argument position (its #$arg1Isa, and its
            #$arg1Genl, if PRED is a type-level predicate) is not
            disjoint with the respective constraint for its second
            argument position (its #$arg2Isa, and its #$arg2Genl, if
            PRED is a type-level predicate).  Notable instances of
            #$ReflexiveBinaryPredicate include #$physicalParts,
            #$inRegion, #$genls, and #$equals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ReflexivePronoun">
        <rdfs:label xml:lang="en">#$ReflexivePronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all reflexive pronouns. Reflexive pronouns can
            replace nouns in the context of an action which one does to
            oneself. Example: &apos;himself&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReformulationDirectionSpecification">
        <rdfs:label xml:lang="en">reformulation direction specification</rdfs:label>
        <rdfs:comment>The collection of directions for
            #$CycLReformulatorDirectives.  There are exactly three
            directions: #$ReformulationForwardDirection,
            #$ReformulationBackwardDirection, and
            #$ReformulationNeitherDirection.  This concept of direction
            has nothing to do with the forward vs. backward rule
            distinction in inference.  Reformulator directives often
            have a &apos;from&apos; argument and a &apos;to&apos;
            argument, for example a reformulator rule could direct the
            reformulator to reformulate (#$FruitFn #$AppleTree) into
            #$Apple. However, this might be expressed as (#$rewriteOf
            #$Apple (#$FruitFn #$AppleTree).  In this case, we would
            want to tell the reformulator that the #$rewriteOf gaf has a
            &apos;backward&apos; reformulation direction.  See
            #$reformulationDirectionInMode for how these directions are used.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>

    </owl:Class>
    <owl:Class rdf:ID="ReformulatorDirectivePredicate">
        <rdfs:label xml:lang="en">Cyc reformulator directive predicates</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which can affect
            the behaviour of the #$CycLReformulator or its submodules.
            When reformulator directive GAFs are asserted, they are only
            relevant to the reformulator when it is reformulating
            expressions in the microtheory in which the directive is
            asserted, or a specMt thereof.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="ReformulatorHighlyRelevantFORT">
        <rdfs:label xml:lang="en">reformulator highly relevant f o r t</rdfs:label>
        <rdfs:comment>The collection of Cyc FORTs that are highly
            relevant to the reformulator.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="ReformulatorIrrelevantFORT">
        <rdfs:label xml:lang="en">reformulator irrelevant f o r t</rdfs:label>
        <rdfs:comment>The collection of Cyc FORTs that are not relevant
            to the reformulator.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="ReformulatorMode">
        <rdfs:label xml:lang="en">reformulator mode</rdfs:label>
        <rdfs:comment>The collection of modes of operation of the
            #$CycLReformulator.  This collection is user-extensible, and
            the behavior of the reformulator in each mode is determined
            by reformulator rules and #$reformulationDirectionInMode
            meta-assertions on those rules.  In
            #$ReformulatorMode-Simplify mode, the reformulator will also
            use the #$CycLSimplifier to simplify expressions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="ReformulatorRuleProperty">
        <rdfs:label xml:lang="en">reformulator rule property</rdfs:label>
        <rdfs:comment>The collection of intrinsic properties of
            reformulator rules, e.g. which of their arguments is more
            terse, whether they are truth- preserving, reversible, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#CycLConstant"/>
    </owl:Class>
    <owl:Class rdf:ID="ReformulatorTemplate">
        <rdfs:label xml:lang="en">reformulator template</rdfs:label>
        <rdfs:comment>The collection of templates used by the
            #$CycLReformulator for pattern matching and reformulation.
            These are treated specially by the #$CycCanonicalizer.  Free
            EL variables appearing in #$ReformulatorTemplates may bind
            with CycL expressions which match the templates.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ELTemplate"/>

    </owl:Class>
    <owl:Class rdf:ID="RegionType">
        <rdfs:label xml:lang="en">#$RegionType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$RegionType is a subcollection of #$SpatialThing-Localized
            each of whose instances is an identifiable subregion of some
            object, but not itself an independent object.  Instances of
            #$RegionType include #$PalmOfHand, #$Doorway,
            #$Wall-GenericBarrier, #$WorkSurface, and #$Handle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="RegionalGovernment">
        <rdfs:label xml:lang="en">regional governments</rdfs:label>
        <rdfs:comment>A specialization of #$LegalGovernmentOrganization.
            Each instance of #$RegionalGovernment is a government
            organization that controls a particular geopolitical region
            (e.g. a country, state, city, or county).  Specializations
            of #$RegionalGovernment include #$CountyGovernment and #$GovernmentOfCountry.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RegularDecagon">
        <rdfs:label xml:lang="en">#$RegularDecagon</rdfs:label>
        <rdfs:comment>An instance of #$TwoDimensionalShapeType and a
            specialization of #$Decagon.  An instance DEC of #$Decagon
            is also an instance of #$RegularDecagon just in case all
            edges of DEC are of equal length and all interior angles of
            DEC have the same measure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RegularPolygonShaped"/>
        <rdfs:subClassOf rdf:resource="#Decagon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RegularHexagon">
        <rdfs:label xml:lang="en">#$RegularHexagon</rdfs:label>
        <rdfs:comment>An instance of #$TwoDimensionalShapeType and a
            specialization of #$Hexagon.  An instance HEX of #$Hexagon
            is also an instance of #$RegularHexagon just in case all
            edges of HEX are of equal length and all interior angles of
            HEX have the same measure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Hexagon"/>
        <rdfs:subClassOf rdf:resource="#RegularPolygonShaped"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RegularOctagonShaped">
        <rdfs:label xml:lang="en">#$RegularOctagonShaped</rdfs:label>
        <rdfs:comment>The collection of all #$EquilateralShaped and
            #$Equiangular #$Octagons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Octagon"/>
        <rdfs:subClassOf rdf:resource="#RegularPolygonShaped"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RegularPentagonShaped">
        <rdfs:label xml:lang="en">#$RegularPentagonShaped</rdfs:label>
        <rdfs:comment>The collection of all #$Pentagons which are
            #$EquilateralShaped and #$Equiangular.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RegularPolygonShaped"/>
        <rdfs:subClassOf rdf:resource="#Pentagon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RegularPolygonShaped">
        <rdfs:label xml:lang="en">#$RegularPolygonShaped</rdfs:label>
        <rdfs:comment>The collection of all polygons that are
            #$Equiangular and #$EquilateralShaped.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Equiangular"/>
        <rdfs:subClassOf rdf:resource="#EquilateralShaped"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReifiableFunction">
        <rdfs:label xml:lang="en">#$ReifiableFunction</rdfs:label>
        <rdfs:comment>A specialization of #$Function-Denotational.
            Each instance of #$ReifiableFunction is denoted by a CycL
            constant that can  stand in the 0th (or  arg0 ) position in
            a #$CycLReifiableNonAtomicTerm   (q.v.).  For example,
            #$GovernmentFn is a reifiable function, so the term
            `(#$GovernmentFn #$France)&apos; is a reifiable non-atomic
            term (or  NAT ).    And since this particular term actually
            _is_ reified in the Cyc Knowledge   Base, it is, more
            specifically, a #$CycLNonAtomicReifiedTerm (or  NART ).
            The NART `(#$GovernmentFn #$France)&apos; is treated more or
            less the same as if   it were a CycL constant (named, say,
            `GovernmentOfFrance&apos;).  Similary,  the constant for
            #$GovernmentFn can be applied to the constant (or other
            reified or reifiable term) for _any_ instance of
            #$GeopoliticalEntity to form a reifiable NAT that denotes
            that region&apos;s government; and should this NAT appear in
            a sentence that is asserted to the KB, it will thereby
            become a NART.  Note, however, that not all NATs are such
            that it is desireable that   they should become reified
            (i.e. become NARTs) if they appear in   assertions; for more
            on this see #$UnreifiableFunction and   #$CycLUnreifiedReifiableNonAtomicTerm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="Relation">
        <rdfs:label xml:lang="en">#$Relation</rdfs:label>
        <rdfs:comment>The collection of relations whose CycL
            representations can appear in the  0th  (or  arg0 ) argument
            position of a #$CycLFormula, i.e. as the term immediately
            following the formula&apos;s opening parenthesis.  An
            important subcollection of #$Relation is #$TruthFunction
            (q.v.), whose instances are intimately related to
            truth-values, as reflected in the fact that the CycL
            expressions that denote truth-functions can appear in the
            arg0 position of a #$CycLSentence; and a sentence (if
            quantificationally closed; see #$CycLClosedSentence), will
            generally be either true or false (with respect to   a given
            context or interpretation).  The major subcollections of
            #$TruthFunction are #$Predicate, #$LogicalConnective, and
            #$Quantifier (qq.v.). Another important subcollection of
            #$Relation is #$Function-Denotational (q.v.), whose
            instances are functions the CycL expressions for which can
            appear in the arg0  position of a #$CycLNonAtomicTerm; and
            such terms (if closed) generally denote things.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Relation-MathematicalObject">
        <rdfs:label xml:lang="en">mathematical relations (types of things)</rdfs:label>
        <rdfs:comment>The collection of relations.  Each instance of
            #$Relation-MathematicalObject is a relation that holds
            among one or more things at a time, depending on whether
            the relation is unary, binary, ternary, or whatever (see
            #$relationalArity).  A unary relation (such as
            #$spatiallyContinuous) is a sort of degenerate case that
            holds of certain individual things (namely, all things  that
            are spatially continuous).  A binary relation (such   as
            #$likesAsFriend) relates one thing to another (namely,  it
            relates one sentient animal to another just in case the
            first  likes the second).  Key specializations of this
            collection   include #$Function-MathematicalObject and
            #$FixedArityRelation.  See also #$relationExtension.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RelationTypeByLogicalFeature">
        <rdfs:label xml:lang="en">relation type by logical feature</rdfs:label>
        <rdfs:comment>A collection of collections  and a specialization
            of #$RelationshipType.  Each instance of
            #$RelationTypeByLogicalFeature is a collection of
            #$Relations (q.v.)  whose instances all share some
            significant logical feature, such as  commutativity or
            associativity.  Instances include  #$CommutativeRelation and
            #$StrictlyFunctionalRelation.  An  important specialization
            is #$BinaryPredicateTypeByLogicalFeature.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationshipType"/>
    </owl:Class>
    <owl:Class rdf:ID="RelationalStructure">
        <rdfs:label xml:lang="en">#$RelationalStructure</rdfs:label>
        <rdfs:comment>The collection of all mathematical structures each
            being a composite individual structure consisting of a
            #$baseSet with structuring relations or operations on that
            set (and, optionally, one or more selected other sets,
            relations, functions or individuals). Examples include
            #$PartialOrderings, #$Multigraphs, etc. Sometimes
            mathematicians specify these using a #$Tuple of sets,
            relations, functions, and/or individuals, as specifications.
            Note that RelationalStructure is not the same as its
            #$baseSet since a pure #$SetOrCollection necessarily lacks
            the associated &apos;structure&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RelationshipType">
        <rdfs:label xml:lang="en">types of relationship</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$RelationshipType is a collection of #$Relations.  The
            relations in a given relationship-type represented in the
            Knowledge Base are typically those sharing some common
            feature(s) -- often having to do with what kinds of things
            the relations relate (see e.g. #$argIsa and #$argGenls) --
            considered significant enough that the collection of all
            such relations is useful to reify.  Although what
            constitutes a  significant common feature  is difficult to
            specify precisely, there are many clear-cut cases.  Examples
            include #$UnaryFunction, #$LogicalConnective,
            #$IndividualDenotingFunction, #$GenericTimePredicate, and
            #$LanguageDescribingPredicate.  Two important
            specializations of #$RelationshipType are
            #$PredicateCategory and #$FunctionCategory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="RelationshipTypeByArity">
        <rdfs:label xml:lang="en">#$RelationshipTypeByArity</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$RelationshipTypeByArity is a broad collection of relations
            defined primarily in terms of its instances&apos; arity, and
            perhaps also in terms of whether its instances are all
            #$Predicates or all #$Function-Denotationals.  Most
            instances of #$RelationshipTypeByArity are such that all of
            their instances  have the same fixed arity, e.g.
            #$UnaryFunction, #$BinaryPredicate, #$TernaryRelation.  A
            few instances of #$RelationshipTypeByArity, however, are
            defined in terms of whether their instances have fixed or
            variable arity, e.g. #$FixedArityFunction and #$VariableArityRelation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RelationshipType"/>
    </owl:Class>
    <owl:Class rdf:ID="Relaxed">
        <rdfs:label xml:lang="en">people who is relaxed</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            relaxed. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Relaxed-Feeling">
        <rdfs:label xml:lang="en">#$Relaxed-Feeling</rdfs:label>
        <rdfs:comment>The attribute-type associated with the feeling of
            being emotionally relaxed, of having no pressing troubles or
            duties weighing on one, of being at ease and untroubled.  A
            specialization of #$Relaxed-Feeling is #$Calmness-Feeling.
            (For the rationale behind treating feelings as types -- i.e.
            collections -- of attributes, see #$FeelingAttribute and the
            comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Relief-Feeling">
        <rdfs:label xml:lang="en">#$Relief-Feeling</rdfs:label>
        <rdfs:comment>Emotion aroused by the removal or lightening of
            something oppressive, distressing, or painful.  This is a
            collection; for an explanation of a typical #$FeelingType,
            see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Religion">
        <rdfs:label xml:lang="en">#$Religion</rdfs:label>
        <rdfs:comment>The collection of all religions or equivalent sets
            of beliefs that answer the `big questions&apos; about
            creation, existence, etc.  Some elements of this are:
            #$AnimistReligion, #$Catholicism, #$Buddhism, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ReligiousBeliefs"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReligiousBeliefs">
        <rdfs:label xml:lang="en">systems of religious beliefs</rdfs:label>
        <rdfs:comment>The collection of all religions or equivalent sets
            of beliefs that answer the `big questions&apos; about
            creation, existence, etc.  Some instances of this are:
            #$AnimistReligion, #$Catholicism, #$Buddhism, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BeliefSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReligiousEvent">
        <rdfs:label xml:lang="en">#$ReligiousEvent</rdfs:label>
        <rdfs:comment>A collection of human activities.  Each instance
            of #$ReligiousEvent is an occurrence which has religious significance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReligiousHoliday">
        <rdfs:label xml:lang="en">holy days</rdfs:label>
        <rdfs:comment>A specialization of both #$ReligiousEvent and
            #$Holiday.  Each instance of #$ReligiousHoliday is a holiday
            observed by some religious tradition.  Note that individuals
            may observe or otherwise participate in some instances of
            #$ReligiousHoliday even if they are not members of the
            associated #$Religion.  Notable specializations of
            #$ReligiousHoliday include #$ChristianHoliday,
            #$JewishHoliday, and #$IslamicHoliday.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ReligiousEvent"/>
        <rdfs:subClassOf rdf:resource="#Holiday"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReligiousOrganization">
        <rdfs:label xml:lang="en">religious organization</rdfs:label>
        <rdfs:comment>A subcollection of #$BeliefSystemFocusGroup.  Each
            instance of #$ReligiousOrganization is an organization whose
            members share religious beliefs and participate in meetings,
            rituals, or practices related to those beliefs.  Religious
            organizations include #$LocalReligiousCongregations such as
            local churches, temples, mosques and shrines (qua
            organizations), as well as worldwide religious organizations
            such as the #$RomanCatholicChurch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Remorse">
        <rdfs:label xml:lang="en">remorse</rdfs:label>
        <rdfs:comment>Regret, self-reproach, and suffering or guilt for
            past sins or wrongs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sadness"/>
    </owl:Class>
    <owl:Class rdf:ID="RemovingSomething">
        <rdfs:label xml:lang="en">#$RemovingSomething</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction.  Each
            instance of #$RemovingSomething is an event in which an
            agent deliberately removes one object from another object.
            The removed object is related to the instance of
            #$RemovingSomething via the predicate #$objectRemoved, while
            the object to which it belonged prior to its removal is
            related via the predicate #$objectRemaining.  In different
            types of removals, either the #$objectRemoved or the
            #$objectRemaining may be destroyed, or both may survive.
            Specializations  of #$RemovingSomething include #$Ablation,
            #$RemovingSomethingByMovingIt, and #$CuttingOffAPiece.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RemovingSomethingByMovingIt">
        <rdfs:label xml:lang="en">dislodging</rdfs:label>
        <rdfs:comment>A collection of #$Events; a subcollection of
            #$RemovingSomething. During an  instance of
            #$RemovingSomethingByMovingIt, the #$objectRemoved is  moved
            out of the object or configuration to which it belonged
            prior to  the removal event.  The #$objectRemoved is not
            destroyed by the  removal event.  Examples of
            #$RemovingSomethingByMovingIt include: someone  unwrapping a
            present, undressing, digging up a root, or removing an  appendix.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Renting">
        <rdfs:label xml:lang="en">renting events</rdfs:label>
        <rdfs:comment>A specialization of both
            #$MonetaryExchangeOfUserRights and
            #$TemporaryChangeOfUserRights.  Each instance of #$Renting
            is an event during which one agent grants to another agent
            the use of an object (owned or controlled by the first
            agent) for a period of time, in exchange for some
            remuneration.  The schedule of payment may vary, depending
            upon the rental period, type of object involved, type of
            usage granted, and/or other considerations.  The agent
            providing the object to rent is related to the instance of
            #$Renting by the predicate #$fromPossessor (q.v.); the agent
            paying to use the object is related to the instance of
            #$Renting by the predicate #$toPossessor (q.v.).  Those
            agents enter into an #$Agreement (q.v.).  Examples of
            #$Renting might include:  Fred renting a particular
            apartment last year; Jane renting a car all this week; Jack
            renting a canoe on Saturday morning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#MakingSomethingAvailable"/>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Reproach">
        <rdfs:label xml:lang="en">reproach</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </owl:Class>
    <owl:Class rdf:ID="ReproductiveSystem">
        <rdfs:label xml:lang="en">reproductive systems</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; reproductive
            systems.  A #$ReproductiveSystem is a system of organs used
            by the #$Animal for reproduction; i.e., for creating an
            offspring, a new member of that species.   Note:  Strictly
            speaking, it might be more accurate to describe a
            #$ReproductiveSystem as containing the above sorts of
            systems for a mated male and female of a sexual species, as
            only that combined system is capable of actually producing
            an offspring.  But most of the things one wants to say about
            a #$ReproductiveSystem really do only make sense for one
            single animal at a time.  So think of reproduction as a
            cooperative activity, such as having a conversation, where
            we still refer to each animal&apos;s incomplete reproductive
            system as a #$ReproductiveSystem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Reptile">
        <rdfs:label xml:lang="en">#$Reptile</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass, and a
            specialization of #$Vertebrate.  Each instance of #$Reptile
            is an air-breathing, cold-blooded vertebrate with a body
            covered by scales or bony plates.  Notable specializations
            of #$Reptile include #$Snake, #$Lizard, and #$Turtle.  Most
            species of #$Reptile are oviparous (see #$OviparousAnimal),
            but some are viviparous (see #$ViviparousAnimal).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Poikilotherm"/>
        <rdfs:subClassOf rdf:resource="#AirBreathingVertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Requesting-CommunicationAct">
        <rdfs:label xml:lang="en">#$Requesting-CommunicationAct</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationAct-Single.
            Each instance of #$Requesting-CommunicationAct is a
            communication act in which one agent requests something of
            one or more other agents.  Requests are typically followed
            by responses.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RequestingInformation">
        <rdfs:label xml:lang="en">#$RequestingInformation</rdfs:label>
        <rdfs:comment>A specialization of #$Requesting-CommunicationAct.
            In each instance of #$RequestingInformation, an agent asks a
            question or requests some information. See also the
            #$IllocutionaryForce associated with this action, #$Query.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Requesting-CommunicationAct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Research">
        <rdfs:label xml:lang="en">#$Research</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationGathering
            and #$PurposefulAction.  Each instance of #$Research is an
            event in which an agent or group of agents gathers
            information about a particular subject, with the aim of
            learning things about that subject that the agent or agents
            did not previously know.  In some cases, the agents in
            question (e.g., professional scientists) aim to learn things
            that no one knows, in other cases the agents (e.g., high
            school students) merely aim to find published knowledge
            which they did not know before. In some cases research may
            involve doing experiments (see #$Experimenting) or building
            systems (see #$ResearchProject), in other cases it may
            involve strictly document search.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationGathering"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#Investigation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ResearchOrganization">
        <rdfs:label xml:lang="en">research centers</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$ResearchOrganization is an organization that carries
            out basic or applied research as its main function (or one
            of its main functions).  A given instance of
            #$ResearchOrganization may or may not be a commercial, or a
            governmental, organization.  Examples of
            #$ResearchOrganizations include  #$UnitedStatesSpaceProgram,
            Thomas J. Watson Research Laboratory at #$IBMInc, and the
            Hoover Institute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Researcher">
        <rdfs:label xml:lang="en">#$Researcher</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation each
            instance of which is a person who performs research as his
            or her main occupation.  This collection includes
            academicians, clinical investigators, experimental
            physicists, market researchers, industrial researchers, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Resentful">
        <rdfs:label xml:lang="en">people who is resentful</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            resentful. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Resentment">
        <rdfs:label xml:lang="en">resentful</rdfs:label>
        <rdfs:comment>Indignation, displeasure, and ill will felt about
            something regarded as a slight, affront, insult, or
            indignity.  This is a collection; for an explanation of a
            typical #$FeelingType, see #$Happiness.  More specialized
            #$FeelingTypes than #$Resentment are #$Jealousy and #$Envy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
    </owl:Class>
    <owl:Class rdf:ID="Resolution-Emotion">
        <rdfs:label xml:lang="en">resolution - emotion</rdfs:label>
        <rdfs:comment>Emotion of one who is firm of mind and purpose,
            capable of resisting temptations or surrender in face of
            opposition, danger or hardship</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Respect">
        <rdfs:label xml:lang="en">respects</rdfs:label>
        <rdfs:comment>A feeling of just regard, consideration, or
            appreciation for the worth of someone or something.  Note:
            #$Admiration (qv) is different than, or rather a more
            specialized form of, respect.  To feel #$Respect towards
            someone is just to feel that s/he should be treated with
            politeness and consideration, as having dignity;
            #$Admiration and #$Wonder-Admiration implies all of that,
            but also implies that the target of the #$Respect actually
            did something special or has some special quality that sets
            them apart from others (or at least from the respecter).
            #$Respect is a #$Collection --- for an explanation of that,
            see #$Happiness.  Some more specialized #$FeelingTypes than
            #$Respect are #$Reverence, #$Wonder-Admiration, #$Adulation,
            #$Awe, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Respiration">
        <rdfs:label xml:lang="en">respirations</rdfs:label>
        <rdfs:comment>A specialization of
            #$BodilyFunctionEvent-Involuntary.  Each instance of
            #$Respiration is a process through which an instance of
            #$Animal acquires oxygen for its cells, and releases carbon
            dioxide formed by those cells into the atmosphere.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RespiratorySystem">
        <rdfs:label xml:lang="en">respiratory systems</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart.  Each
            instance of #$RespiratorySystem is a system of body parts
            which function together  to enable its owner (an instance of
            #$Animal) to breathe.  Note that it is generally required
            that the #$RespiratorySystem of a #$Vertebrate work together
            with the #$CirculatorySystem (q.v.), as the air is used to
            supply needed substances to the blood and to remove waste
            products from the blood.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Restaurant-Organization">
        <rdfs:label xml:lang="en">restaurants</rdfs:label>
        <rdfs:comment>#$Restaurant-Organization is a specialization of
            #$ServiceEstablishment, #$FoodServiceOrganization, and
            #$OrganizationWithIndividualCustomers.  Each instance of
            #$Restaurant-Organization is an organization that operates
            individual restaurants.  For example, the group of
            individuals that operates the Threadgills on Lamar in Austin
            (and no other restaurants) is an instance of
            #$Restaurant-Organization, while the #$Organization that
            owns and operates both Threadgills (the one on Lamar and the
            one on Barton Springs) is not an instance of this collection
            (that organization would be an instance of
            #$FoodServiceOrganization).  Instances of
            #$Restaurant-Organization operate out of #$Restaurant-Objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualCustomers"/>
        <rdfs:subClassOf rdf:resource="#ServiceEstablishment"/>
        <rdfs:subClassOf rdf:resource="#FoodServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Resting-Relaxing">
        <rdfs:label xml:lang="en">resting events</rdfs:label>
        <rdfs:comment>The collection of events in which an animal
            abstains from strenuous physical activity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Restless">
        <rdfs:label xml:lang="en">agents who is restless</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            restless. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Restlessness">
        <rdfs:label xml:lang="en">#$Restlessness</rdfs:label>
        <rdfs:comment>The feeling of being troubled, restless, concerned
            about something, or in emotional turmoil.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="RetailOrganization">
        <rdfs:label xml:lang="en">retailer</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each instance of
            #$RetailOrganization is an organization that engages
            primarily in selling goods or services to end-users or
            consumers, rather than to wholesale customers.
            Specializations of #$RetailOrganization include the
            collections #$RetailStore and #$AutoDealership.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SellingOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RetailStore">
        <rdfs:label xml:lang="en">#$RetailStore</rdfs:label>
        <rdfs:comment>A specialization of #$RetailOrganization.  Each
            instance of #$RetailStore is a local single-site
            organization (but not necessarily a stand-alone business,
            since it might be part of a chain of retail stores) which
            sells goods directly to consumers at the organization&apos;s
            #$physicalQuarters.  Note that the parent company in a chain
            of retail stores (such as #$KMart-TheCompany) is _not_, in
            general, an instance of #$RetailStore, but a local store in
            a chain generally is (for example, all instances of
            #$KMartStore are instances of #$RetailStore).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualCustomers"/>
        <rdfs:subClassOf rdf:resource="#RetailOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Reverence">
        <rdfs:label xml:lang="en">reverence</rdfs:label>
        <rdfs:comment>Emotion inspired by something sacred or inviolable
            which arouses one&apos;s deep respect or veneration</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Respect"/>
    </owl:Class>
    <owl:Class rdf:ID="ReversativePrefix">
        <rdfs:label xml:lang="en">reversative prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ReversibleProcess">
        <rdfs:label xml:lang="en">reversible processes</rdfs:label>
        <rdfs:comment>Instances are processes that have a
            #$reverseProcessType, i.e. they can be undone.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rhomboid">
        <rdfs:label xml:lang="en">rhomboid</rdfs:label>
        <rdfs:comment>The collection   of #$Parallelograms whose
            adjacent sides    are of unequal length.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Parallelogram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rhombus">
        <rdfs:label xml:lang="en">rhombus</rdfs:label>
        <rdfs:comment>The collection of equilateral #$Parallelograms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Parallelogram"/>
        <rdfs:subClassOf rdf:resource="#EquilateralShaped"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RingShape">
        <rdfs:label xml:lang="en">rings</rdfs:label>
        <rdfs:comment>A subcollection of #$RoundShape. Each instance of
            #$RingShape is a two-dimensional or three-dimensional object
            with a circular or elliptical shape. Examples include
            spatially localized objects, such as a wedding ring, as well
            as abstract objects, such as an abstract torus.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ritual">
        <rdfs:label xml:lang="en">#$Ritual</rdfs:label>
        <rdfs:comment>A specialization of #$PurposefulAction.  Each
            instance of #$Ritual is a highly stylized or formalized
            action (or series of actions) performed by a person or group
            of persons.  Instances of #$Ritual are usually performed
            with some solemnity.  Notable specializations of #$Ritual
            include #$Ceremony, #$Funeral, and #$Parade.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="River">
        <rdfs:label xml:lang="en">river</rdfs:label>
        <rdfs:comment>A specialization of #$Stream.  Each instance of
            #$River is a natural stream of water, normally of a large
            volume.  Instances of #$River include the
            #$ColoradoRiverOfArizona, the #$AmazonRiver, the
            #$YangtzeRiver, and the #$ThamesRiver.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Stream"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicle">
        <rdfs:label xml:lang="en">motor vehicles</rdfs:label>
        <rdfs:comment>A specialization of both
            #$LandTransportationDevice and
            #$TransportationDevice-Vehicle.  Each instance of
            #$RoadVehicle is a vehicle designed primarily for travel on
            roads (although some instances may also have limited
            off-road capabilities).  Notable specializations of
            #$RoadVehicle include #$Automobile, #$Truck, and
            #$Bus-RoadVehicle.  Since #$RoadVehicle is a specialization
            of #$TransportationDevice-Vehicle, each instance of
            #$RoadVehicle is self-powered.  Consequently, road
            transportation devices which are not self-powered (for
            example, all the instances of #$Bicycle) are not included in
            this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicle-DieselEngine">
        <rdfs:label xml:lang="en">road vehicle - diesel engine</rdfs:label>
        <rdfs:comment>#$RoadVehicle-DieselEngine is a specialization of
            #$RoadVehicle-InternalCombustionEngine.  Each instance of
            #$RoadVehicle-DieselEngine is a road vehicle whose principle
            motive power is provided by a #$DieselEngine.  This
            collection is disjoint with #$RoadVehicle-GasolineEngine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-InternalCombustionEngine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicle-GasolineEngine">
        <rdfs:label xml:lang="en">gas-powered road vehicles</rdfs:label>
        <rdfs:comment>#$RoadVehicle-GasolineEngine is a specialization
            of #$RoadVehicle-InternalCombustionEngine.  Each instance of
            #$RoadVehicle-GasolineEngine is a road vehicle whose
            principle motive power is provided by a #$GasolineEngine.
            This collection is disjoint with #$RoadVehicle-DieselEngine.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-InternalCombustionEngine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicle-InternalCombustionEngine">
        <rdfs:label xml:lang="en">road vehicle - internal combustion engine</rdfs:label>
        <rdfs:comment>#$RoadVehicle-InternalCombustionEngine is a
            specialization of #$BatteryPoweredDevice,
            #$InternalCombustionPoweredDevice, and #$RoadVehicle.  Each
            instance of #$RoadVehicle-InternalCombustionEngine is a
            #$RoadVehicle whose principle motive power is supplied by a
            #$InternalCombustionEngine.  This collection is disjoint
            with RoadVehicle-Electric.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectricalDevice"/>
        <rdfs:subClassOf rdf:resource="#InternalCombustionPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicleType">
        <rdfs:label xml:lang="en">#$RoadVehicleType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$RoadVehicleType is a collection of instances of
            #$RoadVehicle categorized in some manner.  Notable
            specializations of #$RoadVehicleType include
            #$RoadVehicleTypeByBrand and #$RoadVehicleTypeByBodyStyle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadVehicleTypeByUse">
        <rdfs:label xml:lang="en">types of vehicle classified by use</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$RoadVehicleTypeByUse is a collection of instances of
            #$RoadVehicle  which share a particular use/function.
            Instances of #$RoadVehicleTypeByUse include #$DumpTruck
            (used for carrying/dumping stuff), #$TaxiCab (used for
            carrying #$Persons to destinations for money), and
            #$OffRoadAutomobile (used for traveling off of paved roads).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoadVehicleType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="RoadWorkVehicle">
        <rdfs:label xml:lang="en">heavy construction equipment</rdfs:label>
        <rdfs:comment>#$RoadWorkVehicle is a specialization of
            #$ConstructionVehicle.  Each instance of #$RoadWorkVehicle
            is a heavy construction vehicle that is used to make roads
            by moving around large quantities of earth, rocks, and etc.
            They are powered by internal combustion engines and either
            have wheels or treads like tanks.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionVehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Roadway">
        <rdfs:label xml:lang="en">#$Roadway</rdfs:label>
        <rdfs:comment>A specialization of #$PathForWheeledVehicles.
            Each instance of #$Roadway is a path artifact designed to
            accomodate road vehicles (see the collection #$RoadVehicle)
            such as cars, trucks, and motorcycles.  Specializations of
            #$Roadway include #$Street-Generic and #$Highway.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathForWheeledVehicles"/>
        <rdfs:subClassOf rdf:resource="#TransportFacility"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RodShape">
        <rdfs:label xml:lang="en">rods (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$CylinderShape. Each instance
            of #$RodShape is a solid cylinder whose height is much
            greater than the radius of its base. Examples include
            spatially localized objects, such reactor rods, logs, and
            bacilli, as well as some abstract cylinders.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CylinderShape"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Role">
        <rdfs:label xml:lang="en">roles</rdfs:label>
        <rdfs:comment>A collection of #$Predicates that relate
            #$Situations (q.v.) to things that are  involved  in them in
            various ways.  As such, each instance of #$Role has at least
            one argument-place that is constrained to (see #$argIsa)
            instances of #$Situation or a specialization thereof.  Note
            that the involvement may be active (e.g. #$doneBy) or
            passive (e.g. #$objectActedOn and #$eventOccursAt), central
            (e.g. #$primaryObjectMoving) or peripheral (e.g.
            #$assistingAgent).  Important specializations of #$Role are
            #$ActorSlot and #$SubEventPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="RoofOfAConstruction">
        <rdfs:label xml:lang="en">#$RoofOfAConstruction</rdfs:label>
        <rdfs:comment>#$RoofOfAConstruction is a specialization of
            #$TopSurface and #$PartOfBuilding.  Each instance of
            #$RoofOfAConstruction is a roof of a structure which is an
            instance of #$HumanShelterConstruction.  Like instances of
            #$Wall-Vertical, instances of #$RoofOfAConstruction may be
            considered as having one or two sides; the &apos;inner&apos;
            side of a roof may or may not qualify as a #$CeilingOfARoom.
            It is understood that one and only one side of a
            #$RoofOfAConstruction is &apos;exposed to the elements.&apos;</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoomInAConstruction">
        <rdfs:label xml:lang="en">rooms</rdfs:label>
        <rdfs:comment>#$RoomInAConstruction is a specialization of
            #$SpaceInAFixedHOC and #$CavityWithWalls.  Each instance of
            #$RoomInAConstruction is a room found in a #$ConstructionArtifact.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceInAFixedHOC"/>
        <rdfs:subClassOf rdf:resource="#CavityWithWalls"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RootWord">
        <rdfs:label xml:lang="en">root words</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <owl:equivalentClass rdf:resource="#SimpleWord"/>
    </owl:Class>
    <owl:Class rdf:ID="RotaryWingAircraft">
        <rdfs:label xml:lang="en">rotary wing crafts</rdfs:label>
        <rdfs:comment>A specialization of #$AirTransportationDevice.
            Each instance of #$RotaryWingAircraft is a heavier-than-air
            vehicle which is supported in the air by blades rotating
            about an axis. A notable specialization of
            #$RotaryWingAircraft is #$Helicopter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#AirTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rotation-NonPeriodic">
        <rdfs:label xml:lang="en">rotation non periodic</rdfs:label>
        <rdfs:comment>The collection of all rotational movements in
            which rotation occurs in a nonperiodic fashion; e.g., the
            turning of a knob on a kitchen appliance or a radio dial, or
            movements of a trackball.  See also #$Rotation-Periodic for
            the context-sensitive nature of this dichotomy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-Rotation"/>
        <rdfs:subClassOf rdf:resource="#Movement-NonPeriodic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rotation-Periodic">
        <rdfs:label xml:lang="en">periodic rotations</rdfs:label>
        <rdfs:comment>A specialization of both #$Movement-Rotation and
            #$Movement-Periodic.  Each instance of #$Rotation-Periodic
            is a series of partial or full rotations occurring
            periodically.  Examples of #$Rotation-Periodic include the
            swinging of a clock pendulum and the rotation of the Earth
            on its axis.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-Periodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-Rotation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RoundThing">
        <rdfs:label xml:lang="en">round thing</rdfs:label>
        <rdfs:comment>A specialization of both
            #$GeometricallyDescribableThing and #$ShapedThing.  Each
            instance of #$RoundThing is a two- or three-dimensional
            object with a  round shape.  Specializations of #$RoundThing
            include #$Circle, #$Ellipse,  #$Sphere and #$RingShape.
            Examples include spatially localized objects, such  as the
            equator, as well as abstract shapes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rowboat">
        <rdfs:label xml:lang="en">#$Rowboat</rdfs:label>
        <rdfs:comment>#$Rowboat is a specialization of
            #$Watercraft-Surface and #$Device-UserPowered.  Each
            instance of #$Rowboat is a boat which is usually powered by
            one or more persons&apos; rowing (generally using #$Oars).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft-Surface"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Rubbing">
        <rdfs:label xml:lang="en">rubbing</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of #$Rubbing
            is an event in which the #$objectActedOn is rubbed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sliding-Generic"/>
        <rdfs:subClassOf rdf:resource="#ApplyingAForce"/>
        <rdfs:subClassOf rdf:resource="#VoluntaryBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="RuleMacroPredicate">
        <rdfs:label xml:lang="en">rule macro predicates</rdfs:label>
        <rdfs:comment>A specialization of #$Predicate.  Each instance of
            #$RuleMacroPredicate is a predicate that has, implicit in
            its definition, a schema for a class of quantified formulas
            (an instance of #$RuleMacroPredicate is related to its
            schema via the predicate #$expansion).  A ground assertion
            using one of these predicates is in fact shorthand for a
            rule fitting this schema.  For example, #$genls is a
            #$RuleMacroPredicate and its implicit schema is (#$implies
            (#$isa ?X ARG1) (#$isa ?X ARG2)).  Therefore, (#$genls
            #$Poodle #$Dog) is shorthand for the rule (#$implies (#$isa
            ?X #$Poodle) (#$isa ?X #$Dog)).  #$RuleMacroPredicates may
            be supported by system code, as is #$genls, or they may be
            defined with an #$expansion.  In general, one should only
            introduce a new #$RuleMacroPredicate if 1) there is a plan
            to eventually provide code support for efficient reasoning
            with its uses, and/or 2) using it enables useful type-level reasoning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MacroRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="RuleTemplate">
        <rdfs:label xml:lang="en">rule template</rdfs:label>
        <rdfs:comment>Terms denoting formulas (typically without support
            for efficient inference) that can be (partially)
            instantiated as Cyc assertions (typically with support for
            efficient inference); see #$trueRule and #$ruleTemplateAssertion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sac-Organic">
        <rdfs:label xml:lang="en">sac - organic</rdfs:label>
        <rdfs:comment>#$Sac-Organic is a specialization of
            #$OrganismPart  and #$Container.  Each instance of
            #$Sac-Organic is a plant or animal membranous sac or
            bladder, whether or not it is still part of a living
            #$Organism-Whole.  Instances of #$Sac-Organic have zero
            (some plant bladders), one (e.g. #$GallBladder), two
            (#$Stomach), or three  (#$Bladder-Urinary) tubes attached
            for the flow of material into or out of the bladder.  The
            bladder may used for storage of some material in the body,
            and possible processing thereof, or merely as a mechanism
            for separating structures (e.g. the #$Peritoneum).   Any
            tubes connected  to the bladder are of far smaller diameter
            than the bladder itself.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#Container"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sad">
        <rdfs:label xml:lang="en">agents who is sad</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being sad.
            Use this constant with a #$GenericValueFunction to denote a
            collection of agents that are in this emotional state to
            some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sadness">
        <rdfs:label xml:lang="en">#$Sadness</rdfs:label>
        <rdfs:comment>Emotion felt when one is unhappy or low-spirited.
            This is a collection; for more details, see #$Happiness.
            Some more specialized #$FeelingTypes are #$Remorse,
            #$Gloominess, #$Disappointment, #$Depression-Feeling,
            #$Grief, #$Misery, #$Despair, #$Anguish, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="SalariedWorker">
        <rdfs:label xml:lang="en">#$SalariedWorker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and a
            specialization of #$Employee. Each instance of
            #$SalariedWorker is paid a salary for his or her work by his
            or her employer. See also #$HourlyWorker and #$CommissionedWorker.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SaleByCheck">
        <rdfs:label xml:lang="en">sales by check</rdfs:label>
        <rdfs:comment>A specialization of #$Buying. Each instance of
            #$SaleByCheck is a buying event in which the payment
            tendered (see the predicate #$objectTendered) is an instance
            of #$Check-TenderObject (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Buying"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SaleByCreditCard">
        <rdfs:label xml:lang="en">credit card sales</rdfs:label>
        <rdfs:comment>A specialization of #$Buying.  Each instance of
            #$SaleByCreditCard is a purchase in which the buyer (see the
            predicate #$buyer) pays by using some instance of
            #$CreditCard (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Buying"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SalesActivity">
        <rdfs:label xml:lang="en">#$SalesActivity</rdfs:label>
        <rdfs:comment>A collection of events. Each instance of
            #$SalesActivity is an event which the performing agent does
            in an effort to achieve a subsequent sale to a second agent.
            Types (i.e., subcollections) of #$SalesActivity include
            #$Advertising, telemarketing, showing sample and/or actual
            products to customers in a show room or a store. Instances
            of #$SalesActivity which are successful lead to
            corresponding instances of #$Buying. Note: #$SalesActivity
            does NOT include manufacturing, accounting, and other such
            ancillary business activities.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SalesAgreement">
        <rdfs:label xml:lang="en">sales agreements</rdfs:label>
        <rdfs:comment>A collection of agreements. Each instance of
            #$SalesAgreement is an agreement which governs aspects of
            some #$Buying activity. This includes bidding activities (in
            the subcollection #$SalesBidOrContract), as well as
            instances of #$SalesContract.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="SalesPerson">
        <rdfs:label xml:lang="en">#$SalesPerson</rdfs:label>
        <rdfs:comment>A specialization of #$PersonWithOccupation.  Each
            instance of #$SalesPerson is someone whose principal job
            activity is negotiating with potential buyers, finding out
            what they want, describing what is available, taking orders,
            etc.  This collection includes door-to-door salespeople,
            Avon reprentatives, new and used car salespeople, sales
            representatives for the product lines of large industrial
            companies, and store clerks working on a sales commission.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vendor"/>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#OrganizationRepresentative"/>
        <rdfs:subClassOf rdf:resource="#BusinessPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SaltingFood">
        <rdfs:label xml:lang="en">food-salting events</rdfs:label>
        <rdfs:comment>Soaking food in salt to prevent it from rotting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Satisfaction">
        <rdfs:label xml:lang="en">satisfied</rdfs:label>
        <rdfs:comment>Feeling of appeasement, not only of one&apos;s
            desires or longings but also of his needs or requirements.
            This is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.   Some more specialized
            #$FeelingTypes than #$Satisfaction are:  #$Approval,
            #$Pride, #$Triumph-TheFeeling, etc. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Satisfied">
        <rdfs:label xml:lang="en">agents who is satisfied</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            satisfied. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Saturday">
        <rdfs:label xml:lang="en">saturday</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Saturday is the collection of all  (and
            only) saturdays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ScalarInterval">
        <rdfs:label xml:lang="en">#$ScalarInterval</rdfs:label>
        <rdfs:comment>A specialization of #$NTupleOfIntervals.  Each
            proper subcollection SCALAR of #$ScalarInterval (with some
            exceptions, such as #$ScalarPointValue) has the following
            two properties: 1) the collection of point instances of
            SCALAR (i.e., those instances of SCALAR that are _not_
            proper intervals - see the collection #$ScalarPointValue) is
            ordered by some `natural&apos; linear ordering (i.e., some
            `natural&apos; relation that is reflexive, antisymmetric,
            and transitive on the collection of point instances of
            SCALAR), 2) SCALAR is closed under addition (#$PlusFn), so
            that the sum of any two instances of SCALAR will also be an
            instance of SCALAR.  Notable specializations of
            #$ScalarInterval include #$Time-Quantity, #$Integer, and #$Distance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NTupleOfIntervals"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ScalarPointValue">
        <rdfs:label xml:lang="en">scalar values</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$ScalarPointValue is a single quantity, as
            opposed to a range of quantities.  Instances of
            #$ScalarPointValue include all instances of #$RealNumber
            (q.v.), as well as physical quantities such as (#$Meter 3)
            and (#$SecondsDuration  10).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Interval-Bounded"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="ScheduleDocument">
        <rdfs:label xml:lang="en">#$ScheduleDocument</rdfs:label>
        <rdfs:comment>A specialization of #$TextualMaterial (and thus of
            #$InformationBearingThing). Each instance of this collection
            is a document that contains information about the #$Schedule
            of something. Instances might be  printed on paper (and thus
            be instances of #$Paper-IBO) or they might be represented in
            some other medium. Notable specializations include
            #$WorkScheduleDocument and
            #$PublicTransportationScheduleDocument. For making
            assertions regarding the usage of such documents, see #$ConsultingASchedule.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SchoolInstitution-KThrough12">
        <rdfs:label xml:lang="en">k-12s</rdfs:label>
        <rdfs:comment>#$SchoolInstitution-KThrough12 is a specialization
            of #$EducationalOrganization and #$AcademicOrganization.
            Each instance of #$SchoolInstitution-KThrough12 is an
            educational institution which provides instruction in all or
            some of the grades from kindergarten (K) through high school
            (12th-grade) education.  Notable specializations of
            #$SchoolInstitution-KThrough12 include
            #$ElementarySchoolInstitution, #$MiddleSchoolInstitution,
            and #$HighSchoolInstitution.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EducationalOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ScientificFieldOfStudy">
        <rdfs:label xml:lang="en">scientific disciplines</rdfs:label>
        <rdfs:comment>A specialization of #$FieldOfStudy.  Each instance
            of #$ScientificFieldOfStudy is a specialized body of
            knowledge, theory, hypotheses, observations, and problems,
            which together constitute the informational content of a
            systematic endeavor to explain (some part of) the natural
            world by rational (and frequently, quantifiable) methods,
            including, but not limited to, induction, falsifiable
            hypotheses tested by repeatable physical experiments, and
            deductive proof.  Instances of #$ScientificFieldOfStudy
            include the traditional hard sciences (e.g., #$Physics,
            #$Chemistry), the life sciences (e.g., #$Biology,
            #$Genetics, #$Toxicology), and #$Mathematics.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FieldOfStudy"/>
    </owl:Class>
    <owl:Class rdf:ID="Scientist">
        <rdfs:label xml:lang="en">scientist</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$PersonWithOccupation.  Each instance of
            #$Scientist is a person who is educated and employed in one
            (or more) of the natural, social, or abstract sciences.
            Specializations of #$Scientist include the collections
            #$Astronomer, #$Chemist, #$Linguist, #$Mathematician,
            #$Geneticist, and #$CulturalAnthropologist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Researcher"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ScopingRelation">
        <rdfs:label xml:lang="en">scoping relations</rdfs:label>
        <rdfs:comment>Relations that are used to define a scope with
            respect to one or more variables and to bind any occurrences
            of those variables that are inside that scope.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="Screw-GenericShape">
        <rdfs:label xml:lang="en">screw - generic shape</rdfs:label>
        <rdfs:comment>Includes all shapes which are roughly cylindrical,
            but with a `thread&apos;--the shapes of
            #$Screw-TheConnector, #$Bolt, #$DrillBit, and screw
            propellors.  Some #$CorkScrews have the shape
            #$Screw-GenericShape, but others (like the ones on Swiss
            Army knives) are more properly described as a #$Helix.  Rule
            of thumb: in order to have the shape #$Screw-GenericShape,
            it must have a solid central axis.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ScriptPerformanceAttributeType">
        <rdfs:label xml:lang="en">script performance attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each
            #$ScriptPerformanceAttributeType is a type of attribute that
            can be used to describe the manner in which actions are
            performed.  Examples include: #$Competence, #$Precision,
            #$Dexterity, #$Gracefulness, #$Creativity, etc.  So, e.g.,
            one may run a race with some measure of #$Gracefulness, some
            measure of #$Competence, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrimitiveScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="ScriptPredicate">
        <rdfs:label xml:lang="en">Cyc script predicates</rdfs:label>
        <rdfs:comment>#$ScriptPredicate is the collection of predicates
            which are used to make assertions about
            #$ScriptedEventTypes. Like other instances of
            #$EventPredicate, #$ScriptPredicates are associated with
            expansions. However, unlike other #$EventPredicates, the
            expansion for a #$ScriptPredicate consists in an ordered
            list of assertions that decompose the original assertion.
            Please see the documentation on Plans and Scripts for details.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EventPredicate"/>
        <rdfs:subClassOf rdf:resource="#ELRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Sculpture">
        <rdfs:label xml:lang="en">#$Sculpture</rdfs:label>
        <rdfs:comment>A specialization of #$ArtObject. Each instance of
            this collection is a tangible three-dimensional work of art.
            Buildings are not included, even though sculptural features
            of buildings (such as friezes) are. Types of #$Sculpture
            include stone statues, friezes, wood carvings, pipes welded
            into abstract art sculptures, etc. Example instances: the
            #$StatueOfLiberty, the #$MountRushmoreMonument,
            Michelangelo&apos;s David, the friezes on the #$Parthenon,
            the Buddhas at Longan. See also #$Sculptor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ArtObject"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sea">
        <rdfs:label xml:lang="en">sea</rdfs:label>
        <rdfs:comment>A specialization of both #$BodyOfWater-Large and
            #$SeaWater.  Each instance of #$Sea is a body of salt water
            as large as (or larger than) a lake.  Instances of #$Sea
            include #$PacificOcean, #$IonianSea, #$EastChinaSea, and #$BlackSea.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyOfWater-Large"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#SeaWater"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SeaWater">
        <rdfs:label xml:lang="en">seawater</rdfs:label>
        <rdfs:comment>A specialization of #$Water-Saline.  Each instance
            of #$SeaWater is a portion of salt water with the kind of
            mineral concentrations found in oceans (see the collection
            #$Ocean) --including the oceans themselves.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Water-Saline"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SeasonOfYear">
        <rdfs:label xml:lang="en">seasons</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalEvent.  Each
            instance of #$SeasonOfYear is an event characterized by
            specific meteorological or climatic conditions that occurs
            during an annual climate cycle (see #$AnnualClimateCycle).
            Notable specializations are #$WinterSeason, #$SpringSeason,
            #$SummerSeason, and #$FallSeason.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SeatingDevice">
        <rdfs:label xml:lang="en">seats</rdfs:label>
        <rdfs:comment>#$SeatingDevice is a specialization of
            #$PhysicalDevice.  Each instance of #$SeatingDevice is a
            device whose #$primaryFunction is to serve as a sitting
            place for people.  Types of seating devices include sofas,
            chairs, benches, camp and stadium stools, theatre seats,
            swings, bicycle seats, saddles, and more.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SecondOrderCollection">
        <rdfs:label xml:lang="en">second order collection</rdfs:label>
        <rdfs:comment>The collection of all specs of
            #$FirstOrderCollection.  Any instance of any instance of
            #$SecondOrderCollection is a #$FirstOrderCollection.  Any
            instance of any instance of any instance of
            #$SecondOrderCollection is an #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedOrderCollection"/>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Secretion-Bodily">
        <rdfs:label xml:lang="en">#$Secretion-Bodily</rdfs:label>
        <rdfs:comment>The collection of all #$NaturalTangibleStuff
            secreted by an organism&apos;s body.  There are a wide
            variety of bodily secretions, including #$Hormones, #$Mucus,
            #$InsulinTheSecretion, and #$Semen.  Secretions may be
            deposited either within the body (e.g., #$BileTheSecretion)
            or outside of it (e.g., #$Sweat).   Note: Secretions are
            different from #$ExcretionSubstance in that secretions are
            not necessarily waste products.  E.g., they may be a release
            of pheromones to attract a mate, a layer of sweat to cool
            off the organism, a layer of nectar to attract bees, etc.
            Some subsets of #$Secretion-Bodily, such as #$Sweat, are
            also subsets of #$ExcretionSubstance (i.e., wastes).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SecretionEvent">
        <rdfs:label xml:lang="en">secreting</rdfs:label>
        <rdfs:comment>A specialization of both #$EmittingAnObject and
            #$BiologicalProductionEvent.  Each instance of
            #$SecretionEvent is an event in which a living animal or
            plant secretes from its body some instance of
            #$Secretion-Bodily (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalProductionEvent"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SectorShaped">
        <rdfs:label xml:lang="en">sector shaped</rdfs:label>
        <rdfs:comment>The collection of all pie slice shaped
            two-dimensional objects.  Two line segments and the arc of a
            circle form a closed area and define this shape.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapedThing"/>
        <rdfs:subClassOf rdf:resource="#TwoDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Security-Emotion">
        <rdfs:label xml:lang="en">#$Security-Emotion</rdfs:label>
        <rdfs:comment>Freedom from danger, fear or anxiety</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Contentment"/>
        <rdfs:subClassOf rdf:resource="#Confidence"/>
    </owl:Class>
    <owl:Class rdf:ID="Seed">
        <rdfs:label xml:lang="en">#$Seed</rdfs:label>
        <rdfs:comment>A specialization of #$PlantBLO.  Each instance of
            #$Seed is a small nodule or granule consisting of a young
            angiosperm and its protective container during the early
            (zygotic and embryonic stages) of development.  If
            conditions are right, instances of #$Seed will grow to
            become adult plants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PlantPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SelectingSomething">
        <rdfs:label xml:lang="en">#$SelectingSomething</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$SelectingSomething is an event, perhaps an extended
            activity, during which something is selected.  Selecting may
            be relatively simple or prolonged and complex; e.g.,
            selecting an apple from a grocery store&apos;s produce
            counter, or choosing a general contractor to build a new
            courthouse.  An instance of #$SelectingSomething may have
            sub-events (see the predicate #$subEvents) which are
            instances of #$Research or #$Evaluating, in which an agent
            gathers information about the options.  The selecting ends
            with a choice being made.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SelfConfidence">
        <rdfs:label xml:lang="en">#$SelfConfidence</rdfs:label>
        <rdfs:comment>Faith in oneself and one&apos;s powers without any
            suggestion of conceit or arrogance.   If one has a large
            portion of #$SelfConfidence, their state of mind is often
            marked by ease and freedom from uncertainty, diffidence, or
            embarrassment.  This is a collection; for an explanation of
            a typical #$FeelingType, see #$Happiness.  A typical more
            specialized #$FeelingType than #$SelfConfidence is #$Vanity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Confidence"/>
    </owl:Class>
    <owl:Class rdf:ID="SelfConfident">
        <rdfs:label xml:lang="en">agents who is self-confident</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being self
            confident. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SelfEmployedWorker">
        <rdfs:label xml:lang="en">self-employed people</rdfs:label>
        <rdfs:comment>A subcollection of #$PersonWithOccupation.  Each
            instance of #$SelfEmployedWorker is a worker who earns a
            living from funds paid directly to him/her by customers, or
            who is paid by a company s/he owns.   Self-employed workers
            have no boss or supervisor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PersonWithOccupation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SelfPoweredDevice">
        <rdfs:label xml:lang="en">self-powered devices</rdfs:label>
        <rdfs:comment>A specialization of both #$MechanicalDevice and
            #$PoweredDevice.  Each instance of #$SelfPoweredDevice has,
            as one of its internal parts, a device which converts some
            kind of potential energy into force.  For example, a
            cordless electric drill would be an instance of
            #$SelfPoweredDevice, since it contains a battery and motor
            that convert electricity stored in the battery into kinetic
            energy.  Other examples of #$SelfPoweredDevices are the
            instances of #$Automobile, which (typically) convert
            gasoline and battery power to get the energy to move.  Of
            course, some muscle power is involved in operating both a
            cordless drill and an automobile, but in neither case is it
            the main part of the power.  Negative exemplars of a
            #$SelfPoweredDevice include all instances of #$Bicycle
            (powered by the people who ride them), cable cars (since
            they are pulled along by cables embedded in the street) and
            subway trains (often powered by an electrified `third rail&apos;).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SellingOrganization">
        <rdfs:label xml:lang="en">#$SellingOrganization</rdfs:label>
        <rdfs:comment>A specialization of #$Organization and #$Vendor.
            Each instance of #$SellingOrganization is an organization
            whose main function is to sell things by conducting sales
            activities.  Specializations include #$SalesDepartment,
            #$AdvertisingAgency, and #$RetailOrganization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Vendor"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Semi-DirectedPathSystem">
        <rdfs:label xml:lang="en">semi-directed path systems</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$PathSystem.  Each instance of
            #$Semi-DirectedPathSystem is a path system SYS in which
            every link LINK is given at least one direction (specified
            by (#$linkFromToInSystem LINK X Y SYS)), and in which every
            loop is given two directions (so in a sense we can ignore
            the directions of loops).  The directions of paths and
            non-loop-cycles (if there are any) in SYS are determined by
            the directions of links in SYS.  When designing a particular
            semi-directed path system, it is convenient to create a
            constant for the system (say SYS1) and to assert that it is
            an instance of #$Semi-DirectedPathSystem (#$isa SYS1
            #$Semi-DirectedPathSystem)). One can then create a constant
            for each node (such as Node1) in the system, and a constant
            for each link (such as LinkA) in the system (using (#$isa
            LinkA #$Path-Simple)), and then assert the directions of
            links using #$linkFromToInSystem (e.g.,
            (#$linkFromToInSystem LinkA Node1 Node2 SYS1)).  The axioms
            for #$linkFromToInSystem will allow one to infer other
            assertions, such as those involving #$pointOnPath,
            #$linkBetweenInSystem, #$nodeInSystem, and #$linkInSystem.
            One can then proceed creating loops, isolated points, and
            extra points on links, if they are desired.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="SemiSolidTangibleThing">
        <rdfs:label xml:lang="en">semi solid tangible thing</rdfs:label>
        <rdfs:comment>An instance of #$TangibleStuffStateType (q.v.);
            the collection of tangible things that are tactually
            intermediate between solids and fluids.  When a semisolid
            object is subjected to a sufficient force, it deforms
            substantially and does not break or crack. It may return to
            its original shape, like a sponge, or retain the shape which
            resulted from the applied force, like soft clay.  As with
            #$SolidTangibleThings, semisolids have shapes independent of
            their containers (see #$ContainerIndependentShape) and they
            cannot be poured.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Semicircle">
        <rdfs:label xml:lang="en">semicircle</rdfs:label>
        <rdfs:comment>A specialization of #$RoundShape.  Each instance
            of #$Semicircle is a spatial object having the form of a
            half circle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SemiconductorStuff">
        <rdfs:label xml:lang="en">semiconductors</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$SemiconductorStuff can, under varying
            electrical fields, behave as an electrical insulator at
            times and an electrical conductor at other times.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SendingSomething">
        <rdfs:label xml:lang="en">sending events</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Agent
            intends to have an object (other than itself) delivered to
            some other #$Agent. This involves at least a temporary loss
            of some user rights to the object by the sender.  If
            successful, an instance of #$SendingSomething is also an
            instance of #$TransferringPossession.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sensor">
        <rdfs:label xml:lang="en">senses</rdfs:label>
        <rdfs:comment>The collection of devices, biological or
            artificial, that gather information.    Note:  If a
            well-known named part of such an entity does the
            data-gathering, then generally only those parts are
            considered sensors, not the whole entity.  E.g., even though
            a person gathers information, we generally do not consider
            them to be a sensor, but rather the sensors are their eyes,
            ears, skin, etc.  In a context such as an ophthalmology
            convention, `well-known part&apos; has a different binding,
            and they would consider just certain parts of the eye to be sensors.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SensoryInformation">
        <rdfs:label xml:lang="en">#$SensoryInformation</rdfs:label>
        <rdfs:comment>A specialization of #$MentalInformation.  Each
            instance of #$SensoryInformation is the propositional
            content of a mental state in which an animal or other
            sentient being perceives something.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MentalInformation"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="SensoryReactionType">
        <rdfs:label xml:lang="en">#$SensoryReactionType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$SensoryReactionType is a type of sensation (e.g., pain,
            pressure, pleasure, or warmth) that may be felt by instances
            of #$PerceptualAgent (q.v.).  Instances of
            #$SensoryReactionType include #$LevelOfPain,
            #$LevelOfDiscomfort, and #$LevelOfRelaxationFeeling.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrimitiveScalarIntervalType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="Sentence">
        <rdfs:label xml:lang="en">sentence</rdfs:label>
        <rdfs:comment>The collection of all sentences of any (natural or
            artificial) language.  This excludes  open  formulae of
            formal languages: expressions that are like sentences except
            for containing one or more unbound (or  free ) variables.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SententialConstituent">
        <rdfs:label xml:lang="en">sentential constituents</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            sentential constituent is a possible part of a natural
            language sentence, such as a noun phrase or verb phrase.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SententialConstituentType">
        <rdfs:label xml:lang="en">types of sentential constituent</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all subcollections, or types, of
            #$SententialConstituent. Any instance of this collection is
            itself a collection of #$SententialConstituents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TermPhrasesConstraint"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="SententialRelation">
        <rdfs:label xml:lang="en">#$SententialRelation</rdfs:label>
        <rdfs:comment>A collection of mathematical objects.  Each
            instance of #$SententialRelation is by definition either a
            #$LogicalConnective or a #$Quantifier.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScopingRelation"/>
        <rdfs:subClassOf rdf:resource="#TruthFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SeparatingAMixture">
        <rdfs:label xml:lang="en">separating a mixture</rdfs:label>
        <rdfs:comment>A specialization of #$Separation-Complete.  In
            each instance of #$SeparatingAMixture, an instance of
            #$Mixture is separated into two or more of its constituents
            (see the predicate #$constituents).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#PhysicalTransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#ReversibleProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Separation-Complete">
        <rdfs:label xml:lang="en">complete separations</rdfs:label>
        <rdfs:comment>A specialization of #$SeparationEvent.  In each
            instance of #$Separation-Complete, one object is separated
            into two or more distinct, unconnected pieces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SeparationEvent">
        <rdfs:label xml:lang="en">#$SeparationEvent</rdfs:label>
        <rdfs:comment>A sub-collection of #$PhysicalEvent.  In each
            instance of #$SeparationEvent, an object is cut, scraped,
            broken, cracked or pulverized, so that part of the object is
            no longer attached where it once was.  Note that the part
            need not be completely separated from the object; it may
            still be attached in places.  See the specialization
            #$Separation-Complete for the case of complete separation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="September">
        <rdfs:label xml:lang="en">September</rdfs:label>
        <rdfs:comment>A specialization of #$CalendarMonth.  Each
            instance of #$September is the ninth month of a particular
            year in the #$GregorianCalendar (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SerialNumber-String">
        <rdfs:label xml:lang="en">#$SerialNumber-String</rdfs:label>
        <rdfs:comment>A specialization of #$UniqueID and #$IDString.
            Each instance of #$SerialNumber-String is a number that is
            assigned by the manufacturer of a device to that device and
            which uniquely identifies that device among all the other
            devices of that type the manufacturer has made.
            Manufacturers usually assign these strings serially, so
            among two devices of the same type from the same
            manufacturer the one having the largest serial number is
            typically the one most recently made.  The instances of this
            collection are typically called  serial numbers  although
            they often are comprised of characters other than numbers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UniqueID"/>
        <rdfs:subClassOf rdf:resource="#IDString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Series">
        <rdfs:label xml:lang="en">series</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalThing.  Each
            instance of #$Series is a complex temporal thing in which
            two or more other things are ordered in a linear fashion.
            Examples include a line of people at a ticket booth (an
            instance of the specialization #$PhysicalSeries) and a
            series of pitches in a baseball game (an instance of the
            specialization #$EventSeries).  In each instance of
            #$Series, there is some relation by which its members are
            ordered (see the related predicate #$seriesOrderedBy); this
            relation often varies from series to series.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ServerProgram">
        <rdfs:label xml:lang="en">#$ServerProgram</rdfs:label>
        <rdfs:comment>A specialization of #$NetworkingProgram. Each
            instance of this collection is a #$ComputerProgram-CW used
            to process requests that come in across a #$ComputerNetwork.
            It is thus to be contrasted with #$LocalProgram. More
            technically, the defining characteristic of a
            #$ServerProgram is that it listens on a port.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ApplicationProgram"/>
    </owl:Class>
    <owl:Class rdf:ID="ServiceEstablishment">
        <rdfs:label xml:lang="en">commercial service establishments</rdfs:label>
        <rdfs:comment>A specialization of both
            #$CommercialServiceOrganization and
            #$SingleSiteLocalOrganizationWithClients.  Each instance of
            #$ServiceEstablishment is a local, commercial service
            organization with a single physical location.  Notable
            specializations of #$ServiceEstablishment include
            #$Restaurant-Organization and #$Bar-DrinkingEstablishment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ServiceEvent">
        <rdfs:label xml:lang="en">#$ServiceEvent</rdfs:label>
        <rdfs:comment>A specialization of #$HelpingAnAgent.  Each
            instance of #$ServiceEvent is an event in which one or more
            agents (related to the event via the predicate
            #$providerOfService) do something for one or more other
            agents (related to the event via the predicate
            #$recipientOfService).  A service event may involve
            maintenance, repair, or refurbishing of some object
            belonging to the recipient(s) of the service (including care
            of his/her person), or it may involve gathering or
            transmitting information, providing advice, entertainment,
            transportation, etc. to the recipient(s).   Service events
            may or may not be done for payment.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HelpingAnAgent"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ServiceOrganization">
        <rdfs:label xml:lang="en">services (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$ServiceOrganization is an organization whose main
            function is to provide some service or services (as opposed,
            e.g., to mainly selling goods or manufacturing products).  A
            service organization might or might not be a subsidiary or
            department in some larger organization; it might or might
            not be  a for-profit organization (for-profit service
            organizations are instances of the subcollection
            #$CommercialServiceOrganization). Notable specializations of
            #$ServiceOrganization include #$MedicalCareOrganization,
            #$ShippingOrganization, and #$Restaurant-Organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ServingFoodOrDrink">
        <rdfs:label xml:lang="en">events in which food or drink is served</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PuttingSomethingSomewhere and #$CarryingWhileLocomoting.
            Each instance of #$ServingFoodOrDrink is an event in which
            an item of food or drink is served.  Each instance starts
            when the server picks up the food or drink from a
            preparation or pickup area, and ends when the food or drink
            is deposited at a location where the people being served may
            eat or drink it.  Such events are typically part of the job
            of any restaurant server who waits on tables (see the
            collection #$WaitPerson), and they may also be performed by
            a host or servant at a dinner party or banquet, or by a
            family member at a home meal.  Note that events in which a
            `serving&apos; of food is placed from a common dish onto a
            diner&apos;s plate are not instances of #$ServingFoodOrDrink.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CarryingWhileLocomoting"/>
        <rdfs:subClassOf rdf:resource="#GivingSomething"/>
        <rdfs:subClassOf rdf:resource="#ManipulatingFood"/>
        <rdfs:subClassOf rdf:resource="#PuttingSomethingSomewhere"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Set-Mathematical">
        <rdfs:label xml:lang="en">sets (types of things)</rdfs:label>
        <rdfs:comment>The collection of mathematical sets.  An instance
            of #$Set-Mathematical  can be any arbitrary set of #$Things.
            A good way to explain the notion  of mathematical set is by
            way of contrast with #$Set-Mathematical&apos;s sibling
            #$Collection (q.v.).  First, while the elements of a given
            collection all  have some important (often  natural )
            properties in common, the elements  in a given set might
            have nothing in common (besides membership in that set).
            Second, while two distinct collections might have exactly
            the same elements,  this cannot happen in the case of sets.
            Third (and specifically regarding  their expression in the
            CycL language), unlike with collections, rarely will  it be
            desirable to create a new constant to denote a particular
            set.  Instead,  a set will often be either (a) intensionally
            specified by a defining property, using #$TheSetOf (q.v.),
            as in `(#$TheSetOf ?X (#$and (#$isa ?X #$Integer)
            (#$greaterThan ?X 42)))&apos;, or (b) extensionally
            specified by enumerating its elements, using #$TheSet
            (q.v.), as in `(#$TheSet 3 4 5)&apos;; see also
            #$ThePartition and #$TheCovering.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SetOrCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="SetDenotingFunction">
        <rdfs:label xml:lang="en">set-denoting functions</rdfs:label>
        <rdfs:comment>The subcollection of #$Function-Denotational whose
            instances, when applied to any appropriate (sequence of)
            arguments, return instances of #$Set-Mathematical.  Examples
            include #$ThePartition, #$TheCovering, and #$PowerSetFn.
            Cf. #$CollectionDenotingFunction,
            #$IndividualDenotingFunction, and #$FunctionDenotingFunction.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="SetOfInferenceBindingSets">
        <rdfs:label xml:lang="en">#$SetOfInferenceBindingSets</rdfs:label>
        <rdfs:comment>Each instance of #$SetOfInferenceBindingSets is a
            set of answers to a CycL Query.  Because each answer will
            include bindings for each free variable in the query
            formula, the elements of a #$SetOfInferenceBindingSets will
            each be instances of #$InferenceBindingSet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Set-Mathematical"/>
    </owl:Class>
    <owl:Class rdf:ID="SetOrCollection">
        <rdfs:label xml:lang="en">intensional or extensional sets</rdfs:label>
        <rdfs:comment>A specialization of #$MathematicalThing.
            Something is an instance of #$SetOrCollection just in case
            it is a collection (i.e. an instance of #$Collection) or a
            mathematical set (i.e. an instance of #$Set-Mathematical).
            Instances of #$Set-Mathematical and instances of
            #$Collection (and thus instances of #$SetOrCollection) share
            some basic common features.  All instances of #$Collection
            and all instances of #$Set-Mathematical (and thus all
            instances of #$SetOrCollection) are abstract entities,
            lacking spatial and temporal properties.  Nearly all
            instances of #$Collection (except  empty  collections) and
            nearly all instances of #$Set-Mathematical (except the empty
            set; see #$TheEmptySet) have  elements  (i.e. instances or
            members; see #$elementOf); hence set-or-collections may
            stand to one another in generalized set-theoretic relations
            such as #$subsetOf and #$disjointWith (qq.v.).  (It is this
            shared feature of having elements that provides the basic
            rationale for reifying the collection #$SetOrCollection.)
            Nevertheless, sets and collections differ in two important
            ways.  First, each collection is intrinsically associated
            with an intensional criterion for membership -- a more or
            less natural property (or group of properties) possessed by
            all of (and only) its elements.  Collections are thus akin
            to kinds.  In contrast, the elements of a set are not
            required to be homogeneous in any respect: any things
            whatsoever may together constitute the elements of a set.
            The second major difference between sets and collections is
            that no two distinct sets can be coextensional (i.e. have
            exactly the same elements; see #$coExtensional).  Sets can
            thus be identified purely on the basis of their extensions
            (see #$extent).  Collections, on the other hand, are
            individuated by their intensional criteria for membership.
            So collections that have exactly the same elements might
            nevertheless be distinct, differing in their respective
            membership criteria.  (Note that the general relationship
            between collections and their  intensional criteria for
            membership  in the above sense is not something that is
            currently represented explicitly in the Knowledge Base
            (though this seems a worthwhile area for future work); still
            the #$comment and other  definitional  assertions on a given
            collection should ideally convey a reasonably clear and
            precise idea of its associated membership criterion.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalThing"/>

    </owl:Class>
    <owl:Class rdf:ID="SetOrCollectionType">
        <rdfs:label xml:lang="en">types of Cyc set or collection</rdfs:label>
        <rdfs:comment>The #$Collection of all #$SetOrCollections of #$SetOrCollections.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SetOrCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="SexualArousal">
        <rdfs:label xml:lang="en">sexual arousal</rdfs:label>
        <rdfs:comment>The states of SexualArousal; sexual stirrings or
            physical readiness for sexual activity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="SexualGratification">
        <rdfs:label xml:lang="en">sexual gratification</rdfs:label>
        <rdfs:comment>The states of #$SexualGratification; such a state
            is ordinarily achieved after an #$UrgeToHaveSex has been satisfied.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="SexualReproductionEvent">
        <rdfs:label xml:lang="en">sexual reproduction</rdfs:label>
        <rdfs:comment>A specialization of #$BiologicalReproductionEvent.
            In each instance of #$SexualReproductionEvent, two
            #$parentActors produce one or more offspring.  Sexual
            activity which does not result in offspring is not included
            in this concept.  On the other hand, if offspring begin to
            develop, but never finish (e.g., it just hasn&apos;t
            finished yet, or the mother dies, or the offspring is
            aborted, or the offspring doesn&apos;t survive to
            independence, etc.), then that is still considered an
            instance of #$SexualReproductionEvent but an incomplete one.
            The example of #$SexualReproductionEvent most familiar to
            most people is when two mammals, one male and one female,
            mate; sperm from the male combines with one or more eggs
            inside the female and the resulting offspring develop(s),
            inside the female parent and dependent upon her for
            nutrition, until it/they is/are born.  However,
            #$SexualReproductionEvent is more general than that, and
            would include these examples: Two birds mate; the female
            lays one or more eggs; both parents incubate the eggs until
            they hatch.  Two fish engage in courtship; the female
            expells her eggs; the male expells his sperm on top of them,
            and they swim away leaving many fertilized eggs to develop
            into juvenile fish.  One oak tree&apos;s flowers give off
            airborne pollen; some grains land on the stigma of another
            tree&apos;s flower and fertilize the ovary inside, which
            then develops into an acorn which is shed by the female
            parent at the end of summer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalReproductionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shaft">
        <rdfs:label xml:lang="en">#$Shaft</rdfs:label>
        <rdfs:comment>A specialization of both #$Artifact and
            #$SolidTangibleProduct.  Each instance of #$Shaft is an
            artifact that is long, straight, cylindrical, and rigid.
            Instances of #$Shaft are usually made of wood, metal, or plastic.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shame">
        <rdfs:label xml:lang="en">shame</rdfs:label>
        <rdfs:comment>Painful self-conscious feeling of guilt,
            shortcoming, or impropriety.  #$Shame often accompanies
            social disgrace or disrepute.  It often leads to #$Remorse.
            This is a collection; for an explanation of a typical
            #$FeelingType, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Embarrassment"/>
    </owl:Class>
    <owl:Class rdf:ID="Shameful">
        <rdfs:label xml:lang="en">agents who feels shame</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            shameful. Use this constant with a #$GenericValueFunction to
            denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapeChangeEvent">
        <rdfs:label xml:lang="en">shape changes</rdfs:label>
        <rdfs:comment>A specialization of #$IntrinsicStateChangeEvent
            (q.v.) whose instances are events involving a physical
            object&apos;s changing shape.   A #$ShapeChangeEvent occurs
            when either (i) the  shape of some (usually more or less
            plastic ) object is changed in a fairly significant way,
            (ii) an object is created (see #$PhysicalCreationEvent)
            through a process in which a definite shape is imposed on
            some material, or (iii) an object is destroyed (see
            #$PhysicalDestructionEvent) through some process in which
            its shape is so radically altered that the it can no longer
            be said to exist.  Examples of these three respective cases
            include flattening an aluminum can with one&apos;s foot,
            fashioning a figure from clay, and steamrolling a birthday
            cake.  Shape changes are usually (though not necessarily
            always) the result of the shapee&apos;s being acted upon by
            another tangible thing (or things).  When a shape change of
            type (i) or (ii) occurs via the purposeful actions of some
            agent, the event is a #$ShapingSomething(q.v.).  Note that,
            in most contexts, very gradual changes in an object&apos;s
            shape -- such as instances of #$Growth-Physical or #$Erosion
            -- are not #$ShapeChangeEvents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#MovementOrShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapeChangeWithoutLosingMaterial">
        <rdfs:label xml:lang="en">events in which an object changes
            shape without losing material</rdfs:label>
        <rdfs:comment>The collection of all events in which the shape of
            an object changes without the object losing or gaining
            material.  This includes natural shape-change events (like
            coils loosening or tree branches swaying in the wind),
            animals moving parts of their bodies, and objects being
            intensionally deformed by outside agents (for which, see #$ShapingWithoutRemovingMaterial).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapeDescribingPredicate">
        <rdfs:label xml:lang="en">shape-describing predicates</rdfs:label>
        <rdfs:comment>A specialization of
            #$PhysicalFeatureDescribingPredicate.  Each instance of
            #$ShapeDescribingPredicate is a predicate used in assertions
            about abstract shapes and shape-like configurations, such as
            posture.  Examples: #$shapeOfObject, #$xyCrossSectionShape,
            #$yzCrossSectionShapeType, #$continuouslyConnectedTo, #$postureOfAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalFeatureDescribingPredicate"/>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapeFunction">
        <rdfs:label xml:lang="en">#$ShapeFunction</rdfs:label>
        <rdfs:comment>A specialization of #$IndividualDenotingFunction;
            an instance of #$FunctionCategory.  Each instance of
            #$ShapeFunction returns an element of
            #$GeometricThing-Abstract.  Notable examples of
            #$ShapeFunction include #$RectangleFn, #$EllipseFn,
            #$CircleFn, #$RectangularSolidFn, #$CylinderFn, etc.  Each
            shape function takes as argument(s) the dimension(s) of
            #$Distance needed to determine a geometric shape of that
            kind, then returns an abstract shape which has those
            dimensions.  For example, (#$CylinderFn L D) denotes an
            abstract cylinder of length L and diameter D.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapeType">
        <rdfs:label xml:lang="en">#$ShapeType</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$ShapeType is a subcollection of #$SpatialThing (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapedThing">
        <rdfs:label xml:lang="en">shaped thing</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing and the most
            general instance of #$ShapeType (q.v.).  Each instance of
            #$ShapedThing is a spatial object that has some well-defined
            shape.  Of course, what  counts as a  well-defined shape
            can vary from context to context.  Specializations of
            #$ShapedThing include #$Polygon and #$AnimalShaped.
            Contrast with #$AmorphousThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapingSomething">
        <rdfs:label xml:lang="en">shaping events</rdfs:label>
        <rdfs:comment>A specialization of both #$ShapeChangeEvent and
            #$MaterialHandling (qq.v.). Each instance of
            #$ShapingSomething is an event in which something (usually
            more or less  plastic  in nature) is given a definite shape,
            or has its  shape changed, through the purposeful actions of
            an agent.  Specializations include #$Carving, #$Sewing, and
            #$SpreadingOntoSurface.  In many (but not  all) cases, an
            instance of #$ShapingSomething is also a
            #$PhysicalCreationEvent  (see e.g. #$MakingPottery).
            Normally, a #$ShapingSomething concerns the basic,  overall
            shape of the object of change (see #$objectOfStateChange).
            Thus, a  #$PolishingSomething event is not a
            #$ShapingSomething, as it doesn&apos;t affect  the basic
            shape of the object being polished.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MaterialHandling"/>
        <rdfs:subClassOf rdf:resource="#ShapeChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShapingWithoutRemovingMaterial">
        <rdfs:label xml:lang="en">forging</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$ShapingWithoutRemovingMaterial event, an object&apos;s
            shape is changed without removing part of the original object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeChangeWithoutLosingMaterial"/>
        <rdfs:subClassOf rdf:resource="#ShapingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SharedNote">
        <rdfs:label xml:lang="en">shared note</rdfs:label>
        <rdfs:comment>A subcollection of #$DocumentationConstant.
            Shared notes are pieces of documentation stored in the Cyc
            Knowledge  Base in which two or more CycL terms (usually
            constants) are   discussed together.  They are used in cases
            where such   joint-documentation is deemed more effective or
            efficient than   including the same information in a
            separate comment or cyclist-note  for each of the relevant
            terms would be.  To be precise: each   instance of
            #$SharedNote is a piece of text (see #$TextString)   in
            which two or more #$CycLIndexedTerms are discussed; this
            text   is given as the comment (see #$comment) on the
            #$SharedNote&apos;s   constant.  The predicate #$sharedNotes
            (q.v.) is used to relate   terms to their respective shared-notes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DocumentationConstant"/>
        <rdfs:subClassOf rdf:resource="#TextString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Sharing">
        <rdfs:label xml:lang="en">sharing</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$MakingSomethingAvailable (among other supercollections).
            In an instance of #$Sharing, one #$Agent receives
            #$PrimaryRoleUseRights over an object for a limited time
            from another #$Agent, who doesn&apos;t give up his or her
            own right to use it, too (but does give up exclusive right
            to it).  Cf. #$BorrowingSomething.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MakingSomethingAvailable"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShatteringEvent">
        <rdfs:label xml:lang="en">shattering</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PhysicalDestructionEvent and #$Separation-Complete.  In
            each instance of #$ShatteringEvent, something is destroyed
            by being broken into a large number of pieces.  Since the
            salient parts of the object destroyed must be brittle (see
            the constant #$Brittle) in order for this to happen, fluids
            (such as liquid water) and elastic stuff (such as rubber at
            room temperature) will generally not undergo any
            #$ShatteringEvents.  Items which can be an #$objectActedOn
            in shattering events are typically made of glass, pottery,
            bone, plaster, or other brittle material.  Many substances,
            particularly solid metals and alloys, are extremely
            difficult to shatter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShavingSomething">
        <rdfs:label xml:lang="en">#$ShavingSomething</rdfs:label>
        <rdfs:comment>A collection of events. In each #$ShavingSomething
            event, thin pieces of material on an object&apos;s surface
            are removed. An example would be someone whittling a wooden
            spoon, someone using a lathe to make a table leg, someone
            scraping the top layer of mold and cheese off a brick of
            cheese that was left in the refrigerator just a little too
            long, etc. WARNING: an event in which someone
            ``shaves&apos;&apos; their body hair (a #$ShavingBody event)
            from one&apos;s face, legs, etc. with a shaver or razor is
            NOT a #$ShavingSomething event; rather, it is an instance of
            the collection #$CuttingSomething.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CuttingInPieces"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
        <rdfs:subClassOf rdf:resource="#Motion-SolidAgainstSolid"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SheetOfSomeStuff">
        <rdfs:label xml:lang="en">#$SheetOfSomeStuff</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible.  Each
            instance of #$SheetOfSomeStuff is a partially tangible thing
            which (in its  intrinsic  shape -- see
            #$CurrentShapeVsIntrinsicShape) is continuous and, when
            flattened, uncrumpled, unfurled, etc., has one dimension
            which is significantly smaller than the other two
            dimensions.  Although each instance of #$SheetOfSomeStuff is
            a _continuous_ sheet, it may be penetrable, so
            #$Screen-Mesh, #$Netting, and #$LaceCloth are
            specializations of #$SheetOfSomeStuff.  Instances of
            #$SheetOfSomeStuff  may be in solid, liquid, or gaseous
            form.  An instance of #$Puddle on a relatively flat surface
            (but not in a deep pothole) or an instance of
            #$AltoStratusCloud would be instances of this collection.
            Note that being an instance of #$SheetOfSomeStuff implies
            nothing about the current configuration of the instance; in
            particular, instances of #$SheetOfSomeStuff need not be
            perpetually lying flat.  For example, aluminum foil on a
            roll or a bedspread crumpled up on a bed are instances of
            #$SheetOfSomeStuff. Cf. #$SheetShaped.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SheetShaped">
        <rdfs:label xml:lang="en">sheet shaped</rdfs:label>
        <rdfs:comment>An instance of #$ShapeType.  #$SheetShaped refers
            to an object that is flat and spread out, planar, and
            neither fully crumpled nor compactly folded.  Such an object
            has two opposing surfaces which have the attribute #$Flat
            (q.v.). The other surfaces have much smaller area than the
            two main flat surfaces.   Thus, one of the three orthogonal
            dimensions (length, width or height) of a #$SheetShaped
            object is much smaller than the other two.  Ice over ponds,
            and sheets of paint on a house are all possible examples of
            such objects.  A bedspread is #$SheetShaped only if it is
            not folded into a small volume or crumpled.  See
            #$CurrentShapeVsIntrinsicShape. For describing a sheet of
            something (e.g., waxed paper, aluminum foil, cloth)
            regardless of its configuration, use #$SheetOfSomeStuff.
            For &apos;one-sided&apos; surfaces (see
            #$SurfaceOnTangibleObject), such as
            &apos;TheGreatPlains&apos; #$SheetShaped is not appropriate
            but #$Flat is appropriate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shell-AnimalBodyPart">
        <rdfs:label xml:lang="en">#$Shell-AnimalBodyPart</rdfs:label>
        <rdfs:comment>A specialization of #$SkeletalSystem and
            #$ExternalAnatomicalPart. Each instance of
            #$Shell-AnimalBodyPart is an external part of an
            animal&apos;s body which functions as a hard protective
            outer covering for it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#SkeletalSystem"/>
        <rdfs:subClassOf rdf:resource="#ProtectiveSystem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShelterConstruction">
        <rdfs:label xml:lang="en">#$ShelterConstruction</rdfs:label>
        <rdfs:comment>A specialization of #$ConstructionArtifact.  Each
            instance of #$ShelterConstruction is an artifact built by
            some agent, including but not limited to humans, and
            intended for use as a shelter.  Instances of
            #$ShelterConstruction include bird nests, termite mounds,
            beaver dams, the #$SydneyOperaHouse, the
            #$PalaceOfFineArts-SanFrancisco, and the #$NewYorkHiltonAtBroadway.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Ship">
        <rdfs:label xml:lang="en">#$Ship</rdfs:label>
        <rdfs:comment>#$Ship is a specialization of
            #$HumanlyOccupiedSpatialObject, #$PoweredDevice, and
            #$Watercraft-Surface.  Each instance of #$Ship is a
            typically large and ocean-going vessel. Notable
            specializations of #$Ship include #$ModernNavalShip,
            #$CargoShip, and #$OceanLiner.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#Watercraft-Surface"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shipping">
        <rdfs:label xml:lang="en">shipping events</rdfs:label>
        <rdfs:comment>Shipping of objects from one physical location to
            another. Shipping from the perspective of being done as a
            dedicated service, such as what UPS, the US Postal Service,
            or Dominoes Pizza Delivery might do.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ControllingAPhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ConveyingMaterials"/>
        <rdfs:subClassOf rdf:resource="#DeliveringSomeoneSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShippingAddress">
        <rdfs:label xml:lang="en">shipping addresses</rdfs:label>
        <rdfs:comment>A specialization of #$MailingAddress. Each
            instance of #$ShippingAddress is a mailing address which
            does not include a P.O. Box number.  Typically then, a
            shipping addresses includes a street name and number and
            often an apartment or suite number. For example: `3721
            Executive Center Drive, Suite 100, Austin, TX 78731&apos;,
            the shipping address of Cycorp.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MailingAddress"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="ShippingLocation">
        <rdfs:label xml:lang="en">shipping locations</rdfs:label>
        <rdfs:comment>A specialization of #$MailingLocation.  Each
            instance of #$ShippingLocation is a location to which
            merchandise can be physically delivered, e.g., a house, an
            office, a corporate mailroom, a post office box.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MailingLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShippingOrganization">
        <rdfs:label xml:lang="en">shipping companies</rdfs:label>
        <rdfs:comment>#$ShippingOrganization is a specialization of
            #$ServiceOrganization, #$TransportationOrganization, and
            #$TransportationCompany-Provider.  Each instance of
            #$ShippingOrganization is an organization whose main
            function is to ship objects for its customers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationOrganization"/>
        <rdfs:subClassOf rdf:resource="#TransportationCompany-Provider"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shirt">
        <rdfs:label xml:lang="en">shirts</rdfs:label>
        <rdfs:comment>#$Shirt is a specialization of #$Clothing-Top.
            Each instance of #$Shirt is a clothing item that is worn to
            cover the upper part of the human torso, with openings for
            the neck and lower body, and either openings for, or sleeves
            encircling, the arms.  Specializations of #$Shirt include
            #$LongSleeveShirt, #$Blouse, and #$TankTop.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Top"/>
        <rdfs:subClassOf rdf:resource="#EnvelopingCovering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Shoe">
        <rdfs:label xml:lang="en">#$Shoe</rdfs:label>
        <rdfs:comment>A specialization of #$ClothingItem.  Each instance
            of #$Shoe is a shoe (or shoelike thing) worn on the feet.
            Important specializations of #$Shoe include #$Boot-Footwear,
            #$Sandal, #$Slipper, and #$CasualShoe.  Note that instances
            of the collection #$Shoe are single shoes; pairs of shoes
            are instances of the collection (#$PairFn #$Shoe).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShortPants">
        <rdfs:label xml:lang="en">short pants</rdfs:label>
        <rdfs:comment>A specialization of #$Pants. Each instance of
            #$ShortPants is a pair of pants with pantlegs that cover
            only the upper part of the wearer&apos;s legs, being
            typically knee-length or shorter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
        <rdfs:subClassOf rdf:resource="#Pants"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ShreddingEvent">
        <rdfs:label xml:lang="en">#$ShreddingEvent</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PhysicalDestructionEvent and #$SeparationEvent.  In each
            instance of #$ShreddingEvent, some item or items are
            destroyed by a large number of ripping (see the collection
            #$Ripping) sub-events.  An example would be the tearing of
            office files into tiny pieces by a machine designed for that
            purpose. A shirt suddenly tearing due to pressure applied by
            the wearer&apos;s muscles would, however, not be an instance
            of #$ShreddingEvent, but only of #$Ripping.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SiblingDisjointAttributeType">
        <rdfs:label xml:lang="en">types of sibling disjoint attribute</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$SiblingDisjointAttributeType is a collection of
            attributes.  If COL is such a collection, then nothing can
            have two instances of COL as attributes unless those two
            instances are related in a #$genlAttributes relationship to
            each other.  For example, #$MaritalStatusOfPeople is an
            instance of #$SiblingDisjointAttributeType; no person can
            have (at the same time) the #$maritalStatus #$Married and
            the #$maritalStatus #$Single.  However, a person could have
            both the status #$Single and the status #$Divorced, if
            #$Single is a #$genlAttributes of #$Divorced.  See also #$SiblingDisjointCollectionType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="SiblingDisjointCollectionType">
        <rdfs:label xml:lang="en">#$SiblingDisjointCollectionType</rdfs:label>
        <rdfs:comment>A collection of collections of  collections (and
            thus an instance of #$CollectionTypeType and a
            specialization of #$CollectionType).  A sibling-disjoint
            collection type is such that its  instances are collections
            that -- save for any that are related to each other by
            #$genls and any that are explicitly asserted to be
            exceptions (see  #$siblingDisjointExceptions) -- are
            disjoint from each other.  More precisely,  each instance
            SIB of #$SiblingDisjointCollectionType is a collection of
            collections that has the following property: For any two
            instances COL1  and COL2 of SIB, either (#$genls COL1 COL2),
            (#$genls COL2 COL1),  (#$siblingDisjointExceptions COL1
            COL2), or (#$disjointWith COL1 COL2)  holds.  Moreover, note
            that if MT is a context (see #$Microtheory) in which (i)
            both (#$isa COL1 SIB) and (#$isa COL2 SIB) hold and (ii)
            neither (#$genls COL1 COL2) nor (#$genls COL2 COL1) nor
            (#$siblingDisjointExceptions COL1 COL2) is known to hold
            (see  #$knownSentence), then (#$disjointWith COL1 COL2)
            holds by default in MT.   For example, in #$BiologyMt both
            #$Person and #$Dog are instances of the  sibling-disjoint
            collection type #$BiologicalSpecies, while neither  (#$genls
            #$Person #$Dog) nor (#$genls #$Dog #$Person) nor
            (#$siblingDisjointExceptions #$Person #$Dog) is known to
            hold in that  context; consequently, (#$disjointWith
            #$Person #$Dog) holds by default  in #$BiologyMt.  Instances
            of #$SiblingDisjointCollectionType include
            #$BiologicalTaxon (and its specializations),
            #$DefaultDisjointScriptType,  #$OrganismPartType, and #$RelationshipTypeByArity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#SiblingDisjointSetOrCollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="SiblingDisjointSetOrCollectionType">
        <rdfs:label xml:lang="en">sibling disjoint set or collection types</rdfs:label>
        <rdfs:comment>A collection of mathematical sets and collections
            the members of which are themselves mathematical sets or
            collections.  A set or collection, SETORCOL, of sets or
            collections is an instance of
            #$SiblingDisjointSetOrCollectionType just in case for all
            elements X and Y of SETORCOL, either X and Y have no common
            elements or X is a subset of Y or Y is a subset of X.  (See
            also #$SiblingDisjointCollectionType.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SetOrCollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Side">
        <rdfs:label xml:lang="en">sides</rdfs:label>
        <rdfs:comment>A specialization of #$Surface-Physical.  Each
            instance of #$Side is a surface of some partially tangible
            object, and serves as a boundary between the inside and
            outside of that object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SignTheDisplay">
        <rdfs:label xml:lang="en">#$SignTheDisplay</rdfs:label>
        <rdfs:comment>A specialization of
            #$HardcopyInformationBearingObject. Each instance of
            #$SignTheDisplay is a physical object typically placed where
            #$Persons can see it so that they can obtain (generally
            propositional) information from it. Signs are typically used
            to identify objects (e.g., street signs, name tags, species
            labels at zoos), to advertise goods (e.g., billboards, neon
            signs, posters for garage sales), and to warn of hazards
            (e.g., signs for road hazards or road construction, printed
            tape marking off a police line). #$SignTheDisplay differs
            from #$SymbolicObject in displaying specific information
            rather than symbolizing another thing, though the two
            collections are obviously not disjoint. See also
            #$signifiesTo, #$signifiedBy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Signal">
        <rdfs:label xml:lang="en">#$Signal</rdfs:label>
        <rdfs:comment>A specialization of #$InformationBearingThing
            (IBT).  Each instance of #$Signal is an IBT which may be
            interpreted (whether by a conscious user of learned
            signalling rules, by a computer program, or even by a cell
            in terms of its subsequent behaviour) as conveying some
            specific information. Examples include car-horn honkings,
            internet packets, and proteins which travel into cells
            across the plasma membrane. An important specialization of
            this collection is #$InformationBearingWavePropagation. Note
            that this collection is intended to embrace only signals
            themselves, not events of signalling. On the importance of
            keeping these two separate, see the comment on
            #$InformationBearingThing. The distinction between this
            collection and #$SymbolicThing lies in the fact that
            #$Signals are one-time-only transfers of specific
            information, whereas a #$SymbolicThing is open to its
            characteristic interpretation any time it is encountered.
            See also #$signifiesTo, #$signifiedBy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SimpleActionPredicate">
        <rdfs:label xml:lang="en">simple action predicates</rdfs:label>
        <rdfs:comment>A specialization of #$ActionPredicate (q.v.).
            Each instance of #$SimpleActionPredicate is such that a task
            specification formed with it does not decompose into further
            actions, in contrast to specifications formed with instances
            of #$ComplexActionPredicate (q.v.).  By convention,
            expressions that denote relations that are typically
            instances of #$ComplexActionPredicate are characterized by
            having the prefix  do , whereas expressions that denote
            relations that are typically instances of
            #$SimpleActionPredicate lack this prefix.  Note, however,
            that whether a predicate is an instance of
            #$SimpleActionPredicate or #$ComplexActionPredicate depends
            on context.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActionPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SimpleGraph-GraphTheoretic">
        <rdfs:label xml:lang="en">simple graph - graph theoretic</rdfs:label>
        <rdfs:comment>The collection of all #$PathSystems that are
            instances of both #$SimplePathSystem and #$Multigraph.  Each
            instance of #$SimpleGraph-GraphTheoretic is a
            &apos;graph&apos;, as studied in graph theory, in which
            there are neither loops nor multiple links between the same
            pair of nodes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
        <rdfs:subClassOf rdf:resource="#Multigraph"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SimplePathSystem">
        <rdfs:label xml:lang="en">simple path systems</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and the
            collection of #$PathSystems without loops or parallel links.
            This collection includes #$SimpleGraph-GraphTheoretic when
            there are no non-node points along links.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="SimpleRepairing">
        <rdfs:label xml:lang="en">repairing activities</rdfs:label>
        <rdfs:comment>The collection of events in which something gets fixed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WorkingEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#ImprovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SimpleSegmentOfPath">
        <rdfs:label xml:lang="en">simple segments of path</rdfs:label>
        <rdfs:comment>The collection of all segments of #$Path-Generics
            each of which has no path junctions between its ends.  The
            two ends of such a segment may or may not coincide at the
            same location (i.e. a #$SimpleSegmentOfPath may form a loop
            -- see also #$SimpleUnloopedSegmentOfPath and
            #$SimpleLoopedSegmentOfPath).  The only access to something
            located along a #$SimpleSegmentOfPath is via the
            #$endsOfPathSegment locations for that
            #$SimpleSegmentOfPath.  When the segment is part of a
            specified #$PathSystem (as opposed to a mere
            #$CustomarySystemOfLinks), the predicate #$linkInSystem (or
            else #$loopInSystem) may apply to it and the system.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>

    </owl:Class>
    <owl:Class rdf:ID="SimpleWholeBodyMovement">
        <rdfs:label xml:lang="en">simple whole body movement</rdfs:label>
        <rdfs:comment>A collection of common bodily movements (e.g.,
            walking, jumping) in which the whole body is involved in the movement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SimpleWord">
        <rdfs:label xml:lang="en">simple words</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
        <rdfs:subClassOf rdf:resource="#RootWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <owl:equivalentClass rdf:resource="#RootWord"/>
    </owl:Class>
    <owl:Class rdf:ID="SimplifierDirectivePredicate">
        <rdfs:label xml:lang="en">#$SimplifierDirectivePredicate</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which can affect
            the behaviour of the #$CycLSimplifier.  When simplifier
            directive GAFs are asserted, they are only relevant to the
            simplifier when it is simplifying expressions in the
            microtheory in which the directive is asserted, or a specMt thereof.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CanonicalizerDirectivePredicate"/>
        <rdfs:subClassOf rdf:resource="#ReformulatorDirectivePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SingleCellOrganism">
        <rdfs:label xml:lang="en">unicellular organisms</rdfs:label>
        <rdfs:comment>A specialization of both #$Microorganism and
            #$Cell.  Each instance of #$SingleCellOrganism is an
            organism composed of a single self-reproducing living cell.
            Notable specializations of #$SingleCellOrganism include
            #$Protozoan, #$ProkaryoticCell, and #$Algae-LikeProtist.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microorganism"/>
        <rdfs:subClassOf rdf:resource="#Cell"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SingleDoerAction">
        <rdfs:label xml:lang="en">actions with only one performer</rdfs:label>
        <rdfs:comment>A specialization of #$Action.  Each instance of
            #$SingleDoerAction is an action which can have only one
            doer  (see the predicate #$doneBy).  Such actions may be
            intentional, but they need not be.  Most bodily functions
            (e.g., the instances of #$Heartbeating or #$Bleeding) belong
            to specializations of #$SingleDoerAction, because the only
            doer of a normal bodily function is the body of a single
            agent.  In order for a type of action (i.e., a
            specialization of #$Action) to be a specialization of
            #$SingleDoerAction, it must be inconsistent to assert, for
            any instance ACT of that type of action, both (#$doneBy ACT
            X) and (#$doneBy ACT Y), where X and Y are different.
            Notable specializations of #$SingleDoerAction include
            #$Sleeping, #$Dying, #$AnimalWalkingProcess, and #$WritingByHand.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SinglePurposeDevice">
        <rdfs:label xml:lang="en">single purpose devices</rdfs:label>
        <rdfs:comment>A collection of devices each of which has a single
            #$primaryFunction.   Each instance of #$SinglePurposeDevice
            may have more than one function, but will have only one
            _primary_ function.  For example, a car is a single purpose
            device because it has the primary function of providing
            transportation.  Of course, a car can provide shelter as
            well as transportation; but a convertible with a badly torn
            roof still functions as a car (because its primary function
            is transportation) even though it does not function as much
            of a shelter.  It is also possible for a
            #$SinglePurposeDevice to have other functions associated
            with it, even though they are not functions of that device
            per se.  For example, if a car has a cigarette lighter, a
            clock, etc., those parts have their own functions, which are
            performed in the car and enjoyed by the users of the car
            while they are using the car.  However, the functions of
            those devices (lighting cigarettes and telling time) are
            generally not considered to be the functions of the car
            itself.  If someone utters the sentence `Fred used his car
            today&apos; we would guess that Fred drove/rode somewhere in
            the car, and would be surprised/amused/annoyed/confused if
            we later discover that the speaker meant only that Fred used
            the car&apos;s lighter and the clock but didn&apos;t travel
            somewhere by car.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SingleResidenceUnit">
        <rdfs:label xml:lang="en">single-family residences</rdfs:label>
        <rdfs:comment>#$SingleResidenceUnit is a specialization of
            #$ModernHumanResidence.  Each instance of
            #$SingleResidenceUnit is either a modern-style detached
            house, an apartment, or another instance of
            #$ModernHumanResidence designed to accomodate either a
            single person or a single family (i.e., instance of
            #$FamilyCohabitationUnit (q.v.)).  Usually, each instance of
            #$SingleResidenceUnit has a unique mailing address.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ModernHumanResidence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SingleSiteLocalOrganizationWithClients">
        <rdfs:label xml:lang="en">local customer contact points</rdfs:label>
        <rdfs:comment>#$SingleSiteLocalOrganizationWithClients is a
            specialization of both #$SingleSiteOrganization and
            #$LocalOrganization.  Each instance of
            #$SingleSiteLocalOrganizationWithClients is a single-site
            organization serving customers in a local area, working from
            a particular store, office, or other physical quarters where
            customers (or their agents) go in person to speak with
            company representatives about the services or products
            offered.  Instances of
            #$SingleSiteLocalOrganizationWithClients may be either
            stand-alone organizations or sub-organization of a larger
            company.  Notable specializations of
            #$SingleSiteLocalOrganizationWithClients include #$Pharmacy,
            #$AutoDealership, and #$Hospital.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#ContactPointSubOrganization"/>
        <rdfs:subClassOf rdf:resource="#LocalOrganization"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SingleSiteOrganization">
        <rdfs:label xml:lang="en">single site organization</rdfs:label>
        <rdfs:comment>A specialization of #$Organization.  Each instance
            of #$SingleSiteOrganization is an organization that has a
            single location (see #$physicalQuarters).  For example, the
            #$KMartStore at Parmer Lane and the Great Hills FireStation
            Number 2 in Austin are instances.  But #$KMart-TheCompany
            and the Austin City Fire Department are not instances, since
            those  parent  organizations have several sites as their
            physical quarters. To be contrasted with
            #$ChainOrganization, among other things.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Situation">
        <rdfs:label xml:lang="en">situations</rdfs:label>
        <rdfs:comment>A specialization of #$IntangibleIndividual.  Each
            instance of #$Situation is a state of affairs consisting of
            one or more objects playing one or more (often
            inter-related) roles.  Two important specializations of
            #$Situation are: (1) #$Event (q.v.), which consists of
            dynamic situations, and (2) #$StaticSituation (q.v.),
            instances of which exist in time but are not dynamic, and
            are more like a set of static relationships among objects.
            Note that there is often a fine line between (1) and(2).
            Consider Bill Clinton sitting in his easy chair on the
            evening of 7/4/96.  This might be construed as an _event_ in
            which Clinton  carries out  a particular sitting process.
            But it might instead be viewed as a _static_situation_
            involving Clinton, the chair, and various relationships such
            as the chair&apos;s seat supporting Clinton&apos;s bottom,
            Clinton&apos;s weight being off his feet, etc.  In such
            cases, the interests and needs at hand will often make one
            of these sorts of representation more useful than the other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Situation-Temporal">
        <rdfs:label xml:lang="en">#$Situation-Temporal</rdfs:label>
        <rdfs:comment>A subcollection of both #$Situation and
            #$TemporalThing. #$Situation-Temporal is the collection of
            all instances of #$Situation that have duration or other
            temporal properties .  Thus, #$Situation-Temporal subsumes
            #$Event and #$StaticSituation, as well as some other
            specializations of #$Situation. It does _not_ subsume any
            specializations of #$Situation that have atemporal instances.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SituationType">
        <rdfs:label xml:lang="en">#$SituationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$SituationType is a subcollection of #$Situation-Temporal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="SituationTypePredicate">
        <rdfs:label xml:lang="en">situation type predicate</rdfs:label>
        <rdfs:comment>A collection of #$Predicates each instance of
            which takes an instance of #$SituationType as its second
            argument.  For  details about the uses of such predicates,
            see the specializations  #$SituationTypeSlot and #$SituationTypeTernaryPredicate.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SituationTypeSlot">
        <rdfs:label xml:lang="en">#$SituationTypeSlot</rdfs:label>
        <rdfs:comment>Every instance of this collection is a
            #$BinaryPredicate taking a kind of #$Situation as the second
            argument.  Many of these predicates can be used to represent
            certain intentional concepts, such as the goals or beliefs
            of an #$Agent #$Plans to talk about states of affairs that
            various events or plans are supposed to facilitate or
            prevent, or that must be facilitated or prevented in order
            for the plan to count as successful.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SituationTypePredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SituationTypeTernaryPredicate">
        <rdfs:label xml:lang="en">#$SituationTypeTernaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$TernaryPredicate.  Each
            instance of #$SituationTypeTernaryPredicate is a ternary
            predicate that takes an instance of #$SomethingExisting as
            its first argument, a subcollection of #$Situation-Temporal
            as its second argument, and an instance of #$Role as its
            third argument.  Many of these predicate are used to express
            some version of capability; others may be used to delineate
            options or potential duties of an agent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SituationTypePredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SkeletalSystem">
        <rdfs:label xml:lang="en">skeletons</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart.  Each
            instance of #$SkeletalSystem is a system of body parts used
            to support, separate, and protect the other parts of a body.
            Instances of this collection are either external structures
            (see #$Exoskeleton and #$Shell-AnimalBodyPart) or internally
            interlinked bones (see #$Bone-BodyPart) and cartilage (see #$Cartilage).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SkilledActivity">
        <rdfs:label xml:lang="en">skilled activities</rdfs:label>
        <rdfs:comment>This is the collection of activities which require
            some specialized skill to perform--i.e., to play any role
            which is a specPred of #$doneBy.  So, all skilled activities
            are learned, but not all learned activities are skilled.
            For instance, #$WalkingOnTwoLegs is a member of
            #$LearnedActivity but not a member of #$SkilledActivity.
            Since every normal person learns to walk, it requires no
            special skill.  In contrast, #$Juggling is a member of
            #$SkilledActivity, for most people do not know how to juggle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Skin">
        <rdfs:label xml:lang="en">pieces of skin</rdfs:label>
        <rdfs:comment>A specialization of #$AnimalBodyPart.  Each
            instance of #$Skin is an outer protective and tactile
            sensory covering (or part of such a covering) for (part of)
            an animal&apos;s body.  This collection includes both the
            entire skins of animals, as well as proper parts of such
            skins (such as Yul Brenner&apos;s scalp).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VibrationThroughAMediumSensor"/>
        <rdfs:subClassOf rdf:resource="#SurfaceOnTangibleObject"/>
        <rdfs:subClassOf rdf:resource="#TactileSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Layer"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Skirt">
        <rdfs:label xml:lang="en">#$Skirt</rdfs:label>
        <rdfs:comment>A specialization of #$Clothing-Bottom.  Each
            instance of #$Skirt is an item of clothing intended to cover
            the lower part of the body.  Skirts are typically
            women&apos;s clothing, but a #$Kilt is a skirt traditionally
            worn by men in Scotland.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Bottom"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SkolemConstant">
        <rdfs:label xml:lang="en">skolem constant</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SkolemTerm"/>

    </owl:Class>
    <owl:Class rdf:ID="SkolemFuncN">
        <rdfs:label xml:lang="en">skolem func n</rdfs:label>
        <rdfs:comment>#$SkolemFuncN is a collection of  Cyc
            system-generated functions that partially implement
            existential  quantifications in Cyc.  Whenever someone
            asserts to Cyc an expression  that contains a
            &apos;#$thereExistAtLeast&apos;, a
            &apos;#$thereExistAtMost&apos;, or a
            &apos;#$thereExistExactly&apos; quantifier, Cyc
            automatically creates a new  instance of #$SkolemFuncN and
            rewrites the assertion using this skolem  function instead
            of that existential quantifier.  See also  #$termOfUnit. At
            this time (3/98), skolem functions are automatically  named
            by the Cyc system using the prefix &apos;SKF-&apos; followed
            by a number.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SkolemFunction">
        <rdfs:label xml:lang="en">skolem function</rdfs:label>
        <rdfs:comment>#$SkolemFunction is a collection of Cyc
            system-generated functions that implement existential
            quantifications in Cyc.  Whenever someone asserts to Cyc an
            expression that contains a `#$thereExists&apos;, Cyc
            automatically creates a new instance of #$SkolemFunction and
            rewrites the assertion using that Skolem function, as
            described in what follows.  (Most Cyc users don&apos;t need
            to know the following details, which are supplied only for
            the curious.)                Suppose we tell Cyc that every
            animal has a birth date; i.e., for each animal, there exists
            a date such that the animal was born on that date --- in
            CycL, (#$implies (#$isa ?X #$Animal)(#$thereExists ?Y
            (#$birthDate ?X ?Y))).  In response to that CycL formula,
            Cyc would create a new element of #$SkolemFunction -- we
            might call it the `BirthDateFn&apos; -- whose single
            argument would be an animal and whose resultant value would
            be a date, namely, that animal&apos;s date of birth.
            Subsequently, Cyc would automatically use the
            `BirthDateFn&apos; in asserting our rule, eliminating the
            need for a `#$thereExists&apos;.  Our formula would thus be
            rewritten by the system, as follows:
            (#$implies        (#$and         (#$isa ?X #$Animal)
            (#$termOfUnit ?Y (`BirthDateFn&apos; ?X)))
            (#$birthDate ?X ?Y)).            See also #$termOfUnit.
            Note: Although our example uses the name
            &apos;BirthDateFn&apos; for our Skolem function, at this
            time (4/97), Skolem functions are automatically named by the
            Cyc system using the prefix `SKF-&apos; followed by a number.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="SkolemTerm">
        <rdfs:label xml:lang="en">Skolem terms</rdfs:label>
        <rdfs:comment>#$SkolemTerm is the collection of all CycL symbols
            introduced by the CycL system via the process of
            skolemization to denote some indeterminate object in the
            universe of discourse.  See also #$SkolemFunction and #$IndeterminateTerm.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IndeterminateTerm"/>

    </owl:Class>
    <owl:Class rdf:ID="Sleeping">
        <rdfs:label xml:lang="en">#$Sleeping</rdfs:label>
        <rdfs:comment>The collection of all #$Sleeping events, i.e.,
            natural processes in which an #$Animal engages in some
            unconscious mental activity coupled with physical rest.
            #$Sleeping is a subcollection of
            #$BodilyFunctionEvent-Involuntary; the process of #$Sleeping
            is essential for the health of sentient animals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Resting-Relaxing"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#MentalSituation-SingleSubject"/>
        <rdfs:subClassOf rdf:resource="#StaticSituation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sliding-Generic">
        <rdfs:label xml:lang="en">sliding</rdfs:label>
        <rdfs:comment>This is the most general collection about the
            rubbing, sliding or skidding processes that occur between
            solid objects in physical contact.  #$Sliding-Generic is
            disjoint with #$RollingOnASurface:  In instances of
            #$RollingOnASurface flush surface regions of the slider and
            the slidee do not translate relative to each other during
            for the brief moment that they are in contact.  By contrast,
            such flush surface regions are translating relative to each
            other during instances of #$Sliding-Generic. Typical
            examples include objects sliding, slipping, or skidding.
            Negative examples include balls rolling (the contact
            surfaces do not translate relative to one another) and water
            flowing in a conduit (because the #$objectMoving is not
            solid).  All things being equal friction involved with
            sliding is greater than that with rolling.  See also
            #$Sliding-LowFriction, a low friction kind of
            #$Sliding-Generic to be contrasted with it high friction
            sibling, #$Rubbing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Motion-SolidAgainstSolid"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SlotTrendPredicate">
        <rdfs:label xml:lang="en">relations indicating change over time</rdfs:label>
        <rdfs:comment>Instances of #$SlotTrendPredicate are used to
            describe trends of some quantity. Some of them make explicit
            the cause of the trend.  Some make explicit the time period
            over which those trends occur.   #$SlotTrendPredicates, by
            definition, use the zeroth argument position to indicate the
            kind of change.  Net increases, decreases, or no net change
            are the only kinds of change currently (Feb &apos;98)
            expressible with these constants.  For a net increase see
            predicates whose names begin with &apos;increase&apos;, for
            a net decrease see predicates whose names begin with
            &apos;decrease&apos;.  For no net change see
            #$remainsStableImmediately.  See also
            #$NoteAboutQuantityChangePredicates.  A negative exemplar of
            a #$SlotTrendPredicate is #$quantityChangeFunction.
            Although this predicate is useful for representing trends in
            quantity changes, the kind of change occurring is referenced
            not by its zeroth argument but by its fourth argument (a
            specialization of #$Function-MathematicalObject).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SmellPerception">
        <rdfs:label xml:lang="en">smelling</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which a
            #$PerceptualAgent #$smells something and thereby acquires
            information about it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SmokingFood">
        <rdfs:label xml:lang="en">#$SmokingFood</rdfs:label>
        <rdfs:comment>A specialization of #$PreparingFoodItem.  In each
            instance of #$SmokingFood, an instance of #$Food is cured by
            being exposed to smoke, thereby allowing the food to remain
            usable for a much longer period of time.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PreparingFoodItem"/>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SnowProcess">
        <rdfs:label xml:lang="en">snowfall</rdfs:label>
        <rdfs:comment>A specialization of #$PrecipitationProcess.  Each
            instance of #$SnowProcess is an event in which the condensed
            liquid water in one or more clouds freezes into ice crystals
            which become substantial enough to fall to the earth as
            snow.  See also #$Snowflake.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Snowflake">
        <rdfs:label xml:lang="en">snowflakes</rdfs:label>
        <rdfs:comment>A specialization of #$PrecipitationParticle.  Each
            instance of #$Snowflake is a frozen water crystal emitted by
            a cloud during an instances of #$SnowProcess (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Water"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Snowy">
        <rdfs:label xml:lang="en">#$Snowy</rdfs:label>
        <rdfs:comment>A specialization of #$OutdoorLocation. Each
            instance is an outdoor location that is snowy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cloudy"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SociabilityBasedAction">
        <rdfs:label xml:lang="en">#$SociabilityBasedAction</rdfs:label>
        <rdfs:comment>A specialization of #$SocialOccurrence.  Each
            specialization of #$SociabilityBasedAction is a type of
            action performed mostly for the sake of sociability, in
            which considerations of socially acceptable interactions
            with others are important.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialBeing">
        <rdfs:label xml:lang="en">social agents</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent.  Each
            instance of #$SocialBeing is an intelligent agent whose
            status as an agent is acknowledged within some social
            system, and who is capable of playing certain social roles
            within that system.  Note that in many (but not all) cases,
            a #$SocialBeing will have certain rights and
            responsibilities associated with his/her/its status within
            the relevant social system.  For agents who are granted
            rights and responsibilities under some legal system, see the
            specialization #$LegalAgent.  Other  notable specializations
            of #$SocialBeing are #$Person and #$Organization.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialGathering">
        <rdfs:label xml:lang="en">social occasions</rdfs:label>
        <rdfs:comment>A specialization of #$SocialOccurrence.  Each
            instance of #$SocialGathering is an intentional social
            gathering of people who have the same or similar purposes in
            attending, and in which there is communication between the
            participants.  Specializations include #$BabyShower,
            #$Carnival, and #$Rally.  Note that a group of people
            waiting to board an elevator is not typically a
            #$SocialGathering, even though they share a common purpose,
            since they are not expected to talk to each other.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialOccurrence">
        <rdfs:label xml:lang="en">#$SocialOccurrence</rdfs:label>
        <rdfs:comment>A specialization of both #$PurposefulAction  and
            #$CompositePhysicalAndMentalEvent.  Each instance of
            #$SocialOccurrence  is an action in which two or more agents
            take part.  In many cases,  #$SocialOccurrences involve
            communication among the participating agents.   Some
            instances of #$SocialOccurrence have very elaborate role
            structures  (e.g. a typical lawsuit), while others have
            fairly simple role structures  (e.g. greeting a colleague at work).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialOrEconomicAttribute">
        <rdfs:label xml:lang="en">social or economic attribute</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialRitual">
        <rdfs:label xml:lang="en">social rituals</rdfs:label>
        <rdfs:comment>A specialization of both #$SocialGathering and
            #$Ritual.  Each instance of #$SocialRitual is a ritual
            performed by two or more people.  Specializations of
            #$SocialRitual include #$GraduationCeremony,
            #$AwardsCeremony, #$Parade, and #$Funeral.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
        <rdfs:subClassOf rdf:resource="#Ritual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SocialSecurityNumber">
        <rdfs:label xml:lang="en">s.s.n.</rdfs:label>
        <rdfs:comment>A specialization of #$UniqueID and #$IDNumber.
            Each instance of #$SocialSecurityNumber is a nine-digit
            unique identification number assigned by the
            #$SocialSecurityAdministration to a particular
            individual&apos;s #$SocialSecurityAccount.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDNumber"/>
        <rdfs:subClassOf rdf:resource="#UniqueID"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="SoftwareObject">
        <rdfs:label xml:lang="en">software objects</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork.
            #$SoftwareObject is the most general collection of software.
            Each instance of #$SoftwareObject is either an individual
            computer program, a computer program module, a software
            package, a software library file (see
            #$ComputerSoftwareLibrary-CW), or a version or series
            thereof.  Each instance of #$SoftwareObject is such that
            either it (or a member of the version series that
            constitutes it) could conceivably be instantiated in code
            that could run on some computer system, even if the code has
            not been written yet, and even if it could not run
            independently of other code (see the specialization
            #$ComputerProgramModule-CW).  #$SoftwareObject does not
            include purely data objects that software could operate on.
            Pine, Pine version 4.20, and Pine versions 4.20 through 4.33
            inclusive are each instances of #$SoftwareObject.
            #$SoftwareObject is partitioned into
            #$SoftwareObject-Individual and #$SoftwareVersionSeries.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoftwareObject-Individual">
        <rdfs:label xml:lang="en">individual software objects</rdfs:label>
        <rdfs:comment>A specialization of #$SoftwareObject.  Each
            instance of #$SoftwareObject-Individual is either a
            versioned or unversioned non-series software object, such as
            a program, a version of a program, a software package, or a
            library.  Positive examples include Netscape Navigator,
            Netscape Navigator version 4.76, glibc, and SUNWzip.
            Negative examples include Netscape Navigator versions 3
            through 4 inclusive, which is an instance of
            #$SoftwareVersionSeries (q.v.).  #$SoftwareObject-Individual
            and #$SoftwareVersionSeries are disjoint and they partition #$SoftwareObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SoftwareObject"/>
        <rdfs:subClassOf rdf:resource="#ComputerFile-Abstract"/>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoftwareParameter">
        <rdfs:label xml:lang="en">software parameter</rdfs:label>
        <rdfs:comment>The collection of all parameters or variables used
            in computer systems, either by the operating system or by a
            program.  The value of an instance of #$SoftwareParameter
            may be set [#$SettingSoftwareParameter] or read
            [#$ReadingSoftwareParameter].  (#$softwareParameterValue
            SOFTWARE-PARAMETER VALUE) means that SOFTWARE-PARAMETER has
            the value VALUE in the current context.
            (#$softwareParameterValueInProgram SOFTWARE-PARAMETER VALUE
            COMPUTER-PROGRAM-RUNNING) means that SOFTWARE-PARAMETER
            currently has the value VALUE in the program COMPUTER-PROGRAM-RUNNING.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoftwareVersionSeries">
        <rdfs:label xml:lang="en">software version series</rdfs:label>
        <rdfs:comment>A specialization of #$SoftwareObject. Each
            instance of #$SoftwareVersionSeries is a series consisting
            of versions of software.  A positive example is the Pine
            versions 4.0 through 4.5 inclusive.  Negative examples
            include Pine and Pine version 4.0, which are both instances
            of #$SoftwareObject-Individual.  #$SoftwareObject-Individual
            and #$SoftwareVersionSeries are disjoint and they partition
            the collection #$SoftwareObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Series"/>
        <rdfs:subClassOf rdf:resource="#SoftwareObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Soil-Generic">
        <rdfs:label xml:lang="en">#$Soil-Generic</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$LandStuff.  Each instance of
            #$Soil-Generic is a portion of earth in which one can
            (usually) grow plants.  Instances of #$Soil-Generic include
            soils that are part of the top layer of the ground, as well
            as soils that are processed and sold at lawn and gardening stores.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#LandStuff"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SolarPoweredDevice">
        <rdfs:label xml:lang="en">#$SolarPoweredDevice</rdfs:label>
        <rdfs:comment>A specialization of #$PoweredDevice.  Each
            instance of #$SolarPoweredDevice is a device which is
            powered by energy from sunlight.  Instances of
            #$SolarPoweredDevice include solar-powered calculators and
            solar heating systems.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Soldier">
        <rdfs:label xml:lang="en">soldiers</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByOccupation, and a
            specialization of #$MilitaryPerson.  Each instance of
            #$Soldier is a person who serves in some military
            organization that operates primarily or exclusively on land
            (as opposed to on the water or in the air).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoleProprietorship">
        <rdfs:label xml:lang="en">sole proprietorship</rdfs:label>
        <rdfs:comment>#$SoleProprietorship is a specialization of
            #$PrivatelyHeldOrganization and #$OrganizationOfPeopleOnly.
            Each instance of #$SoleProprietorship is a business in which
            an individual #$Person (or a married couple) owns, operates,
            and assumes liability for the business.   A
            #$SoleProprietorship may or may not have employees.  It has
            no shareholders or partners.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrivatelyHeldOrganization"/>
        <rdfs:subClassOf rdf:resource="#OrganizationOfPeopleOnly"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Solemnity">
        <rdfs:label xml:lang="en">solemnity</rdfs:label>
        <rdfs:comment>Feeling of impressive gravity, as if weighed down
            by deep thought or important work. Not light or frivolous,
            but serious</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Solid-StateOfMatter">
        <rdfs:label xml:lang="en">solids (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$PartiallyTangible and an
            instance of #$MatterTypeByPhysicalState. Each instance of
            #$Solid-StateOfMatter is an object of a single chemical
            species in the solid state of matter. Objects in the solid
            state of matter are at a sufficiently low enough temperature
            or high enough pressure for the particular type of matter
            involved that the molecules of the matter are bonded to each
            other by various sorts of forces, and don&apos;t move away
            from their neighbors. Solid objects are characterized at the
            macroscopic level by definite, persistent boundaries,
            independent of container. Examples of things that typically
            have this AttributeValue are: a piece of aluminum foil, a
            lump of coal, a quartz crystal, a gold ingot stored in Fort Knox.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SolidSurfacePathThroughAir">
        <rdfs:label xml:lang="en">solid-surface paths through air</rdfs:label>
        <rdfs:comment>The collection of all existing or designated
            #$Path-Spatials that pass through air along a solid surface.
            An object following such a path is immersed in the air but
            supported by the solid surface of the path.  To refer to a
            pure trajectory of the motion, regardless of whether there
            is any pre-existing or pre-designated #$Path-Spatial, see #$SolidSurfaceTrajectoryThroughAir.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Path-Spatial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SolidTangibleProduct">
        <rdfs:label xml:lang="en">solid tangible products</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PartiallyTangibleProduct and #$SolidTangibleThing .  Each
            instance of #$SolidTangibleProduct is a partially tangible
            product that is also a solid.  Instances include both solid
            objects (for example, instances of the collection
            #$Automobile) as well as portions of stuff in solid form
            (for example, instances of the collection #$Cloth).  Note
            that items that are always sold as part of something else
            (for example, the instances of #$DiskSector) are not
            instances of #$SolidTangibleProduct.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SolidTangibleThing">
        <rdfs:label xml:lang="en">solid objects</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$PartiallyTangible.  Each instance of
            #$SolidTangibleThing is a piece of stuff possessing many of
            the properties that matter in a solid state (see the
            constant #$Solid-StateOfMatter) exhibits (although not all
            instances of #$SolidTangibleThing are formally in a solid
            state).  Instances have a shape independent from their
            container, and, when deformed with sufficient force (which
            may be small for weak, brittle materials or high for
            materials that deform easily), they break.  Examples of
            #$SolidTangibleThings include: pieces of substances in a
            solid state of matter, such as ice cubes; solid mixtures
            like a quarter-dollar coin or a paper bag; and complex
            mixtures of biological origin that behave like solids, e.g.,
            bone.  Note that some pieces of matter that are formally in
            a solid state (for example, pieces of clay) are not
            instances of #$SolidTangibleThing, since they do not readily
            break when deformed; for this reason, #$Solid-StateOfMatter
            is _not_ a specialization of #$SolidTangibleThing.
            Collections of the solid form of any type of stuff can be
            created using #$SolidFn (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Solitude">
        <rdfs:label xml:lang="en">solitude</rdfs:label>
        <rdfs:comment>The state of being alone or remote from society</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Solution">
        <rdfs:label xml:lang="en">#$Solution</rdfs:label>
        <rdfs:comment>An instance of #$ExistingStuffType, and a
            specialization of #$Mixture.  Each instance of #$Solution is
            a mixture of two or more chemically distinct substances.
            Instances of #$Solution are homogeneous, meaning that the
            composition at any one point in a given instance is the same
            as that at any other point.  In contrast, instances of
            #$Suspension are mixtures in which small discontinuous
            particles are surrounded by a continuous fluid.  The
            #$solvent of every #$Solution has the #$stateOfMatter
            #$Liquid-StateOfMatter.  Thus #$Solutions also normally
            exhibit the properties of a liquid, since #$solvents are
            #$mainConstituents.   Examples of #$Solutions include a
            sample of seawater, a cup of coffee, a tincture of iodine,
            some vanilla extract.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SomethingAppearingSomewhere">
        <rdfs:label xml:lang="en">appearances</rdfs:label>
        <rdfs:comment>A specialization of #$IntrinsicStateChangeEvent.
            During each instance of #$SomethingAppearingSomewhere, an
            object (related to the instance of
            #$SomethingAppearingSomewhere by #$objectEmplaced (q.v.)) is
            introduced into a location or situation where it previously
            was not.  This location or situation (related to the
            instance of #$SomethingAppearingSomewhere via
            #$objectOfStateChange (q.v.)) is somehow intrinsically
            affected by the  arrival of the object.  The object may be
            created during the coming-to-be event, it may move, either
            by external force or under its own power, or it may
            metaphorically &apos;enter&apos; into a new state.  Examples
            of #$SomethingAppearingSomewhere include: spreading
            fertilizer on a lawn; mold growing on bread; Columbus&apos;
            ships arriving in the New World; a country joining the
            United Nations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SomethingExisting">
        <rdfs:label xml:lang="en">things existing stably in time</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalThing whose
            instances are more or less static, as compared (e.g.) to the
            more dynamic instances of #$Event. The clearest examples of
            #$SomethingExistings are tangible things, such as people,
            lakes, stars, and the Earth&apos;s ionosphere.  But
            #$SomethingExisting also includes certain intangible
            temporal things, such as #$Agreements and #$Obligations,
            that remain relatively stable throughout their lifetimes. On
            the other hand, #$SomethingExisting excludes  purely
            temporal  intangibles such as #$TimeIntervals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SomethingToWear">
        <rdfs:label xml:lang="en">wearable items</rdfs:label>
        <rdfs:comment>#$SomethingToWear is a specialization of
            #$DurableGoods, #$Device-SingleUser, #$PersonalProduct, and
            #$PortableObject.  Each instance of #$SomethingToWear is an
            object that a mannequin or an animal (usually a person)
            wears on its body, i.e., in a #$WearingSomething event.  It
            is worth remarking that, in such an event, the wearer
            doesn&apos;t have to exert any intentional effort to
            continue wearing the object.  For example, shirts remain on
            people&apos;s torsos, hats stay on heads, rings on fingers;
            once in place, dog collars stay on dogs, saddles stay on
            horses.  By contrast, a hula hoop is NOT an example of
            #$SomethingToWear.  A borderline case is a #$Purse, which at
            first blush seems to be something to wear, yet requires
            carrying by the performer, hence is not a member of this
            collection.  Similarly, a briefcase is not an instance of #$SomethingToWear.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#Device-SingleUser"/>
        <rdfs:subClassOf rdf:resource="#PersonalProduct"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sonorant-Consonant">
        <rdfs:label xml:lang="en">sonorant - consonant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Consonant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sound">
        <rdfs:label xml:lang="en">sound (type of thing)</rdfs:label>
        <rdfs:comment>A specialization of #$WavePropagation.  Each
            instance of #$Sound is an instance of wave propagation in
            which longitudinal pressure waves travel through matter.
            Notable specializations of #$Sound include #$AudibleSound,
            #$UltraSound, and #$Music.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoundInformationBearingThing">
        <rdfs:label xml:lang="en">sound information bearing things</rdfs:label>
        <rdfs:comment>A specialization of both #$AudibleSound and
            #$InformationBearingWavePropagation. Each instance of
            #$SoundInformationBearingThing is an sound which is audible
            by, and thereby capable of providing information to, an
            #$Agent.  (This information need not necessarily be in
            propositional form.)  This collection does not include
            #$InformationBearingWavePropagations that require the use of
            some sort of electronic device to be rendered in the form of
            audible sound; thus #$RadioWave  is not a specialization.
            Genuine specializations include #$Music and
            #$AnimalUtterance-IBT. Note that, despite the use of the
            word `Thing&apos; in the  name of this constant, it refers
            to the sound alone, not to the thing that  makes the sound
            (e.g. if one&apos;s CD player is pumping out music, the
            #$SoundInformationBearingThing is the #$Music, not the
            player). Thus, no one  thing can be an instance of both
            #$SoundInformationBearingThing and
            #$VisualInformationBearingThing (e.g.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingWavePropagation"/>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SoundWavePropagationType">
        <rdfs:label xml:lang="en">#$SoundWavePropagationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$SoundWavePropagationType is a specialization of #$Sound
            (q.v.).  Notable instances of #$SoundWavePropagationType
            include #$AudibleSound and #$UltraSound.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WavePropagationType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="SourceCodePackage">
        <rdfs:label xml:lang="en">source code package</rdfs:label>
        <rdfs:comment>The collection of source code objects used to
            modularize  computer programs written in certain languages
            (for example, #$JavaProgrammingLanguage). Packages typically
            have their own   namespaces for their internal symbols. Most
            often a  package has a theme or purpose that is shared by
            all the  functions and/or objects contained within it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ComputerCode-Source"/>
    </owl:Class>
    <owl:Class rdf:ID="SourceMicrotheory">
        <rdfs:label xml:lang="en">Cyc source microtheories</rdfs:label>
        <rdfs:comment>A collection of microtheories.  An instance of
            #$SourceMicrotheory represents a source external to the
            #$CycKB, from which the Microtheory Contents of such a
            microtheory were obtained.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DataMicrotheory"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceInAFixedHOC">
        <rdfs:label xml:lang="en">#$SpaceInAFixedHOC</rdfs:label>
        <rdfs:comment>#$SpaceInAFixedHOC is a specialization of
            #$SpaceInAHOC and #$Place.  Each instance of
            #$SpaceInAFixedHOC is a space within some instance of a
            fixed (as opposed to moveable) #$HumanOccupationConstruct
            (q.v.).  Positive examples include rooms within #$Buildings,
            while negative examples include spaces within recreational vehicles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#SpaceInAHOC"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceInAHOC">
        <rdfs:label xml:lang="en">indoor spaces</rdfs:label>
        <rdfs:comment>A specialization of both #$Cavity and
            #$HumanOccupationConstruct.  Each instance of #$SpaceInAHOC
            is a space found inside some instance of
            #$HumanOccupationConstruct (HOC).  Instances include all
            major spaces inside any #$HumanOccupationConstruct,
            including not only rooms (instances of
            #$RoomInAConstruction), but also halls, elevator shafts,
            attics, stairwells, and the spaces inside trains, cars, and
            airplanes that are designed for human occupation.  Other
            building parts which are not open spatial regions (e.g.,
            walls, plumbing, etc.) are _not_ included in this
            collection; cf. #$PartOfBuilding.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceLine">
        <rdfs:label xml:lang="en">#$SpaceLine</rdfs:label>
        <rdfs:comment>A specialization of #$ExtendedSpaceRegion.
            Instances of  #$SpaceLine are one dimensional portions of
            space. It makes sense  to speak of, or compute, the length
            of those objects, but those objects have  no breadth nor
            depth, and thus neither area nor volume.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExtendedSpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#HomogeneousSpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceLine-Empirical">
        <rdfs:label xml:lang="en">empirical space lines</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion-Empirical.
            Instances of #$SpaceLine-Empirical are one dimensional
            pieces of the space taken up by the empirical universe.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion-Empirical"/>
        <rdfs:subClassOf rdf:resource="#SpaceLine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpacePoint">
        <rdfs:label xml:lang="en">points in space (types of things)</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$GeometricalPoint which do not move.  An important
            specialization is #$SpacePoint-Empirical, which refers to
            such points in the empirically-observable universe.  Space
            points may be used to indicate location of objects in space,
            and partial location of objects of higher dimension
            [#$locatedAtPoint-Spatial]. For instance, the location of
            the center of mass of the solar system at the initial
            instant of the twentieth century (in Greenwich, England) is
            an instance of #$SpacePoint-Empirical. However, the center
            of mass of the Solar System itself would merely be a
            #$GeometricalPoint that would happen to be coincident with
            that location at that moment in time. Instances of
            #$SpacePoint are  considered places and therefore immutable.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricalPoint"/>
        <rdfs:subClassOf rdf:resource="#HomogeneousSpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpacePoint-Empirical">
        <rdfs:label xml:lang="en">points in space (types of things)</rdfs:label>
        <rdfs:comment>A subcollection of #$SpaceRegion-Empirical. Each
            instance of #$SpacePoint-Empirical is a zero-dimensional
            object that belongs to the embedding space of the empirical
            universe of the context. Examples include the location of
            the center of mass of the Milky Way Galaxy at the beginning
            of the twentieth century.  Note that instances of this
            collection are embedded in time. If time is not a
            significant parameter (if in an atemporal or temporally
            agnostic context) consider using #$SpacePoint.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpacePoint"/>
        <rdfs:subClassOf rdf:resource="#SpaceRegion-Empirical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceRegion">
        <rdfs:label xml:lang="en">spatial regions</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing whose instances
            are regions of space that exclusively act as locations for
            other spatial objects, and thus are immobile. Instances of
            #$SpatialThing are said to  occupy  some region of space.
            Three dimensional regions of space [#$ChunkOfSpace] can be
            occupied by solid objects, see the specialization
            #$ChunkOfSpace-Empirical for the regions of space occupied
            by physical objects. Purely two-dimensional objects occupy a
            #$SpaceSurface, see also #$SpaceLine and
            #$SpacePoint-Empirical for objects of lower dimension. Note
            that an object of a given dimension cannot truly be located
            [#$exactlyLocatedAt-Spatial] at a region of space of lower
            dimension, but only partially or incidentally.  For more
            information on location and occupancy, see
            #$AbsoluteLocationalPredicate and its instances that relate
            objects in space and their regions.  An important
            specialization of #$SpaceRegion is #$SpaceRegion-Empirical,
            whose instances are pieces of the embedding space where
            spatio-temporal objects are empirically localizable [#$SpatialThing-Localized].</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceRegion-Empirical">
        <rdfs:label xml:lang="en">regions of space</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing-Localized whose
            instances are intangible regions of space located in the
            empirically observable universe.  A space region might or
            might not be connected (see #$spatiallyContinuous).  It
            might be partially or completely filled with (occupied by)
            #$PartiallyTangibles, or it might be completely empty (but
            cf. #$EmptySpaceRegion).  In any case, the space region
            itself is not to be confused with a physical object or other
            spatially localized (non-space-region) thing that might
            happen to be #$cospatial with it.  A given space region can
            be characterized fully merely by specifying its location and
            dimensions.  Thus (although this is not the case with
            spatial things in general), space regions are identical
            (#$equals) if and only if they are #$cospatial.
            #$SpaceRegion-Empirical is in a way the spatial analogue of
            #$TimeInterval, whose own instances can be fully
            characterized by specifying their temporal properties; these
            two collections can be used, respectively, to talk about
            space and time as  dimensions .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpaceTransportationEvent">
        <rdfs:label xml:lang="en">space travel</rdfs:label>
        <rdfs:comment>The collection of all space transportation events.
            For each instance TRAN of #$SpaceTransportationEvent, at
            least a part of the #$Trajectory of #$objectMoving in TRAN
            must be in the outer space.  Note that
            #$SpaceTransportationEvent is different from
            (#$TransportViaFn #$Spacecraft) because the former
            emphasizes where to find the #$Trajectory while the latter
            emphasizes what is used as a tool, not to mention instances
            of the former do not have to have parts on Earth or inside
            our atmorsphere.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Spacecraft">
        <rdfs:label xml:lang="en">#$Spacecraft</rdfs:label>
        <rdfs:comment>#$Spacecraft is a specialization of
            #$TransportationDevice.  Each instance of #$Spacecraft is a
            transportation device either deployed entirely in outer
            space, or one whose trajectories leave the atmosphere of the
            planet it&apos;s launched from, in order to orbit the planet
            or to travel beyond the planet&apos;s gravitational field.
            A #$Spacecraft may either be manned or unmanned.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Spam-UnsolicitedEMail">
        <rdfs:label xml:lang="en">spam - unsolicited e mail</rdfs:label>
        <rdfs:comment>A specialization of #$EMailMessage. Each instance
            of this collection is an electronic mail message sent to
            many different #$EMailAddresses on the #$Internet, often in
            an attempt to sell a product, and causing irritation to the
            recipients. For the acts of sending such mass-mailings, see #$MassEMailSending.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationStructure"/>
    </owl:Class>
    <owl:Class rdf:ID="SpatialPathSystem">
        <rdfs:label xml:lang="en">#$SpatialPathSystem</rdfs:label>
        <rdfs:comment>A specialization of #$PathSystem instances of
            which are systems of spatial paths (see #$Path-Spatial).
            Specializations of #$SpatialPathSystem include
            #$TransportationPathSystem and #$ElectricPowerGrid.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpatialPredicate">
        <rdfs:label xml:lang="en">spatial relations</rdfs:label>
        <rdfs:comment>A specialization of #$CotemporalPredicate.  Each
            instance of #$SpatialPredicate is a spatial relation that
            can (only) hold between one or more #$SpatialThings, and is
            used to state something about its/their spatial location(s),
            position(s), or orientation(s).  Note that when a
            #$SpatialPredicate has a #$Group as one of its arguments, a
            certain spatial relationship is ususally being asserted to
            hold of all or most of the members of that group; but there
            are exceptions (e.g. #$in-Among) for which this is not the case.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SpatialThing">
        <rdfs:label xml:lang="en">spatial things</rdfs:label>
        <rdfs:comment>The collection of all things that have a spatial
            extent or location relative to some other #$SpatialThing or
            in some embedding space.  Note that to say that an entity is
            a member of this collection is to remain agnostic about two
            issues.  First, a #$SpatialThing may be #$PartiallyTangible
            (e.g. #$Texas-State) or wholly #$Intangible (e.g.
            #$ArcticCircle or a line mentioned in a geometric theorem).
            Second, although we do insist on location relative to
            another spatial thing or in some embedding space, a
            #$SpatialThing might or might not be located in the actual
            physical universe.  It is far from clear that all
            #$SpatialThings are so located: an ideal platonic circle or
            a trajectory through the phase space of some physical system
            (e.g.) might not be.  If the intent is to imply location in
            the empirically observable cosmos, the user should employ
            this collection&apos;s specialization, #$SpatialThing-Localized.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpatialThing-Localized">
        <rdfs:label xml:lang="en">#$SpatialThing-Localized</rdfs:label>
        <rdfs:comment>The collection of all spatial things, tangible or
            intangible, that can be meaningfully said to have location
            or position in the empirically observable universe of the
            context in question.   This includes all #$PartiallyTangible
            things, such as pyramids and ships, as well as certain
            #$Intangible spatial things, like the #$Equator.  Also
            included are all #$Events that can be pinned down to
            specific places (see #$Event-Localized), and thus all
            #$PhysicalEvents.  But note that many events are
            non-examples, such as the event of a certain law coming into
            effect and (presumably) purely mental events as well, at
            least in most contexts.  Also excluded are #$SpatialThings
            that are _not_ localized, such as purely abstract
            geometrical figures (e.g. a Platonic sphere). All instances
            of #$SpatialThing-Localized are temporal things, and thus
            have finite lifespans (the upper bound of which is the
            lifespan of the universe itself).  Finally, note that
            imaginary entities like Frodo, Captain Queeg, and
            #$HAL9000-TheComputer may be localized within the
            (imaginary) universes attaching to the fictitious contexts
            in which they are defined, and so would be instances of
            #$SpatialThing-Localized within those microtheoretic contexts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpatiallyDisjointRegionType">
        <rdfs:label xml:lang="en">#$SpatiallyDisjointRegionType</rdfs:label>
        <rdfs:comment>A collection of collections, and a specialization
            of #$RegionType.  Each instance of
            #$SpatiallyDisjointRegionType is a collection of
            geographical regions, where each of the regions in the
            collection is spatially disjoint with the other regions in
            the collection.  For example, the collection
            #$State-UnitedStates is an instance of
            #$SpatiallyDisjointRegionType, since the territories of U.S.
            states do not overlap.  Other instances of
            #$SpatiallyDisjointRegionType include #$CanadianProvince,
            #$IndependentCountry, #$City, and #$Colony.  A non-example
            is #$EcologicalRegion, since ecological regions can overlap.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RegionType"/>
    </owl:Class>
    <owl:Class rdf:ID="Speaking">
        <rdfs:label xml:lang="en">#$Speaking</rdfs:label>
        <rdfs:comment>A specialization of #$Talking, which includes
            non-verbal talking such as the use of sign-language. The
            collection of actions generating utterances (c.f.
            #$Utterance-IBT) which are speech. Hence, #$Speaking
            normally includes only those utterances using some
            #$Language as a communication convention, unlike other
            utterances such as #$Booing and #$Cheering.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MakingAnOralSound"/>
        <rdfs:subClassOf rdf:resource="#Talking"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpecificEntryFormatPredicate">
        <rdfs:label xml:lang="en">#$SpecificEntryFormatPredicate</rdfs:label>
        <rdfs:comment>A specialization of  #$ArgFormatPredicate (q.v.)
            whose instances correspond to particular entry-formats for
            the argument-places of predicates.   Each instance FORMAT of
            #$SpecificEntryFormatPredicate relates a  predicate PRED to
            an integer N just in case PRED&apos;s Nth argument-place  is
            subject to the particular entry-format restriction that
            FORMAT  represents.  An argument entry-format is a kind of
            restriction  on a predicate regarding how many things, or
            the range of things,  that the predicate holds of with
            respect to a given one of its  argument-places.  More
            precisely: given any particular way of fixing  the arguments
            in the rest of the predicate&apos;s argument-places, the
            entry-format tells us something about the number of
            different things,  or the range of things, that can occupy
            the given argument-place such  that the relation holds of
            those arguments.  That is, supposing the  given
            argument-place is the Nth, the entry-format tells us
            something  about the number or range of different sequences
            of arguments of  which the predicate holds and that differ
            from each other only in  their Nth items.  For example,
            #$singleEntryFormatInArgs (q.v.) is  used to state that in
            every case there is at most only one such  sequence,
            #$openEntryFormatInArgs (q.v.) to state that there is no
            particular (upper or lower) limit to the number of such
            sequences  that applies to every case, and
            #$intervalEntryFormatInArgs (q.v.)  to state that the Nth
            items of any two such sequences must be  #$ScalarIntervals
            that  overlap  (see #$overlapsIntervals).  Thus,
            #$biologicalMother has the format specification
            #$openEntryFormatInArgs with respect to its first
            argument-place, since a given female animal  might have any
            number (including zero) of offspring; but this predicate has
            the format specification #$singleEntryFormatInArgs with
            respect to its second argument-place, since any given animal
            has at most (in fact,  exactly) one biological mother.  And
            the format specified for the second  argument-place of
            #$bodyTemperature is #$intervalEntryFormatInArgs  because,
            while a given creature (at a given moment in time) has a
            single exact (see #$ScalarPointValue) body temperature, we
            want the  predicate #$bodyTemperature to be flexible enough
            to allow us to  specify this temperature with varying
            degrees of precision (e.g. as   98.6 degrees Fahrenheit  or
            as  between 98 and 99 degrees  or as   less than 100 degrees
            ).  See the various instances of
            #$SpecificEntryFormatPredicate for further details.  See
            also #$GeneralEntryFormatPredicate.  Note that, in contrast
            with what  #$ArgTypePredicates are used for, specifying an
            argument entry-format  for a predicate does _not_ impose any
            sort of necessary condition for  semantic well-formedness.
            A violation of a legitimate entry-format  constraint
            necessarily involves two or more statements, and at least
            one them must be _untrue_; but there is no implication that
            any of  them is malformed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ArgConstraintPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
        <rdfs:subClassOf rdf:resource="#ArgFormatPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Specification">
        <rdfs:label xml:lang="en">#$Specification</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork.  Each
            instance of #$Specification is an abstract work that
            constitutes an exact account of how something is to be
            performed or constructed.  Things are made, bought, and
            searched for according to specifications, which can be
            instantiated as printed instructions or as diagrams.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
    </owl:Class>
    <owl:Class rdf:ID="SpeechPart">
        <rdfs:label xml:lang="en">parts of speech</rdfs:label>
        <rdfs:comment>The collection of all parts of speech -- a
            specialization of #$LinguisticObjectType. Instances of
            #$SpeechPart include #$Preposition, #$Adverb, #$CountNoun,
            #$Determiner, #$QuantifyingIndexical, #$Punctuation-SP,
            #$Pronoun).  To link a specific word with the parts of
            speech for which it has forms, see #$posForms; e.g.,
            #$You-TheWord has a #$Pronoun form, #$And-TheWord has a
            #$CoordinatingConjunction form, #$Hit-TheWord has both
            #$CountNoun and #$Verb forms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TermPhrasesConstraint"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="SpeechPartPredicate">
        <rdfs:label xml:lang="en">speech part predicates</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            specialization of  #$NLSyntacticPredicate.  Instances of
            #$SpeechPartPredicate are used  to state the forms which
            words can take.  The first argument of a
            #$SpeechPartPredicate must be an instance of #$EnglishWord,
            and the  second must be an instance of #$CharacterString.
            For example,  (#$singular #$Dog-TheWord  dog ) means that
            the singular (noun) form  of #$Dog-TheWord is  dog .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TermPhrasesConstraint"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#NLSyntacticPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Speed">
        <rdfs:label xml:lang="en">speeds</rdfs:label>
        <rdfs:comment>A specialization of #$Rate.  Each instance of
            #$Speed is a rate of change in position (of an object, wave
            front, etc.).  Instances of #$Speed may be either fixed
            amounts, such as (#$MilesPerHour 55), or a range, such as
            #$WalkingSpeed or #$Calm-WindSpeed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </owl:Class>
    <owl:Class rdf:ID="SpermCell">
        <rdfs:label xml:lang="en">#$SpermCell</rdfs:label>
        <rdfs:comment>A specialization of #$Gamete.  Each instance of
            #$SpermCell is a specialized gamete cell which is produced
            by meiosis in the reproductive tract of a male animal.  Each
            sperm cell usually has half the number of chromosomes that
            regular body cells do, and when it fertilizes an ovum (see
            #$Ovum), the ovum becomes a zygote and continues to develop
            into a mature individual animal.  See also #$MaleAnimal, #$SexualReproductionEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sphere">
        <rdfs:label xml:lang="en">#$Sphere</rdfs:label>
        <rdfs:comment>A specialization of #$Spheroid (q.v.). Each
            instance of #$Sphere is a three-dimensional object where
            each of the points on the surface of the object is
            equidistant from the object&apos;s center. Examples include
            tangible objects such as squash balls, as well as abstract spheres.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Spheroid"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Spheroid">
        <rdfs:label xml:lang="en">#$Spheroid</rdfs:label>
        <rdfs:comment>A specialization of #$Ellipsoid (q.v.). Each
            instance of #$Spheroid is an ellipsoid that is (at least)
            very nearly spherical in shape (see the specialization
            #$Sphere).  The degree to which an ellipsoid may deviate
            from a perfect sphere and still qualify as a spheroid is
            difficult to specify precisely and partly depends on the
            context; but it seem correct in everyday contexts to
            consider (e.g.) #$PlanetEarth a spheroid and a jelly bean a
            mere ellipsoid.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Ellipsoid"/>
    </owl:Class>
    <owl:Class rdf:ID="SpindleMicrotheory">
        <rdfs:label xml:lang="en">#$SpindleMicrotheory</rdfs:label>
        <rdfs:comment>The collection of all microtheories which are the
            spindle elements.  A spindle microtheory system is one in
            which sibling spindle microtheories each have #$genlMt links
            to a superior #$CollectorMicrotheory, which has its own
            links to relevant contexts.  Additionally there exists a
            subordinate #$CollectorMicrotheory (inference microtheory)
            that has #$genlMt links to each of the spindle
            microtheories.  The name spindle derives from the visual
            metaphor of a spinning wheel spindle placed on its side in
            which the spokes represent the #$genlMt links.  Spindle
            microtheory systems are useful for organizing a set of
            contexts having shared assumptions, and requiring an
            inference context from which all are visible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Spiral-3D">
        <rdfs:label xml:lang="en">spirals</rdfs:label>
        <rdfs:comment>A subcollection of
            #$ThreeDimensionalGeometricThing. Each instance of
            #$Spiral-3D is a three-dimensional curve with one or more
            turns about an axis.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpiralShaped"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpiralShaped">
        <rdfs:label xml:lang="en">#$SpiralShaped</rdfs:label>
        <rdfs:comment>The collection of all typically shaped spiral objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ThreeDimensionalGeometricThing"/>
        <rdfs:subClassOf rdf:resource="#RoundThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Splitting">
        <rdfs:label xml:lang="en">splits</rdfs:label>
        <rdfs:comment>A collection of separation events in which
            something splits apart, often at a seam (e.g. in an item of
            clothing), perforation, or grain-line (e.g. in a piece of
            wood).  That is, two areas of the thing are separated from
            one another (though perhaps not separated completely into
            discrete pieces or parts).  Usually, a splitting occurs
            along a single  line  or  plane  that runs parallel to, and
            for a significant distance relative to, the length of the
            thing split. In order to undergo a #$Splitting, the
            #$objectOfStateChange must be in a #$Solid-StateOfMatter.
            See also #$Cracking.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpokenCommunicating">
        <rdfs:label xml:lang="en">#$SpokenCommunicating</rdfs:label>
        <rdfs:comment>A specialization of #$AudioCommunicating.  Each
            instance of #$SpokenCommunicating is a transmission of
            sound-borne verbal information by spoken words between two
            (or more) agents.  The communication may be one-way or
            two-way (or multi-way).  Examples of #$SpokenCommunicating
            include a telephone conversation, a classroom discussion,
            and the #$GettysburgAddress-Speech.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#AudioCommunicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SportsCompetition">
        <rdfs:label xml:lang="en">sports competitions</rdfs:label>
        <rdfs:comment>The collection of #$Competitions consisting
            primarily of one or more #$SportsEvents.  See its
            specializations #$SportsFormalCompetition and #$SportsEvent also.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#AthleticActivity"/>
        <rdfs:subClassOf rdf:resource="#Competition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SportsEvent">
        <rdfs:label xml:lang="en">#$SportsEvent</rdfs:label>
        <rdfs:comment>A specialization of both #$GameEvent and
            #$SportsCompetition.  Each instance of #$SportsEvent is an
            entire sports competition at the end of which either a
            winner is declared or a draw is declared.  For instance, an
            entire sandlot baseball game would be a #$SportsEvent, but
            the first inning of that game would not, since the first
            inning is a proper part of the game, and since neither a
            winner nor a draw is declared at the end of the first
            inning.  Note that several #$SportsEvents can be organized
            into a #$SportsFormalCompetition (q.v.); for example, the
            2001 World Series was a #$SportsFormalCompetition consisting
            of seven #$SportsEvents.  Specializations of #$SportsEvent
            include #$BaseballGame, #$TennisMatch, and #$FootballGame-American.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GameEvent"/>
        <rdfs:subClassOf rdf:resource="#SportsCompetition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SportsOrganization">
        <rdfs:label xml:lang="en">sports organization</rdfs:label>
        <rdfs:comment>#$SportsOrganization is a specialization of
            #$EntertainmentOrRecreationOrganization and
            #$ActivityTypeFocusGroup.  Each instance of
            #$SportsOrganization is an organization whose main function
            is involved with #$SportsEvents.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActivityTypeFocusGroup"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>

        <rdfs:subClassOf rdf:resource="#EntertainmentOrRecreationOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SportsTeam">
        <rdfs:label xml:lang="en">sports team</rdfs:label>
        <rdfs:comment>#$SportsTeam is specialization of #$Team and
            #$SportsOrganization.  Each instance of #$SportsTeam is a
            group of people who regularly play on one team during
            (more-or-less frequent) team sports games.  A sports team
            may be a commercial, professional team supported by a large
            full-time staff, or it may be semi-pro or amateur.  Only
            #$Athletes are members of the team itself; staff would
            belong to a related team organization.  Examples of
            #$SportsTeam include: #$PittsburghSteelers,
            #$PittsburghPirates, #$PittsburghPenguins.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Team"/>
        <rdfs:subClassOf rdf:resource="#SportsOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpreadingASubstance">
        <rdfs:label xml:lang="en">#$SpreadingASubstance</rdfs:label>
        <rdfs:comment>The collection of events in which a substance
            (instance of an #$ExistingStuffType) is spread out over a
            volume or area.  Important specializations of
            #$SpreadingASubstance are #$SpreadingStuffOntoSurface and
            #$SpreadingStuffOntoSurfaceWithTool.  This is distinct from
            spreading out something like a blanket for which the event
            type #$SpreadingSheetOntoSurface should be used.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapingWithoutRemovingMaterial"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpreadingOntoSurface">
        <rdfs:label xml:lang="en">spreading (type of thing)</rdfs:label>
        <rdfs:comment>A collection of events. In each
            #$SpreadingOntoSurface event, an object or stuff is spread
            out [see #$ShapingSomething] onto a surface so that it
            covers [#$covers-Generic] it.  Major specializations of
            #$SpreadingOntoSurface are #$SpreadingStuffOntoSurface and #$SpreadingSheetOntoSurface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ApplyingSomethingToSurface"/>
        <rdfs:subClassOf rdf:resource="#ShapingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpreadingStuffOntoSurface">
        <rdfs:label xml:lang="en">spreading stuff onto surface</rdfs:label>
        <rdfs:comment>A collection of events. In each
            #$SpreadingStuffOntoSurface event, some stuff is spread out
            onto a surface so that it covers [#$covers-Paintlike] it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpreadingOntoSurface"/>
        <rdfs:subClassOf rdf:resource="#ApplyingStuffToSurface"/>
        <rdfs:subClassOf rdf:resource="#SpreadingASubstance"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Spreadsheet">
        <rdfs:label xml:lang="en">spreadsheets</rdfs:label>
        <rdfs:comment>A specialization of #$HumanAccessibleIBT and
            #$StructuredInformationSource.  Each instance of
            #$Spreadsheet is an information-bearing thing that presents
            (usually numeric) data in a two-dimensional matrix of cells
            that are organized into rows and columns so that people can
            view it.  A spreadsheet may be produced by hand with pencil
            and paper or generated by a computer #$SpreadsheetProgram
            (q.v.) such as #$Lotus123 onto a computer screen or hardcopy
            device.  Associated with every spreadsheet are mathematical
            definitions of some of its cells as a function of other
            cells in that spreadsheet.  A database [see
            #$Database-Physical] that holds the information from which
            the spreadsheet is generated is not an instance of #$Spreadsheet.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBT"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpreadsheetProgram">
        <rdfs:label xml:lang="en">#$SpreadsheetProgram</rdfs:label>
        <rdfs:comment>A specialization of #$InteractiveComputerProgram
            and #$MathematicalComputingProgram. Each instance of this
            collection is a #$ComputerProgram-CW  in which data can be
            entered and manipulated in a tabular format and calculations
            performed on the data.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DatabaseProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SpringSeason">
        <rdfs:label xml:lang="en">#$SpringSeason</rdfs:label>
        <rdfs:comment>A specialization of#$SeasonOfYear.  Each instance
            of #$SpringSeason is, in a temperate climate cycle (see
            #$TemperateClimateCycle), the time ice from the preceding
            Winter melts, the average temperature starts to increase,
            the days get longer, plants begin to put forth buds, etc.
            Note that #$SpringSeason represents the climatic aspects of
            spring; it is _not_ a specialization of #$CalendarSpring.
            For the collection of the purely temporal  aspects of
            spring, see #$CalendarSpring.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Square">
        <rdfs:label xml:lang="en">squares</rdfs:label>
        <rdfs:comment>A subcollection of #$Rectangle-2D. Each instance
            of #$Square is a rectangle with all four sides of equal
            length. Examples include space occupied by spatially
            localized objects, such as the space occupied by a square
            element in a Malevich painting (the partially tangible
            chunk of paint that constitutes one of these square elements
            is not an  instance of this collection, although it
            resembles in shape instances of  #$Rectangle-2D), as well as
            abstract squares.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RegularPolygonShaped"/>
        <rdfs:subClassOf rdf:resource="#Rhombus"/>
        <rdfs:subClassOf rdf:resource="#Rectangle-2D"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StageLevelPredicate">
        <rdfs:label xml:lang="en">#$StageLevelPredicate</rdfs:label>
        <rdfs:comment>`Stage-level&apos; predicates express properties
            that, at least in principle, belong to individuals only at
            certain times or stages in time, rather than intrinsically
            (cf #$IndividualLevelPredicate). Example: being on
            one&apos;s way to London is typically a stage-level property.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="StandardUnitOfMeasure">
        <rdfs:label xml:lang="en">standard units of measure</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of #$StandardUnitOfMeasure is a unit of measure
            considered to be the #$standardUnit (q.v.) for the
            quantifiable property it measures.  Instances of
            #$StandardUnitOfMeasure include #$Liter, #$Meter,
            #$Kilogram, and #$Volt.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="Starvation">
        <rdfs:label xml:lang="en">starving</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$Starvation is an event in which  an #$Animal is so hungry
            as to be #$Starving.  If prolonged, it results in death.
            NB:  Note that this is a #$SingleDoerAction (q.v.), so it
            doesn&apos;t cover cases wherein one creature withholds food
            from another.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="State-Geopolitical">
        <rdfs:label xml:lang="en">#$State-Geopolitical</rdfs:label>
        <rdfs:comment>A specialization of #$CountrySubsidiary.  Each
            instance of #$State-Geopolitical is a geopolitical entity
            whose government is at the very next administrative level
            down from the national level.  In different countries,
            instances of #$State-Geopolitical may be called
            `regions&apos;, `states&apos;,  `provinces&apos;,
            `prefectures&apos;, `departments&apos;, `parishes&apos;, or
            something else.  In the U.S.A., instances are called
            `states&apos;.  See also #$Province.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CountrySubsidiary"/>
    </owl:Class>
    <owl:Class rdf:ID="State-UnitedStates">
        <rdfs:label xml:lang="en">U.S. states</rdfs:label>
        <rdfs:comment>#$State-UnitedStates is a specialization of
            #$State-Geopolitical.  Each instance of #$State-UnitedStates
            is one of the states of the #$UnitedStatesOfAmerica; i.e.,
            #$Alabama-State, #$Alaska-State, #$Arizona-State,
            #$Arkansas-State, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#State-Geopolitical"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StateCapital">
        <rdfs:label xml:lang="en">state capitals</rdfs:label>
        <rdfs:comment>A specialization of #$CapitalCityOfRegion.  An
            instance of #$CapitalCityOfRegion is an instance of
            #$StateCapital just in case it is the capital city of some
            instance of #$State-Geopolitical (q.v.).  Instances of
            #$StateCapital include the capital cities of instances of
            #$State-UnitedStates, as well as the capital cities of
            instances of other specializations of #$State-Geopolitical,
            such as #$Prefecture and #$Province.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CapitalCityOfRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StateOfMatterChangeEvent">
        <rdfs:label xml:lang="en">physical state change events</rdfs:label>
        <rdfs:comment>#$StateOfMatterChangeEvent is the collection of
            events in which some piece of matter changes from one of the
            physical states of matter to another.  Such changes of state
            can be induced by changes in temperature (or the equivalent
            in the manipulation of kinetic energy).  Each particular
            instance of #$Boiling, #$Freezing, #$Evaporating,
            #$Condensing, #$Melting, etc. is an instance of
            #$StateOfMatterChangeEvent.    Note: Most Cyc microtheories
            distinguish four states of matter, namely,
            #$Solid-StateOfMatter, #$Plasma-StateOfMatter,
            #$Liquid-StateOfMatter, #$Gaseous-StateOfMatter.  See
            #$MatterTypeByPhysicalState and its individual state constants.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#ReversibleProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StaticSituation">
        <rdfs:label xml:lang="en">static situations</rdfs:label>
        <rdfs:comment>A specialization of #$Situation-Temporal.  Each
            instance of #$StaticSituation is a state of affairs between
            two or more things, persisting statically over some time
            interval. Instances of #$StaticSituation always have a
            temporal extent, and they usually have a tangible and
            spatial extent.   As an example, consider the situation of
            Bill Clinton sitting in his easy chair on the evening of
            7/4/96.   There are participant objects such as Bill and the
            chair, there are relationships such as the seat of the chair
            supporting his bottom and his weight being off his feet,
            etc.   In any #$StaticSituation, for the participants in
            that situation, there is some significant or focal
            relationship between them which does not change.  In the
            most typical cases, there is no important change whatsoever,
            e.g. someone sitting would be such a #$StaticSituation. But
            some things represented as #$StaticSituations can
            alternatively be represented as #$Events.  For example, a
            situation in which geese were flying in a flock would be
            static (the flock-like spatial relationship between the
            geese would be retained) but it would also be dynamic in
            that the geese were moving, so either representation could
            be chosen depending on the context.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Stealing-Generic">
        <rdfs:label xml:lang="en">#$Stealing-Generic</rdfs:label>
        <rdfs:comment>A specialization of both #$TakingSomething and
            #$ActsCommonlyConsideredCriminal.  In each instance of
            #$Stealing-Generic, an agent (see the collection #$Agent)
            takes something belonging to another agent without that
            agent&apos;s permission (and possibly without that
            agent&apos;s knowledge).  Note that there may be some cases
            in which an agent takes something belonging to another agent
            without that agent&apos;s explicit permission that would
            nevertheless not be categorized as instances of
            #$Stealing-Generic.  For instance, a pair of agents may have
            an informal agreement or `understanding&apos; that would
            cover casual `borrowing&apos; from one another (and thus
            excuse it from being stealing).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActsCommonlyConsideredCriminal"/>
        <rdfs:subClassOf rdf:resource="#UnintendedLossOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SteamingFood">
        <rdfs:label xml:lang="en">steaming</rdfs:label>
        <rdfs:comment>A specialization of #$CookingFood.  In each
            instance of #$SteamingFood, some food is cooked by exposing
            it to steam.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Steppe">
        <rdfs:label xml:lang="en">steppes (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Grassland. Each instance is
            an area where short grasses are  dominant: traditionally,
            the wild grasslands of Eurasia, but also  found extensively
            in central North America, central and southern  Africa, and
            Australia.  Source: The Times Atlas of the World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Grassland"/>
        <rdfs:subClassOf rdf:resource="#FixedTerrainGeologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SteppeClimateCycle">
        <rdfs:label xml:lang="en">steppe climates</rdfs:label>
        <rdfs:comment>A specialization of #$TemperateClimateCycle.  Each
            instance of #$SteppeClimateCycle is a year-long event
            consisting of weather characteristic of the steppes (i.e.,
            temperate zone semiarid plains).  Characteristics of a
            steppe climate include: little precipitation, but wetter
            than a desert; wide temperature extremes, from very hot in
            the day to cold at night.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Stock">
        <rdfs:label xml:lang="en">stock</rdfs:label>
        <rdfs:comment>A collection consisting of all shares of stock. An
            instance of #$Stock is a share of ownership in some instance
            of #$LegalCorporation; its owner is an #$Agent who is
            recorded as a shareholder in the official records of that
            corporation. A company may have several classes of #$Stock,
            such as Common, Preferred, Class A, Class B, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="StockCertificate">
        <rdfs:label xml:lang="en">stock certificates</rdfs:label>
        <rdfs:comment>A specialization of #$OfficialDocument and
            #$CertificateDocument.  Each instance of #$StockCertificate
            is a document issued by a corporation (see #$Business) to
            one of its shareholders, certifying the shareholder&apos;s
            ownership of some number of shares of #$Stock (q.v.) in that
            corporation. See also #$shareholders.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StockHoldings">
        <rdfs:label xml:lang="en">stock holdings</rdfs:label>
        <rdfs:comment>A collection of partially tangibles; a
            subcollection of #$FinancialAssetHoldings.  Each instance of
            #$StockHoldings is a group of #$Stock shares owned by an
            #$Agent.  It may consist of shares in only one company or
            different groups of shares in multiple companies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FinancialAssetHoldings"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Stomach">
        <rdfs:label xml:lang="en">#$Stomach</rdfs:label>
        <rdfs:comment>A specialization of #$InternalOrgan.  Each
            instance of #$Stomach is an organ which is part of the
            digestive system (see the collection #$DigestiveSystem) of
            some animal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InternalOrgan"/>
        <rdfs:subClassOf rdf:resource="#Sac-Organic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StoneStuff">
        <rdfs:label xml:lang="en">#$StoneStuff</rdfs:label>
        <rdfs:comment>A specialization of (#$SolidFn
            #$RockyPlanetaryStuff).  Each instance of #$StoneStuff is a
            piece or portion of rock or stone. Stone is widely used as a
            material for the construction of buildings, walls,
            monuments, and sculptures.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandStuff"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Soil-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Stop-Consonant">
        <rdfs:label xml:lang="en">stop - consonant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Consonant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StorageConstruct">
        <rdfs:label xml:lang="en">storage devices</rdfs:label>
        <rdfs:comment>#$StorageConstruct is a specialization of
            #$ContainerProduct.  Each instance of #$StorageConstruct is
            a container used primarily for storing something and
            includes such things as closets, trunks of cars, and attics.
            Negative examples would be #$Sink, #$Sandbox, and
            #$SewerLine, since their primary purpose is something other
            than storing something.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Stream">
        <rdfs:label xml:lang="en">streams (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$Water-Fresh,
            #$InanimateThing-Natural, and #$FlowPath.  Each instance of
            #$Stream is a natural body of fresh water that flows when it
            is not frozen.  A stream can either be a great river (see
            #$River) or a  tiny creek (see #$Creek).  Every non-frozen
            stream flows in (see #$in-ContOpen) some conduit (see
            #$FluidConduit) such as a streambed or riverbed.  Notable
            instances of #$Stream incluide #$AmazonRiver,
            #$LittleMissouriRiver, #$WoundedKnee-Creek.  Note that
            riverbanks are not streams nor are they parts of streams,
            but rather they mark the edges of streams.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Water-Fresh"/>
        <rdfs:subClassOf rdf:resource="#FlowPath"/>
        <rdfs:subClassOf rdf:resource="#EcologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Street-Generic">
        <rdfs:label xml:lang="en">streets</rdfs:label>
        <rdfs:comment>#$Street-Generic is a specialization of both
            #$Roadway and #$UrbanArea.  Each instance of
            #$Street-Generic is a #$Roadway located inside a city or town.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
        <rdfs:subClassOf rdf:resource="#Roadway"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StreetAddress">
        <rdfs:label xml:lang="en">street addresses</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString. Each
            instance of #$StreetAddress is a string (an instance of
            #$CharacterString (q.v.)) that includes a street number and
            street name.  For example: `3721 Executive Center
            Drive&apos;, the street address of #$Cycorp.  Each
            #$ShippingAddress (q.v.) includes a street address as a substring.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="Stress-Feeling">
        <rdfs:label xml:lang="en">stress - feeling</rdfs:label>
        <rdfs:comment>Cumulative psychological or emotional disturbance
            caused by environmental influences. Can be relieved by
            #$Resting-Relaxing, #$Meditating, #$Exercising, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="StriatedMuscle">
        <rdfs:label xml:lang="en">striated muscles</rdfs:label>
        <rdfs:comment>A specialization of #$MuscleTissue.  Each instance
            of #$StriatedMuscle is a piece of muscle tissue of that
            constitutes a muscle which normally performs functions that
            are under an organism&apos;s voluntary control.  Muscles of
            this kind differ in structure from smooth muscles, which are
            involved in involuntary physiological functions such as
            digestion and breathing.  Elements of #$StriatedMuscle are
            composed of multinuclear cells and distinguished by light
            and dark bands (viz., striations).  Cf. #$SmoothMuscle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MuscleTissue"/>
        <rdfs:subClassOf rdf:resource="#Muscle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StrictlyFunctionalPredicate">
        <rdfs:label xml:lang="en">#$StrictlyFunctionalPredicate</rdfs:label>
        <rdfs:comment>A specialization of #$FunctionalPredicate (q.v.)
            whose instances are those predicates that are in  a strict
            sense  functional  in at least one argument-place (see
            #$strictlyFunctionalInArgs and #$singleEntryFormatInArgs).
            That is, given any sequence of legal arguments placed in
            such a predicate&apos;s other argument positions, there is
            at most one argument such that, when it is placed in the
            predicate&apos;s functional position, the resulting formula
            is true.  More precisely: Suppose PRED is an N-ary instance
            of #$FunctionalPredicate that is functional in its Kth
            place.  Given any (N-1)-tuple &lt;O(1),.., O(K-1),
            O(K+1),.., O(N)&gt; consisting of things that are,
            respectively, legal arguments for (i.e. satisfy all
            argument-constraints on) the N-1 argument-places in PRED
            other than its Kth-place, there is at most one thing -- call
            it O(K) -- such that (PRED O(1)..O(N)) is true.  For
            example, #$biologicalMother is functional in its second
            argument-place, since every animal has one and only one
            biological mother.  Note that it might be the case that, for
            some ways of fixing PRED&apos;s other arguments, there will
            be _nothing_ that would yield a true formula when put into
            PRED&apos;s functional argument-place; for example, while a
            country has at most one dictator (see #$dictator), some
            countries have no dictator.  A binary
            #$StrictlyFunctionalPredicate that is strictly functional in
            its second argument is an instance of
            #$StrictlyFunctionalSlot (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionalRelation"/>
        <rdfs:subClassOf rdf:resource="#FunctionalPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="StrictlyFunctionalRelation">
        <rdfs:label xml:lang="en">#$StrictlyFunctionalRelation</rdfs:label>
        <rdfs:comment>A specialization of #$FunctionalRelation (q.v.)
            each instance of which is either a function (see
            #$Function-Denotational) or a predicate that is strictly
            functional  in at least one argument-place (see
            #$StrictlyFunctionalPredicate and
            #$strictlyFunctionalInArgs).  Examples include
            #$IntervalMaxFn, #$BorderBetweenFn, and #$biologicalMother.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FunctionalRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="StrictlyFunctionalSlot">
        <rdfs:label xml:lang="en">predicates that is strictly functional
            in its second argument</rdfs:label>
        <rdfs:comment>A specialization of both #$FunctionalSlot and
            #$StrictlyFunctionalPredicate (qq.v.) each instance of which
            is a binary  predicate that is strictly functional in its
            second argument position (see #$strictlyFunctionalInArgs).
            More precisely, a binary predicate PRED is an instance of
            #$StrictlyFunctionalSlot if, for any legal occupant THING1
            of PRED&apos;s first (or  arg1 ) argument position, there is
            at most one legal occupant THING2 of PRED&apos;s second (or
            arg2 ) argument position such that (PRED THING1 THING2)
            holds.  #$StrictlyFunctionalSlot is thus the subcollection
            of the  collection-intersection  of #$FunctionalSlot and
            #$StrictlyFunctionalPredicate containing those predicates
            whose second argument (at least) is strictly functional.
            Examples include #$countryOfAddress and #$femaleParentActor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StrictlyFunctionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#FunctionalSlot"/>
    </owl:Class>
    <owl:Class rdf:ID="StrictlyMentalEvent">
        <rdfs:label xml:lang="en">strictly mental events</rdfs:label>
        <rdfs:comment>The collection of events that involve mental  (not
            necessarily purposeful) activities but a minimal physical
            component or a physical component that is somewhat
            independent of the event being an event of that type.  For
            instance, perceiving an apple is not an instance of
            #$StrictlyMentalEvent insofar as it requires sense organs
            and an apple and no being could perform an apple perceiving
            event without an apple or sense organs. However, the actual
            phenomenological aspects of this event, e.g., the experience
            of redness or roundness does not require the sense organs or
            the apple.   It is conceivable that a disembodied brain
            could have apple-like phenomenological experiences although
            it could not actually perceive apples.  Note that the
            property defining this collection is primitive and
            notoriously difficult to define and no claim is made here to
            have fully defined it. We may need to appeal to the possible
            types of #$StrictlyMentalEvents in attempting to guide its
            use.   If an event is not clearly an instance of
            #$ExperiencingPerception, entertaining a thought or
            processing thoughts (#$Thinking), or #$ExperiencingEmotion
            or fully decomposable into a collection of such events, then
            one should be very careful about making it in an instance of #$StrictlyMentalEvent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StringIndexingSlot">
        <rdfs:label xml:lang="en">string indexing slot</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TermPhrasesConstraint"/>
        <rdfs:subClassOf rdf:resource="#NLSemanticPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="StringObject">
        <rdfs:label xml:lang="en">#$StringObject</rdfs:label>
        <rdfs:comment>The character string data type. In the context of
            #$ProgrammingDomainVocabularyMt,  it is undetermined if
            values of this type are implemented as fized length
            character  arrays, or as null terminated strings.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StructuredInformationSource">
        <rdfs:label xml:lang="en">structured information sources</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationStore and
            #$PartiallyIntangibleIndividual.  Each instance of
            #$StructuredInformationSource is an #$InformationStore in
            which bits of information are represented as related in a
            systematic way that is easily characterized by some type of
            formal structure, including spatial or architectural terms
            (used metaphorically).  Examples include: a database
            organized in fields and values; a spreadsheet organized in
            rows and columns with entries; an organizational tree
            diagram with nodes and branches; a topographical map; a
            document written in HTML (hyper-text markup language).
            Negative examples include computer programs, poems, and novels.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Student">
        <rdfs:label xml:lang="en">#$Student</rdfs:label>
        <rdfs:comment>An instance of #$PersonTypeByActivity.  Each
            instance of #$Student is a person who studies at some
            educational institution.  This collection includes students
            at all levels of study in all types of educational
            institutions.  Notable specializations of #$Student include
            #$UniversityStudent, #$GraduateStudent, and #$HighSchoolStudent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="StuffType">
        <rdfs:label xml:lang="en">#$StuffType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$StuffType is a collection that is stuff-like in at least
            one respect. A collection COL is stuff-like just in case
            there is some sense of &apos;part&apos; according to which
            every part of an instance of COL is itself an instance of
            COL. More precisely, for a collection to be an instance of
            #$StuffType it is sufficient that there be some spec-pred
            PARTPRED of #$parts (that is, some predicate PARTPRED for
            which (#$genlPreds PARTPRED #$parts) holds), such that if
            (#$isa OBJECT1 COL) and (PARTPRED OBJECT1 OBJECT2), then
            (#$isa OBJECT2 COL). Here are two examples.  Consider
            #$Breathing. Take an instance of that, say a ten minute long
            period in which a person is breathing. Imagine some two
            minute snippet of that, one of its #$timeSlices (a spec-pred
            of #$parts). That, too, is an instance of #$Breathing. So
            #$Breathing is a #$StuffType, since all #$timeSlices of an
            instance of #$Breathing are also instances of #$Breathing.
            Consider #$Water. Take any instance of #$Water -- say the
            water in the Pacific Ocean. Now take any portion of that
            water -- say a handful of it that a person scoops up near
            Honolulu, one of its #$physicalPortions (a spec-pred of
            #$parts). That handful is itself an instance of #$Water.
            Hence #$Water is a #$StuffType, in virtue of the fact that
            all #$physicalPortions of all instances #$Water are
            themselves instances of #$Water.    Other examples are:
            #$AbstractInformationalThing, which is stuff-like with
            respect #$subInformation; #$CharacterString, which is
            stuff-like with respect to #$subCharacterStrings; and
            #$List, which is stuff-like with respect to #$subLists.
            These examples are somewhat exceptional -- most #$StuffTypes
            are like the examples of #$Breathing and #$Water.  See
            #$ObjectType, for the contrasting notion of being object-like.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="SubAtomicParticle">
        <rdfs:label xml:lang="en">#$SubAtomicParticle</rdfs:label>
        <rdfs:comment>A specialization #$MicroscopicScaleObject and
            #$InanimateObject-Natural.  Each instance of
            #$SubAtomicParticle is a physical particle smaller than the
            smallest atom.  Major subcollections of #$SubAtomicParticle
            include #$Electron, #$Proton, and #$Neutron.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateObject-Natural"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SubEventPredicate">
        <rdfs:label xml:lang="en">sub event predicate</rdfs:label>
        <rdfs:comment>A collection of binary predicates that are used to
            relate events to their parts or subevents. Each instance of
            #$SubEventPredicate is a specialization or
            inverse-specialization (see #$genlInverse) of the predicate
            #$subEvents (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPhysicalPartPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryRolePredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLAtom">
        <rdfs:label xml:lang="en">Cyc system atoms</rdfs:label>
        <rdfs:comment>A collection of #$SubLExpressions that are atomic:
            they cannot be decomposed into other SubL expressions. Save
            for certain variables (see #$SubLVariable), instances of
            #$SubLAtom are rarely used in CycL assertions (other than
            assertions built with certain
            #$CycInferenceDescriptorPredicates like #$defnIff). Many
            SubL atoms are not even #$CycLExpressions.  Do not confuse
            this collection with #$SubLAtomicTerm, which is a
            #$CycLExpressionType (though its instances are neither CycL
            constants nor CycL variables).  Note that #$SubLAtom is a
            quoted-collection  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLListOrAtom"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLAtomWithValue">
        <rdfs:label xml:lang="en">Cyc system atom with values</rdfs:label>
        <rdfs:comment>A specialization of #$SubLAtom.  Each instance of
            #$SubLAtomWithValue is an atomic SubL expression that has a
            value (e.g., 2) associated with it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLAtomicTerm">
        <rdfs:label xml:lang="en">sub l atomic term</rdfs:label>
        <rdfs:comment>The collection of all atomic denotational terms in
            the CycL language that are not explicitly represented in
            CycL (i.e. they are neither #$CycLConstants nor
            #$CycLVariables) but are represented in SubL, the underlying
            implementation language of the Cyc system.   Atomic  here
            means not constructable from other terms via the SubL
            syntax.  Examples include the terms `212&apos;,
            `:NOUN&apos;, `#x&apos;, and `VARIABLE-P&apos;. Do not
            confuse this collection with #$SubLAtom, most of whose
            instances, while they are expressions of SubL, are _not_
            part of CycL.  Note that this collection, like most
            instances of #$CycLExpressionType, is  quoted  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#SubLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>

        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLCharacter">
        <rdfs:label xml:lang="en">SubL characters</rdfs:label>
        <rdfs:comment>The collection of all character-denoting terms in
            the CycL language that are #$SubLAtomicTerms (q.v.). (SubL,
            which subsumes CycL, is the underlying implementation
            language of the Cyc system.)  A given #$SubLCharacter
            CHAR-TERM is itself a string consisting of the hash-symbol
            (`#&apos;), followed by the backslash (`\&apos;), followed
            (in most cases) by the character CHAR that CHAR-TERM
            denotes.  For example, the SubLCharacter `#\A&apos;  denotes
            the character `A&apos;.  (An exception to the above is when
            CHAR is a non-printing or control character, in which case a
            specially-designated string  appears after the `#\&apos;.)</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLExpression">
        <rdfs:label xml:lang="en">sub l expression</rdfs:label>
        <rdfs:comment>The collection of all expressions of the #$SubL
            language.  #$SubL is the implementation language of the Cyc
            system, and it subsumes the #$CycL language.  The #$CycL
            grammar is more strict than the #$SubL grammar. Thus, while
            every #$CycLExpression is a #$SubLExpression, the converse
            is not true. Examples of #$SubLExpressions that are not
            #$CycLExpressions include Arabic decimal numeric expressions
            such as `123&apos;, expressions like `(1 2 3)&apos; that
            denote lists of numbers, and  dotted pair  expressions like
            `(#$Cat . #$Dog)&apos;.  Note that #$SubLExpression is a
            quoted-collection  (see #$quotedCollection).</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="SubLInteger">
        <rdfs:label xml:lang="en">Cyc system integers</rdfs:label>
        <rdfs:comment>The collection of all integer-denoting expressions
            in the CycL language that are _not_ CycL constants or NATs,
            but are terms of SubL, the underlying implementation
            language of the Cyc system.  #$SubLIntegers  are numeric
            strings of the Arabic decimal system (including the
            negative-value symbol `-&apos;, but _not_ the decimal point
            or scientific notation) that denote integers.  Examples
            include the expressions `0&apos;, `12&apos;, and `-4&apos;
            (which denote the integers 0, 12, and -4, respectively).
            Non-examples include `4.012&apos;, `(#$Meter 6)&apos;,
            `(#$Unity 3.3)&apos;, `:34&apos;, and `#$PlusInfinity&apos;.
            Note that #$SubLInteger is a  quoted-collection  (see
            #$quotedCollection). Thus the sentence `(#$isa 12
            #$SubLInteger)&apos; means that the expression `12&apos;
            (and not the number 12) is an instance of #$SubLInteger.
            Similarly, the assertion `(#$genls #$SubLInteger
            #$Integer)&apos; means (not that each SubL integer is an
            integer, but) that each  instance of #$SubLInteger _denotes_
            an instance of #$Integer (see the shared #$NoteAboutUseVersusMention).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <rdfs:subClassOf rdf:resource="#SubLRealNumber"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLKeyword">
        <rdfs:label xml:lang="en">Cyc system keywords</rdfs:label>
        <rdfs:comment>The subcollection of #$SubLSymbol consisting of
            all SubL keywords.  Instances include the symbols
            `:KEYWORD&apos;, `:OBJECT&apos;, and `:PLURAL&apos;.  Every
            instance of #$SubLKeyword satisfies (in the sense relevant
            to #$defnIff) `KEYWORDP&apos;.  Note that #$SubLKeyword,
            like most instances of #$CycLExpressionType, is  quoted
            (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
        <rdfs:subClassOf rdf:resource="#SubLNonVariableSymbol"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLList">
        <rdfs:label xml:lang="en">SubL lists</rdfs:label>
        <rdfs:comment>A collection of list-denoting expressions that are
            not represented in CycL (i.e. they are not #$CycLConstants
            or #$CycLNonAtomicTerms) but are represented in SubL, the
            underlying implementation language of the Cyc system.  Each
            instance of #$SubLList is a sequence of #$SubLListOrAtoms
            (q.v.) enclosed in parentheses.  SubL lists are those things
            that pass the #$defnIff LISTP. Note that this collection is
            quoted  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLListOrAtom"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLListOfStrings">
        <rdfs:label xml:lang="en">SubL lists of strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all #$SubLLists whose elements are all
            instances of #$SubLString.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLList"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLListOrAtom">
        <rdfs:label xml:lang="en">SubL list or atoms</rdfs:label>
        <rdfs:comment>A subcollection of #$SubLExpression. The
            collection #$SubLListOrAtom contains both the list-denoting
            expressions (see #$SubLList) and the atomic expressions (see
            #$SubLAtom) of SubL, the underlying implementation language
            for the Cyc System.  Note that #$SubLListOrAtom is a
            quoted-collection  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLExpression"/>

    </owl:Class>
    <owl:Class rdf:ID="SubLNonNegativeInteger">
        <rdfs:label xml:lang="en">#$SubLNonNegativeInteger</rdfs:label>
        <rdfs:comment>The collection of all
            non-negative-integer-denoting expressions in the CycL
            language that are _not_ CycL constants or NATs, but are
            terms of SubL, the underlying implementation language of the
            Cyc system.  #$SubLNonNegativeIntegers   are numeric strings
            of the Arabic decimal system (not including the decimal
            point or scientific notation).  Examples include the
            expressions `0&apos;, `12&apos;, and `4&apos;.  Non-examples
            include `4.012&apos;, `(#$Meter 6)&apos;, `(#$Unity
            3.3)&apos;, `:34&apos;, and `#$PlusInfinity&apos;.  Note
            that #$SubLNonNegativeInteger is a  quoted-collection  (see
            #$quotedCollection); thus the sentence `(#$isa 12
            #$SubLNonNegativeInteger)&apos; means that the expression
            `12&apos; (and not   the number 12) is an instance of #$SubLNonNegativeInteger.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonNegativeInteger"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#SubLInteger"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLNonVariableNonKeywordSymbol">
        <rdfs:label xml:lang="en">SubL non-variable non-keyword symbols</rdfs:label>
        <rdfs:comment>The collection of all #$SubLSymbols except
            #$SubLVariables (q.v.) and #$SubLKeywords (q.v.); a
            subcollection of #$CycLClosedAtomicTerm.  Note that
            `symbol&apos; has a very specific, technical meaning in
            SubL; #$SubLNonVariableNonKeywordSymbols are rarely used in
            CycL assertions, except within those built with certain
            #$CycInferenceDescriptorPredicates like #$defnIff. Examples
            of SubL non-variable non-keyword symbols include the symbols
            `GENLS&apos; and
            `CYC-SYSTEM-NON-VARIABLE-NON-KEYWORD-SYMBOL-P&apos;.  Note
            that this collection, like most instances of
            #$CycLExpressionType, is  quoted  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLNonVariableSymbol"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLNonVariableSymbol">
        <rdfs:label xml:lang="en">SubL non-variable symbols</rdfs:label>
        <rdfs:comment>The collection of all #$SubLSymbols except
            #$SubLVariables (qq.v.); a subcollection of
            #$CycLClosedAtomicTerm.  Note that `symbol&apos; has a very
            specific, technical meaning in SubL;
            #$SubLNonVariableSymbols are rarely used in CycL assertions,
            except within those built with certain
            #$CycInferenceDescriptorPredicates like #$defnIff and those
            whose arguments are #$KeywordVariableTemplates (qq.v.).
            Examples of SubL non-variable symbols include the symbols
            `GENLS&apos;, `:ARG1&apos;, and
            `CYC-SYSTEM-NON-VARIABLE-SYMBOL-P&apos;.  Note that this
            collection, like most instances of #$CycLExpressionType, is
            quoted  (see #$quotedCollection).</rdfs:comment>

        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLPositiveInteger">
        <rdfs:label xml:lang="en">#$SubLPositiveInteger</rdfs:label>
        <rdfs:comment>The collection of all positive-integer-denoting
            expressions in the CycL language that are _not_ CycL
            constants or NATs, but are terms of SubL, the underlying
            implementation language of the Cyc system.
            #$SubLPositiveIntegers   are numeric strings of the Arabic
            decimal system (not including the decimal point or
            scientific notation).  Examples include the expressions
            `2&apos;, `12&apos;, and `4&apos;.  Non-examples include
            `0&apos;, `4.012&apos;, `(#$Meter 6)&apos;, `(#$Unity
            3.3)&apos;, `:34&apos;, and `#$PlusInfinity&apos;.  Note
            that #$SubLPositiveInteger is a  quoted-collection  (see
            #$quotedCollection); thus the sentence `(#$isa 12
            #$SubLPositiveInteger)&apos; means that the expression
            `12&apos; (and not   the number 12) is an instance of #$SubLPositiveInteger.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PositiveInteger"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeInteger"/>
        <rdfs:subClassOf rdf:resource="#SubLNonNegativeInteger"/>
        <rdfs:subClassOf rdf:resource="#SubLInteger"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLRealNumber">
        <rdfs:label xml:lang="en">Cyc system real numbers</rdfs:label>
        <rdfs:comment>The collection of all number-denoting expressions
            in the CycL language that are _not_ CycL constants or NATs,
            but are terms of SubL, the underlying implementation
            language of the Cyc system. #$SubLRealNumbers are numeric
            strings of the Arabic decimal system, including the decimal
            point and scientific notation.  Examples include the terms
            `212&apos; and `3.14159d0&apos;.  Non-examples include the
            expressions `#$One&apos;, `(#$Meter 6)&apos;, `(#$Unity
            3)&apos;, `:34&apos;, `#$PlusInfinity&apos;, and
            `Avogadro&apos;s number&apos;.  Note that this collection,
            like most instances of #$CycLExpressionType, is  quoted
            (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLAtomWithValue"/>
        <rdfs:subClassOf rdf:resource="#RationalNumber"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLString">
        <rdfs:label xml:lang="en">sub l string</rdfs:label>
        <rdfs:comment>A subcollection of #$SubLAtomicTerm (q.v.) whose
            instances can be used to denote character-strings.  In the
            SubL language (as in English), one can refer to a particular
            character-string by simply putting a pair of quotation marks
            around it.  Semantically, what this amounts to is using a
            certain character-string to denote itself.  More precisely:
            a given #$SubLString STRING is a character-string such that,
            when it appears inside a pair of double-quotation marks,
            STRING is interpreted as denoting itself (i.e. STRING).  The
            surrounding quotation-marks are _not_ considered to be parts
            of STRING; rather, they are syncategorematic symbols whose
            role is merely to indicate that a string a being referred
            to.  Thus, in the context of the sentence `(#$firstName
            #$Lenat  Doug )&apos;, the four-character string `Doug&apos;
            denotes itself: the string `Doug&apos;.  Note that _not_
            every #$CharacterString is a #$SubLString: there are some
            restrictions on what characters a SubL-string can contain.
            Note also that #$SubLStrings are _atomic_ terms (see
            #$SubLAtomicTerm and #$CycLAtomicTerm), as they cannot be
            constructed out of other SubL (or CycL) terms via the syntax
            (grammar) of SubL (or CycL).  Thus although the string
            `hotdog&apos; can indeed be obtained from `hot&apos; and
            `dog&apos; via concatenation (see #$ConcatenateStringsFn),
            the _syntax_ of SubL (or CycL) itself contains no rule that
            licenses such a construction (see e.g. the comments on
            #$SubLExpression,  #$CycLExpression, #$CycLTerm,
            #$CycLFormula, and various subcollections thereof).  Note
            finally that #$SubLString is a  quoted-collection  (see
            #$quotedCollection).  Thus the sentence `(#$isa  hotdog
            #$SubLString)&apos; means, just as one would expect, that
            the six-character string `hotdog&apos; (not the
            eight-character quote-inclusive ` hotdog &apos;; see above)
            is an instance of #$SubLString.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLSymbol">
        <rdfs:label xml:lang="en">Cyc system symbols</rdfs:label>
        <rdfs:comment>The collection of all #$SubLAtoms that are also
            symbols  in the SubL language.  That is, each instance of
            #$SubLSymbol satisfies the #$defnIff SYMBOLP.  Note that
            `symbol&apos; has a very specific, technical meaning in
            SubL.  Save for those that are variables (see
            #$SubLVariable), #$SubLSymbols are rarely used in CycL
            assertions, except within those built with certain
            #$CycInferenceDescriptorPredicates like #$defnIff. Examples
            of SubL symbols include the symbols `GENLS&apos; and
            `CYC-SYSTEM-NON-VARIABLE-SYMBOL-P&apos;. Note also that
            #$SubLSymbol is a  quoted-collection  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>

        <rdfs:subClassOf rdf:resource="#SubLAtom"/>
    </owl:Class>
    <owl:Class rdf:ID="SubLTemplate">
        <rdfs:label xml:lang="en">sub l template</rdfs:label>
        <rdfs:comment>#$SubLTemplate is the collection of objects which
            are SubL templates for denoting SubL constructions.  See
            also #$ExpandSubLFn.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="SubLVariable">
        <rdfs:label xml:lang="en">sub l variable</rdfs:label>
        <rdfs:comment>The subcollection of #$SubLSymbol whose instances
            are variables in SubL.  Every #$ELVariable is also a
            #$SubLVariable.  Note that this collection is  quoted  (see #$quotedCollection).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>

    </owl:Class>
    <owl:Class rdf:ID="SubcategorizationFrame">
        <rdfs:label xml:lang="en">subcategorization frame</rdfs:label>
        <rdfs:comment>The collection of subcategorization frames found
            in natural languages.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonlexicalLinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#NLTerm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SubcollectionFunction">
        <rdfs:label xml:lang="en">subcollection functions</rdfs:label>
        <rdfs:comment>A collection of functions.  Instances of
            #$SubcollectionFunction are functions which take a
            collection as their first argument and restrictions of that
            function as second and possibly third argument. Examples of
            instances of #$SubcollectionFunction include
            #$SubcollectionByRegionFn and #$SubcollectionOfWithRelationFromTypeFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SubcollectionRelationFunction-Canonical">
        <rdfs:label xml:lang="en">canonical subcollection relation functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            Instances of this collection are such that for any nat (FN
            COL1 PRED COL2) formed with them, either (PRED COL1 COL2) or
            (relationAllExists PRED COL1 COL2) holds. In other words,
            COL1 and COL2 are in the same order in the expansion as in
            the NAT.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcollectionFunction"/>
        <rdfs:subClassOf rdf:resource="#TernaryFunction"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SubcollectionRelationFunction-InstanceLevel">
        <rdfs:label xml:lang="en">instance-level subcollection relation functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all #$SubcollectionRelationFunctions that
            denote collections instances of which bear the arg2 relation
            to the arg3 itself, and not to an instance of the arg3.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcollectionFunction"/>
        <rdfs:subClassOf rdf:resource="#TernaryFunction"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SubcollectionRelationFunction-Inverse">
        <rdfs:label xml:lang="en">inverse subcollection relation functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            Instances of this collection are such that for any NAT (FN
            COL1 PRED COL2) formed with them, either (PRED COL2 COL1) or
            (relationAllExists PRED COL2 COL1) holds. In other words,
            COL1 and COL2 are in the opposite order in the expansion
            from in the NAT.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcollectionFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#TernaryFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SubcollectionRelationFunction-TypeLevel">
        <rdfs:label xml:lang="en">Cyc type-level subcollection relation functions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all #$SubcollectionRelationFunctions that
            denote collections instances of which bear the arg2 relation
            to an instance of the arg3, and not to the arg3 itself.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SubcollectionFunction"/>
        <rdfs:subClassOf rdf:resource="#TernaryFunction"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="SubjectPronoun">
        <rdfs:label xml:lang="en">#$SubjectPronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all subject pronouns. Subject pronouns can
            replace the subject noun in a sentence, but not the direct
            object, indirect object, or oblique object noun. Example: &apos;he&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sublimating">
        <rdfs:label xml:lang="en">#$Sublimating</rdfs:label>
        <rdfs:comment>A specialization of #$StateOfMatterChangeEvent.
            Each instance of #$Sublimating is an event in which a piece
            of tangible stuff is directly transformed from a solid state
            to a gaseous state.  See also the related collection #$SublimatingToSolid.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SublimatingToSolid">
        <rdfs:label xml:lang="en">deposition processes</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$SublimatingToSolid, a gas is cooled to (or its pressure
            lowered to) the point where the gas molecules solidify into
            a solid.  This is rhe reverse process of #$Sublimating to a gas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StateOfMatterChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Submarine">
        <rdfs:label xml:lang="en">#$Submarine</rdfs:label>
        <rdfs:comment>#$Submarine is a specialization of
            #$Watercraft-Subsurface, #$Container-PressureBarrier, and
            #$ModernNavalShip.  Each instance of #$Submarine is a
            pressurized vessel designed to travel underwater.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Container-PressureBarrier"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#ModernNavalShip"/>
        <rdfs:subClassOf rdf:resource="#Watercraft-Subsurface"/>
        <rdfs:subClassOf rdf:resource="#MilitaryWatercraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SubordinatingConjunction">
        <rdfs:label xml:lang="en">subordinating conjunction</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all conjunctions which can introduce a
            subordinate clause. Example: &apos;after&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conjunction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SubtropicalForest">
        <rdfs:label xml:lang="en">subtropical forest</rdfs:label>
        <rdfs:comment>A specialization of #$Forest. Each instance is
            hardleaf evergreen forest regions growing  between the
            latitudes of 15-40 degrees north and south of the equator
            in China, Japan, Australia, New Zealand, and South Africa.
            Source:  The Times Atlas of the World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Forest"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Subway">
        <rdfs:label xml:lang="en">#$Subway</rdfs:label>
        <rdfs:comment>#$Subway is a specialization of #$Railway.  Each
            instance of #$Subway is an underground #$Railway under the
            surface of some city.  Some parts of subways may be in
            trenches, on bridges or on elevated tracks, but most of a
            subway is in underground tunnels.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Railway"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SubwayStation">
        <rdfs:label xml:lang="en">subway station</rdfs:label>
        <rdfs:comment>#$SubwayStation is a specialization of
            #$FixedStructure and #$HumanOccupationConstruct.  Each
            instance of #$SubwayStation is usually located at least
            partly underground, on subway tracks, and its primary
            purpose is to be a place where subway trains discharge and
            receive passengers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SuffixCategory">
        <rdfs:label xml:lang="en">suffix category</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixCategory"/>
    </owl:Class>
    <owl:Class rdf:ID="SuffixRule">
        <rdfs:label xml:lang="en">suffix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SuffixRule-Derivational">
        <rdfs:label xml:lang="en">derivational suffix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AffixRule-Derivational"/>
        <rdfs:subClassOf rdf:resource="#SuffixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SuffixRule-Inflectional">
        <rdfs:label xml:lang="en">inflectional suffix rules</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SuffixRule"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Suffixation">
        <rdfs:label xml:lang="en">suffixation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Affixation-WordFormationProcess"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SummerSeason">
        <rdfs:label xml:lang="en">#$SummerSeason</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear. Each instance
            of #$SummerSeason is the time of greatest warmth during a
            temperate climate cycle (see #$TemperateClimateCycle).
            Instances of #$SummerSeason are characterized solely by
            climatic conditions; consequently, #$SummerSeason is _not_ a
            specialization of #$CalendarSeason.  For the collection of
            summers defined by dates on a calendar, see #$CalendarSummer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WarmSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sunday">
        <rdfs:label xml:lang="en">Sun</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Sunday is the collection of all  (and
            only) sundays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sunny">
        <rdfs:label xml:lang="en">sunny</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$OutdoorLocation that are sunny.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sunrise">
        <rdfs:label xml:lang="en">#$Sunrise</rdfs:label>
        <rdfs:comment>A specialization of #$QualitativeTimeOfDay.  Each
            instance of #$Sunrise is an event during which, at a given
            location, the #$Sun appears to clear the horizon as it
            rises .  An instance of #$Sunrise occurs at a given place
            even if the visibility of the #$Sun is impaired due to
            obscuring objects such as clouds.  Every instance of
            #$Sunrise immediately follows (see #$contiguousAfter) some
            instance of #$Dawn (q.v.), and every instance of
            #$DaytimeHours (q.v.) is started by (see
            #$temporallyStartedBy) an instance of #$Sunrise.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Sunset">
        <rdfs:label xml:lang="en">#$Sunset</rdfs:label>
        <rdfs:comment>Each #$Sunset is an #$Event in which, at a given
            location, the horizon occludes the #$Sun as it appears to
            set.  This event is construed to occur regardless of the
            visibility of the #$Sun due to obscuring objects such as
            clouds.  There is a #$Dusk which is #$contiguousAfter each
            #$Sunset.  Every #$DaytimeHours is #$temporallyFinishedBy a
            #$Sunset (unless it #$endsDuring a #$MidnightSun), as is
            every #$Afternoon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SupernaturalBeing">
        <rdfs:label xml:lang="en">supernatural beings</rdfs:label>
        <rdfs:comment>The collection of all supernatural beings,
            including gods, angels, devils, demons, ghosts, spirits,
            banshees, fairies, elves, and woodland sprites (e.g. the
            mischievous Puck).  Instances of #$SupernaturalBeing might
            be immortal or mortal, good or evil, intangible or partially tangible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#IndividualAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SupplyCompany">
        <rdfs:label xml:lang="en">supply companies</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PrivateSectorOrganization and
            #$OrganizationWithBusinessCustomers.  Each instance of
            #$SupplyCompany is an organization whose main function (see
            the constant #$MainFunction) is selling supplies to other
            organizations.  Instances of #$SupplyCompany include all
            instances of #$ElectricalSupplyCompany, as well as grocery
            wholesalers (see the collection #$Wholesaler).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PrivateSectorOrganization"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithBusinessCustomers"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SupposedToBeMicrotheory">
        <rdfs:label xml:lang="en">supposed to be microtheory</rdfs:label>
        <rdfs:comment>A specialization of #$Microtheory.  Each instance
            of #$SupposedToBeMicrotheory is a microtheory that describes
            how things are  supposed to be  according to some source.
            Instances of this collection can be used to represent things
            like the policies of a company, the laws of a country, the
            tenets of a religion, the rules of proper conduct for
            employees of a particular corporation, etc.  The assertions
            in a #$SupposedToBeMicrotheory may or may not describe the
            world as it actually is.  Examples instances include
            #$BasicWesternLegalConceptsMt,
            #$SportsRulesOf-BoxingSportsEvent, #$CycStaffCalendar, and #$OfficeCodeOfConductMt.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="Surface-Generic">
        <rdfs:label xml:lang="en">#$Surface-Generic</rdfs:label>
        <rdfs:comment>The collection of all surfaces, tangible or
            intangible (see #$Surface-Physical and
            #$Surface-Intangible), of spatial things. Each instance of
            #$Surface-Generic is a spatial thing that has extent in at
            least two dimensions, and either has no thickness (i.e. is a
            two dimensional object) or has an insignificant thickness
            compared to its length and width.  (If it is a closed
            surface, e.g. an apple skin, then any significant subregion
            of it must have insignificant thickness compared to that
            subregion&apos;s length and width).  Thus generic surfaces
            might be two- or three-dimensional; tangible or intangible;
            spatially connected or not; they might be flat, curved,
            folded, or crumpled. Other examples: the skin of a
            basketball, the face-up side of a table top, and a
            particular face of an abstract cube.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Surface-Intangible">
        <rdfs:label xml:lang="en">abstract surfaces</rdfs:label>
        <rdfs:comment>A specialization of both
            #$GeometricallyDescribableThing-Intangible and
            #$Surface-Generic. Each instance of #$Surface-Intangible is
            an intangible, geometrically describable surface. Positive
            examples are a convex hull of a coffee table or the surface
            of an abstract sphere. A negative example is the glossy
            surface of a polished tabletop, since this is a physical
            surface, and thus partially tangible.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing-Intangible"/>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Surface-Open">
        <rdfs:label xml:lang="en">surfaces with a perimeter</rdfs:label>
        <rdfs:comment>A #$Surface-Open is any tangible   or intangible,
            wrinkled or flat, two or three dimensional   object (please
            see #$Surface-Generic for elaboration).    The thickness is
            insignificant in comparison to the length   or width.  What
            distinguishes #$Surface-Open from   #$Surface-Generic is
            that the former&apos;s instances must   have a perimeter,
            edge or hole.  Negative exemplars   include a basketball
            skin, a tied ballon.  A grapefruit   is a negative exemplar
            because it is too `thick&apos;.    A wiffle ball, a crumpled
            sheet of paper,   a euclidian plane with a hole in it, and
            an eggshelll   with a hole in it are positive exemplars
            because they are   open surfaces (i.e. have an edge, hole,
            perimeter, etc).  Also note that by &apos;holes&apos; here
            we mean holes in the   common-sense, human-scaled
            understanding of such: a wiffle ball  has holes, but a
            baseball does not, even though undoubtably  at some
            fine-grained level there do exist tiny holes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Surface-Physical">
        <rdfs:label xml:lang="en">physical surfaces</rdfs:label>
        <rdfs:comment>The collection of all real physical (hence
            technically three-dimensional) surfaces.  The thickness of a
            #$Surface-Physical is much less than its average length or
            width, but it is not of zero thickness.  A
            #$Surface-Physical may have holes, tears, and may be
            unconnected, in multiple pieces.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SurfaceAttribute">
        <rdfs:label xml:lang="en">surface features</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalAttribute.  Each
            instance of #$SurfaceAttribute is an attribute of some
            instance(s) of #$Surface-Generic (q.v.).  An important
            specialization of #$SurfaceAttribute is #$CurvatureOfSurface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="SurfaceOnTangibleObject">
        <rdfs:label xml:lang="en">#$SurfaceOnTangibleObject</rdfs:label>
        <rdfs:comment>A specialization of both #$Surface-Physical and
            #$SheetOfSomeStuff.  Each instance of
            #$SurfaceOnTangibleObject is a sheet-like surface (that is,
            a surface with one dimension significantly smaller than the
            other two) of a partially tangible object.  Such a surface
            is neither unconnected nor in multiple pieces.  Furthermore,
            the properties of such a surface differ noticeably from the
            properties of the partially tangible object covered by the
            surface. So a veneer surface of a table would be an instance
            of #$SurfaceOnTangibleObject, while the surface of a wooden
            table with no lining would not.  Further positive examples
            include carpet that is part of a floor, paint on a wall, the
            earth&apos;s crust, and the crust on a piece of bread.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Surgery">
        <rdfs:label xml:lang="en">#$Surgery</rdfs:label>
        <rdfs:comment>A specialization of #$MedicalCareEvent.  Each
            instance of #$Surgery is a medical care event in which a
            medical professional cuts a part of a living body, either to
            examine what&apos;s inside (a diagnostic, exploratory
            surgery) or to treat an ailment (an instance of
            #$MedicalTreatmentEvent).  Instances of #$Surgery which are
            also instances of #$MedicalTreatmentEvent include: removal
            of some object - such as a cancer or an organ that&apos;s
            causing trouble - from the body; insertion of a medical
            device (e.g, a pacemaker) into the body; repair of some
            internal structure.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#TakingCareOfSomething"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Surprise">
        <rdfs:label xml:lang="en">#$Surprise</rdfs:label>
        <rdfs:comment>The attribute-type associated with the feeling of
            surprise at the occurrence of something unexpected,
            unanticipated, or startling.  A specialization of #$Surprise
            is #$Wonder-Admiration.  (For   the rationale behind
            treating feelings as types -- i.e. collections -- of
            attributes, see the comment on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Surprised">
        <rdfs:label xml:lang="en">agents who is surprised</rdfs:label>
        <rdfs:comment>A specialization of #$IntelligentAgent. Each
            instance is an agent in the emotional state of being
            surprised. Use this constant with a #$GenericValueFunction
            to denote a collection of agents that are in this emotional
            state to some varying degree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Suspension">
        <rdfs:label xml:lang="en">suspensions</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subcollection
            of #$Mixture.  Each instance of #$Suspension is a mixture
            which has exactly one #$suspendingFluid and at least one
            kind of #$suspendedPart.  Each of the #$suspendedParts is an
            instance of #$Particle, and there are a mob of them.  Some
            suspensions are fairly stable (e.g., mayonnaise), while
            others tend to separate quickly (e.g., sugar stirred into
            cold lemonade).  Other examples of #$Suspension include a
            #$CloudInSky, a spray of aerosol deodorant.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Swallowing">
        <rdfs:label xml:lang="en">swallows</rdfs:label>
        <rdfs:comment>A specialization of both #$BodilyFunctionEvent and
            #$BodyMovementEvent.  Each instance of #$Swallowing is an
            event in which an #$Animal moves a solid or a liquid from
            its #$Mouth to its #$Stomach.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SymbolicObject">
        <rdfs:label xml:lang="en">#$SymbolicObject</rdfs:label>
        <rdfs:comment>A specialization of both #$SymbolicThing and
            #$HumanAccessibleIBO. Each instance of #$SymbolicObject is a
            #$SymbolicThing  that has some material part (i.e. is an
            instance of #$PartiallyTangible), and symbolizes some thing,
            event or achievement, without describing it propositionally
            in any detail.  Examples include national flags, military
            medals and ribbons, an Oscar, a Crucifix, a caduceus, and
            printed trademark logos of commercial brands.  Only some
            instances of #$SymbolicObject have the #$primaryFunction of
            serving as symbols (e.g. national flags, war memorials);
            others are symbolic in a secondary capacity (e.g. a
            gravestone symbolizes death but its primary function is as a
            marker), and/or acquire symbolic associations over time
            (e.g. Ellis Island).  Examples of #$SymbolicObject include
            the #$ArcDeTriomphe, the #$StatueOfLiberty, the
            #$PyramidOfCheops, a hangman&apos;s noose, a Menorah, a
            white dove.  Negative examples include #$NationalAnthems and
            #$Swastikas projected on walls, because these do not have a
            material part; for such symbols use the broader collection #$SymbolicThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBO"/>
        <rdfs:subClassOf rdf:resource="#SymbolicThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SymbolicThing">
        <rdfs:label xml:lang="en">symbols</rdfs:label>
        <rdfs:comment>A specialization of both #$InformationStore and
            #$PartiallyIntangibleIndividual.  Each instance of
            #$SymbolicThing symbolizes some thing or event or
            achievement, without describing it in any detail.  Examples
            include halos (#$Halo-Symbolic), #$NationalAnthems, school
            colors, and physical objects such as national flags which
            are instances of the (notable) subcollection
            #$SymbolicObject.  Note that instances of #$SymbolicThing
            can be #$InformationBearingThings or #$ConceptualWorks. They
            generally do not have propositional information
            (#$PropositionalInformationThing) contents -- rather, they
            are typically associated (by an informed interpreter) with
            particular entities.  To emotional interpreters, such as
            #$Persons, symbolic objects are often evocative of certain
            attitudes associated with the entities symbolized -- such as
            nationalism, respect, school spirit, hatred, reverence, etc.
            #$SymbolicThing differs from #$Signal in that #$Signals are
            one-time-only occurrences, whereas #$SymbolicThings are open
            to their characteristic interpretation any time they are
            encountered. See also #$signifiesTo, #$signifies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationStore"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SymmetricAnatomicalPartType">
        <rdfs:label xml:lang="en">#$SymmetricAnatomicalPartType</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances are types
            of #$anatomicalParts of bilaterally symmetrical organisms
            (#$Organism-Whole) which occur in bilaterally symmetric
            pairs.  This is not intended to include broader categories
            like #$Tooth, #$Rib-AnimalBodyPart, or #$Finger, but the
            specific parts of which the organism only has two (EyeTooth,
            FifthRib, or #$RingFinger).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPartType"/>
    </owl:Class>
    <owl:Class rdf:ID="SymmetricBinaryPredicate">
        <rdfs:label xml:lang="en">symmetric binary predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$BinaryPredicate and
            #$CommutativeRelation (qq.v.).  A binary predicate PRED is
            an instance of #$SymmetricBinaryPredicate if and  only if
            (i) for any things X and Y, (PRED X Y) entails (PRED Y X)
            and (ii) the  single-argument argument type constraints (see
            #$argIsa and #$argGenls) on  PRED&apos;s two argument-places
            are jointly satisfiable (see the shared
            #$NoteOnArgumentTypingAndPropertiesOfRelations).  (Note
            that, given that PRED satisfies condition (i), condition
            (ii) is satisfied as long as (PRED A B) holds for some A and
            B.) Instances of #$SymmetricBinaryPredicate include
            #$siblings, #$teammates, #$connectedTo, and #$bordersOn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#CommutativeRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="Sympathy">
        <rdfs:label xml:lang="en">sympathy</rdfs:label>
        <rdfs:comment>A feeling of tenderness or respect induced by the
            suffering or distress of another</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Synthesis-Generic">
        <rdfs:label xml:lang="en">#$Synthesis-Generic</rdfs:label>
        <rdfs:comment>The collection of all synthesis events, whether
            they be physical events, like an instance of
            #$BiochemicalSynthesis, or mental events, like the synthesis
            of ideas.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="SystemCondition">
        <rdfs:label xml:lang="en">system conditions</rdfs:label>
        <rdfs:comment>A specialization of #$Situation-Temporal.  Each
            instance of #$SystemCondition is a state or process
            undergone by some natural or artificial system (for example,
            an organism or a computer network).  The state or process in
            question may be either normal or abnormal.  A typical
            instance of  #$SystemCondition is a state or process that
            has important temporal aspects, or  affects the
            system&apos;s condition for a significant period of time,
            such that the condition may be thought of as an
            `episode&apos; in the existence of the system, or even a
            permanent aspect of the system.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TLRelation">
        <rdfs:label xml:lang="en">TL relations</rdfs:label>
        <rdfs:comment>A specialization of #$ELRelation such that
            instances are only permitted at the TL (transcript level; a
            specialization of the epistemological level); that is, the
            canonicalizer will transform expressions that  reference
            instances of #$TLRelation into equivalent expressions that
            do not  reference instances of #$TLRelation; this
            transformation is guided by the  value (arg2) of
            #$expansionDefn for each #$TLRelation</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ELRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="TactileSensor">
        <rdfs:label xml:lang="en">tactile sensors</rdfs:label>
        <rdfs:comment>A specialization of #$Sensor.  Each instance of
            #$TactileSensor is a sensor that operates by coming into
            physical contact with the object being perceived.  Instances
            of #$TactileSensor are usually capable of perceiving
            properties such as texture, hardness, and roughness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Taiga">
        <rdfs:label xml:lang="en">taiga</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion. Each
            instance is characterized by extensive  forestation, short,
            cool summers, and long, cold winters with heavy  snowfall.
            Also known as boreal forests.  Predominant trees are pine,
            larch, spruce, and fir.  Source: The Times Atlas of the
            World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedTerrainGeologicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TakingCareOfSomething">
        <rdfs:label xml:lang="en">tends</rdfs:label>
        <rdfs:comment>A specialization of #$HumanActivity.  Each
            instance of #$TakingCareOfSomething is a purposeful action
            in which an agent acts to maintain, preserve, or promote the
            health or good condition of someone or something (the thing
            taken care of is related to the action via the predicates
            #$objectTakenCareOf or #$objectActedOn (qq.v.)).  Notable
            specializations of #$TakingCareOfSomething include
            #$Exercising, #$MedicalTreatmentEvent, and #$TeethCleaning.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TakingOffAClothingItem">
        <rdfs:label xml:lang="en">removing a clothing item</rdfs:label>
        <rdfs:comment>A specialization of #$RemovingSomethingByMovingIt.
            Each instance of #$TakingOffAClothingItem is an event in
            which something being worn is removed, either by the wearer
            or by someone else (e.g., removing a child&apos;s boots or a
            horse&apos;s saddle).  After an instance of
            #$TakingOffAClothingItem occurs, the situation (an instance
            of #$WearingSomething) in which the item was being #$wornOn
            the body is over.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RemovingSomethingByMovingIt"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TakingSomething">
        <rdfs:label xml:lang="en">events of taking something</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$GainingUserRights.  In an instance of #$TakingSomething,
            an #$Agent takes an object, in the sense of taking it away
            or using or exercising access to it.  The agent may or may
            not have any legal right or authorization to use that
            object.  In an instance of #$TakingSomething, the taker (the
            #$toPossessor) must intend and actively (attempt to) acquire
            the #$objectTaken, so the taking event is intentional and
            thus, strictly speaking, #$performedBy the taker.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Talking">
        <rdfs:label xml:lang="en">#$Talking</rdfs:label>
        <rdfs:comment>A collection of actions. Each instance of
            #$Talking is an action in which somebody (often by
            #$Speaking) creates a meaningful phrase.  #$Talking is often
            a subevent in various #$Communicating events. Note that not
            all instances of #$Talking involve #$Speaking, since
            sometimes people can talk using some non-oral language,
            e.g., #$AmericanSignLanguage.  #$Talking, however, is
            disjoint with #$Writing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TameAnimal">
        <rdfs:label xml:lang="en">tame animals</rdfs:label>
        <rdfs:comment>A specialization of #$NonPersonAnimal.  Each
            instance of #$TameAnimal is a non-human animal that is
            generally not afraid of humans (so that it will generally
            not flee when humans approach it), and which will generally
            not attack humans.  An important specialization of
            #$TameAnimal is #$DomesticatedAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TangibleObjectPredicate">
        <rdfs:label xml:lang="en">tangible object predicate</rdfs:label>
        <rdfs:comment>A collection of predicates that are used to
            ascribe characteristics or properties (taken in a very broad
            sense) to tangible objects.  As such, each instance of
            #$TangibleObjectPredicate has an #$arity of 2 or greater and
            has at least one argument place (often including the first)
            constrained (see #$argIsa) to instances of
            #$PartiallyTangible or some subcollection thereof.  Examples
            include #$viscosityOfSubstance, #$objectHasColor,
            #$porosityOfObject, and #$physicalBuild.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TangibleStuffCompositionType">
        <rdfs:label xml:lang="en">#$TangibleStuffCompositionType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$ExistingStuffType.  Instances are subcollections of
            #$PartiallyTangible whose membership is based only on the
            physical and/or chemical composition of their instances.
            #$TangibleStuffCompositionType does not have as instances
            collections whose instances are determined _solely_ by the
            physical state they are in -- for that, see
            #$TangibleStuffStateType.  For example, the collection
            #$Water is an instance of #$TangibleStuffCompositionType, as
            instances of #$Water are all pieces of substance with the
            chemical composition H20.   On the other hand , the
            collection of all pieces of ice (i.e. (#$SolidFn #$Water))
            is not a #$TangibleStuffCompositionType, because membership
            in that collection depends on the substance&apos;s
            composition _and_ on its physical state.  Further instances
            of #$TangibleStuffCompositionType are #$Nylon,
            #$GasolineFuel, #$FattyTissue, #$TalcumPowder, #$Nitrogen,
            and #$Glass. An important specialization of this collection
            is #$ChemicalCompoundType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="TangibleStuffStateType">
        <rdfs:label xml:lang="en">tangible stuff state type</rdfs:label>
        <rdfs:comment>A #$SecondOrderCollection and a specialization of
            #$ExistingStuffType (q.v.). Each instance of
            #$TangibleStuffStateType is a collection of pieces of
            tangible stuff that are all in the same distinct physical
            state, where the notion of   physical state  is a naive (as
            in #$NaivePhysicsMt) concept of a distinctive physical
            structure and/or texture.  Some instances of
            #$TangibleStuffStateType  have distinctive chemical
            compositions, such as #$Diamond; but for collections  that
            are distinguished _solely_ on the basis of chemical
            composition, see  #$TangibleStuffCompositionType.
            #$TangibleStuffStateType includes both (i) collections of
            substances that can exist only in one distinct physical
            state  (e.g. #$Diamond again) and (ii) collections of pieces
            of stuff that by definition are in a certain distinct state
            (e.g. ice).  Instances of #$TangibleStuffStateType include
            #$Foam, #$Rubble, and (#$LiquidFn #$Water).  Note that
            #$Water per se is _not_ an instance of
            #$TangibleStuffStateType, since some water is in a gaseous
            state or a solid state.  See also (the somewhat orthogonal)  #$PhysicalStructuralAttribute.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="Tank-Vehicle">
        <rdfs:label xml:lang="en">#$Tank-Vehicle</rdfs:label>
        <rdfs:comment>#$Tank-Vehicle is a specialization of
            #$TrackedVehicle-Armored, #$WeaponSystem, and
            #$ProjectileLauncher-Direct.  Each instance of
            #$Tank-Vehicle is an armored vehicle designed for military
            purposes, with mounted guns, heavy armor, and tracked wheels.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WeaponSystem"/>
        <rdfs:subClassOf rdf:resource="#TrackedVehicle"/>
        <rdfs:subClassOf rdf:resource="#MilitaryLandPlatform"/>
        <rdfs:subClassOf rdf:resource="#DirectFireWeapon"/>
        <rdfs:subClassOf rdf:resource="#ArmoredVehicle-Heavy"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TastePerception">
        <rdfs:label xml:lang="en">tasting</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which a
            #$PerceptualAgent #$tastes some object, by means of the
            appropriate #$Sensor, and thereby acquires information about it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TaxonomicSlot">
        <rdfs:label xml:lang="en">Cyc taxonomic predicates</rdfs:label>
        <rdfs:comment>A subcollection of #$Predicate.  Each instance of
            #$TaxonomicSlot is a binary predicate used to help specify
            the position of a thing within one of the major taxonomies
            or hierarchies in the Cyc ontology.  For example, #$genls
            orders the instances of #$Collection into a hierarchy.
            Other examples of #$TaxonomicSlots are #$isa,
            #$partitionedInto, #$coExtensional, and #$disjointWith.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TaxonomicSlotForAnyThing">
        <rdfs:label xml:lang="en">Cyc taxonomic predicates applicable to anything</rdfs:label>
        <rdfs:comment>A subcollection of #$TaxonomicSlot (q.v.). Each
            instance of #$TaxonomicSlotForAnyThing is a taxonomic slot
            that can in principle be used to help specify the location
            of anything whatsoever within some taxonomy; hence at least
            one of its argument-places must be constrained to instances
            (see #$argIsa) of #$Thing (and to nothing more specific than
            #$Thing). Examples include #$isa and #$generalizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TaxonomicSlot"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TaxonomicSlotForCollections">
        <rdfs:label xml:lang="en">Cyc taxonomic predicates for collections</rdfs:label>
        <rdfs:comment>A subcollection of #$TaxonomicSlot. Each instance
            of #$TaxonomicSlotForCollections is a binary predicate used
            to define the taxonomy of #$Collections by specifying
            relations between various collections; hence at least one of
            its argument-places is constrained to instances (see
            #$argIsa) of #$Collection (and nothing more specific than
            that).  Examples include #$genls, #$coExtensional, and #$disjointWith.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TaxonomicSlot"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TaxonomicSlotForPredicates">
        <rdfs:label xml:lang="en">Cyc taxonomic predicates for predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$TaxonomicSlot and
            #$MetaPredicate. Each instance of
            #$TaxonomicSlotForPredicates is a binary predicate used to
            help define the taxonomy of #$Predicates by specifying
            relations between various predicates; hence its
            argument-places are both constrained to instances (see
            #$argIsa) of #$Predicate or some broad specialization
            thereof (such as #$BinaryPredicate).  Examples include
            #$genlPreds, #$genlInverse, and #$negationPreds.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TaxonomicSlot"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectRelatingPredicate"/>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Teaching">
        <rdfs:label xml:lang="en">teaching events</rdfs:label>
        <rdfs:comment>One agent imparting learned knowledge to another.
            This may have #$subEvents of the student asking or
            responding to questions, but the teacher is the primary performer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Team">
        <rdfs:label xml:lang="en">team</rdfs:label>
        <rdfs:comment>#$Team is a specialization of
            #$OrganizationOfPeopleOnly and #$ActivityTypeFocusGroup.
            Each instance of #$Team is a group of people who play on one
            team during a game [see #$PlayingAGame].  A #$Team may be a
            commercial, professional team supported by a large full-time
            staff, a #$Group of people who got together for playing for
            a single time, or something in between.  Only players of the
            game are members of the team itself; staff of a professional
            team would belong to a related team organization.  Organized
            #$Teams which play sports at least semi-regularly are
            instances of the narrower concept, #$SportsTeam.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ActivityTypeFocusGroup"/>
        <rdfs:subClassOf rdf:resource="#OrganizationOfPeopleOnly"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TeethCleaning">
        <rdfs:label xml:lang="en">#$TeethCleaning</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$TeethCleaning
            event, an animal&apos;s teeth are cleaned.  In order to
            distinguish, e.g., professional teeth cleaning by a dental
            technician from daily personal care, different microtheories
            are used.  Consider just the frequencies of performing this
            action: in the #$HumanActivitiesMt, where a person brushes
            their own teeth as a subevent of #$DailyPersonalCleaning,
            this occurs once or twice per day.  In the
            #$ProviderOfServicePerspectiveMt, that is from the dental
            hygienist&apos;s point of view, it occurs about ten times
            per day.  In the #$RecipientOfServicePerspectiveMt, that is
            from the point of view of someone going to get their teeth
            cleaned at a dentist&apos;s office, it happens a couple
            times per year.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
        <rdfs:subClassOf rdf:resource="#DentalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TemperamentAttribute">
        <rdfs:label xml:lang="en">temperaments</rdfs:label>
        <rdfs:comment>A specialization of #$MentalAttribute.  Each
            instance of #$TemperamentAttribute is the temperament of
            some sentient being.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </owl:Class>
    <owl:Class rdf:ID="TemperateClimateCycle">
        <rdfs:label xml:lang="en">#$TemperateClimateCycle</rdfs:label>
        <rdfs:comment>A specialization of #$AnnualClimateCycle.  Each
            instance of #$TemperateClimateCycle is a year-long event
            consisting of weather occurring (typically) in terrestrial
            regions between (roughly) the Tropic of Cancer and the
            Arctic Circle in the Northern Hemisphere, and between the
            Tropic of Capricorn and the Antarctic Circle in the Southern
            Hemisphere.  Characteristics of a temperate climate include:
            four distinguishable seasons, Spring, Summer, Fall, and
            Winter, with variations in temperature and precipitation;
            overall moderate precipitation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnnualClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Temperature">
        <rdfs:label xml:lang="en">temperatures</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$Temperature is an amount of heat in a
            particular instance of #$PartiallyTangible.  An instance of
            #$Temperature may be either a fixed interval, such as 98.6
            degrees Fahrenheit (cf. #$UnitOfTemperature), or a range,
            such as #$HumanHabitableTemperature or #$TooHotToTouch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="TemperatureChangingProcess">
        <rdfs:label xml:lang="en">temperature changes</rdfs:label>
        <rdfs:comment>A specialization of #$IntrinsicStateChangeEvent.
            In each instance of #$TemperatureChangingProcess, the
            temperature of some object is changed.  Specializations of
            #$TemperatureChangingProcess include the collections
            #$CookingFood and #$Freezing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#EnergyTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TemplateParsingMicrotheory">
        <rdfs:label xml:lang="en">Cyc template parsing microtheories</rdfs:label>
        <rdfs:comment>Instances are microtheories which contain
            templates intended to parse strings in some natural language
            into objects of some syntactic category.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Language-SpecificMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporalObjectType">
        <rdfs:label xml:lang="en">#$TemporalObjectType</rdfs:label>
        <rdfs:comment>A specialization of #$ObjectType (q.v.) whose
            instances are all and only those collections that are
            temporally object-like. A collection COL is temporally
            object-like just in case there is some sense of `temporal
            part&apos; (see #$timeSlices) according to which any given
            proper temporal part of an instance of COL is generally
            _not_ itself an instance of COL. More precisely, for a
            collection COL to be an instance of #$TemporalObjectType it
            is sufficient that there be some (proper or improper)
            specialization TEMPPARTPRED of #$timeSlices such that the
            following holds: for any OBJ1 and OBJ2 (with OBJ1 and OBJ2
            distinct), if (isa OBJ1 COL) and (TEMPPARTPRED OBJ1 OBJ2),
            then _not_ (isa OBJ2 COL). (Also sufficient for COL&apos;s
            being temporally object-like is that there be some
            spec-inverse INVTEMPPARTPRED of #$timeSlices such that
            (INVTEMPPARTPRED OBJ2 OBJ1), with everything else remaining
            the same as above.)  Note that neither of the above
            sufficient conditions for COL&apos;s being a
            temporal-object-type is strictly necessary: some exceptions
            are allowed; thus as long as either one of the above
            conditionals holds in _nearly_ all cases, COL should be
            considered an instance of #$TemporalObjectType.  As an
            example, consider #$LeapYear.  No proper #$timeSlices of a
            leap year is itself a leap year. So #$LeapYear is an
            instance of #$TemporalObjectType. See #$TemporalStuffType
            for the disjoint notion of being temporally stuff-like.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporalPredicate">
        <rdfs:label xml:lang="en">temporal predicates</rdfs:label>
        <rdfs:comment>A specialization of both #$ObjectPredicate and
            #$BinaryPredicate. Each instance of #$TemporalPredicate is a
            (direct or indirect)  specialization of #$temporallyRelated
            (q.v.) that is used to say  something about the relative
            positions of two #$TemporalThings  in time.
            #$PrimitiveTemporalPredicates (such as #$after) relate
            #$TimePoints only, and #$ComplexTemporalPredicates (such as
            #$postEvents and #$startingDate) also relate more
            complicated  temporal objects such as events, tangible
            objects, and proper time  intervals.  Note that _not_all_
            specializations of #$temporallyRelated  are
            #$TemporalPredicates; e.g. while (#$relatives ORGANISM1
            ORGANISM2) implies that ORGANISM1 and ORGANISM2 are somehow
            temporally related,  it says nothing about their relative
            positions in time.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ObjectPredicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporalPrefix">
        <rdfs:label xml:lang="en">temporal prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonCategoryChangingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalPrefix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporalStuffType">
        <rdfs:label xml:lang="en">#$TemporalStuffType</rdfs:label>
        <rdfs:comment>A specialization of #$StuffType (q.v.) whose
            instances are all and only those collections that are
            temporally stuff-like. A collection COL is temporally
            stuff-like just in case every time slice (see #$timeSlices)
            of an instance of COL (at or above COL&apos;s temporal
            graularity level; see #$granuleOfTemporalStuff) is itself an
            instance of COL. More precisely, for a collection COL to be
            an instance of #$TemporalStuffType it is sufficient that for
            any OBJ1 and OBJ2 (with OBJ2 at or above COL&apos;s temporal
            granularity level), if (#$isa OBJ1 COL) and (#$timeSlices
            OBJ1 OBJ2), then (#$isa OBJ2 COL). Consider
            #$WalkingOnTwoLegs.  Take an arbitrary instance WALK of this
            collection (say Miss America 2000&apos;s victory walk down
            the runway and back); and then take an arbitrary time-slice
            SUBWALK of WALK that subsumes at least one instance of (the
            #$granuleOfTemporalStuff for #$WalkingOnTwoLegs)
            #$TakingAStep (say her trip back from the end of the
            runway).  SUBWALK is itself an instance of
            #$WalkingOnTwoLegs.  So #$WalkingOnTwoLegs is an instance of
            #$TemporalStuffType. See #$TemporalObjectType for the
            disjoint notion of being temporally object-like.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporalThing">
        <rdfs:label xml:lang="en">things that exists in time</rdfs:label>
        <rdfs:comment>The collection of all things that have temporal
            extent or location, i.e. things about which one might
            sensibly ask  When? .  #$TemporalThing thus contains many
            kinds of things, including events, physical   objects,
            agreements, and abstract pieces of time. Note that
            #$TimePoint is a specialization of #$TemporalThing, since
            time points have temporal location, although they arguably
            lack temporal extent.  Abstract things that are   timeless
            -- such as mathematical sets, attributes, and numbers -- are
            of course   _not_ instances of #$TemporalThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporallyDisjointTemporalObjectType">
        <rdfs:label xml:lang="en">#$TemporallyDisjointTemporalObjectType</rdfs:label>
        <rdfs:comment>A collection of collections. TYPE is an instance
            of #$TemporallyDisjointTemporalObjectType just in case any
            two distinct instances of TYPE are #$temporallyDisjoint.
            For example, #$Wednesday is an instance of
            #$TemporallyDisjointTemporalObjectType because no Wednesday
            can temporally intersect any Wednesday other than itself.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporaryChangeOfUserRights">
        <rdfs:label xml:lang="en">temporary changes in user rights</rdfs:label>
        <rdfs:comment>A specialization of both #$ChangeInUserRights and
            #$Transaction.  In each instance of
            #$TemporaryChangeOfUserRights, one agent temporarily gives
            up user rights (see #$UserRightsAttribute) over some object
            to another agent.  Note that the agent who gives up user
            rights over the object does so voluntarily.  Notable
            specializations of #$TemporaryChangeOfUserRights include
            #$Renting and #$BorrowingSomething.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TemporaryWorker">
        <rdfs:label xml:lang="en">#$TemporaryWorker</rdfs:label>
        <rdfs:comment>An instance of #$EmployeeTypeByWorkStatus and a
            specialization of #$Employee. Each instance of
            #$TemporaryWorker is an employee hired with the expectation,
            by his employer, that his employment will be temporary.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Employee"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TenderObject">
        <rdfs:label xml:lang="en">items of legal tender</rdfs:label>
        <rdfs:comment>An instance of #$ExistingObjectType, and a
            specialization of #$LiquidAsset.  Each instance of
            #$TenderObject is an object widely accepted as a means of
            payment for goods and services, and can thus play the role
            of #$objectTendered in instances of #$MoneyTransfer.
            Important specializations of #$TenderObject include
            #$Currency, #$CreditCard, and #$Check-TenderObject.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanAccessibleIBO"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TermPhrasesConstraint">
        <rdfs:label xml:lang="en">term phrases constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all Cyc terms that can serve as the second
            argument to  #$termPhrases (q.v.).</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="TerminalPhysiologicalCondition">
        <rdfs:label xml:lang="en">terminal conditions</rdfs:label>
        <rdfs:comment>A collection of ailments which are distinguished
            by the shared characteristic that if left untreated, those
            ailments will very probably cause a patient to die -- and
            may eventually do so despite treatment.  Specializations of
            this collection include: #$DiabetesMellitus, #$Cancer,
            #$Botulism, and #$Rabies.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LifeThreateningCondition"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TernaryFunction">
        <rdfs:label xml:lang="en">#$TernaryFunction</rdfs:label>
        <rdfs:comment>A specialization of #$FixedArityFunction and
            #$TernaryRelation.  An instance FUNC of #$FixedArityFunction
            is an instance of #$TernaryFunction if and only if FUNC has
            an #$arity of three.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#TernaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="TernaryPredicate">
        <rdfs:label xml:lang="en">#$TernaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$TernaryRelation and
            #$Predicate.  #$TernaryPredicate is the collection of all
            predicates whose arity (see #$arity) is 3.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TernaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TernaryRelation">
        <rdfs:label xml:lang="en">#$TernaryRelation</rdfs:label>
        <rdfs:comment>The collection of all fixed-arity relations of
            arity 3 (see #$arity).  The most notable specializations of
            #$TernaryRelation are #$TernaryPredicate and
            #$TernaryFunction (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="TerrainAttribute-Vegetation">
        <rdfs:label xml:lang="en">terrain attribute - vegetation</rdfs:label>
        <rdfs:comment>Collection of attributes which may be used to more
            specifically           characterize terrain by vegetation:
            e.g. #$Swampy-I, #$Grassy-G, &amp;c.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalAttributeOfTangibleOnly"/>
    </owl:Class>
    <owl:Class rdf:ID="TerrestrialDirection">
        <rdfs:label xml:lang="en">#$TerrestrialDirection</rdfs:label>
        <rdfs:comment>A specialization of #$UnitVectorInterval.  Each
            instance of #$TerrestrialDirection is a direction used to
            describe the orientation of objects on or near the surface
            of the Earth.  An important specialization of
            #$TerrestrialDirection is #$GeographicalDirection (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TerrestrialOrganism">
        <rdfs:label xml:lang="en">terrestrial organisms</rdfs:label>
        <rdfs:comment>A specialization of #$Organism-Whole.  Each
            instance of #$TerrestrialOrganism is an organism adapted to
            life on land, out of water.  Instances of
            #$TerrestrialOrganism spend all or most of their time out of
            the water, either on the land surface or under it.
            Specializations of #$TerrestrialOrganism include #$Dog,
            #$Bird, and #$Person.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Territory">
        <rdfs:label xml:lang="en">territories</rdfs:label>
        <rdfs:comment>#$Territory is a specialization of
            #$ControlledLand.  Each instance of #$Territory is a
            geopolitical region which is distinct from, but dependent on
            and controlled by, another geopolitical entity.  Instances
            of #$Territory include #$PuertoRico,
            #$BritishAntarcticTerritory, and #$RyukyuIslandsTerritory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControlledLand"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TestingConstant">
        <rdfs:label xml:lang="en">testing constant</rdfs:label>
        <rdfs:comment></rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="TextMicrotheory">
        <rdfs:label xml:lang="en">text microtheory</rdfs:label>
        <rdfs:comment>The collection of Microtheories each of which
            contains assertions that convey the information content of a
            particular text.  The propositional content of a text is a
            #$PropositionalInformationThing, and it forms a #$TextMicrotheory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="TextString">
        <rdfs:label xml:lang="en">texts (types of things)</rdfs:label>
        <rdfs:comment>A subcollection of #$CharacterString.  Each
            instance of #$TextString is a #$CharacterString that
            constitutes a meaningful unit (with respect to some actual
            language or other #$CommunicationConvention), at or above
            the level of a word or multi-character symbol (such as might
            be defined in a formal language or #$ComputerProgram-CW).
            Thus, `er#q2&apos; is a #$CharacterString but not (as far as
            I know) a #$TextString, whereas the sentence you are now
            reading is a #$TextString, as is a paragraph, etc.  Note
            that, as with all #$CharacterStrings, a #$TextString is a
            sequence of abstract symbols, not a tangible instantiation
            of it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="TextileProduct">
        <rdfs:label xml:lang="en">#$TextileProduct</rdfs:label>
        <rdfs:comment>#$TextileProduct is a specialization of
            #$Artifact-NonAgentive, #$DurableGoods,
            #$SolidTangibleProduct, and #$CommodityProduct.  Each
            instance of #$TextileProduct is a product made by spinning,
            weaving, knitting, wrapping, pressing, or other processes
            used to form fibers into usable materials such as cloth or
            linen.  Notable specializations of #$TextileProduct include
            #$Cloth, #$Cord-Textile, and #$Netting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#CommodityProduct"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TextualMaterial">
        <rdfs:label xml:lang="en">#$TextualMaterial</rdfs:label>
        <rdfs:comment>A specialization of #$InformationBearingThing
            (IBT).  Each instance of  #$TextualMaterial is an IBT a
            significant part of whose informational  content is both (i)
            encoded in some #$CommunicationConvention (q.v.),  usually a
            #$Language, and (ii) represented or displayed in a spatial
            format.  Examples include a copy of a newspaper printed in
            English using  the Roman alphabet, a copy of a book printed
            in English using Braille,  and a poster written in Chinese
            characters.  Condition (i) excludes things like hardcopies
            of drawings, while condition (ii) excludes things like
            magnetic tapes containing recorded speech.  A piece of
            textual material  always involves one or more
            spatially-localized representations -- usually  physical
            inscriptions (see #$CharacterStringToken-Inscribed) -- of
            #$CharacterStrings (q.v.).  Textual materials are usually
            tangible objects  (such as the examples given above), but
            are sometimes intangibles like  patterns of light projecting
            words onto walls or screens.  Specializations  of
            #$TextualMaterial include #$OfficialDocument and
            #$NonPublishedText.  Note that, while there is considerable
            overlap between #$TextualMaterial  and
            #$HardcopyInformationBearingObject, these collections differ
            in that  the latter both includes IBTs that involve no
            character-string representations and excludes intangibles of
            any sort.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Artifact-Generic"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TextualMaterialTypeByFunction">
        <rdfs:label xml:lang="en">#$TextualMaterialTypeByFunction</rdfs:label>
        <rdfs:comment>An instance of #$SiblingDisjointCollectionType and
            hence a collection of collections.  Each instance of
            #$TextualMaterialTypeByFunction is a specialization of
            #$TextualMaterial whose instances perform a particular and
            distinct type of function -- for instance #$LeaseDocument
            (instances of which are used to establish legally binding
            terms of lease), #$Catalogue (instances of which are used to
            list and describe types of items) and #$ExpenseReport (used
            by employees to request reimbursement for expense).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="TextualPCW">
        <rdfs:label xml:lang="en">textual pcw</rdfs:label>
        <rdfs:comment>A specialization of #$PropositionalConceptualWork.
            Each instance of #$PropositionalConceptualWork is an
            abstract work whose propositional content is expressed, at
            least in substantial part, in text. Positive examples
            include instances of #$Novel-CW, #$Article-CW, #$Resume, and
            #$RestaurantMenu.  Negative examples include episodes of an
            instance of #$TVShow-CW.  #$TextualPCWs may include
            non-textual components which expand on or otherwise
            contribute to the propositional content of the work, but the
            propositional content of the #$TextualPCW could,
            alternatively, be expressed entirely in text.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TheTerm">
        <rdfs:label xml:lang="en">the term</rdfs:label>
        <rdfs:comment>A special kind of term that allows back-reference
            to any individual thing that satisfies the constraints on
            the #$TheTerm.  E.g., &apos;Suppose a cat walks into a fish
            store.  The cat is likely to get into a lot of
            trouble.&apos;  &apos;The cat&apos; in the second sentence
            refers back to &apos;a cat&apos; in the first; i.e., any cat
            that walks into a fish store.  In Cyc, the constraints for a
            #$TheTerm in a given context are given by use of the
            predicate #$theTermConstraints on the unit representing that
            context.  In lifting assertions out of that context, the
            constraints are added as antecedents.</rdfs:comment>

    </owl:Class>
    <owl:Class rdf:ID="TheoryMicrotheory">
        <rdfs:label xml:lang="en">#$TheoryMicrotheory</rdfs:label>
        <rdfs:comment>The collection of all instances of #$Microtheory
            which contain rules about some topic, but exclude the
            definitions of the terms used in the rules (which should be
            defined in an instance of #$VocabularyMicrotheory), and also
            exclude reference to specific instances of #$TemporalThing
            (which belong in a #$DataMicrotheory) other than instances
            referred to in its #$mtTopics or which are otherwise
            mentioned in #$domainAssumptions.  Queries posed in a
            #$TheoryMicrotheory are answered solely considering the
            topic of that microtheory (or any #$genlMts). Scenario
            microtheories and #$ProblemSolvingCntxts are expected to
            draw on a large number of theory microtheories.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="There-Existential">
        <rdfs:label xml:lang="en">there - existential</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all existential indicators. In English, this
            is only the word &apos;there&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:about="http://www.w3.org/2002/07/owl#Thing">
        <rdfs:label xml:lang="en">#$Thing</rdfs:label>
        <rdfs:comment>#$Thing is the  universal collection : the
            collection  which, by definition, contains everything there
            is.  Every thing in the Cyc ontology -- every #$Individual
            (of any kind), every #$Set-Mathematical, and every
            #$Collection -- is an instance of (see #$isa) #$Thing.
            Similarly, every collection is a subcollection of (see
            #$genls) #$Thing.  Trivially, #$Thing is both an instance of
            and a subcollection of itself, and is not a subcollection of
            any other collection.  (Note that the above reference to
            every thing in the Cyc ontology  is _not_ meant to be
            limited to things actually _reified_ in the Cyc system, but
            includes (e.g.) every instance -- reified or not, known or
            not -- of every collection recognized by Cyc.)</rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="Thinking">
        <rdfs:label xml:lang="en">#$Thinking</rdfs:label>
        <rdfs:comment>A specialization of both #$IntentionalMentalEvent
            and #$StrictlyMentalEvent.  Each instance of #$Thinking is a
            mental process in a general sense that assumes
            consciousness, has some propositional content and differs
            from experiencing a sensation or emotion.  The collection
            includes both atomic mental events of having a single
            thought, with propositional content, and composite mental
            events involving the processing of thoughts.  Thinking need
            not necessarily be purposeful mental activity.  Obsessive
            thoughts and thinking of a solution to a math problem would
            both be examples of events that belong in this collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntentionalMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#StrictlyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ThirdOrderCollection">
        <rdfs:label xml:lang="en">third order collection</rdfs:label>
        <rdfs:comment>The collection of all specs of
            #$SecondOrderCollection.  Any instance of any instance of
            #$ThirdOrderCollection is a #$SecondOrderCollection.  Any
            instance of any instance of any instance of any instance of
            #$ThirdOrderCollection is an #$Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedOrderCollection"/>
        <rdfs:subClassOf rdf:resource="#CollectionTypeType"/>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="ThreeDimensionalGeometricThing">
        <rdfs:label xml:lang="en">#$ThreeDimensionalGeometricThing</rdfs:label>
        <rdfs:comment>A specialization of
            #$GeometricallyDescribableThing. Each instance of
            #$ThreeDimensionalGeometricThing is a three-dimensional
            object. Examples include spatially localized objects, such
            as the Pentagon, as well as abstract three-dimensional shapes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ThreeDimensionalShapeType">
        <rdfs:label xml:lang="en">#$ThreeDimensionalShapeType</rdfs:label>
        <rdfs:comment>A collection of collections and a specialization
            of #$ShapeType (q.v.).   Each instance of
            #$ThreeDimensionalShapeType is a specialization of
            #$ThreeDimensionalGeometricThing (q.v.) all of whose own
            instances have  something in common as regards their shape.
            Instances include the  collections #$CylinderShape,
            #$SphereShape, and #$Rectangular3DShape.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
    </owl:Class>
    <owl:Class rdf:ID="ThreeStoryBuilding">
        <rdfs:label xml:lang="en">three story buildings</rdfs:label>
        <rdfs:comment>#$ThreeStoryBuilding is a specialization of
            #$Building. Each instance is a building with exactly three stories.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Thursday">
        <rdfs:label xml:lang="en">Thu</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Thursday is the collection of all  (and
            only) thursdays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Time-Quantity">
        <rdfs:label xml:lang="en">#$Time-Quantity</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalQuantity.  Each
            instance of #$Time-Quantity is a physical quantity,
            corresponding to a certain  amount of time , that can be
            possessed by  #$TemporalThings.  The #$Time-Quantity had by
            a given thing represents the total amount of time that the
            thing exists, occurs over, or endures; see #$duration.
            Consider a sentence of the form (#$duration TEMPTHING
            TIMEQUANT).  If TEMPTHING is a #$SomethingExisting, the
            sentence means that TEMPTHING exists for a lifetime that is
            TIMEQUANT in duration.  If TEMPTHING is an #$Event, the
            sentence means that TEMPTHING (fully) transpires over an
            interval of time that is TIMEQUANT in duration.  If
            TEMPTHING is itself a #$TimeInterval (q.v.), the sentence
            means that TEMPTHING has a duration of TIMEQUANT.  The
            standard unit of   #$Time-Quantity in Cyc is
            #$SecondsDuration (q.v.); but there are other ways to
            specify an amount of time, e.g. with other instances of
            #$UnitOfMeasure (such as #$WeeksDuration and
            #$YearsDuration) or with instances of #$Time-Quantity (such
            as #$LongTime, #$Immediately, and #$AFewDecadesDuration).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="TimeInterval">
        <rdfs:label xml:lang="en">time intervals</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalThing.  Each
            instance of #$TimeInterval is a temporal thing characterized
            fully by its temporal attributes.  For example, the year
            1969 C.E. is an instance of #$TimeInterval; although many
            interesting things happened during that year, the year
            itself is completely defined by its temporal extent.  On the
            other hand, the event of Neil Armstrong&apos;s walking on
            the Moon is an #$Event and not a #$TimeInterval, since it is
            not fully characterized by its temporal extent or other
            temporal attributes. Specializations of #$TimeInterval
            include #$CalendarYear, #$CalendarMonth, and #$FiscalQuarter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>

    </owl:Class>
    <owl:Class rdf:ID="TimeOfDay">
        <rdfs:label xml:lang="en">time of day</rdfs:label>
        <rdfs:comment>A specialization of #$TimeInterval.  Each instance
            of #$TimeOfDay is a temporal interval marking a particular
            time of the day.  Notable specializations of #$TimeOfDay
            include #$CalendarHour, #$DaytimeWorkingHours,
            #$TimeOfDay-AM, and #$TimeOfDay-PM.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TimeOfDay-AM">
        <rdfs:label xml:lang="en">AMs</rdfs:label>
        <rdfs:comment>A specialization of #$TimeOfDay.  Each instance of
            #$TimeOfDay-AM is a period of time from one second after
            Midnight to one second before Noon on a particular calendar
            day (see the collection #$CalendarDay).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TimeOfDay-PM">
        <rdfs:label xml:lang="en">PMs</rdfs:label>
        <rdfs:comment>A specialization of #$TimeOfDay.  Each instance of
            #$TimeOfDay-PM is a period of time from one second after
            Noon to one second before Midnight on a particular calendar
            day (see #$CalendarDay).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TimeOfDayType">
        <rdfs:label xml:lang="en">#$TimeOfDayType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$TimeOfDayType is a subcollection of #$TimeOfDay (q.v.).
            Examples include #$TimeOfDay-PM, #$TimeOfDay-9AM, and #$TimeOfDay-MidnightHour.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionallyClassifiedDisjointTimeIntervalType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="TimePoint">
        <rdfs:label xml:lang="en">#$TimePoint</rdfs:label>
        <rdfs:comment>A subcollection of #$TimeInterval (q.v.).  An
            instance of #$TimePoint is an interval of time that has no
            duration (or, if you prefer, an infinitely small duration).
            A time point corresponds to what is colloquially described
            as an  instant  or  moment .  If time is likened to a
            (perhaps infinitely long) straight line, then each
            #$TimePoint is like a particular point on that line.  Given
            that time intervals are defined purely by their locations in
            time, no two time intervals can occupy exactly the same
            times (see #$cotemporal); and since time points are
            intervals with no duration, no two time points can even
            overlap (see #$temporallyOverlaps).  Some temporal
            properties of #$TemporalThings are given in terms of time
            points, e.g. #$startingPoint and #$endingPoint.  See also #$Now.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Title">
        <rdfs:label xml:lang="en">#$Title</rdfs:label>
        <rdfs:comment>The collection of all titles: proper nouns (noun
            phrases) that relate to a person&apos;s status and/or
            function/role in an organization.  E.g.,
            #$SeniorVicePresident-Title, #$MemberOfTechnicalStaff-Title,
            #$Reverend-Title, #$Father-Title, #$Miss, etc.  Note that
            this concept is not (closely) related to the title of a book
            or work of art, nor to the nicknames for a place, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TokenTemplate">
        <rdfs:label xml:lang="en">token template</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ImplementationConstant"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tool">
        <rdfs:label xml:lang="en">tools</rdfs:label>
        <rdfs:comment>A specialization of both #$PhysicalDevice and
            #$Device-UserControlled (qq.v.).  Each instance of #$Tool is
            a  device that is used by people to manipulate or alter
            other objects  or the immediate environment in some way.
            (Thus it does not include  #$PomPoms, e.g.)  #$Tools are
            typically controlled by their user  during use and can be
            used more than once (so #$Tool is disjoint  with
            #$Device-OneTimeUse).  #$Tool includes devices used in many
            different activities, as shown by this sampling its
            subcollections: #$WoodworkingTool, #$PlumbingTool, some (but
            not all) kinds of  #$MedicalDevices, #$CleaningImplement,
            and #$WritingImplement.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Device-UserControlled"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TopAndBottomSidedObject">
        <rdfs:label xml:lang="en">top and bottom sided objects</rdfs:label>
        <rdfs:comment>A  #$TopAndBottomSidedObject is an object with an
            intrinsic #$TopSide and  an intrinsic #$BottomSide.  By
            &apos;intrinsic&apos; we mean simply that there  exists an
            estabilshed convention according to which one side is
            considered &apos;top&apos; and the other side is considered
            &apos;bottom&apos;.  Usually  the two sides in question can
            be reliably distinguished from one  another.  For example,
            by convention, the &apos;top&apos; of a
            #$Table-PieceOfFurniture is the  side of on which other
            objects usually rest, while the &apos;bottom&apos; is the
            side which usually touches the floor.  Notice that a
            conventionally  distiguishable bottom and top do not
            necessarily imply a left and  right, or a front and back.  A
            plant is a good example of the case  where they do not: top
            and bottom can be reliably distinguished but  not,
            ordinarily, front and back or left and right.  Notice
            also--and  this is crucial to the whole conception--that
            while a  #$TopAndBottomSidedObject may well have a preferred
            orientation,  changing this orientation does not change what
            counts as &apos;top&apos; and  what counts as
            &apos;bottom&apos;: if a car flips over on the highway its
            top is  now facing the pavement and its bottom--the
            undercarriage--is now up  in the air.  If an entity does not
            obey this rule then it does not,  generally speaking, count
            as having a distinguishable top and  bottom--example: an
            hourglass or a book.  (see also  #$NoteAboutSidedObject) </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BilateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TopSide">
        <rdfs:label xml:lang="en">tops (types of things)</rdfs:label>
        <rdfs:comment>The collection of all the entire top sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces up.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Side"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TopographicalFeature">
        <rdfs:label xml:lang="en">topographical features</rdfs:label>
        <rdfs:comment>A specialization of #$GeographicalRegion.  Each
            instance of #$TopographicalFeature is a three-dimensional
            feature of a planet&apos;s surface, typically with
            boundaries defined by formations of rock, dirt, water, etc.,
            or by significant changes in elevation.  Some important
            specializations of #$TopographicalFeature include
            #$Mountain, #$MountainRange, #$Peninsula, #$Harbor,
            #$Shoreline, and #$Arroyo.  Note that collections of regions
            defined by the presence of human artifacts (e.g.
            #$CitySkyline) or ecological characteristics (e.g. #$Forest)
            are _not_ specializations of #$TopographicalFeature.
            Instances of #$TopographicalFeature include
            #$KyushuIsland-Japan, #$SaintThomas-Island, #$LakeErie,
            #$VictoriaFalls, and #$MalayPeninsula.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Place-NonAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Torso">
        <rdfs:label xml:lang="en">#$Torso</rdfs:label>
        <rdfs:comment>A specialization of #$Trunk-BodyCore.  Each
            instance of #$Torso is a human body&apos;s trunk, i.e., the
            main portion of a human&apos;s body, to which typically are
            connected a head and various appendages (see #$Appendage-AnimalBodyPart).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Trunk-BodyCore"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TotalDenotationalFunction">
        <rdfs:label xml:lang="en">#$TotalDenotationalFunction</rdfs:label>
        <rdfs:comment>A specialization of   #$Function-Denotational
            whose instances are total functions:  functions that have
            well-defined values for everything to which   they can
            legally be applied.  More precisely, an (N-ary) function   F
            is total if it is defined -- i.e. returns a value -- for all
            (length N sequences of) things that meet its (respective)
            argument-constraints.  An example of a
            #$TotalDenotationalFunction is #$SineFn.  For any
            #$AngularDistance (the #$arg1Isa of #$SineFn) to which this
            unary  function is applied, there is guaranteed to be a
            value returned.  Instances  of #$Function-Denotational that
            are not total are #$PartialDenotationalFunctions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="TotalOrdering">
        <rdfs:label xml:lang="en">total ordering</rdfs:label>
        <rdfs:comment>The collection of all those #$PartialOrdering
            ORDER in which the ordering relation R orders elements of
            the #$baseSet S of ORDER into a single line.  A
            #$TotalOrdering is sometimes called a &apos;linear
            ordering&apos; or a &apos;chain&apos;.  A #$PartialOrdering
            ORDER is a #$TotalOrdering if all elements of the #$baseSet
            S of ORDER are comparable by the ordering relation R of
            ORDER, i.e., for any X and Y in S, either R(X Y) or R(Y X).
            For example, if you take a set of real numbers and the usual
            &apos;greater than or equal to&apos; relation among these
            numbers, you have a #$TotalOrdering.  Note that if you want
            a &apos;strict line&apos;, i.e., if you want the ordering
            relation in a total ordering to be irreflexive, see #$TotalOrdering-Strict.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DistributiveLattice"/>
        <rdfs:subClassOf rdf:resource="#TreeOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TotalOrdering-Strict">
        <rdfs:label xml:lang="en">strict total ordering</rdfs:label>
        <rdfs:comment>A specialization of #$TreeOrdering-Strict.  Each
            instance of #$TotalOrdering-Strict is an ordering in which
            the ordering relation R orders elements of the #$baseSet S
            into a strict line.  An instance ORDER of
            #$PartialOrdering-Strict is an instance of
            #$TotalOrdering-Strict just in case all elements of the
            #$baseSet S of ORDER are comparable by the ordering relation
            R of ORDER; i.e., if X and Y are elements of S, then either
            R(X Y) or X = Y or R(Y X).  One example of a
            #$TotalOrdering-Strict is the set of real numbers with the
            usual &apos;smaller than&apos; relation on those numbers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TreeOrdering-Strict"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TotallyOrderedCollection">
        <rdfs:label xml:lang="en">totally ordered collection</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance of
            #$TotallyOrderedCollection is a collection whose instances
            are conventionally regarded as being ordered by some
            relation RELN, where RELN totally orders COL. A relation
            RELN totally orders some collection, COL, just in case it is
            antisymmetric and transitive on COL, and for any pair of
            instances of COL, INS1 and INS2, either (RELN INS1 INS2) or
            (RELN INS2 INS1). For example, the intances of collection
            #$Integer are conventionally as being ordered by
            #$greaterThanOrEqualTo, and #$greaterThanOrEqualTo totally
            orders #$Integer. Consequently, #$Integer is a #$TotallyOrderedCollection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="TotallyOrderedCollectionType">
        <rdfs:label xml:lang="en">totally ordered collection type</rdfs:label>
        <rdfs:comment>The intersection of #$TotallyOrderedCollection and #$CollectionType.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotallyOrderedCollection"/>
        <rdfs:subClassOf rdf:resource="#Collection"/>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </owl:Class>
    <owl:Class rdf:ID="TotallyOrderedScalarIntervalType">
        <rdfs:label xml:lang="en">totally ordered scalar interval type</rdfs:label>
        <rdfs:comment>A collection of collections. Each
            #$TotallyOrderedScalarIntervalType is a
            #$TotallyOrderedCollection all of whose instances are #$ScalarIntervals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotallyOrderedCollection"/>
        <rdfs:subClassOf rdf:resource="#LinearOrderAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="TouchPerception">
        <rdfs:label xml:lang="en">#$TouchPerception</rdfs:label>
        <rdfs:comment>The collection of sensory-perceptual events
            (#$Perceivings) in which a #$PerceptualAgent perceives
            (acquires information) by touch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#ContinuousPhysicalContactEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Touched-Feeling">
        <rdfs:label xml:lang="en">touched - feeling</rdfs:label>
        <rdfs:comment>The feeling of being emotionally touched.
            Something that is stirring, touching or moving.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="TrackedVehicle">
        <rdfs:label xml:lang="en">#$TrackedVehicle</rdfs:label>
        <rdfs:comment>A collection of #$LandTransportationDevices.  Each
            instance of #$TrackedVehicle used caterpillar-like tracks
            (see #$VehicleTrack-Device) instead of, or in addition to,
            wheels for propulsion.  Specializations include
            #$Tank-Vehicle and #$Bulldozer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#MilitaryVehicle"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Train-TransportationDevice">
        <rdfs:label xml:lang="en">#$Train-TransportationDevice</rdfs:label>
        <rdfs:comment>#$Train-TransportationDevice is a specialization
            of #$WheeledTransportationDevice,
            #$TransportationContainerProduct, and
            #$PublicTransportationDevice.  Each instance of a
            #$Train-TransportationDevice is a  train,  i.e.,  a
            transportation device that runs on #$Railways and consists
            of multiple #$TrainCars coupled together.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#PublicTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TrainCar">
        <rdfs:label xml:lang="en">train cars</rdfs:label>
        <rdfs:comment>#$TrainCar is a specialization of
            #$WheeledTransportationDevice and
            #$TransportationContainerProduct.  Each instance of
            #$TrainCar is a non-motorized wheeled vehicle that runs on
            #$Railways (q.v.).  When instances of #$TrainCar are to be
            moved, they are coupled together to form trains pulled by
            train engines.  There are freight #$TrainCars, and passenger
            #$TrainCars for transporting people.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TrainEngine">
        <rdfs:label xml:lang="en">#$TrainEngine</rdfs:label>
        <rdfs:comment>#$TrainEngine is a specialization of
            #$TransportationDevice-Vehicle, #$FuelPoweredDevice, and
            #$WheeledTransportationDevice.  Each instance of
            #$TrainEngine is a fuel-powered, non-steerable, wheeled
            vehicle that runs on #$Railway tracks, and has enough power
            to pull or push a group of #$TrainCars with it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#FuelPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Trajectory">
        <rdfs:label xml:lang="en">#$Trajectory</rdfs:label>
        <rdfs:comment>The collection of all trajectories of moving
            objects: each instance of #$Trajectory is the individual
            spatial region consisting of the points in space through
            which an object passes during a #$Movement-TranslationEvent.
            A trajectory may or may not follow some pre-existing or
            pre-defined path (#$Path-Generic).  If it does follow one or
            more such paths, it determines a #$Traversal of those paths.
            A #$Trajectory is understood and defined as a spatial line
            with one of the two possible directions of motion along it.
            It is considered as being a part of some stationary
            background space (thus, in most contexts, a #$Trajectory
            cannot itself &apos;move&apos;).  Unlike a #$Path-Generic, a
            #$Trajectory (or a #$Traversal) can cross itself any number
            of times, and go back along itself, cycle over and over
            again, etc.  If there is a #$Movement-TranslationEvent, then
            that event always has a #$Trajectory; it is linked to its
            #$Trajectory by the #$ActorSlots #$trajectory-Complete and
            possibly #$trajectory-Partial.  In most contexts, a
            #$Trajectory will be a line (or rather a one-manifold)
            through space as traced by some designated point within the
            moving object (e.g., the center of gravity), but the
            collection #$Trajectory-SweptSpace is available to represent
            the whole space (with space and thickness) swept through by
            a moving object.  Contrast #$Trajectory with #$Path-Generic
            and with #$Traversal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing-Localized"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Transaction">
        <rdfs:label xml:lang="en">transactions</rdfs:label>
        <rdfs:comment>The collection of events performed by two or more
            #$Agents cooperating (willingly) under some #$Agreement,
            wherein each agent performs actions in exchange for the
            actions of the other(s).  Note that a case of
            attack-and-counterattack in warfare is _not_ a
            #$Transaction; nor is fortuitous cooperation without
            agreement (e.g. where a group of investors who, unknown to
            each other, all buy the same stock almost at once, thereby
            driving up its price).  For transactions involving an
            exchange of user rights (to goods and/or money) between
            agents, see the specialization #$ExchangeOfUserRights.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#CooperationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransferIn">
        <rdfs:label xml:lang="en">transfer events with well-defined to-location</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$TransferIn is a #$GeneralizedTransfer (q.v.) for which
            there is a well-defined thing that it is a transfer  to
            (see #$to-Generic), but not necessarily a well-defined thing
            that it is a transfer  from  (see #$from-Generic).
            Subcollections of #$TransferIn include #$CollectionEvent,
            #$GainingUserRights, and #$AccessingAnIBT.  At the end of a
            #$TransferIn, the thing transferred (see #$transferredThing)
            is in some sense  located  at the #$to-Generic.  Non-
            examples of #$TransferIn include instances of
            #$AbandoningSomething (when there is no prospective owner)
            and of #$IBTGeneration (when the information may go to
            various unspecified locations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransferOfControl">
        <rdfs:label xml:lang="en">transfers of control</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance is an event
            in which an object which is under the control of some agent
            has that control transferred to another agent different from
            the first.  &apos;Control&apos; here means the ability on
            the part of an agent to determine &apos;what happens
            to&apos; another object or agent.  In the case where the
            thing controlled exhibits &apos;activities&apos; or
            &apos;behavior&apos;, this extends to a nontrivial ability
            to direct or circumscribe some important aspect of the
            behavior that the object or agent exhibits.  An agent with
            independent goals and purposes that is under
            &apos;control&apos; is not able to freely pursue those goals
            and purposes: i.e., the &apos;controller&apos; is able to
            exert some kind of significant and immediate check upon the
            &apos;controlled&apos; agent&apos;s capacity to pursue its
            goals at whim.  Every #$TransferOfControl presupposes
            exactly one #$Agent who #$takesControl of the thing being
            transferred, exactly one #$Agent who #$losesControl of the
            thing being transferred, and one thing that is the
            #$objectOfControlTransfer, i.e., the object of the transfer
            of control.  In some cases, e.g., #$CapturingAnAnimal or
            #$TakingAPersonPrisoner, the agent who #$losesControl
            coincides with the thing that is the
            #$objectOfControlTransfer.  You cannot have a
            #$TransferOfControl without someone or something that
            #$losesControl, however.  E.g., finding and taking an
            (unclaimed) penny in the street is not a
            #$TransferOfControl.  A given #$TransferOfControl is not
            necessarily #$doneBy the agent who #$takesControl or by the
            agent who #$losesControl:  it could conceivably be
            instigated by a third party independent of either of these.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransferOut">
        <rdfs:label xml:lang="en">transfer events with well-defined from-location</rdfs:label>
        <rdfs:comment>A specialization of #$GeneralizedTransfer.
            #$TransferOut includes all instances of
            #$GeneralizedTransfer in which some object plays the role of
            #$from-Generic, but in which there may or may not be any
            object playing the role of #$to-Generic.  At the start of a
            #$TransferOut, the object playing the role of
            #$transferredThing is &apos;located&apos; at the object
            playing the role of #$from-Generic.  The collection
            #$TransferOut includes, among other things, all instances of
            the collections #$Emission, #$LosingUserRights, and
            #$DistributionEvent.  Negative examples of #$TransferOut
            include some instances of #$AppropriatingSomething (when
            there is no previous owner) and some instances of #$Hearing
            (when the sounds may come from various unspecified locations).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransferringOwnership">
        <rdfs:label xml:lang="en">transferring ownership</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$TransferringPossession.  In each instance of
            #$TransferringOwnership the ownership of some object passes
            from one agent to another.  That is, there is a transfer
            from one #$Agent to another of a #$FullUseRights and the
            #$ExclusiveUserRights over the #$objectOfPossessionTransfer.
            Often there is some compensation from the receiving agent
            (see #$ExchangeOfUserRights).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransferringPossession">
        <rdfs:label xml:lang="en">transfers of possession</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$TransferringPossession, the possession of a single object
            (see #$objectOfPossessionTransfer) is transferred from one
            #$Agent to another.  Such an event alters the rights of
            _two_ different agents to use the object in question: one
            agent loses some #$UserRightsAttribute (q.v.) over it, while
            the other agent gains some #$UserRightsAttribute over it.
            Thus each #$TransferringPossession event is both a
            #$LosingUserRights event and a #$GainingUserRights event.
            Note that in instances of #$Buying, #$Bartering, or
            #$Renting, _two_ such #$TransferringPossessions occur,
            because there are two objects whose possession is
            transferred.  For example, in buying a car, the right to use
            the buyer&apos;s money is transferred to the auto seller,
            while the ownership of the car is transferred to the buyer.
            In such cases, both of the #$TransferringPossession events
            (one for each object) are subevents (see #$subEvents) of the
            instance of #$Buying, #$Renting, or #$Bartering.  See #$ExchangeOfUserRights.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransitiveBinaryPredicate">
        <rdfs:label xml:lang="en">transitive binary predicates</rdfs:label>
        <rdfs:comment>A specialization of #$BinaryPredicate.  A binary
            predicate PRED is an instance of #$TransitiveBinaryPredicate
            if and only if, for any X and Y and Z, (PRED X Y) and (PRED
            Y Z) jointly imply (PRED X Z).  Examples include
            #$greaterThan, #$geographicalSubRegions, and #$cotemporal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#BinaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TransitivePPCompFrame">
        <rdfs:label xml:lang="en">transitive p p comp frame</rdfs:label>
        <rdfs:comment>Frames used for verbs, adjectives and nouns that
            have a single PP complement. Examples include &apos;depend
            on X&apos;, &apos;mad at X&apos;, &apos;picture of X&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PredicativeFrame"/>
        <rdfs:subClassOf rdf:resource="#FrameForNouns"/>
        <rdfs:subClassOf rdf:resource="#FrameForVerbs"/>
        <rdfs:subClassOf rdf:resource="#PPCompFrame"/>
    </owl:Class>
    <owl:Class rdf:ID="TransitiveViaArgPredicate">
        <rdfs:label xml:lang="en">transitive via predicate</rdfs:label>
        <rdfs:comment>A collection of #$MetaPredicates used for stating
            that one predicate is  transitive  with respect to another.
            See the instances #$transitiveViaArg and
            #$transitiveViaArgInverse for more details.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MetaPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-Complete">
        <rdfs:label xml:lang="en">complete translation</rdfs:label>
        <rdfs:comment>A collection of translational motion events; hence
            a subcollection of #$Movement-TranslationEvent.  In each
            instance of #$Translation-Complete, the entire moving object
            (see #$objectMoving) moves from the place of origin (see
            #$fromLocation) to the destination (see #$toLocation).  That
            is, the object completely leaves the origin and relocates to
            the destination.  The moving object may be either a
            #$NonFluidlike object (e.g. a baseball) or a
            #$FluidTangibleThing all of which moves from one place to
            another (e.g. the gasoline used to fill a gas tank).
            Another example: a single molecule of water flowing from
            point A to point B in a river.  Non-examples: a river
            flowing from A to B  (the river itself is not relocated); a
            rubber band stretching.  A borderline case: a spider spins a
            web, leaving part of itself, in effect, extended out behind
            it; in most contexts that would still be considered a
            #$Translation-Complete.  Note that #$Translation-Complete is
            noncommittal as to whether net movement has occurred, so
            round-trip events qualify as complete translations (cf. #$Translation-LocationChange).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-Flow">
        <rdfs:label xml:lang="en">streams (types of things)</rdfs:label>
        <rdfs:comment>A specialization of both #$FluidFlowEvent and
            #$Movement-TranslationEvent. In each instance of
            #$Translation-Flow, the moving object (see the predicate
            #$objectMoving) is an instance of #$FluidTangibleThing
            (i.e., a portion of some fluid, such as a quart of milk)
            rather than a discrete solid object.  At least some of the
            moving object leaves its original position (see the
            predicate #$fromLocation) and some arrives at the
            destination (see the predicate #$toLocation), but it is not
            necessary that all of the moving object go from the origin
            to the destination.  Instances of #$Translation-Flow include
            rivers flowing or winds blowing or air filling one&apos;s
            lungs when one takes a breath.  Other instances of
            #$Translation-Flow include flows of ``fluids&apos;&apos;
            such as sand, drifting snow, etc., which are composed of
            multiple solid particles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FluidFlowEvent"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-LocationChange">
        <rdfs:label xml:lang="en">changes of location</rdfs:label>
        <rdfs:comment>A collection of translational motion events; thus
            a subcollection of #$Movement-TranslationEvent.  In each
            instance of #$Translation-LocationChange, the moving object
            (see #$objectMoving) ends up in a different place than it
            started from: the destination (see #$toLocation) is not the
            same as the origin (see #$fromLocation).  Thus, a round-trip
            travel event (see #$Translation-RoundTrip) is _not_ an
            instance of this collection.  Cf. #$Translation-NoLocationChange.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-MultiTrajectory">
        <rdfs:label xml:lang="en">multi-path translation</rdfs:label>
        <rdfs:comment>A specialization of #$Movement-TranslationEvent.
            In any instance of #$Translation-MultiTrajectory, motion may
            occur simultaneously along two or more instances of
            #$Trajectory (which are not related by sub-trajectory
            relationships.)  Therefore, there must be at least two
            #$objectMovings in such an event.  There may be more than
            one #$fromLocation and/or more than one #$toLocation.
            Instances of #$Translation-MultiTrajectory include
            scattering, distributing, and collecting things.  E.g., all
            of the following exhibit multi-trajectory translation
            movements: a rainshower or snowfall; an exploding firework;
            water being ejected from a sprinkling system; the
            surrounding objects being sucked up by a tornado;
            participants running a 100K footrace; pool balls during the
            opening break.  For non-examples of this, see #$Translation-SingleTrajectory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-NoLocationChange">
        <rdfs:label xml:lang="en">translations without location change</rdfs:label>
        <rdfs:comment>A collection of translational motion events; hence
            a subcollection of #$Movement-TranslationEvent.  In any
            instance of #$Translation-NoLocationChange, the
            #$objectMoving undergoes translational motion but ends up
            where it started --- i.e., there is no NET movement; i.e.,
            its #$fromLocation and #$toLocation are the same.  Between
            the beginning and the end of a
            #$Translation-NoLocationChange, the #$objectMoving may visit
            the #$toLocation and the #$fromLocation any number of times.
            E.g., consider the motion of a person who is born in, and 80
            years later dies in, the very same hospital, and has been
            there a few times in between for operations, visiting
            patients, etc.  A less dramatic example is the motion of
            your car on a particular day, as it gets moved around,
            crosses its own path a few times, etc., but ends the day in
            the same place it started.   Instances of
            #$Translation-NoLocationChange may be periodic or
            nonperiodic movements.  An important subcollection of
            #$Translation-NoLocationChange is #$Translation-RoundTrip.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-NonPeriodic">
        <rdfs:label xml:lang="en">non-periodic translation</rdfs:label>
        <rdfs:comment>A specialization of both #$Movement-NonPeriodic
            and #$Movement-TranslationEvent.  In each instance of
            #$Translation-NonPeriodic, the moving object (see the
            predicate #$objectMoving) is in translational motion and
            does not move back to the same position on a regular
            temporal basis (it can visit the same location multiple
            times, just not regularly).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-NonPeriodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-Periodic">
        <rdfs:label xml:lang="en">periodic translation</rdfs:label>
        <rdfs:comment>A specialization of both
            #$Movement-TranslationEvent and #$Movement-Periodic.  Each
            instance of #$Translation-Periodic is a translational
            movement in which the moving object returns to a certain
            location repeatedly, and at more or less regular time
            intervals.  Instances of #$Translation-Periodic include a
            ball bouncing in place and a planet revolving around a star.
            Note that a planet rotating on its axis or a top spinning in
            place would not count as an instance of
            #$Translation-Periodic, since these movements, although
            periodic, are rotations rather than translations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-Periodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-RoundTrip">
        <rdfs:label xml:lang="en">round-trips</rdfs:label>
        <rdfs:comment>A specialization of
            #$Translation-NoLocationChange.  Each instance of
            #$Translation-RoundTrip represents one round trip event.
            That is, an instance of #$Translation-RoundTrip is a
            complete translational movement that begins and ends in the
            same place (thus, the #$fromLocation and #$toLocation of the
            round trip are identical).  However, a round trip is usually
            a discontinuous motion (cf. #$Movement-TranslationProcess).
            In the simplest case, it has exactly one
            #$outboundLegOfRoundTrip and exactly one
            #$inboundLegOfRoundTrip (qq.v.), and the trip breaks at the
            #$destination-RoundTrip, which is the place that the
            traveller visits in between the two legs of the journey.
            Thus, in addition to a #$fromLocation and #$toLocation, an
            instance of #$Translation-RoundTrip also has an
            #$origin-RoundTrip and #$destination-RoundTrip.  The
            #$origin-RoundTrip is just the same as the #$fromLocation
            and #$toLocation.  Note: to describe a multi-stop `round
            trip&apos;,  instead of using #$Translation-RoundTrip one
            can represent it as a circuit composed of a series of
            one-way legs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-NoLocationChange"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translation-SingleTrajectory">
        <rdfs:label xml:lang="en">#$Translation-SingleTrajectory</rdfs:label>
        <rdfs:comment>A specialization of #$Movement-TranslationEvent.
            Each instance of #$Translation-SingleTrajectory is a
            translational movement that involves exactly one
            #$trajectory-Complete.  One or more items might have the
            role of #$objectMoving in such an event.  Note that although
            there is a single #$trajectory-Complete, it does not follow
            that there is a unique place in the role of #$fromLocation
            or #$toLocation because that depends on our descriptions of
            these locations.  (E.g. the same single-trajectory movement
            can be described as from Texas to Pennsylvania, from Austin
            to Pittsburgh, or from northwest Austin to south
            Pittsburgh.)  However, the single #$trajectory-Complete
            connects one from-location and one to-location.  (Similarly,
            there may be a single existing #$motionPathway-Complete that
            the trajectory goes along, or a single #$Traversal of paths
            indicated by #$traverses-Complete.)  Note that a
            translational motion performed by a whole #$Group is likely
            to be a #$Translation-SingleTrajectory; e.g. a flock of
            birds flying together or a snarl of rush-hour traffic on the
            Beltway.  Non-examples include an opening break in a game of
            billiards and a group of water droplets coming together into
            one big drop. Contrast with #$Translation-MultiTrajectory.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TranslationAlongASurface">
        <rdfs:label xml:lang="en">#$TranslationAlongASurface</rdfs:label>
        <rdfs:comment>A collection of processes.  In instances of
            #$TranslationAlongASurface an #$objectMoving is moving along
            a #$motionPathway-Complete in contact with a liquid or solid
            surface.  The #$objectMoving crosses [see
            #$trajectoryPassesThrough] the #$Perimeter of any
            #$toLocation or #$fromLocation that is a #$Surface-Open.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TranslationAlongInternalLivingStructure">
        <rdfs:label xml:lang="en">biological transport</rdfs:label>
        <rdfs:comment>A specialization of #$Translation-Complete.  Each
            instance of #$TranslationAlongInternalLivingStructure is a
            movement event in which the trajectory of the object moving
            (see #$trajectory-Complete and #$primaryObjectMoving)
            follows a living structure (an instance of
            #$BiologicalLivingObject) internal to some organism (see
            #$Organism-Whole) for a significant portion of the movement
            (so that the living structure is a #$motionPathway-Partial
            (q.v.) for the movement).  Notable specializations of
            #$TranslationAlongInternalLivingStructure include
            #$EatingEvent, #$DigestionEvent, and #$Inhaling.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Translocation">
        <rdfs:label xml:lang="en">translocations</rdfs:label>
        <rdfs:comment>A subcollection of #$MovementEvent.  Each instance
            of #$Translocation is a movement across a distance; thus
            there is both a location that it is a movement  from  (see
            #$fromLocation) and a location that it is a movement  to
            (see #$toLocation).  (These two locations might or might not
            be distinct, considering round-trips.)  Note that instances
            of #$Translocation might or might not involve a salient
            moving object (see #$objectMoving); for those that do see
            the specialization #$Movement-TranslationEvent; for some
            that don&apos;t see #$WavePropagation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportFacility">
        <rdfs:label xml:lang="en">transport facilities</rdfs:label>
        <rdfs:comment>#$TransportFacility is a specialization of
            #$ConstructionArtifact and #$InfrastructureProduct.  Each
            instance of #$TransportFacility is a structure built and
            used by human beings for the purpose of transportation of
            people, livestock or goods, or for associated support services.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportInvolvingADriver">
        <rdfs:label xml:lang="en">driving</rdfs:label>
        <rdfs:comment>This is the collection of all events in which
            there is some #$driverActor (q.v).  If there is a
            #$driverActor involved in EVENT then EVENT is an instance of
            #$TransportInvolvingADriver.  Certain classes of events,
            e.g. car, bicycle, or boat transportation, all involve
            #$driverActors; therefore, these classes should be
            specializations of #$TransportInvolvingADriver.  Borderline
            exemplars include driving soap box derby car transportation
            or a cable car transportation.  Although these are slightly
            atypical in that the #$transporters involved are not
            self-powered devices, they do meet the requirement that
            there are #$driverActors involved in their instances.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#TransportingPeople"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationCompany">
        <rdfs:label xml:lang="en">transportation companies</rdfs:label>
        <rdfs:comment>A specialization of both
            #$TransportationOrganization and #$ServiceOrganization.
            Each instance of #$TransportationCompany is an organization
            that provide transportation (of goods or persons) to
            customers for a fee.  Specializations of
            #$TransportationCompany include the collections
            #$ShippingOrganization and #$AirlineCompany.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#TransportationOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationCompany-Provider">
        <rdfs:label xml:lang="en">#$TransportationCompany-Provider</rdfs:label>
        <rdfs:comment>Instances of #$TransportationCompany-Provider are
            service organizations whose main product is the direct
            providing of transportation of people or goods.
            Organizations that rent or loan vehicles should not be
            instances of this class, but instead belong in the
            more-general #$TransportationCompany.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationCompany"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationContainerProduct">
        <rdfs:label xml:lang="en">transport container</rdfs:label>
        <rdfs:comment>#$TransportationContainerProduct is a
            specialization of #$ContainerProduct and #$Conveyance.  Each
            instance of #$TransportationContainerProduct is a container
            in which the primary function is to transport substances or
            objects.  A few examples are #$Luggage, #$BabyCarrier, and #$Trailer.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Conveyance"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationDevice">
        <rdfs:label xml:lang="en">#$TransportationDevice</rdfs:label>
        <rdfs:comment>A specialization of both #$Conveyance and
            #$PhysicalDevice.  Each instance of #$TransportationDevice
            is an artifact designed to move an object from one location
            to another, by (for example) carrying, pulling, or pushing
            the transported object.  Instances of this collection may or
            may not have their own power source (see
            #$SelfPoweredDevice).  Those that do, such as automobiles
            and speedboats, constitute the specialization
            #$TransportationDevice-Vehicle.  Other transportation
            devices (for example, instances of #$Wheelbarrow or
            #$Bicycle) require an external motive force.  Because
            #$transporter and #$transportees are specializations of
            #$objectMoving, it follows that any object in the role of
            #$transporter moves as a whole with those objects playing
            the role of #$transportees.  Consequently, since any
            instance of #$TransportationDevice has playing the role of
            #$transporter as its intended function, stationary objects
            which cause motion, such as conveyor belts, escalators,
            rocket launchers, and slingshots, are excluded from the
            collection #$TransportationDevice. Although they facilitate
            travel, ice skates, shoes, skis and other instances of
            #$WearableConveyance are also excluded from the collection
            #$TransportationDevice, since they are devices which are
            worn rather than ridden on, ridden with, or ridden in.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Conveyance"/>
        <rdfs:subClassOf rdf:resource="#DurableGood"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationDevice-Vehicle">
        <rdfs:label xml:lang="en">#$TransportationDevice-Vehicle</rdfs:label>
        <rdfs:comment>#$TransportationDevice-Vehicle is a specialization
            of both #$TransportationDevice and #$SelfPoweredDevice.
            Each instance of #$TransportationDevice-Vehicle is a
            transportation device that moves under its own power.
            Examples include jet airplanes and automobiles; non-examples
            include skateboards, gliders, and rowboats.  Note that
            hand-pushed power lawnmowers, even though they are
            #$SelfPoweredDevices, are not instances of
            #$TransportationDevice-Vehicle, since they must be pushed in
            order to remain in motion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SelfPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Device-UserControlled"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationEvent">
        <rdfs:label xml:lang="en">#$TransportationEvent</rdfs:label>
        <rdfs:comment>A specialization of both #$Conveying-Generic  and
            #$Translation-Complete, instances of which are events in
            which one or more objects transport one or more other
            objects.  Each instance  of #$TransportationEvent is an
            event in which an object (in the role of #$transporter) aids
            in the translational movement of another object (having the
            role of #$transportees), so that both objects move together
            along the same complete pathway (see
            #$motionPathway-Complete).  Optionally, one of these
            objects, or some third object moving along with them,
            provides the force to make the movement happen (see
            #$providerOfMotiveForce).  Examples of transportation events
            include automobile transportation, riding a bicycle, dogs
            pulling goods on a sled, a wagon with groceries rolling down
            a hill, a person carrying clothes in a suitcase, etc.  In
            that last case, note that the #$transporter is the suitcase,
            not the person.  Things which are _not_
            #$TransportationEvents include a river conveying some
            flotsam, the wind blowing a leaf, a conveyor belt moving a
            widget to the next person on the assembly line, or a walking
            beast of burden that is carrying nothing.  The first three
            of these negative examples are instances of
            #$Conveying-Stationary, since the would-be #$transporter
            doesn&apos;t actually change its overall location (see
            #$conveyor-Stationary); in the fourth case the unburdened
            beast has no #$transportees.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#Conveying-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationEventByVehicleType">
        <rdfs:label xml:lang="en">transportation by vehicle type</rdfs:label>
        <rdfs:comment>An instance of #$CollectionType which is a generic
            faceting  of #$TransportationEvent.  Each instance is a
            collection of  translation processes characterized by a
            single type of  vehicular #$transporter: #$Automobile,
            #$Train-TransportationDevice, #$Ship,  etc..  For reifying
            collections that are instances of this collection,  see #$TravelingByMeansOfFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FirstOrderCollection"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportationOrganization">
        <rdfs:label xml:lang="en">transportation organization</rdfs:label>
        <rdfs:comment>Each instance of #$TransportationOrganization is
            an #$Organization that is primarily or significantly engaged
            in the #$TransportationIndustry or whose activities focus on
            that industry (whether or not the #$Organizations actually
            provide transportation services).  Examples of
            specializations of #$TransportationOrganization include
            #$AutoDealership, #$RailwayOrganization and #$TaxiCompany.
            Both #$UnitedAirlines and #$USDepartmentOfTransportation are
            instances of #$TransportationOrganizations.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TransportingPeople">
        <rdfs:label xml:lang="en">transportation of people</rdfs:label>
        <rdfs:comment>A specialization of #$TransportationEvent.  Each
            instance of #$TransportingPeople is a transportation event
            in which at least one instance of #$Person is among the main
            transportees (see the predicate #$transportees).  Note that
            this collection excludes events in which people are merely
            conveyed (as, for example, by a moving sidewalk), rather
            than travelling with their transporting device.  Note that
            the notion of &apos;transportees&apos; is interpreted
            broadly: even the driver (#$driverActor) of the
            transportation device counts among the transportees.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Trapezoid">
        <rdfs:label xml:lang="en">trapezoid</rdfs:label>
        <rdfs:comment>The collection of all trapezoids, four-sided
            two-dimensional figures which contain exactly two parallel sides.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Quadrilateral"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TrappedFeeling">
        <rdfs:label xml:lang="en">trapped feelings</rdfs:label>
        <rdfs:comment>Unpleasant emotion associated with situations in
            which a person feels unduly constrained in behavior or
            otherwise pressured or controlled by others.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="Trapping">
        <rdfs:label xml:lang="en">trapping events</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$Trapping, an animal is taken into custody by using a
            device that physically captures the body of the animal.  The
            animal may or may not be killed in the event.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CapturingAnimal"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TravelOrganization">
        <rdfs:label xml:lang="en">travel organization</rdfs:label>
        <rdfs:comment>Each instance of #$TravelOrganization is an
            #$Organization that is primarily or significantly engaged in
            the travel industry (a broader concept than
            #$TouristIndustry) or whose activities focus on that
            industry.  Many instances of #$Organization are instances of
            both #$TravelOrganization and #$TransportationOrganization
            (e.g., #$UnitedAirlines).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Traversal">
        <rdfs:label xml:lang="en">traversal</rdfs:label>
        <rdfs:comment>The collection of all traversals of paths and
            networks.  A traversal is a trace of a pathway along
            pre-existing #$Path-Generics.  It is the
            &apos;path-representation&apos; of certain actual
            trajectories (instances of #$Trajectory) that are confined
            to paths.  Different actual trajectories may have the same
            traversal; to see this, consider two cars driving along a
            block of 10th St.  The actual car movements have different
            trajectories -- say, one drove straight while the other
            switched lanes many times.  The two different trajectories
            are both characterized by the same traversal of that block
            of 10th Street.  A traversal of a network of paths can be
            represented by (#$TraversalFn CHAIN) where CHAIN is a
            #$PathChain.  We may choose to use a more detailed
            representation of the traversal, i.e., use a #$PathChain
            made of more, but shorter, paths.  For example, we may use
            several paths to replace a cycle in CHAIN if we want to be
            clear about the direction in that part of the traversal, or
            we may have to replace a path in CHAIN by several
            &apos;shorter&apos; paths if we want to preserve the fact
            that the object moved backward at a small part of PATH and
            then resumed its original direction.  In summary, a
            traversal is a constraint on a trajectory and a
            characterization of it in terms of traversing pre-existing
            #$Path-Generics.   Technically, a #$Traversal from A to B
            can be expressed as (#$TraversalFn CHAIN) where CHAIN is a
            #$PathChain such that the first item in CHAIN is A and the
            last is B (we can assert: (#$traversalFrom (#$TraversalFn
            CHAIN) A) and (#$traversalTo (#$TraversalFn CHAIN) B)).
            Related constants include #$TraversalFn, #$traversalFrom,
            #$traversalTo, #$pointOnTraversal, #$subTraversals,
            #$traversalPassesThrough, #$traversalInSystem, etc.  Note
            that a #$Traversal, unlike a #$Path-Generic, can cross
            itself, i.e., can &apos;pass through&apos; a point on it
            many times.   (Mathematically: given a #$PathSystem or
            #$CustomarySystemOfLinks, a #$Traversal of it is a directed
            path that has a homomorphism into that system.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tree-PathSystem">
        <rdfs:label xml:lang="en">tree path systems</rdfs:label>
        <rdfs:comment>The collection of all those #$ConnectedPathSystems
            that look like trees, i.e., those #$ConnectedPathSystems
            that have no #$Path-Cyclics at all.  Note that since each
            instance of #$Tree-PathSystem has no cycles in it, it has no
            loops, nor multiple links between two nodes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>

    </owl:Class>
    <owl:Class rdf:ID="Tree-ThePlant">
        <rdfs:label xml:lang="en">trees</rdfs:label>
        <rdfs:comment>A specialization of #$Plant-Woody.  Each instance
            of #$Tree-ThePlant is a tall woody plant (typical mature
            specimens are usually taller than a person or a bush),
            generally having a branching form overall, and with roots in
            the ground, a trunk, and the branches having numerous leaves
            exposed to the sky.  Notable specializations of
            #$Tree-ThePlant include #$OakTree, #$MapleTree,
            #$GiantSequoia, and #$BananaTree.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TreeOrdering">
        <rdfs:label xml:lang="en">tree ordering</rdfs:label>
        <rdfs:comment>A specialization of #$PartialOrdering.  An
            instance ORDER of #$PartialOrdering is also an instance of
            #$TreeOrdering just in case  the ordering relation R of
            ORDER orders elements of the #$baseSet S of ORDER into a
            tree-like structure, so that each pair of elements of S has
            a common &apos;R-lower-bound&apos; in S (i.e., for each X, Y
            in S, there is a Z in S such that R(Z X) and R(Z Y)), and
            the set of &apos;R-lower-bounds&apos; of each X in S is
            ordered in a chain by R (i.e., {Y: Y is in S and R(Y X)} is
            a chain).  Note that an instance of #$TreeOrdering can
            itself be a chain, i.e., an instance of #$TotalOrdering.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartialOrdering"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TreeOrdering-Strict">
        <rdfs:label xml:lang="en">strict tree ordering</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is irreflexive and transitive on the #$baseSet S of ORDER,
            and in which every pair of different elements of S has a
            common &apos;R-lower-bound&apos;, and the set of
            &apos;R-lower-bounds&apos; of each X in S is ordered in a
            (possibly empty) chain by R (i.e., {Y: Y is in S and R(Y X)}
            is a (possibly empty) chain).  Note that the only difference
            between a #$TreeOrdering and a #$TreeOrdering-Strict is that
            the ordering relation of the former is reflexive while that
            of the latter is irreflexive.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartialOrdering-Strict"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Trial">
        <rdfs:label xml:lang="en">trials</rdfs:label>
        <rdfs:comment>The subcollection of #$LegalConflict events whose
            instances are heard and decided by a court and are
            officiated by a #$Judge.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#Event-Organized"/>
        <rdfs:subClassOf rdf:resource="#ConflictEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Triangle">
        <rdfs:label xml:lang="en">triangle</rdfs:label>
        <rdfs:comment>A specialization of #$Polygon. An instance SHAPE
            of #$Polygon is also an instance of #$Triangle just in case
            SHAPE has exactly three sides. Examples include spatially
            localized triangular intangible surfaces (e.g., the space
            occupied by one face of an Egyptian pyramid can be
            approximated as an instance of #$Triangle), as well as
            abstract triangles.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Triumph-TheFeeling">
        <rdfs:label xml:lang="en">triumph - the feeling</rdfs:label>
        <rdfs:comment> The feeling of pride, joy and exculatation after
            a success or victory .</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Celebratory-Emotion"/>
        <rdfs:subClassOf rdf:resource="#Elation"/>
    </owl:Class>
    <owl:Class rdf:ID="TropicalRainForest">
        <rdfs:label xml:lang="en">tropical rain forest</rdfs:label>
        <rdfs:comment>The collection of all tropical rain forests. Each
            instances is an area of dense forest located in the tropics
            and characterized by high annual rainfall and continuous
            high  temperature.  Up to three tree layers grow above a
            variable shrub  layer.  Source: The Times Atlas of the World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Forest"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Truck">
        <rdfs:label xml:lang="en">trucks (types of things)</rdfs:label>
        <rdfs:comment>A specialization of #$RoadVehicle.  Each instance
            of #$Truck is a road vehicle designed to carry both
            passengers and (relatively heavy) cargo.  A typical instance
            of #$Truck has a cab area for the driver, as well as a large
            cargo area separate from the cab.  The cargo area of a truck
            may be open (as in many instances of #$PickupTruck) or
            closed (as in most instances of #$SemiTrailer-Truck).  Some
            specializations of #$Truck are #$DumpTruck, #$FireTruck, and #$GarbageTruck.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle-InternalCombustionEngine"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TrueContinent">
        <rdfs:label xml:lang="en">true continents</rdfs:label>
        <rdfs:comment>A specialization of both #$LandBody and
            #$Continent (q.v.).  The  current instances of
            #$TrueContinent (on the #$PlanetEarth) are the  four main
            land masses on the surface of the earth that are surrounded
            by water: #$EasternContinent (which includes Africa, Asia,
            and Europe),  #$WesternContinent (which includes North and
            South America),  #$ContinentOfAntarctica, and #$ContinentOfAustralia.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Continent"/>
        <rdfs:subClassOf rdf:resource="#LandBody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Trunk-BodyCore">
        <rdfs:label xml:lang="en">#$Trunk-BodyCore</rdfs:label>
        <rdfs:comment>#$Trunk-BodyCore is a specialization of
            #$ExternalAnatomicalPart and #$AnimalBodyPart.  Each
            instance of #$Trunk-BodyCore is a body core of a vertebrate.
            A #$Trunk-BodyCore is the main portion of the animal&apos;s
            body, generally located centrally, and one can conceive of
            an animal&apos;s body as a #$Trunk-BodyCore to which are
            connected the head and various appendages which together
            make up the entire body.  To refer to a human
            #$Trunk-BodyCore use the more specific term, #$Torso.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#ExternalAnatomicalPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TruthFunction">
        <rdfs:label xml:lang="en">truth function</rdfs:label>
        <rdfs:comment>A major subcollection of #$Relation that subsumes
            the collections #$Predicate, #$LogicalConnective, and
            #$Quantifier (qq.v.). Truth-functions, or rather the
            expressions that represent or denote them, are used to form
            sentences.  More precisely, any CycL expression that denotes
            an instance of #$TruthFunction (and only such an expression)
            can appear in the  0th  (or  arg0 ) position (i.e. as the
            term immediately following the opening parenthesis) of a
            #$CycLSentence.  The name `TruthFunction&apos; derives in
            part from the fact that the sentences thus formed (if
            semantically well-formed and quantificationally closed; see
            #$CycLSentence-Assertible and #$CycLClosedSentence) are the
            kind of expression that can be true or false (with respect
            to a given context and interpretation).  Though not really
            functions (cf. #$Function-Denotational), #$TruthFunctions
            are  truth-functional  in the sense that the truth-value of
            a (closed, semantically well-formed) sentence (RELN
            ARG1..ARGN) built using a truth-function RELN is uniquely
            determined (with respect to a given context) by RELN
            together with the argument(s) ARG1..ARGN to which it is
            applied.  For example, the sentence `(#$mother
            #$ChelseaClinton #$HillaryClinton)&apos; is made true (in
            the actual world) by the fact that Chelsea Clinton&apos;s
            mother is Hillary Clinton.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="TruthValue">
        <rdfs:label xml:lang="en">truths</rdfs:label>
        <rdfs:comment>#$TruthValue is a collection of mathematical
            objects; it contains the abstract, logical objects #$True
            and #$False.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TubeShape">
        <rdfs:label xml:lang="en">tube shape</rdfs:label>
        <rdfs:comment>A specialization of #$CylinderShape. Each instance
            of #$TubeShape is a hollow cylinder whose height is much
            greater than the radius of its base. Examples include
            spatially localized objects, such as pipes and hoses, as
            well as some abstract cylinders.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CylinderShape"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tuesday">
        <rdfs:label xml:lang="en">Tues</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Tuesday is the collection of all  (and
            only) tuesdays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tumor">
        <rdfs:label xml:lang="en">#$Tumor</rdfs:label>
        <rdfs:comment>A specialization of #$OrganismPart.  Each instance
            of #$Tumor is an abnormal tissue mass found in an animal.
            Instances of #$Tumor include both malignant (cancerous --
            see the collection #$Cancer) and benign (non-cancerous)
            growths which have no normal physiological cause or function.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tundra">
        <rdfs:label xml:lang="en">tundra</rdfs:label>
        <rdfs:comment>A specialization of #$GroundHasPermaFrost. Each
            instances is characterized by permanently frozen treeless
            land supporting a growth of mosses,  lichens, grasses,
            rushes, and very few other forms of plant life.  Source: The
            Times Atlas of the World (1995).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#GroundHasPermaFrost"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Tuple">
        <rdfs:label xml:lang="en">tuple</rdfs:label>
        <rdfs:comment>A specialization of both #$MathematicalObject and
            #$StructuredInformationSource.  Each instance of #$Tuple is
            a complex consisting of one or more indexed (and possibly
            ordered)  components; it might be a single, a pair, a
            triple, or so on;  and the components might be things of any
            sort whatsoever (see  #$tupleMembers).  For example, a
            specialization of #$Tuple is  #$NTupleOfIntervals (q.v.),
            whose instances are tuples consisting  exclusively of
            #$ScalarIntervals (q.v.); e.g. complex numbers  and physical
            vectors are n-tuple-intervals.  Another  specialization of
            #$Tuple is #$List (q.v.), whose instances  are ordered.
            Each tuple has an associated  index set : the  set of things
            that serve (via an associated  indexing function )  to index
            or individually represent the tuple&apos;s members (see
            #$tupleIndexSet and #$tupleMemberIndex).  If the index set
            for  a given tuple is the set of positive integers (or an
            initial  segment thereof), then the integers&apos; usual
            ordering serves to  order the tuple&apos;s components, and
            the tuple is in fact an  _ordered_n-tuple_, i.e. it is a
            #$List.  But in general any set  (e.g. the column names in a
            relational database) may be used to  index the components of
            a tuple.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TurningOffPoweredDevice">
        <rdfs:label xml:lang="en">turning off</rdfs:label>
        <rdfs:comment>A specialization of #$ChangingDeviceState.  Each
            instance of #$TurningOffPoweredDevice is an event in which
            the #$DeviceState of some instance of #$PhysicalDevice
            changes from #$DeviceOn to #$DeviceOff.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChangingDeviceState"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TurningOnPoweredDevice">
        <rdfs:label xml:lang="en">turning on</rdfs:label>
        <rdfs:comment>The collection of actions in which the
            #$DeviceState of a #$PhysicalDevice changes from #$DeviceOff
            to #$DeviceOn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ChangingDeviceState"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Twilight">
        <rdfs:label xml:lang="en">twilights</rdfs:label>
        <rdfs:comment>A specialization of #$QualitativeTimeOfDay.
            #$Twilight is union of the two collections of events, #$Dawn
            and #$Dusk.  Each #$Twilight is an event during which the
            sky is indirectly illuminated by the #$Sun, either just
            before an instance of #$Sunrise or just after an instance of #$Sunset.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TwoDimensionalGeometricThing">
        <rdfs:label xml:lang="en">#$TwoDimensionalGeometricThing</rdfs:label>
        <rdfs:comment>The collection of #$GeometricallyDescribableThings
            (q.v.) that are two-dimensional. Each instance of
            #$TwoDimensionalGeometricThing is a two-dimensional object
            whose shape is describable in geometric terms. Examples
            include tangible objects, such as the flat (two-dimensional)
            tangible surface of an oval tabletop, as well as abstract
            two-dimensional objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:subClassOf rdf:resource="#GeometricallyDescribableThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TwoDimensionalShapeType">
        <rdfs:label xml:lang="en">#$TwoDimensionalShapeType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$TwoDimensionalShapeType is a specialization of #$TwoDimensionalGeometricThing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
    </owl:Class>
    <owl:Class rdf:ID="TwoOrHigherDimensionalThing">
        <rdfs:label xml:lang="en">things with two or more dimensions</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing each instance
            of which is either a two- or three- (or higher-) dimensional
            spatial object.  Examples include tangible or intangible
            spatially-localized polydimensional objects, such as the
            flat surface of a tabletop and the table itself, as well as
            abstract geometrical objects that are at least
            two-dimensional, such as a Platonic cube.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TwoStoryBuilding">
        <rdfs:label xml:lang="en">two-stories</rdfs:label>
        <rdfs:comment>#$TwoStoryBuilding is a specialization of
            #$Building.  Each instance is a building with exactly two stories.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="TypeInstanceTernaryRuleMacroPredicate">
        <rdfs:label xml:lang="en">type-instance ternary rule macro predicates</rdfs:label>
        <rdfs:comment>A specialization of #$RuleMacroPredicate and
            #$TernaryPredicate.  Each instance of
            #$TypeInstanceTernaryRuleMacroPredicate relates a collection
            in its second argument place to an instance of #$Thing in
            its third argument place via an instance of
            #$BinaryPredicate in its first argument place.  Examples of
            instances of this collection include #$relationAllInstance
            and #$relationExistsInstance.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#RuleMacroPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TypePredicate">
        <rdfs:label xml:lang="en">type predicate</rdfs:label>
        <rdfs:comment>A collection of predicates. Each instance of
            #$TypePredicate is a predicate used in asserting relations
            between #$Collections, or between #$Individuals and
            #$Collections, which in turn imply further assertions
            involving instances of the #$Collections. Example instances:
            #$primaryActivityType, #$insuredEventTypes,
            #$anatomicalPartTypeAffected, #$frequencyOfActionType, #$objectTypesCollected.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </owl:Class>
    <owl:Class rdf:ID="TypeTypeTernaryRuleMacroPredicate">
        <rdfs:label xml:lang="en">type-type ternary rule macro predicates</rdfs:label>
        <rdfs:comment>A specialization of #$RuleMacroPredicate and
            #$TernaryPredicate.  Each instance of
            #$TypeTypeTernaryRuleMacroPredicate relates collections in
            its second and third argument places via an instance of
            #$BinaryPredicate in its first argument place.  Notable
            instances include #$relationAllExists and #$relationExistsAll.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#RuleMacroPredicate"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLArgListsExpression">
        <rdfs:label xml:lang="en">ArgListsExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            ArgListsExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLBehavioralFeature">
        <rdfs:label xml:lang="en">UML BehavioralFeature</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            BehavioralFeature objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLFeature"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLBehavioralFeature-IsNotQuery">
        <rdfs:label xml:lang="en">u m l behavioral feature - is not query</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLBehavioralFeature objects which have isQuery false.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLBehavioralFeature"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLBehavioralFeature-IsQuery">
        <rdfs:label xml:lang="en">u m l behavioral feature - is query</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLBehavioralFeature objects which have isQuery true.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLBehavioralFeature"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLBoolean">
        <rdfs:label xml:lang="en">Boolean</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Boolean type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLBooleanExpression">
        <rdfs:label xml:lang="en">BooleanExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            BooleanExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCallEvent">
        <rdfs:label xml:lang="en">CallEvent</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            CallEvent objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLChangeEvent">
        <rdfs:label xml:lang="en">ChangeEvent</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            ChangeEvent objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCharacter">
        <rdfs:label xml:lang="en">Character</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Character type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLClassifier">
        <rdfs:label xml:lang="en">Classifier</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Classifier objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCompletionEvent">
        <rdfs:label xml:lang="en">CompletionEvent</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            CompletionEvent objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCompositeState">
        <rdfs:label xml:lang="en">CompositeState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            CompositeState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCompositeState-IsConcurrent">
        <rdfs:label xml:lang="en">concurrent CompositeState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            CompositeState objects which have concurrent regions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLCompositeState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLCompositeState-IsNotConcurrent">
        <rdfs:label xml:lang="en">non-concurrent CompositeState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            CompositeState objects which do have have concurrent regions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLCompositeState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLDouble">
        <rdfs:label xml:lang="en">Double</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Double
            type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLElement">
        <rdfs:label xml:lang="en">UML Element</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Element objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLSyntaxObject"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLEvent">
        <rdfs:label xml:lang="en">Event (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Event objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLExpression">
        <rdfs:label xml:lang="en">Expression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Expression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasLanguage"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasBody"/>
        <rdfs:subClassOf rdf:resource="#UMLSyntaxObject"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFeature">
        <rdfs:label xml:lang="en">UML Feature</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Feature objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFeature-Classifier">
        <rdfs:label xml:lang="en">UML Feature Classifier</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLFeature objects which appear once for all instances of
            the owning #$UMLClassifier.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFeature-Instance">
        <rdfs:label xml:lang="en">UML Feature Instance</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLFeature objects which appear in each instance of the
            owning #$UMLClassifier.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFinalState">
        <rdfs:label xml:lang="en">FinalState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            FinalState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFloat">
        <rdfs:label xml:lang="en">Float</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Float
            type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLFort">
        <rdfs:label xml:lang="en">u m l fort</rdfs:label>
        <rdfs:comment>The KB subset collection of
            #$UnifiedModelingLanguage terms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLGuard">
        <rdfs:label xml:lang="en">Guard</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Guard objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasTransition"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLInputPin">
        <rdfs:label xml:lang="en">InputPin</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            InputPin objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPin"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLInteger">
        <rdfs:label xml:lang="en">Integer (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Integer type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLLong">
        <rdfs:label xml:lang="en">Long</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Long
            type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLMappingExpression">
        <rdfs:label xml:lang="en">MappingExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            MappingExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement">
        <rdfs:label xml:lang="en">UML ModelElement</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            ModelElement objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement-HasBody">
        <rdfs:label xml:lang="en">u m l model element - has body</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage model
            elements which have a body written in an associated
            programming language.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement-HasLanguage">
        <rdfs:label xml:lang="en">UML programming language</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage model
            elements which have an associated programming language.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement-HasStateMachineLink">
        <rdfs:label xml:lang="en">UML State</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage model
            elements which have an associated state.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement-HasTransition">
        <rdfs:label xml:lang="en">u m l model element - has transition</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage model
            elements which have an associated transition.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLModelElement-HasType">
        <rdfs:label xml:lang="en">u m l model element - has type</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage model
            elements which have an associated Classifier type.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLNamespace">
        <rdfs:label xml:lang="en">Namespace</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Namespace objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation">
        <rdfs:label xml:lang="en">Operation (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Operation objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLBehavioralFeature"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-Concurrent">
        <rdfs:label xml:lang="en">guarded operation</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which operate concurrently.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-Guarded">
        <rdfs:label xml:lang="en">UML guarded Operation</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which operate in a concurrent
            environment and are guarded.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsAbstract">
        <rdfs:label xml:lang="en">u m l operation - is abstract</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which are abstract and cannot be instantiated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsLeaf">
        <rdfs:label xml:lang="en">u m l operation - is leaf</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects whose operation definition must not
            be overriden by descendant class declaration of the same operation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsNotAbstract">
        <rdfs:label xml:lang="en">u m l operation - is not abstract</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which are concrete and can be instantiated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsNotLeaf">
        <rdfs:label xml:lang="en">u m l operation - is not leaf</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects whose operation definition may be
            overriden by descendant class declaration of the same operation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsNotRoot">
        <rdfs:label xml:lang="en">u m l operation - is not root</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which may inherit a declaration of
            the same operation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-IsRoot">
        <rdfs:label xml:lang="en">u m l operation - is root</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which must not inherit a declaration
            of the same operation.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOperation-Sequential">
        <rdfs:label xml:lang="en">UML sequential Operation</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            #$UMLOperation objects which operate sequentially.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLOperation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLOutputPin">
        <rdfs:label xml:lang="en">OutputPin</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            OutputPin objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPin"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLParameter">
        <rdfs:label xml:lang="en">Parameter</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Parameter objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasType"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLParameter-InDirection">
        <rdfs:label xml:lang="en">input parameter</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Parameter objects which are input parameters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLParameter"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLParameter-InOutDirection">
        <rdfs:label xml:lang="en">input/output parameter</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Parameter objects which are are both input and output parameters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLParameter"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLParameter-OutDirection">
        <rdfs:label xml:lang="en">output parameter</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Parameter objects which are are output parameters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLParameter"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLParameter-ReturnDirection">
        <rdfs:label xml:lang="en">return parameter</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Parameter objects which are are return parameters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLParameter"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPin">
        <rdfs:label xml:lang="en">Pin</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Pin objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasType"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPin-Ordered">
        <rdfs:label xml:lang="en">ordered Pin</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Pin
            objects whose values are ordered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPin"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPin-Unordered">
        <rdfs:label xml:lang="en">unordered Pin</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Pin
            objects whose values are unordered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPin"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveBoolean">
        <rdfs:label xml:lang="en">UML Boolean</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive boolean type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveChar">
        <rdfs:label xml:lang="en">char</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive char type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveDouble">
        <rdfs:label xml:lang="en">double</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive double type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveFloat">
        <rdfs:label xml:lang="en">float</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive float type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveInt">
        <rdfs:label xml:lang="en">int</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive int type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPrimitiveLong">
        <rdfs:label xml:lang="en">UML long</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            primitive long type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLProcedure">
        <rdfs:label xml:lang="en">Procedure (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Procedure objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasLanguage"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasBody"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLProcedure-IsList">
        <rdfs:label xml:lang="en">UML Procedure isList</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Procedure objects which have a single list request object
            and single response list object.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLProcedure"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLProcedure-IsNotList">
        <rdfs:label xml:lang="en">UML Procedure isList</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Procedure objects which have zero, or one or more request
            objects and zero or one or more response list objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLProcedure"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLProcedureExpression">
        <rdfs:label xml:lang="en">ProcedureExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            ProcedureExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState">
        <rdfs:label xml:lang="en">PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLStateVertex"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-Choice">
        <rdfs:label xml:lang="en">choice PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are execution choice points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-DeepHistory">
        <rdfs:label xml:lang="en">deep history PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are deep history entry points into
            a nested state hierarchy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-Fork">
        <rdfs:label xml:lang="en">fork PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are execution fork points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-Initial">
        <rdfs:label xml:lang="en">initial PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are initial execution points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-Join">
        <rdfs:label xml:lang="en">join PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are execution join points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-Junction">
        <rdfs:label xml:lang="en">junction PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are execution junction points.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLPseudoState-ShallowHistory">
        <rdfs:label xml:lang="en">shallow history PseudoState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            PseudoState objects which are shallow history entry points
            into a nested state hierarchy.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLPseudoState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSignal">
        <rdfs:label xml:lang="en">Signal (type of thing)</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage Signal objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSignalEvent">
        <rdfs:label xml:lang="en">SignalEvent</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            SignalEvent objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSimpleState">
        <rdfs:label xml:lang="en">SimpleState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            SimpleState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLState">
        <rdfs:label xml:lang="en">State</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage State objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasStateMachineLink"/>
        <rdfs:subClassOf rdf:resource="#UMLStateVertex"/>
        <rdfs:subClassOf rdf:resource="#StaticSituation"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLStateMachine">
        <rdfs:label xml:lang="en">finite state machine</rdfs:label>
        <rdfs:comment>#$UMLStateMachine is the collection of
            #$UnifiedModelingLanguage state machines. Cyc can use them
            to design, model and implement its own behavior.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasTransition"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLStateVertex">
        <rdfs:label xml:lang="en">StateVertex</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            StateVertex objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLString">
        <rdfs:label xml:lang="en">String</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage String
            type objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLClassifier"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLStubState">
        <rdfs:label xml:lang="en">StubState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            StubState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSubmachineState">
        <rdfs:label xml:lang="en">SubmachineState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            SubmachineState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLCompositeState"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSynchState">
        <rdfs:label xml:lang="en">SynchState</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            SynchState objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLStateVertex"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLSyntaxObject">
        <rdfs:label xml:lang="en">u m l syntax object</rdfs:label>
        <rdfs:comment>The collection of syntax objects which are
            elements of the #$UnifiedModelingLanguage (UML).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramSyntaxObject"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLTimeEvent">
        <rdfs:label xml:lang="en">TimeEvent</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            TimeEvent objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLEvent"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLTimeExpression">
        <rdfs:label xml:lang="en">TimeExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            TimeExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLTransition">
        <rdfs:label xml:lang="en">Transition</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            Transition objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLModelElement-HasStateMachineLink"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <rdfs:subClassOf rdf:resource="#UMLModelElement"/>
    </owl:Class>
    <owl:Class rdf:ID="UMLTypeExpression">
        <rdfs:label xml:lang="en">TypeExpression</rdfs:label>
        <rdfs:comment>The collection of #$UnifiedModelingLanguage
            TypeExpression objects.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UMLExpression"/>
    </owl:Class>
    <owl:Class rdf:ID="USCity">
        <rdfs:label xml:lang="en">American cities</rdfs:label>
        <rdfs:comment>A specialization of #$City each instance of which
            is a city, town, or village in the #$UnitedStatesOfAmerica.
            Instances of #$USCity include #$CityOfAustinTX,
            #$CityOfGainesvilleFL, and #$CityOfLongBeachCA.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
        <rdfs:subClassOf rdf:resource="#City"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="USFederalGovernmentOrganization">
        <rdfs:label xml:lang="en">u s federal government organization</rdfs:label>
        <rdfs:comment>A collection of government organizations.  An
            instance of #$USFederalGovernmentOrganization is an
            instance of #$LegalGovernmentOrganization which is part of
            the #$UnitedStatesFederalGovernment. This collection
            includes the US military,  Federal courts, US Congress, US
            territorial governments, Federal departments  and
            independent agencies, and the city of Washington DC.  It
            does _not_  include US states, interstate compacts, and
            cities (other than Washington  DC).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UltraSound">
        <rdfs:label xml:lang="en">ultrasound</rdfs:label>
        <rdfs:comment>A specialization of #$Sound.  Each instance of
            #$UltraSound is a sound wave having a #$Frequency (q.v.)
            greater than 20,000 cycles per second, a frequency which is
            above the range of human hearing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sound"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnalloyedMetal">
        <rdfs:label xml:lang="en">unalloyed metals</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subcollection
            of #$Metal.  Every instance of #$UnalloyedMetal is a metal
            which is also an element, i.e., a substance of unmixed
            chemical type.  Thus, each subcollection of #$UnalloyedMetal
            is a subcollection of both #$Metal and #$ElementStuff.
            Examples of #$UnalloyedMetal include #$Gold, #$Iron,
            #$Uranium, #$Antimony, #$Titanium, and many more.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Metal"/>
        <rdfs:subClassOf rdf:resource="#ElementStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnaryFunction">
        <rdfs:label xml:lang="en">#$UnaryFunction</rdfs:label>
        <rdfs:comment>A specialization of both #$FixedArityFunction and
            #$UnaryRelation (qq.v.).  Each instance of #$UnaryFunction
            is a function that always takes a single argument, i.e. has
            an arity (see #$arity) of 1.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityFunction"/>
        <rdfs:subClassOf rdf:resource="#Function-MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#UnaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="UnaryIntersectionFunction">
        <rdfs:label xml:lang="en">unary intersection functions</rdfs:label>
        <rdfs:comment>#$UnaryIntersectionFunction are unary, reifiable,
            collection denoting functions which are used to generate
            collections that are the intersection of a specific
            collection and arg 1 of its use.  Example elements are
            #$JuvenileFn, #$LeftFn, #$RightFn and #$SolidFn.  See also
            #$intersectionType which is used to state the intersection collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#UnaryFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="UnaryPredicate">
        <rdfs:label xml:lang="en">#$UnaryPredicate</rdfs:label>
        <rdfs:comment>A specialization of both #$UnaryRelation and
            #$Predicate.  #$UnaryPredicate is the collection of all
            predicates whose arity (see #$arity) is 1.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#UnaryRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="UnaryProgramOperator">
        <rdfs:label xml:lang="en">unary program operator</rdfs:label>
        <rdfs:comment>This is the collection of unary operators found in
            programming languages.  For example, the  ++  operator in
            the C language is an unary operator.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramOperator"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnaryRelation">
        <rdfs:label xml:lang="en">unary relations</rdfs:label>
        <rdfs:comment>The collection of all fixed-arity relations of
            arity 1 (see #$arity).  The most notable specializations of
            #$UnaryRelation are #$UnaryPredicate and #$UnaryFunction (qq.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="Uneasiness">
        <rdfs:label xml:lang="en">uneasiness</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="UnemployedPerson">
        <rdfs:label xml:lang="en">unemployed people</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$UnemployedPerson is a worker who is unemployed.  An
            unemployed worker is someone who either has worked
            previously and could still do so (if s/he had a job), or
            someone who is qualified to work (e.g., a recent graduate)
            but has not yet worked.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UniformResourceLocator">
        <rdfs:label xml:lang="en">URL</rdfs:label>
        <rdfs:comment>A specialization of #$ContactInfoString.
            Instances of this collection are commonly called  web
            addresses .  Each instance of #$UniformResourceLocator
            (often abbreviated  URL ) is a string that can be used to
            specify an object on the #$Internet, such as a #$WebPage-CW
            or #$InternetNewsgroup. The first part of a URL is the name
            of a particular #$InternetProtocol, such as http, ftp, news,
            telnet, or mailto, and is followed by a colon. The part
            immediately following the first colon is different for each
            protocol, but generally is a string of characters
            identifying a file location, a username, and/or a password.
            Some URLs have a third part, consisting of &apos;?&apos;  or
            &apos;#&apos; followed by a query string or the name of a
            location within a web page. Examples include
            ftp://ftp.downlodes.com/pub/stuff/file.zip,
            http://www.myorg.org/index.html, news:alt.hypertext, mailto:santa@northpole.com.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ContactInfoString"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </owl:Class>
    <owl:Class rdf:ID="UnintendedLossOfUserRights">
        <rdfs:label xml:lang="en">#$UnintendedLossOfUserRights</rdfs:label>
        <rdfs:comment>A subcollection of #$LosingUserRights (q.v.) whose
            instances involve a loss of some #$UserRightsAttribute that
            was not deliberate or intended by the agent who loses the
            user-right in question.  For example, having something
            stolen or appropriated, or (in some cases) losing something.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UniqueAnatomicalPartType">
        <rdfs:label xml:lang="en">types of unique anatomical part</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances are types
            of #$OrganismParts that occur uniquely in the organisms
            (#$Organism-Whole) that have them.  For example, #$Head-AnimalBodyPart.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganismPartType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="UniqueID">
        <rdfs:label xml:lang="en">unique i d</rdfs:label>
        <rdfs:comment>A specialization of #$IDObject.  Each instance of
            #$UniqueID is an object that can be used as unique
            identification for a distinct entity.  Instances of this
            collection are typically strings or numbers.  Notable
            specializations of this collection are
            #$SocialSecurityNumber, #$IPAddress, and #$MedicareNumber.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IDObject"/>

    </owl:Class>
    <owl:Class rdf:ID="UnitOfAcceleration">
        <rdfs:label xml:lang="en">units of acceleration</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfRate. Each instance of
            #$UnitOfAcceleration is a function which returns an instance
            of #$Acceleration (q.v.) when applied to a real number (see
            the collection #$SubLRealNumber) or a sequence of two real
            numbers. For instance, (#$MetersPerSecondPerSecond 32) is an
            acceleration of 32 meters per second per second.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfAngularAcceleration">
        <rdfs:label xml:lang="en">units of angular acceleration</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$AngularAccelerationRate (i.e., the rate of change in
            the #$RateOfRotation).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfAngularDistance">
        <rdfs:label xml:lang="en">units of angular distance</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$AngularDistance.  E.g., (#$Radian 5) denotes 5 radians.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfAngularSpeed">
        <rdfs:label xml:lang="en">units of angular speed</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$RateOfRotation.  E.g., (#$RadiansPerSecond 5) denotes a
            change of 5 radians in angular distance per second.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfArea">
        <rdfs:label xml:lang="en">units of area</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure. Each instance
            of #$UnitOfArea is a function which returns an instance of
            #$Area (q.v.) when applied to a real number (see the
            collection #$SubLRealNumber) or a sequence of two real
            numbers. For instance, (#$SquareMeter 9) is an area of 9
            square meters.  Instances of #$UnitOfArea include
            #$SquareMile, #$SquareMeter, and #$SquareInch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfBandwidth">
        <rdfs:label xml:lang="en">units of bandwidth</rdfs:label>
        <rdfs:comment>A specialization of
            #$UnitOfComputerResourceCapacity. Each instance of this
            collection represents a standard unit of computer bandwidth
            (the maximum speed at which data can be transmitted between
            computers in a network).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfComputerResourceCapacity"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfCPUCapacity">
        <rdfs:label xml:lang="en">units of CPU capacity</rdfs:label>
        <rdfs:comment>A specialization of
            #$UnitOfComputerResourceCapacity. Each instance of this
            collection represents a  unit (or  benchmark ) used to
            measure CPU (central processing unit) power. Instances
            include #$MIPS ( Millions of Instructions per Second ),
            #$SPECfp, and #$TransactionsPerSecond.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfComputerResourceCapacity"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfCapacitance">
        <rdfs:label xml:lang="en">units of capacitance</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure. Each instance
            of #$UnitOfCapacitance is a function which returns an
            instance of #$ElectricalCapacitance (q.v.) when applied to a
            real number (see the collection #$SubLRealNumber) or a
            sequence of two real numbers. For instance, (#$Farad 20) is
            a capacitance of 20 farads.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfCharge">
        <rdfs:label xml:lang="en">units of charge</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ElectricalCharge.  E.g., (#$Coulomb 3) denotes an
            electrical charge of 3 coulombs.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfComputerResourceCapacity">
        <rdfs:label xml:lang="en">units of computer resource capacity</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of this collection is a unit which may be used to
            measure the various capacities that a computer can have,
            such as memory, CPU and disk capacities. Instances of this
            collection include #$Baud and #$Byte. Specializations of
            this collection include #$UnitOfBandwidth and #$UnitOfCPUCapacity.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfConcentration">
        <rdfs:label xml:lang="en">units of concentration</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure. Each instance
            of #$UnitOfConcentration is a function which returns an
            instance of #$ConcentrationStrength-Generic (q.v.) when
            applied to a real number (see the collection
            #$SubLRealNumber) or a sequence of two real numbers. For
            instance, (#$GramsPerMilliliter 1) is a concentration of 1
            gram per milliliter.  Instances of #$UnitOfConcentration
            include #$GramsPerMilliliter, #$MilligramsPerMilliliter, and #$MicrogramsPerMilliliter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfCurrent">
        <rdfs:label xml:lang="en">units of current</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ElectricalCurrentLevel.  E.g., (#$Ampere 2) denotes an
            instance of #$ElectricalCurrentLevel that would measure two amps.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfDistance">
        <rdfs:label xml:lang="en">units of distance</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of #$UnitOfDistance is a function which, when
            applied to a number or pair of numbers, returns an instance
            of #$Distance as its value.  Instances of #$UnitOfDistance
            include #$Inch and #$Meter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfEnergy">
        <rdfs:label xml:lang="en">units of energy</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$EnergyAsAQuantity.  E.g., (#$Joule 5) denotes 5 joules.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfFlowRate">
        <rdfs:label xml:lang="en">units of flow rate</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$FlowRate (i.e.,volume of stuff passing a point per unit
            of time).  E.g., (#$CubicMeterPerSec 2000) denotes a
            #$FlowRate of 2000 cubic meters per second.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfFrequency">
        <rdfs:label xml:lang="en">units of frequency</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfRate, and the
            collection of functions used to express how often something
            occurs during an interval of time.  Each instance of
            #$UnitOfFrequency is a function which returns an instance of
            #$Frequency when applied to a real number.  For example,
            (#$MegaHertz 89.5) returns a frequency of 89.5 MHz.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMass">
        <rdfs:label xml:lang="en">units of mass</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Mass.  E.g. (#$Kilogram 5) denotes 5 kilograms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMeasure">
        <rdfs:label xml:lang="en">units of measure</rdfs:label>
        <rdfs:comment>#$UnitOfMeasure is the collection of all functions
            which return elements of #$ScalarInterval that describe
            physical quantities such as #$Speed, #$Volume, etc.  Those
            functions are usually grouped into subsets depending on what
            they measure (e.g., #$UnitOfSpeed,#$UnitOfVolume).
            Functions which belong to #$UnitOfMeasure are variable-arity
            relations that take either one or two arguments, both of
            which must be elements of #$SubLRealNumber. If only one
            argument is given (e.g. (#$Meter 5)), the expression stands
            for a precise quantity (here, 5 meters); see also
            #$ScalarPointValue.  If two arguments are given (e.g.
            (#$Meter 5 10)), the expression stands for a closed interval
            and the arguments are interpreted as the interval&apos;s
            mininum and maximum, respectively. Following are a few
            example uses of some elements of #$UnitOfMeasure :
            `10 years&apos;: (#$YearsDuration 10)            `2
            feet&apos;: (#$Foot-UnitOfMeasure 2)            `50 dollars
            and 2 cents&apos;: (#$Dollar-UnitedStates 50.02)
            `between 1 and 50 pounds per square inch, inclusive&apos;:
            (#$PoundsPerSquareInch 1 50)            `dimensionless
            quantity between 3 and 4.1, inclusive&apos;: (#$Unity 3 4.1).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VariableArityFunction"/>
        <rdfs:subClassOf rdf:resource="#UnreifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMeasureNoPrefix">
        <rdfs:label xml:lang="en">units of measure without a prefix</rdfs:label>
        <rdfs:comment>Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMeasureTypeBySystem">
        <rdfs:label xml:lang="en">#$UnitOfMeasureTypeBySystem</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance is a
            spec of #$UnitOfMeasure whose instances are all of the same system.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#FunctionCategory"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMeasureTypeByTypeMeasured">
        <rdfs:label xml:lang="en">#$UnitOfMeasureTypeByTypeMeasured</rdfs:label>
        <rdfs:comment>A collection of collections. Each instance is a
            spec of #$UnitOfMeasure whose instances are all of the same
            type measured.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
        <rdfs:subClassOf rdf:resource="#FunctionCategory"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMeasureWithPrefix">
        <rdfs:label xml:lang="en">unit of measure with prefix</rdfs:label>
        <rdfs:comment>Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMonetaryFlowRate">
        <rdfs:label xml:lang="en">units of monetary flow rate</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$MonetaryFlowRate (i.e. transfer of money per unit of
            time).  E.g., (#$DollarsPerHour 10) denotes a
            #$MonetaryFlowRate of $10 per hour.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfMoney">
        <rdfs:label xml:lang="en">units of money</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure. Each instance
            of #$UnitOfMoney is a function which returns an instance of
            #$MonetaryValue (q.v.) when applied to a real number (see
            the collection #$SubLRealNumber) or a sequence of two real
            numbers.  For instance, (#$Cent-UnitedStates 2) is 2 U.S.
            cents.  Instances of #$UnitOfMoney include
            #$Dollar-UnitedStates, #$Peso-Mexico, and #$Yen-Japan.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfPower">
        <rdfs:label xml:lang="en">units of power</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Power.  E.g., (#$Watt 5) denotes 5 watts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfPressure">
        <rdfs:label xml:lang="en">units of pressure</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of #$UnitOfPressure is a function which returns an
            instance of #$Pressure (q.v.) when applied to a real number
            (see the collection #$SubLRealNumber) or a sequence of two
            real numbers. For instance, (#$PoundsPerSquareInch 500) is a
            pressure of 500 pounds per square inch.  Instances of
            #$UnitOfPressure include #$Bar-UnitOfPressure,
            #$Pascal-UnitOfPressure, and #$PoundsPerSquareInch.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfRate">
        <rdfs:label xml:lang="en">units of rate</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure.  Each
            instance of #$UnitOfRate is a function which returns an
            instance of #$Rate when applied to a real number (see the
            collection #$SubLRealNumber) or a sequence of two real
            numbers.  This collection includes any instance of
            #$UnitOfMeasure whose #$unitOfMeasureExpansions list
            includes the factor (-1 #$UnitOfTime).  Notable
            specializations include #$UnitOfSpeed, #$UnitOfFrequency,
            and #$UnitOfPower.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfSpeed">
        <rdfs:label xml:lang="en">units of speed</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfRate. Each instance of
            #$UnitOfSpeed is a function which returns an instance of
            #$Speed (q.v.) when applied to a real number (see the
            collection #$SubLRealNumber) or a sequence of two real
            numbers. For instance, (#$MilesPerHour 212) is a speed of
            212 miles per hour. Instances of #$UnitOfSpeed include
            #$MilesPerHour, #$MetersPerSecond, and #$Mach-UnitOfSpeed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfTemperature">
        <rdfs:label xml:lang="en">units of temperature</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Temperature.  E.g., (#$DegreeFahrenheit 451) denotes a
            #$Temperature of 451 F.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfTime">
        <rdfs:label xml:lang="en">unit of times</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Time-Quantity; e.g., (#$YearsDuration 100) returns a
            time period equal to a century.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfVoltage">
        <rdfs:label xml:lang="en">units of voltage</rdfs:label>
        <rdfs:comment>A specialization of #$UnitOfMeasure. Each instance
            of #$UnitOfVoltage is a function which returns an instance
            of #$Voltage (q.v.) when applied to a real number (see the
            collection #$SubLRealNumber) or a sequence of two real
            numbers. For instance, (#$Volt 500) is a voltage of 500 volts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitOfVolume">
        <rdfs:label xml:lang="en">units of volume</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Volume.  E.g., (#$Liter 5) denotes 5 liters.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitVector-Precise">
        <rdfs:label xml:lang="en">vector intervals with a magnitude of 1
            and a precisely specified direction</rdfs:label>
        <rdfs:comment>A specialization of both #$Vector-Precise and
            #$UnitVectorInterval.  Each instance of #$UnitVector-Precise
            is a vector interval with a magnitude of 1 and a precisely
            specified direction (e.g., due North, straight down).  Thus,
            one precise unit vector differs from another only in
            direction, since each vector consists of a magnitude and a
            direction (in a space of n &gt; 1 dimensions).  So instances
            of #$UnitVector-Precise in effect indicate different
            directions such as `straight up&apos; or `due East&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Vector-Precise"/>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitVectorInterval">
        <rdfs:label xml:lang="en">unit vector intervals</rdfs:label>
        <rdfs:comment>The collection #$UnitVectorInterval is a
            subcollection of #$VectorInterval.  Each instance of
            #$UnitVectorInterval is a vector interval with a magnitude
            of 1.  The range of the endpoints of all the unit vectors
            [#$UnitVector-Precise] form a contiguous curve (in 2 space),
            surface (in 3 space), volume (in 4 space), etc. depending
            upon the dimentionality of the vector.  One
            #$UnitVectorInterval differs from another only in range of
            direction, since the magnitude of every #$UnitVectorInterval
            is the same.  An instance of #$UnitVectorInterval may
            specify either a precise unit vector [#$UnitVector-Precise]
            or a generalized range of directions such as `in front
            of&apos;.  The range of directions in 3-space may be quite
            irregular, such as the direction interval from #$Chile to #$Russia.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitedStatesPerson">
        <rdfs:label xml:lang="en">American people</rdfs:label>
        <rdfs:comment>An instance of #$Nationality.  Each instance of
            #$UnitedStatesPerson is a person who either was born in the
            #$UnitedStatesOfAmerica or is currently among that
            country&apos;s citizens (see the predicate #$citizens).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnitedStatesPresident">
        <rdfs:label xml:lang="en">#$UnitedStatesPresident</rdfs:label>
        <rdfs:comment>A specialization of both #$UnitedStatesPerson and
            #$President-HeadOfGovernmentOrHeadOfState.  Each instance of
            #$UnitedStatesPresident is a person who holds the office of
            President of the #$UnitedStatesOfAmerica.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PublicOfficial"/>
        <rdfs:subClassOf rdf:resource="#HeadOfGovernment"/>
        <rdfs:subClassOf rdf:resource="#President-HeadOfGovernmentOrHeadOfState"/>
        <rdfs:subClassOf rdf:resource="#HeadOfState"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="University">
        <rdfs:label xml:lang="en">#$University</rdfs:label>
        <rdfs:comment>A specialization of
            #$DegreeGrantingHigherEducationInstitution,
            #$EducationalOrganization, #$ResearchOrganization, and
            #$GeographicalAgent. Instances of #$University are
            educational organizations (whose official names usually, but
            not always, include the word `University&apos;) at which
            university-level teaching and research takes place. Some
            universities comprise multiple  colleges  and professional
            schools.  Note that this collection includes universities
            that lie within a more or less local and spatially
            contiguous campus as well as those that consist of a system
            of such campuses.  Thus both #$UniversityOfTexasAtAustin and
            its encompassing system (see #$subOrganizations)
            #$UniversityOfTexas are instances of #$University.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DegreeGrantingHigherEducationInstitution"/>
        <rdfs:subClassOf rdf:resource="#GeographicalAgent"/>
        <rdfs:subClassOf rdf:resource="#ResearchOrganization"/>
    </owl:Class>
    <owl:Class rdf:ID="UnixOS">
        <rdfs:label xml:lang="en">UNIX operating system</rdfs:label>
        <rdfs:comment>A specialization of #$OperatingSystem. Each
            instance of #$UnixOS is an operating system derived from the
            original #$Unix operating system developed at Bell Labs in
            the 1960&apos;s.  An important specialization of this
            collection is #$LinuxOS.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OperatingSystem"/>
    </owl:Class>
    <owl:Class rdf:ID="UnproductiveLexicalAffix">
        <rdfs:label xml:lang="en">#$UnproductiveLexicalAffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UnreifiableFunction">
        <rdfs:label xml:lang="en">unreifiable functions</rdfs:label>
        <rdfs:comment>A specialization of #$Function-Denotational
            instances of which are such  that their values are not
            reified in the Cyc system.  More precisely, an instance of
            #$UnreifiableFunction is such that closed  NATs  (see
            #$CycLNonAtomicTerm) built from its standard CycL name are
            _not_ instances of  #$HLReifiedDenotationalTerm.   Constrast
            with #$ReifiableFunction.  Usually it is more efficient to
            make functions reifiable; but it is not desirable  to reify
            every non-atomic term, such as those built from (names of)
            instances of #$FunctionFromQuantitiesToQuantities.  For
            example, it would be cumbersome to reify every term of the
            form (#$Inch N) that happened to appear in a CycL assertion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </owl:Class>
    <owl:Class rdf:ID="UrbanArea">
        <rdfs:label xml:lang="en">urban areas</rdfs:label>
        <rdfs:comment>A subcollection of #$HumanResidenceArea.  Each
            instance of #$UrbanArea is a geographical region the whole
            of which (more or less) is characterized by typically  urban
            features (such as streets, buildings, businesses, houses,
            schools, sidewalks, sewer systems, power lines, automobiles,
            pedestrians, and so on).  An urban area might be as small as
            an inner-city street corner or as large as the New York City
            Metropolitan Area.  By default, urbanness is a  stuff-like
            property of human residence areas: (nearly) every subregion
            of an #$UrbanArea is itself an #$UrbanArea.  Examples
            include #$UTAustinCampus, #$WestlakeHills, #$CityOfAustinTX,
            #$CityOfToulouseFrance, #$CityOfMurmanskRussia,
            #$CityOfTaipeiTaiwan, and #$ResearchTrianglePark.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanResidenceArea"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UrgeToSneeze">
        <rdfs:label xml:lang="en">#$UrgeToSneeze</rdfs:label>
        <rdfs:comment>This is a #$Collection of physical urges of a
            certain type, namely the urges that animals have to sneeze
            (and their accompanying internal sensations.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="UsingADevice">
        <rdfs:label xml:lang="en">uses of a device</rdfs:label>
        <rdfs:comment>This is the specialization of #$UsingAnObject
            (q.v.) instances of which involve the use of some
            #$PhysicalDevice.  See also  #$deviceUsed.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ControllingAPhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#UsingAnObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="UsingAnObject">
        <rdfs:label xml:lang="en">using</rdfs:label>
        <rdfs:comment>The collection of all #$Actions of using an
            object.  This refers to actual acts of manipulating/using an
            object, not the general events of which such use would be
            #$subEvents.  If the object being used is a #$PhysicalDevice
            (see #$deviceUsed), employ the more specific collection #$UsingADevice.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Utterance-IBT">
        <rdfs:label xml:lang="en">utterances</rdfs:label>
        <rdfs:comment>A specialization of #$Sound.  Each instance of
            this collection is a sound initially generated by some
            #$Agent speaking or making some sound with his/her mouth (or
            other specifically sonic-information-conveying organ or
            device). Such sounds may or may not have propositional
            content -- that is -- instantiate some
            #$PropositionalInformationThing.  If such a sound is
            recorded and played back, the sound generated is still
            considered an instance of #$Utterance-IBT.  Note that only
            the sounds themselves are instances of this collection --
            not the activities of making them. This collection is not a
            specialization of #$Action. (For that, see
            #$CommunicationAct-Single and its specializations.) An
            important specialization of this collection is #$AnimalUtterance-IBT.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sound"/>
        <rdfs:subClassOf rdf:resource="#SoundInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vanity">
        <rdfs:label xml:lang="en">vanity</rdfs:label>
        <rdfs:comment>Unjustified self-esteem and superiority. Excessive
            desire to win the notice, approval or praise of anothers.
            See Pride</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Pride"/>
    </owl:Class>
    <owl:Class rdf:ID="VariableArityFunction">
        <rdfs:label xml:lang="en">variable-arity functions</rdfs:label>
        <rdfs:comment>The collection of denotational functions of
            variable   arity in CycL.  Each instance of
            #$VariableArityFunction is   a function that can take a
            variable number of arguments, making   it unlike most
            functions, which have a fixed number of argument   places
            (see #$FixedArityFunction).  Examples include the
            operations of addition (#$PlusFn) and character-string
            concatenation (#$ConcatenateStringsFn).  Note that this
            collection,  unlike #$FixedArityFunction, is not a
            specialization of   #$Function-MathematicalObject.  This is
            because, from a   mathematical point of view, a so-called
            #$VariableArityFunction   VAF is not an individual function,
            but rather corresponds to a   group of functions: one for
            each possible number of arguments   VAF can take.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <rdfs:subClassOf rdf:resource="#VariableArityRelation"/>
    </owl:Class>
    <owl:Class rdf:ID="VariableArityRelation">
        <rdfs:label xml:lang="en">variable arity relation</rdfs:label>
        <rdfs:comment>A specialization of #$Relation.  Each instance of
            #$VariableArityRelation is a relation that can take a
            variable number of arguments.  Examples of
            #$VariableArityRelation include the predicate #$different
            and the function #$PlusFn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </owl:Class>
    <owl:Class rdf:ID="VariableAritySkolemFuncN">
        <rdfs:label xml:lang="en">variable arity skolem func n</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFuncNs with variable
            arity. These are only created when a sequence variable is in
            the scope of  a bounded existential.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VariableArityRelation"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#VariableAritySkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#SkolemFuncN"/>
    </owl:Class>
    <owl:Class rdf:ID="VariableAritySkolemFunction">
        <rdfs:label xml:lang="en">variable arity skolem function</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFunctions with
            variable arity. These are only created when a sequence
            variable is in the scope of the skolem.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#VariableArityRelation"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </owl:Class>
    <owl:Class rdf:ID="VariableOrderCollection">
        <rdfs:label xml:lang="en">variable order collection</rdfs:label>
        <rdfs:comment>The collection of all #$Collections which have
            elements of different ``order&apos;&apos;, i.e. different
            number of #$isa assertions will be needed to link instances
            of #$Individual to such a collection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Collection"/>
    </owl:Class>
    <owl:Class rdf:ID="Vector-Precise">
        <rdfs:label xml:lang="en">vector - precise</rdfs:label>
        <rdfs:comment>A specialization of #$VectorInterval.  An instance
            VECTOR of #$VectorInterval is also an instance of
            #$Vector-Precise just in case both the direction and
            magnitude of VECTOR are single values, rather than ranges of
            values.  One example of a #$Vector-Precise is `5 feet due
            West&apos;.  An important specialization of #$Vector-Precise
            is #$UnitVector-Precise.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VectorInterval">
        <rdfs:label xml:lang="en">relative location</rdfs:label>
        <rdfs:comment>A specialization of #$NTupleOfIntervals.  Each
            instance of #$VectorInterval is an n-tuple of intervals
            (where n &gt; 1), one of which is a direction.  Like the
            instances of #$ScalarInterval, the intervals in an instance
            of #$VectorInterval may be point-valued or cover a range of
            values.  The minimal interval (i.e., point-valued) type of
            vector interval is exemplified by a vector such as `10
            meters due east&apos;.   Vectors may also cover a range of
            values; e.g., `at least 10 feet away and in a horizontal
            direction&apos;; `between ten to twelve miles NNW&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NTupleOfIntervals"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vegetable-Food">
        <rdfs:label xml:lang="en">#$Vegetable-Food</rdfs:label>
        <rdfs:comment>A specialization of #$FoodOrDrink.  Each instance
            of #$Vegetable-Food is a foodstuff which is derived from a
            plant and is ordinarily considered a vegetable; e.g., a
            carrot (an instance of #$Carrot-Foodstuff), a potato (an
            instance of #$Potato-Foodstuff), a lima bean (an instance of
            #$Bean-Foodstuff), or a tomato (an instance of
            #$Tomato-Foodstuff).  Note that #$Vegetable-Food includes
            certain plant parts, such as tomatoes, that are technically
            classified as fruits by botanists, but which are treated as
            vegetables in food classification.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FoodOrDrink"/>
        <rdfs:subClassOf rdf:resource="#FruitAndVegetableFood"/>
        <rdfs:subClassOf rdf:resource="#PlantProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vegetable-Plant">
        <rdfs:label xml:lang="en">#$Vegetable-Plant</rdfs:label>
        <rdfs:comment>A collection of plants that play a special role in
            human nutrition.  Each instance of #$Vegetable-Plant is a
            plant that produces the edible things that we normally call
            `vegetables&apos; (which can include fruits, seeds, stalks,
            leaves, or other parts, or even the whole plant).  The
            instances of #$Vegetable-Plant grow in gardens and produce
            the vegetables that are eaten; vegetable plants are not
            necessarily also instances of #$Food.  See #$Vegetable-Food
            for the collection of vegetables--plants or (more usually)
            plant parts--that are eaten by humans.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Plant-NonWoody"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VegetableMatter">
        <rdfs:label xml:lang="en">plant material</rdfs:label>
        <rdfs:comment>A specialization of both #$NaturalTangibleStuff
            and #$OrganicStuff.  Each instance of #$VegetableMatter is a
            piece of stuff (solid, liquid, or, improbably but
            conceivably, gaseous) which is a piece of vegetable
            material.  Important specializations of #$VegetableMatter
            include #$Plant and #$PlantProduct.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vendor">
        <rdfs:label xml:lang="en">#$Vendor</rdfs:label>
        <rdfs:comment>The collection of all #$LegalAgents who specialize
            in selling at least one type of #$Product at the wholesale
            or retail level.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Verb">
        <rdfs:label xml:lang="en">verbs</rdfs:label>
        <rdfs:comment>The collection of all verbs. Verbs usually denote
            events, states, or processes. Verbs can be conjugated.
            Example: `eat&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#OpenClassWord"/>
        <rdfs:subClassOf rdf:resource="#NLWordForm"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Verb-Contracted">
        <rdfs:label xml:lang="en">#$Verb-Contracted</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all contracted verbal endings. The only main
            verbs which can contract are &apos;have&apos; and
            &apos;be&apos;. Example: -ve, from &apos;have&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VerbParticle">
        <rdfs:label xml:lang="en">#$VerbParticle</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all particles which can combine with verbs.
            Verb particles may appear before the object noun phrase, or
            may appear after it, as in &apos;I put down the phone&apos;
            and &apos;I put the phone down&apos;. Verb particles are
            usually prepositions, although they may be adverbials.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VerbPhrase">
        <rdfs:label xml:lang="en">verb phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all possible verb phrases.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SententialConstituent"/>
        <rdfs:subClassOf rdf:resource="#NLPhrase"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VerbProducingAffix">
        <rdfs:label xml:lang="en">verb-creating affixes</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#DerivationalAffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VerbProducingSuffix">
        <rdfs:label xml:lang="en">verb producing suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VerbProducingAffix"/>
        <rdfs:subClassOf rdf:resource="#DerivationalSuffix"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vermin">
        <rdfs:label xml:lang="en">#$Vermin</rdfs:label>
        <rdfs:comment>A collection of animals considered undesirable to
            find living in human habitation buildings or other
            facilities. </rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VersionedSoftwareObject">
        <rdfs:label xml:lang="en">versioned software objects</rdfs:label>
        <rdfs:comment>A specialization of #$SoftwareObject-Individual.
            Each instance of #$SoftwareObject is a copmuter program,
            software package or library that is versioned.  Positive
            examples include (#$SoftwareVersionFn #$NetscapeNavigator  5
            ) and (#$SoftwareVersionFn #$Libc-TheLibrary  2.0 ).
            Negative examples include #$Libc-TheLibrary (which is
            unversioned) and (#$VersionsInclusiveFn #$NetscapeNavigator
            3   6 ) (which is a version series, not an individual
            software object). #$VersionedSoftwareObject is disjoint with
            #$UnversionedSoftwareObject, and these collections partition #$SoftwareObject-Individual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SoftwareObject-Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vertebrate">
        <rdfs:label xml:lang="en">#$Vertebrate</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalTaxon within the
            #$BiologicalPhylum #$ChordataPhylum.  Each instance of
            #$Vertebrate is an animal that has a backbone or spine made
            of bony or cartilaginous vertebrae, which may be separate or
            fused.  Notable specializations of #$Vertebrate include
            #$Mammal, #$Reptile, #$Bird, and #$Fish.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MulticellularOrganism"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#ChordataPhylum"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VeterinaryHospital">
        <rdfs:label xml:lang="en">veterinary hospitals</rdfs:label>
        <rdfs:comment>#$VeterinaryHospital is a specialization of
            #$SingleSiteLocalOrganizationWithClients and
            #$MedicalCareOrganization.  Each instance of
            #$VeterinaryHospital a local organization that provides
            professional medical care to non-human animals.  Note that
            this is not a specialization of #$Hospital.  The names may
            be the same, but hospitals provide medical care to persons only.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MedicalCareOrganization"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VibrationThroughAMediumSensor">
        <rdfs:label xml:lang="en">vibration sensors</rdfs:label>
        <rdfs:comment>A subcollection of #$Sensor, namely those sensors
            that detect amplitude and frequency of vibrations through a
            physical medium.  This includes ears, skin, and also
            artificial devices such as microphones, seismographs, etc.
            Note:  #$Eyes are not #$VibrationThroughAMediumSensors
            because there need not be any physical medium for
            electromagnetic wave propagation.  This is a somewhat close
            call, and indeed in past centuries most people believed that
            light propagated through aether, but what it comes down to
            is this:  consider all the axioms that apply only to the
            structure, function, and operation, failure, etc. of a
            #$VibrationThroughAMediumSensor, and of that set how many
            hold true for eyes --- and the answer is No, most of them
            don&apos;t.  So parsimony dictates that #$Eye not be a
            subcollection of #$VibrationThroughAMediumSensor.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VideoConceptualWork">
        <rdfs:label xml:lang="en">videos</rdfs:label>
        <rdfs:comment>A specialization of #$VisualWork and
            #$PropositionalConceptualWork.  Each instance of
            #$VideoConceptualWork is an abstract work that is intended
            to be instantiated as an instance of #$MovingImage.
            Important specializations include #$Movie-CW, #$TVShow-CW,
            and #$MusicVideo.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PropositionalConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#VisualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VietnamesePerson">
        <rdfs:label xml:lang="en">#$VietnamesePerson</rdfs:label>
        <rdfs:comment>A person who is a citizen of Vietnam.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ViolentAction">
        <rdfs:label xml:lang="en">force</rdfs:label>
        <rdfs:comment>A specialization of #$HostileSocialAction.  Each
            instance of #$ViolentAction is a purposeful action that is
            commonly considered violent. Significant specializations of
            this collection include #$MilitaryAttack,
            #$PhysicallyAttackingAnAgent, and #$TakingHostage. A violent
            action is currently interpreted as an action the
            performer(s) of which intentionally attacks, damages, or
            destroys another agent, or attacks, damages, or destroys
            something that is closely related to a target agent agent in
            such a way that the target agent would not normally give it up.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HostileSocialAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ViralInfection">
        <rdfs:label xml:lang="en">#$ViralInfection</rdfs:label>
        <rdfs:comment>An instance of #$InfectionTypeByPathogenType, and
            a specialization of #$Infection.  Each instance of
            #$ViralInfection is an infectious disease caused by a virus
            (see the collection #$Virus). Some specializations of
            #$ViralInfection are #$Measles, #$Mumps, and #$EbolaHemorrhagicFeverInfection.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Infection"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Virus">
        <rdfs:label xml:lang="en">viruses</rdfs:label>
        <rdfs:comment>A specialization of #$Microorganism.  Each
            instance of #$Virus consists mainly of a capsid (capsule
            chamber) containing viral DNA or RNA.  Viruses have no
            cells, but reproduce by inserting into living cells the
            viral DNA or RNA, which then uses cellular mechanisms to
            create new viruses.  Viruses cause many diseases in all
            other types of  organisms; some can even infect instances of
            #$Bacterium.  Note that #$Virus excludes prions, bacteria,
            rickettsia, and protists.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microorganism"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Visa-Permit">
        <rdfs:label xml:lang="en">visas</rdfs:label>
        <rdfs:comment>A specialization of both #$Permission and
            #$LegalAgreement.  Each instance of #$Visa-Permit is an
            authorization issued by the government of some country to
            one (or more) person(s), stating that s/he is allowed to
            enter that country and remain for a certain period of time
            while engaging in certain specified activities (e.g., study,
            travel, work).  Specializations of #$Visa-Permit include
            #$H1WorkVisa, #$F1WorkVisa, and #$GreenCard.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Credential"/>
        <rdfs:subClassOf rdf:resource="#LegalAgreement"/>
        <rdfs:subClassOf rdf:resource="#Permission"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="VisibleLight">
        <rdfs:label xml:lang="en">light waves</rdfs:label>
        <rdfs:comment>A collection of events; a subcollection of
            #$ElectromagneticRadiation.  Every instance of
            #$VisibleLight is an instance of electromagnetic radiation
            having a wavelength approximately between 3800 and 7750
            #$Angstroms, i.e., light visible to human eyes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Light"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisitingSomeone">
        <rdfs:label xml:lang="en">#$VisitingSomeone</rdfs:label>
        <rdfs:comment>A collection of actions.  In a #$VisitingSomeone
            event, one #$Agent travels or moves to the vicinity of
            another #$Agent for the purpose of meeting with that other
            #$Agent.  Each #$VisitingSomeone is purposeful, at least on
            the part of the #$Agent doing the travelling, and that
            #$Agent is typically a #$Person, and the purpose is often
            social in nature.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SociabilityBasedAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualArtifact-CW">
        <rdfs:label xml:lang="en">visual artifact</rdfs:label>
        <rdfs:comment>A specialization of #$VisualWork.  Each instance
            of #$VisualArtifact-CW is an abstract work intended to be
            instantiated as an instance of #$Artifact in a manner that
            would permit it to be viewed. Notable instances include
            paintings (instantiated as instances of #$Painting-ArtForm),
            photographs, drawings, engravings, and sculptures.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VisualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualCommunicating">
        <rdfs:label xml:lang="en">#$VisualCommunicating</rdfs:label>
        <rdfs:comment>A specialization of #$Communicating.  Each
            instance of #$VisualCommunicating is an action in which
            information is transmitted by visual media.  Every instance
            of #$VisualCommunicating has at least one
            #$communicationToken (q.v.) which is an instance of
            #$VisualInformationBearingThing.  Examples of
            #$VisualCommunicating include: a performance by mime Marcel
            Marceau; Seiji Ozawa conducting the Boston Symphony
            Orchestra; a policeman directing traffic; shaking a fist at
            someone in anger; sending a message with flags, light
            pulses, or smoke signals.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualImage">
        <rdfs:label xml:lang="en">#$VisualImage</rdfs:label>
        <rdfs:comment>A specialization of
            #$InformationBearingWavePropagation.  Each instance of
            #$VisualImage is an event in which visible light is
            generated in a particular pattern, which (does or might)
            contain information for an observer.  Visual images may be
            produced by illuminating some tangible object -- a
            #$VisualInformationBearingThing (such as a photograph, movie
            film, or page of print), or by direct manipulation of
            light(s) to produce a pattern (e.g., nautical code lights).
            Visual images may be instantaneous or extended in time.
            Visual images may be classified (among other ways) by
            features of their appearance (e.g., #$ColorImage,
            #$BlackAndWhiteImage), by their origin (e.g., #$XRayImage,
            #$PenOrPencilDrawing, #$SatelliteImage), or by their content
            (e.g., #$LandscapeImage).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#VisibleLight"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingWavePropagation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualInformationBearingThing">
        <rdfs:label xml:lang="en">visual information sources</rdfs:label>
        <rdfs:comment>A specialization of both #$Artifact-Generic and
            #$InformationBearingThing.  Each instance of this collection
            is an artifact from which information is extracted by
            viewing it (note that a viewer may need to be familiar with
            an appropriate set of interpretive conventions in order to
            do this).  Examples of #$VisualInformationBearingThing
            include handwritten letters, newspapers, sculptures,
            television sets, and neon signs.  (Thus, the information
            content of #$VisualInformationBearingThings may or may not
            be propositional in nature.)  In the proper conditions,
            instances of #$VisualInformationBearingThing produce
            instances of #$VisualImage (which, unlike instances of
            #$VisualInformationBearingThing, are instances of #$Event).
            For example, if one shines light on a photograph, a
            characteristic #$VisualImage is produced.  Likewise, if one
            electrifies a neon sign, a #$VisualImage is produced. A
            notable specialization of this collection is
            #$StillImageSource -- sources of #$VisualImage that do not
            move (which thus includes all the examples of
            #$VisualInformationBearingThing given above except for the
            television set). See also the predicate #$visuallyDepicts.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Artifact-NonAgentive"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualInformationConveyingAct">
        <rdfs:label xml:lang="en">transmiting visual information</rdfs:label>
        <rdfs:comment>The collection of #$Actions that express
            (transmit) visual information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualMark">
        <rdfs:label xml:lang="en">#$VisualMark</rdfs:label>
        <rdfs:comment>A specialization of
            #$VisualInformationBearingThing.  Each instance of
            #$VisualMark is a visible marking on some tangible object.
            Visual markings may be applied to an object using ink,
            paint, or pencil; they may be engraved into or molded out of
            the object&apos;s material; they may be made of other
            objects affixed to or resting on the object (e.g., a plaque
            bearing a house number); or they may consist of contrasting
            areas of color or light level (e.g., markings on a computer
            screen). This collection is not to be confused with
            #$MarkingOnASurface, which is the collection of #$Events
            which consist, naturally, in making a mark on a surface. See
            also the predicates #$marks and #$markCreated.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualPerception">
        <rdfs:label xml:lang="en">#$VisualPerception</rdfs:label>
        <rdfs:comment>A specialization of #$Perceiving.  Each instance
            of   #$VisualPerception is an event in which an agent (an
            instance of #$PerceptualAgent (q.v.)) sees something by
            means of an #$ElectroMagneticRadiationSensor (usually, the
            agent&apos;s own #$Eyes) detecting wavelengths of visible light.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VisualWork">
        <rdfs:label xml:lang="en">visual works</rdfs:label>
        <rdfs:comment>A specialization of #$ConceptualWork. Each
            instance of #$VisualWork is an abstract work that is
            intended to be instantiated in a medium that is experienced
            primarily visually. The textual component of an instance of
            #$VisualWork, if any, is secondary to its visual component.
            Instances of #$VisualWork may contain textual components,
            but the content of an instance of #$VisualWork could not be
            completely expressed in text (thus #$VisualWork is disjoint
            with #$TextualPCW). Important specializations of
            #$VisualWork include #$VideoConceptualWork and #$VisualArtifact-CW.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ConceptualWork"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="ViviparousAnimal">
        <rdfs:label xml:lang="en">viviparous animals</rdfs:label>
        <rdfs:comment>This is the collection of animals which are born
            from the mother&apos;s body.  Cf. #$OviparousAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="VocabularyMicrotheory">
        <rdfs:label xml:lang="en">Cyc vocabulary microtheories</rdfs:label>
        <rdfs:comment>The collection of all microtheories which specify
            the vocabulary for some topic, but have no rules or other
            non-definitional assertions.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </owl:Class>
    <owl:Class rdf:ID="VoidObject">
        <rdfs:label xml:lang="en">void object</rdfs:label>
        <rdfs:comment>An instance of #$ComputerDataType. In
            #$C-ComputerLanguage, a void data type is used in function
            declarations to indicate that a function returns no values,
            or when constructing generic (i.e. typeless) pointers.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="VoidPointer">
        <rdfs:label xml:lang="en">void pointer</rdfs:label>
        <rdfs:comment>An instance of #$ObjectReferenceDataType. The void
            pointer type references untyped physical memory. Such
            pointers are typically returned by dynamic memory allocation routines.</rdfs:comment>
    </owl:Class>
    <owl:Class rdf:ID="Voltage">
        <rdfs:label xml:lang="en">voltages</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$Voltage is the electric potential of an
            electric force, measured in terms of the amount of work it
            takes the force to move a charge from one place to another.
            The standard unit of measure (see the collection
            #$UnitOfMeasure) for #$Voltage is the volt (see the constant #$Volt).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
    </owl:Class>
    <owl:Class rdf:ID="Volume">
        <rdfs:label xml:lang="en">#$Volume</rdfs:label>
        <rdfs:comment>A specialization of #$ScalarInterval.  Each
            instance of #$Volume is an amount of three-dimensional
            space.  Instances of #$Volume may be either a fixed
            interval, such as the volume of a five-gallon aquarium, or a
            range, such as &apos;fits in a bread box&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalQuantity"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
    </owl:Class>
    <owl:Class rdf:ID="VoluntaryBodyMovement">
        <rdfs:label xml:lang="en">voluntary body movements</rdfs:label>
        <rdfs:comment>A specialization of both
            #$PurposefulPhysicalAction and #$BodyMovementEvent.  Each
            instance of #$VoluntaryBodyMovement is an event in which an
            animal intentionally moves one part of its body relative to
            another part of its body.  Specializations of
            #$VoluntaryBodyMovement include #$Biting, #$PunchingSomeone,
            and #$MakingAGesture.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulPhysicalAction"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Vowel">
        <rdfs:label xml:lang="en">vowel</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Phoneme"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHAdverb">
        <rdfs:label xml:lang="en">w h adverb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all wh-words which can act as adverbs.
            Example: &apos;when&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WHWord"/>
        <rdfs:subClassOf rdf:resource="#Adverb"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHDeterminer">
        <rdfs:label xml:lang="en">w h determiner</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all wh-words which can act as determiners.
            Example: &apos;which&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Determiner"/>
        <rdfs:subClassOf rdf:resource="#WHWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHPronoun">
        <rdfs:label xml:lang="en">w h pronoun</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all wh-words which can stand in for nouns.
            Example: &apos;whatever&apos;.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WHWord"/>
        <rdfs:subClassOf rdf:resource="#Pronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHPronoun-Object">
        <rdfs:label xml:lang="en">w h pronoun - object</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WHPronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHPronoun-Possessive">
        <rdfs:label xml:lang="en">w h pronoun - possessive</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WHWord"/>
        <rdfs:subClassOf rdf:resource="#PossessivePronoun"/>
        <rdfs:subClassOf rdf:resource="#WHPronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHPronoun-Subject">
        <rdfs:label xml:lang="en">w h pronoun - subject</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WHPronoun"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WHWord">
        <rdfs:label xml:lang="en">w h word</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            collection of all wh-words.  These words generally appear at
            the beginning of a clause and have an interrogative or
            relative function.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ClosedClassWord"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WagingWar">
        <rdfs:label xml:lang="en">#$WagingWar</rdfs:label>
        <rdfs:comment>The fighting of two or more armies through the use
            of weapons.  The same as doing battle.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ViolentAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Wagon">
        <rdfs:label xml:lang="en">#$Wagon</rdfs:label>
        <rdfs:comment>#$Wagon is a specialization of
            #$TransportationContainerProduct,
            #$WheeledTransportationDevice, and #$MusclePoweredDevice.
            Each instance of #$Wagon is a relatively small non-motorized
            wheeled device (usually with two or more wheels) used for
            moving goods.  Instances of #$Wagon are usually
            human-powered or animal-powered.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WheeledTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#MusclePoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WakingUpFromSleep">
        <rdfs:label xml:lang="en">#$WakingUpFromSleep</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Animal goes
            from the state of being asleep to being in a waking state.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Walking-Generic">
        <rdfs:label xml:lang="en">walking around</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$LocomotionProcess in which the locomotor has only its feet
            in contact with the surface being walked on, and always has
            at least one foot in contact with the surface.
            #$Walking-Generic is therefore disjoint with #$Running.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Ambulation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Wall-GenericBarrier">
        <rdfs:label xml:lang="en">walls</rdfs:label>
        <rdfs:comment>The collection of all walls, those of construction
            artifacts as well as of other artifacts, e.g., container
            products, and of non-artifacts such as caves.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WallOfAConstruction">
        <rdfs:label xml:lang="en">#$WallOfAConstruction</rdfs:label>
        <rdfs:comment>#$WallOfAConstruction is a specialization of
            #$PartOfAnHSC and #$Wall-Vertical.  Each instance of
            #$WallOfAConstruction is a part of a
            #$HumanShelterConstruction.  This includes the walls on the
            outside of the building as well as those on the inside such
            as the wall separating two rooms in a house.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PartOfAnHSC"/>
        <rdfs:subClassOf rdf:resource="#Wall-GenericBarrier"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WarmSeason">
        <rdfs:label xml:lang="en">warm seasons</rdfs:label>
        <rdfs:comment>A specialization of #$SeasonOfYear.  Each instance
            of #$WarmSeason is the warmer time of the seasonal cycle at
            a particular region.  In most places on Earth, an instance
            of #$WarmSeason temporally subsumes anb instance of
            #$SummerSeason.  Each instance of #$WarmSeason is a weather
            season that is part of an annual cliomate cycle (see
            #$AnnualClimateCycle).  Note that #$WarmSeason is _not_ a
            specialization of #$CalendarSeason.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Warplane">
        <rdfs:label xml:lang="en">warplanes</rdfs:label>
        <rdfs:comment>#$Warplane is a specialization of #$Airplane,
            #$WeaponSystem, and #$CombatAircraft.  Each instance of
            #$Warplane is an #$Airplane which is designed (and often
            used) as a weapon of war.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WeaponSystem"/>
        <rdfs:subClassOf rdf:resource="#Airplane"/>
        <rdfs:subClassOf rdf:resource="#CombatAircraft"/>
        <rdfs:subClassOf rdf:resource="#MilitaryAirplane"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Warranty">
        <rdfs:label xml:lang="en">guarantees</rdfs:label>
        <rdfs:comment>A specialization of #$AuthorizedAgreement.  Each
            instance of #$Warranty is an agreement between the seller
            (and/or manufacturer) and the purchaser of some object or
            service.  In a warranty, the seller/manufacturer promises
            that the object or service will be satisfactory in some
            indicated way (e.g., free of defects).  Usually a warranty
            specifies what compensation an unsatisfied purchaser is
            entitled to (e.g., free repairs, a refund), and how s/he can
            claim it.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="Washing">
        <rdfs:label xml:lang="en">#$Washing</rdfs:label>
        <rdfs:comment>A collection of events, and a subcollection of
            #$Cleaning.  In a #$Washing event, some #$Water is being
            employed in the cleaning, typically with some surfactant
            such as soap dissolved in the water.  If only water (i.e.,
            no soap) is used in a #$Washing, then the event also belongs
            to a particular subcollection of #$Washing, namely #$Rinsing.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WatchingSomething">
        <rdfs:label xml:lang="en">watching events</rdfs:label>
        <rdfs:comment>A collection of events involving the deliberate
            direction of #$VisualPerception on the part of an #$Agent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Observing"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#VisualPerception"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Water">
        <rdfs:label xml:lang="en">#$Water</rdfs:label>
        <rdfs:comment>An instance of #$ChemicalCompoundType and a
            specialization of #$InanimateThing.  Each instance of
            #$Water is one piece of some (pure or impure) portion of the
            chemical compound H2O.  Instances of #$Water may be in a
            gaseous, liquid, or solid state (see #$stateOfMatter); they
            may be salty or not, drinkable or not.  Examples include
            portions of the ocean, such as the #$BayOfBiscay and the
            #$BayOfBengal (see also #$SeaWater); bodies of fresh water,
            such as #$NiagaraFalls and the #$GangesRiver; quantities of
            chlorinated water (see #$PoolWater); and the contents of
            bottles of tonic water (see #$SeltzerWater).  Any portion of
            liquid that consists mostly of water but differs from it in
            one or more important properties (as does e.g. urine,
            coffee, and lemonade) is not itself an instance  of #$Water,
            but has an instance of #$Water as its main constituent (see
            #$mainConstituent).  For the specialization of #$Water whose
            instances are  pure, see (#$PureFn #$Water).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <owl:disjointWith rdf:resource="#WritingImplement"/>
    </owl:Class>
    <owl:Class rdf:ID="Water-Fresh">
        <rdfs:label xml:lang="en">fresh water (type)</rdfs:label>
        <rdfs:comment>#$Water in any physical state (solid, liquid, or
            gas) which is considered fresh water rather than sea water.
            Thus, lakes, rivers, drinking water, steam, precipitation,
            are all fresh water.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Water"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Water-Saline">
        <rdfs:label xml:lang="en">salt water</rdfs:label>
        <rdfs:comment>A specialization of #$Water.  Each instance of
            #$Water-Saline is a portion of water with some substantial
            concentration of salt mixed into it.  An important
            specialization of #$Water-Saline is #$SeaWater (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Solution"/>
        <rdfs:subClassOf rdf:resource="#Water"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WaterTransportationDevice">
        <rdfs:label xml:lang="en">water crafts</rdfs:label>
        <rdfs:comment>A specialization of #$TransportationDevice, each
            instance of which is a device used for transportation on or
            through water. (It is thus not to be confused with a
            collection of devices used for transporting water.)
            Specializations of  #$WaterTransportationDevice include
            #$Ship and #$Sailboard. A particularly important
            specialization is #$Watercraft : the collection of water
            transportation devices that protect their passengers from
            getting wet. See also the second-order collection #$WaterVehicleTypeByDesign.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#HexalateralObject"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WaterVehicleTypeByDesign">
        <rdfs:label xml:lang="en">types of watercraft</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$WaterVehicleTypeByDesign is a collection of instances of
            #$WaterTransportationDevice which share a certain
            distinctive design.  Notable instances of this collection
            include #$Submarine and #$Rowboat.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="Watercraft">
        <rdfs:label xml:lang="en">#$Watercraft</rdfs:label>
        <rdfs:comment>A specialization of #$WaterTransportationDevice.
            Each instance of this collection is a device for
            transporting people and/or objects over water (i.e. on the
            surface) or through water (i.e. under the surface) without
            getting them wet.  Positive examples include all instances
            of #$Submarine, #$Rowboat, and #$Ship.  Negative examples
            include jet-skis and all instances of #$Surfboard and
            #$Sailboard. See also #$WaterVehicleTypeByDesign.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WaterTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Watercraft-Small">
        <rdfs:label xml:lang="en">small watercraft</rdfs:label>
        <rdfs:comment>#$Watercraft-Small is a specialization of
            #$Watercraft-Surface.  Each instance of #$Watercraft-Small
            is a watercraft so small that the usual posture of a person
            in the boat is sitting, since standing in a small watercraft
            may capsize it or one may fall out of the boat.  A few
            examples are #$Raft, #$Canoe, and #$Lifeboat.  This
            collection is disjoint with #$Watercraft-Subsurface.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft-Surface"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Watercraft-Subsurface">
        <rdfs:label xml:lang="en">subsurface watercraft</rdfs:label>
        <rdfs:comment>A specialization of #$Watercraft.  Each instance
            of #$Watercraft-Subsurface is a vehicle designed to travel
            underwater.  Note that since some instances of
            #$Watercraft-Subsurface are also designed to travel across
            the surfaces of bodies of water, the collections
            #$Watercraft-Subsurface and #$Watercraft-Surface (q.v.) are
            not disjoint.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Watercraft-Surface">
        <rdfs:label xml:lang="en">surface watercraft</rdfs:label>
        <rdfs:comment>A specialization of #$Watercraft.  Each instance
            of #$Watercraft-Surface is a watercraft designed to travel
            across the suface of a body of water.  Note that instances
            of #$Watercraft-Surface need not be designed to travel
            _exclusively_ across the surface of a body of water, since
            some instances may also be designed to travel under the
            surface of a body of water (for example, instances of
            #$Submarine are designed to travel in both these ways).
            Notable specializations of #$Watercraft-Surface include
            #$Canoe, #$Ferry, #$Motorboat, and #$OceanLiner.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Watercraft"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Waterfowl">
        <rdfs:label xml:lang="en">water birds</rdfs:label>
        <rdfs:comment>The collection of all waterfowl, i.e. #$Birds of
            the #$BiologicalOrder Anseriformes.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Bird"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WavePropagation">
        <rdfs:label xml:lang="en">wave propagation</rdfs:label>
        <rdfs:comment>A specialization of #$Translocation (q.v.).  Each
            instance of #$WavePropagation is an event in which a
            wavelike disturbance propagates through space, with or
            without a medium.  A wave propagation is like  a
            translational movement (see #$Movement-TranslationEvent) in
            that it can have both a starting and an ending point (see
            #$fromLocation and #$toLocation), but differs from a
            translational motion in that there is no object moving (see
            #$objectMoving).  Notable specializations of
            #$WavePropagation include #$ElectromagneticRadiation and #$Sound.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WavePropagationType">
        <rdfs:label xml:lang="en">#$WavePropagationType</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$WavePropagationType is a specialization of
            #$WavePropagation (q.v).  Instances of
            #$WavePropagationType include the collections
            #$ElectromagneticRadiation, #$Sound, #$VisibleLight, and #$XRay.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </owl:Class>
    <owl:Class rdf:ID="Weapon">
        <rdfs:label xml:lang="en">#$Weapon</rdfs:label>
        <rdfs:comment>A subcollection of #$PhysicalDevice instances of
            which are primarily designed as instruments for physically
            harming or destroying animals (often humans), buildings, or
            other #$ConstructionArtifacts.  Subcollections of #$Weapon
            include #$Sword, #$Gun-Portable, and #$Bomb.  Also  included
            are various types of military hardware used to kill,
            destroy, or immobilize.  Note that in the case of missile
            weapons, both the launcher and the unit of ammunition are
            considered #$Weapons in this sense.  E.g. a bow, an arrow, a
            missile launcher, an ICBM, a gun, and a bullet are all #$Weapons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WeaponSystem">
        <rdfs:label xml:lang="en">military systems</rdfs:label>
        <rdfs:comment>#$WeaponSystem is a specialization of
            #$MilitaryHardware.  Each instance of #$WeaponSystem is a
            configuration of which an important part is a #$Weapon, but
            there are other parts such as #$CommunicationDevices,
            #$Sensors or #$TransportationDevices. For example, the
            #$Tank-Vehicle is both an armored vehicle and the bearer of
            a #$Cannon.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#MilitaryHardware"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WearingSomething">
        <rdfs:label xml:lang="en">instances of wearing something</rdfs:label>
        <rdfs:comment>A specialization of #$Configuration.  Each
            instance of #$WearingSomething is an arrangement of tangible
            objects, one of which is wearing the other(s).  Typically
            the wearer is a living person or animal, although surrogates
            are possible (e.g., mannequins, dolls, or corpses).  Objects
            worn are instances of #$SomethingToWear (q.v.).  See also
            #$wearer, #$wearsClothing, #$itemWorn.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Configuration"/>
        <rdfs:subClassOf rdf:resource="#ContinuousPhysicalContactSituation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WeatherEvent">
        <rdfs:label xml:lang="en">weather events</rdfs:label>
        <rdfs:comment>A specialization of #$PhysicalEvent.  Each
            instance of #$WeatherEvent is a meteorological event of some
            duration, occurring over some spatial region.  Some weather
            events are almost instantaneous (for example, instances of
            the collection #$LightningEvent), while others are quite
            lengthy (for example, instances of the collection
            #$AnnualClimateCycle).  Spatially, weather events may cover
            a small locality or a large portion of a continent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WedgeShaped">
        <rdfs:label xml:lang="en">wedge shaped</rdfs:label>
        <rdfs:comment>The collection of all three dimensional objects
            such that any cross section that is sliced parallel to the
            two triangular ends will result in a triangle congruent to
            those ends. For instance, a pup tent would have this shape.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Polygon3DShaped"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Wednesday">
        <rdfs:label xml:lang="en">Wed</rdfs:label>
        <rdfs:comment>A collection of #$CalendarDays and an  instance of
            #$DayOfWeekType.  #$Wednesday is the collection of all  (and
            only) wednesdays.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CalendarDay"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WeeklyTemporalObjectType">
        <rdfs:label xml:lang="en">#$WeeklyTemporalObjectType</rdfs:label>
        <rdfs:comment>A specialization of #$TemporalObjectType.  Each
            instance of #$WeeklyTemporalObjectType is a collection of
            temporal things, all of which are synchronized with some
            calendar, with exactly one of those things occuring each
            calendar week.  For example, one instance of
            #$WeeklyTemporalObjectType is #$Wednesday, since there is
            exactly one instance of #$Wednesday each calendar week.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointTemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </owl:Class>
    <owl:Class rdf:ID="WellOrdering">
        <rdfs:label xml:lang="en">well ordering</rdfs:label>
        <rdfs:comment>The collection of all those linear
            #$MathematicalOrderings that are called
            &apos;well-orderings&apos; because they (and their subsets)
            have &apos;first&apos; or &apos;smallest&apos; members.  Let
            ORDER be a #$TotalOrdering-Strict, and let S be the
            #$baseSet of ORDER and R the ordering relation.  ORDER is a
            #$WellOrdering if every nonempty subset SUBSET of S has its
            &apos;R-smallest&apos; member, i.e., there is an X in SUBSET
            such that R(X Y) for all Y in SUBSET except X.  For example,
            if you take the set of all natural numbers and the usual
            less-than relation among these numbers then you have a
            #$WellOrdering because there is a lowest natural number,
            while if you take the set of all integers (including
            negative ones) and the usual less-than relation among these
            numbers then you have a #$TotalOrdering that is not a
            #$WellOrdering because there is no lowest negative number.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#TotalOrdering-Strict"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WheeledTransportationDevice">
        <rdfs:label xml:lang="en">wheeled vehicles</rdfs:label>
        <rdfs:comment>#$WheeledTransportationDevice is a specialization
            of #$LandTransportationDevice.  Each instance of
            #$WheeledTransportationDevice is a transportation device
            that uses only wheels (as opposed to tracks, runners, etc.).
            This collection includes not only many instances of
            #$TransportationDevice-Vehicle, but also non-self-powered
            devices such as #$Bicycles and #$Wagons.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LandTransportationDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WildAnimal">
        <rdfs:label xml:lang="en">wild animals</rdfs:label>
        <rdfs:comment>A specialization of #$NonPersonAnimal. Each
            instance of this collection is a non-human animal that is
            not domesticated or tame.  Note that a captive animal may
            still be a wild animal, e.g. zoo animals that are not tame
            or domesticated.  Specializations of #$WildAnimal are
            returned by #$WildAnimalFn. See also #$CaptiveAnimal, #$DomesticatedAnimal.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Willingness">
        <rdfs:label xml:lang="en">willingness</rdfs:label>
        <rdfs:comment>Feeling of willingness to participate in an event
            or situation; consenting or being prepared to participate.
            (#$feelsTowardsEvent AGENT EVENT #$Willingness DEGREE) means
            that AGENT is willing for EVENT to come about to DEGREE
            degree.  Note: This is a collection; for an explanation of a
            typical #$FeelingType, see #$Happiness.  A more specialized
            #$FeelingType than #$Willingness is #$Eagerness.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </owl:Class>
    <owl:Class rdf:ID="WindPoweredDevice">
        <rdfs:label xml:lang="en">#$WindPoweredDevice</rdfs:label>
        <rdfs:comment>#$WindPoweredDevice is a specialization of
            #$KineticEnergyPoweredDevice.  Each instance of
            #$WindPoweredDevice is powered by the wind.  Specializations
            of #$WindPoweredDevice include #$Windmill and #$Sailboat.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#KineticEnergyPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WindProcess">
        <rdfs:label xml:lang="en">wind</rdfs:label>
        <rdfs:comment>A specialization of both #$ImmediateWeatherProcess
            and #$Translation-Flow.  Each instance of #$WindProcess is
            an event in which the ambient air (or some significant part
            of the ambient air) at a #$GeographicalRegion is in motion.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
        <rdfs:subClassOf rdf:resource="#Translation-Flow"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WindowPane">
        <rdfs:label xml:lang="en">window panes</rdfs:label>
        <rdfs:comment>Each individual pane in a window. A window may
            only have one window pane.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WindowPortal">
        <rdfs:label xml:lang="en">windows (types of things)</rdfs:label>
        <rdfs:comment>#$WindowPortal is a specialization of #$Portal and
            #$PhysicalPartOfObject.  Each instance of #$WindowPortal is
            a portal found in a human occupation construct, typically
            covered by some instance of #$WindowThePortalCovering (q.v.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Portal"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WindowThePortalCovering">
        <rdfs:label xml:lang="en">windows (types of things)</rdfs:label>
        <rdfs:comment>The physical object which &apos;covers&apos; or
            fills in the #$WindowPortal. It is a physical barrier, but
            because it is made primarily of glass, it allows light to enter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PortalCovering"/>
        <rdfs:subClassOf rdf:resource="#Wall-GenericBarrier"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WinterSeason">
        <rdfs:label xml:lang="en">#$WinterSeason</rdfs:label>
        <rdfs:comment>A specialization of #$ColdSeason.  In the
            #$TemperateClimateCycle, generally a time of cold and
            dormancy.  #$WinterSeason represents the climatic aspects of
            Winter; for its purely temporal aspects, see #$CalendarWinter.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ColdSeason"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WomensClothing">
        <rdfs:label xml:lang="en">womens clothing</rdfs:label>
        <rdfs:comment>A specialization of #$Clothing-Generic.  Each
            specialization of #$WomensClothing is a type of clothing
            item worn usually by women.  Specializations of
            #$WomensClothing include #$Bra, #$Dress, and #$Skirt.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Clothing-Generic"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Wonder-Admiration">
        <rdfs:label xml:lang="en">wonder - admiration</rdfs:label>
        <rdfs:comment>The attribute-type associated with the feeling of
            amazed admiration toward something. (For the rationale
            behind treating feelings as types -- i.e. collections -- of
            attributes, see the comment   on #$Happiness.)</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Surprise"/>
        <rdfs:subClassOf rdf:resource="#Admiration"/>
    </owl:Class>
    <owl:Class rdf:ID="Wood">
        <rdfs:label xml:lang="en">wood</rdfs:label>
        <rdfs:comment>A specialization of #$PlantProduct.  Each instance
            of #$Wood is a piece of solid, rigid, fibrous organic
            substance in or #$derivedFrom (q.v.) the inside of the
            trunks and limbs of trees.  Specializations of #$Wood
            include #$Firewood, (#$WoodFn #$OakTree) and (#$WoodFn #$CherryTree).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PlantProduct"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WordConstituent">
        <rdfs:label xml:lang="en">word constituents</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LexicalItem"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WordProcessingProgram">
        <rdfs:label xml:lang="en">word processing program</rdfs:label>
        <rdfs:comment>A specialization of #$TextEditorProgram. Each
            instance of #$WordProcessingProgram is the collection of
            computer programs whose primary function is the production,
            manipulation, and editing of text (instances of
            #$CharacterString). This collection includes programs that
            can be run in batch mode (i.e. not driven by user input).
            For solely interactive word processors, see
            #$WordProcessingProgram-Interactive, and #$WordProcessingProgram-Visual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#LocalProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WordProcessingProgram-Interactive">
        <rdfs:label xml:lang="en">interactive word processing programs</rdfs:label>
        <rdfs:comment>#$WordProcessingProgram-Interactive is a
            specialization of #$WordProcessingProgram. It is the
            collection of computer programs whose primary function is
            the production, manipulation, and editing of text under the
            interactive direction of the user of the program.  The most
            significant specialization of this collection is #$WordProcessingProgram-Visual.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#WordProcessingProgram"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WorkAgreement">
        <rdfs:label xml:lang="en">#$WorkAgreement</rdfs:label>
        <rdfs:comment>A specialization of both #$Agreement and
            #$Obligation.  Each instance of #$WorkAgreement is an
            agreement between an employer and an employee, regarding the
            duties and remuneration which pertain to that
            employee&apos;s job for that employer.  Instances of
            #$WorkAgreement consist of various #$subAgreements,
            typically including instances of #$JobDescription,
            #$CompensationPackage, and some #$CodeOfConduct. See also
            #$employedAgent, which relates instances of #$WorkAgreement
            to instances of #$Employee, and #$jobAgreement, which
            relates instances of #$WorkAgreement to instances of #$HasPositionRelationship.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
        <rdfs:subClassOf rdf:resource="#Obligation"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </owl:Class>
    <owl:Class rdf:ID="WorkingEvent">
        <rdfs:label xml:lang="en">#$WorkingEvent</rdfs:label>
        <rdfs:comment>Activities which require a certain amount of
            physical or mental exertion, and which are not done purely
            for recreation, but rather as part of an occupation (to make
            a living), or to contribute to some goal, or out of some
            other obligation or necessity. Positive examples include a
            student doing homework for school, a homeowner mowing their
            lawn, a teacher teaching class, etc.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="Workplace">
        <rdfs:label xml:lang="en">#$Workplace</rdfs:label>
        <rdfs:comment>#$Workplace is a specialization of
            #$PhysicalContactLocation.  Each instance of #$Workplace is
            a place where people customarily work.  #$Workplace includes
            as instances offices, restaurant buildings, construction
            sites, agricultural sites, the #$SpaceNeedle, and so on.
            Some places may be #$Workplaces only during a small part of
            their existence (a piece of residential property while the
            house is being built, for example); some may almost always
            be #$Workplaces (grocery store buildings, office buildings,
            smithies, hospitals, and so on.).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#PhysicalContactLocation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WorldModelingProgramObject">
        <rdfs:label xml:lang="en">#$WorldModelingProgramObject</rdfs:label>
        <rdfs:comment>A specialization of #$ProgramObject. Each instance
            of #$WorldModelingProgramObject is the abstract structure of
            a representation of an instance of #$Thing. Computer
            programs are useful to humans because they are efficient
            processors and manipulators of information about things
            outside of the program that are interesting to humans .
            When this information, about some #$Thing, happens to be
            represented in a single instance of #$ComputerDataType, then
            that instance is almost  always also a specialization of
            #$WorldModelingProgramObject.  Computers were initially
            designed to handle representations of numbers only.  But
            with the advent of modern programming languages, complex
            user-defined datastructures allow the representation of
            almost arbitrary things, including instances of
            #$Set-Mathematical, #$Relation,  or even #$Person. The
            collection #$WorldModelingProgramObject is useful in
            distinguishing those data a program&apos;s user will care
            about from those that are merely implementation details. See
            also the unary denotational function #$ProgramObjectValueFn
            and the binary predicate #$programObjectRepresentsValue.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#ProgramObject"/>
    </owl:Class>
    <owl:Class rdf:ID="Writing">
        <rdfs:label xml:lang="en">#$Writing</rdfs:label>
        <rdfs:comment>A specialization of both #$HumanActivity and
            #$VisualInformationConveyingAct.  Each instance of #$Writing
            is an action in which some text is produced, either via
            writing by hand or writing with a machine, such as a
            typewriter or a computer.  An instance of #$Writing could be
            a single episode of writing, or a discontinuous series of
            episodes (as when one writes a letter over a few days).
            #$Writing is not a specialization of #$Communicating,
            because in some instances of #$Writing there is not a
            successful transfer of information to another agent.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationConveyingAct"/>
        <rdfs:subClassOf rdf:resource="#LearnedActivity"/>
        <rdfs:subClassOf rdf:resource="#SkilledActivity"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WritingByHand">
        <rdfs:label xml:lang="en">handwriting</rdfs:label>
        <rdfs:comment>Writing is the formation of characters or symbols
            on a suitable surface for transmitting information.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#SpreadingStuffOntoSurface"/>
        <rdfs:subClassOf rdf:resource="#MarkingOnASurface"/>
        <rdfs:subClassOf rdf:resource="#Writing"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#UsingADevice"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WritingImplement">
        <rdfs:label xml:lang="en">writing implements</rdfs:label>
        <rdfs:comment>#$WritingImplement is a specialization of
            #$StationeryProduct and #$HandTool.  Each instance of
            #$WritingImplement is a hand-held tool which is intended to
            be primarily used, by a person, for writing.
            Specializations include the collections
            #$Chalk-WritingImplement and #$WritingPen (but not #$Typewriter).</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#Shaft"/>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:Class rdf:ID="WritingSystem">
        <rdfs:label xml:lang="en">writing systems</rdfs:label>
        <rdfs:comment>A specialization of #$CommunicationConvention.
            Each instance of #$WritingSystem is a system of physical
            markings used to record pieces of a language.  Writing
            systems are typically associated with particular languages,
            although some may be common to many languages.  Instances of
            #$WritingSystem include #$JapaneseKatakanaWriting,
            #$WesternEuropeanWriting, and #$MusicalWriting.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#CommunicationConvention"/>
        <rdfs:subClassOf rdf:resource="#Artifact-Intangible"/>
    </owl:Class>
    <owl:Class rdf:ID="XRay">
        <rdfs:label xml:lang="en">x-rays</rdfs:label>
        <rdfs:comment>A specialization of #$ElectromagneticRadiation.
            Each instance of #$XRay is some electromagnetic radiation
            with a wavelength (see the predicate #$wavelength) ranging
            from about 1 #$Angstrom to 1x10^-3 #$Angstroms.</rdfs:comment>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </owl:Class>
    <owl:ObjectProperty rdf:ID="abbreviationForString">
        <rdfs:label xml:lang="en">abbreviation for string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#CharacterString"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="abbreviationString-PN">
        <rdfs:label xml:lang="en">abbreviation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#properNameStrings"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ableToAffect">
        <rdfs:label xml:lang="en">able to affect</rdfs:label>
        <rdfs:comment>&apos;(#$ableToAffect AGENT THING)&apos; means
            that AGENT is capable of causing some change in THING.  This
            does not imply that AGENT ever actually does cause any
            change in THING, but that THING is within AGENT&apos;s
            &apos;zone of influence&apos;.  For instance, I am able to
            affect the ceiling panel above my head, even though
            I&apos;ve never done anything to it.  In contrast, I cannot
            affect the moon.  This is an inherently vague notion, since
            one&apos;s ability to influence objects tends to diminish as
            they grow larger--or smaller--and farther away.  However,
            it&apos;s an important common sense concept, since we must
            learn what we can and cannot affect in order to understand
            our capabilities and limitations and plan actions accordingly.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ableToControl">
        <rdfs:label xml:lang="en">able to control</rdfs:label>
        <rdfs:comment>A predicate that relates an agent to some
            cotemporal thing s/he is able to control.  More precisely,
            (#$ableToControl AGENT THING) means that AGENT is in a
            position of being able to either (i) influence (i.e.
            prohibit, enable, or constrain) some significant set of
            behaviors (or actions or functionings) of THING or (ii)
            influence some significant set of behaviors of other agents
            with respect to THING.  For example, Wilbur Post might be
            able to control some range of his horse Ed&apos;s actions in
            virtue of having the (physical and legal) power to force Ed
            to walk down this bridle path, stay in that corral, and so
            on; and Wilbur might also be able to control Ed in the sense
            of deciding who has access to him (e.g. deciding who may see
            Ed and who may ride him).  The controlled THING might be a
            non-living possession of AGENT&apos;s or, as in the above
            example, another _agent_.  Since one&apos;s ability to
            control something is rarely comprehensive, (#$ableToControl
            AGENT THING) can hold despite the fact there  are many
            behaviors/actions/functionings of THING&apos;s that are
            beyond AGENT&apos;s control.  Thus, although Wilbur might be
            able to control which paths Ed is ridden on, where he
            sleeps, and what he eats, Wilbur might not be able to
            control such things as Ed&apos;s breathing rate, tail
            swishing, or what he does in the privacy of his stall.  Note
            that AGENT&apos;s being #$ableToControl THING does not
            entail that AGENT actually exercises this ability.  Note
            also that AGENT&apos;s merely being able to influence _some_
            behavior of THING (or some behavior of another agent&apos;s
            with respect to THING) is not sufficient for her being
            #$ableToControl THING; AGENT must be able to influence a
            significant set or range of THING&apos;s behaviors (or of
            other agents&apos; behaviors with respect to THING) in order
            to be able to control THING.  (Unavoidably, the notions of
            being  able  to do something and of a  significant range  of
            a thing&apos;s behaviors/actions/functionings are both
            rather vague.)  For describing events in which an agent
            actually wields control over something, consider using
            #$ControllingSomething and #$objectControlled.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#ableToAffect"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="abnormal">
        <rdfs:label xml:lang="en">abnormal</rdfs:label>
        <rdfs:comment>Every default rule in our system    P(x1,...,xn)
            =&gt; Q(x1,...,xn)  is implicitly treated as
            (not(abnormal(x1,...,xn)) and P(x1,...,xn) =&gt;
            Q(x1,...,xn)  This allows rules without exceptions to never
            have to incur the overhead of default reasoning.  Exceptions
            to rules are written like so:    (#$exceptWhen R(x1,...,xn)
            Rule001)  and get canonicalized into rules concluding
            abnormal like so:    R(x1,...,xn) =&gt;
            (#$abnormal(x1,....,xn) Rule001)  Since a different
            &apos;abnormality&apos; predicate is needed for every
            default rule in the system, we instead handle this
            uniqueness requirement by having a single #$abnormal
            predicate which takes the rule in question as an argument.
            Also, the variables over which abnormality is computed is
            given as a single list.  This allows #$abnormal to be binary
            rather than arbitrary arity. </rdfs:comment>
        <rdfs:domain rdf:resource="#SubLList"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="above-Directly">
        <rdfs:label xml:lang="en">above - directly</rdfs:label>
        <rdfs:comment>(#$above-Directly ABOVE BELOW) means either that
            (1) the volumetric center of ABOVE is directly above some
            point of BELOW, if ABOVE is smaller than BELOW; or that (2)
            some point of ABOVE is directly above the volumetric center
            of BELOW, if ABOVE is larger than, or equal in size to, BELOW.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Generally"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="above-Generally">
        <rdfs:label xml:lang="en">above - generally</rdfs:label>
        <rdfs:comment>(#$above-Generally OBJ1 OBJ2) means that the
            #$SpatialThing-Localized OBJ1 is more or less above the
            #$SpatialThing-Localized OBJ2. To be more precise: if OBJ1
            is within a cone-shaped set of vectors within about 45
            degrees of #$Up-Directly pointing up from OBJ2 (see
            #$Up-Generally), then (#$above-Generally OBJ1 OBJ2) holds.
            This is a more general predicate than #$above-Directly
            (q.v.), but it is a more specialized predicate than
            #$above-Higher (q.v.). It probably most closely conforms to
            the English word  above. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Higher"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="above-Higher">
        <rdfs:label xml:lang="en">above - higher</rdfs:label>
        <rdfs:comment>(#$above-Higher OBJ-A OBJ-B) means that OBJ-A is
            at a greater altitude (from some common reference point)
            than OBJ-B.  In terrestrial contexts (see
            #$TerrestrialFrameOfReferenceMt), (#$above-Higher OBJ-A
            OBJ-B) typically means that OBJ-A is at a greater altitude
            above sea level (see the predicate #$altitudeAboveSeaLevel)
            than OBJ-B.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyDisjoint"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="above-Overhead">
        <rdfs:label xml:lang="en">above - overhead</rdfs:label>
        <rdfs:comment>(#$above-Overhead ABOVE BELOW) means that ABOVE is
            directly above BELOW (see the predicate #$above-Directly),
            all points of ABOVE are higher than all points of BELOW, and
            ABOVE and BELOW do _not_ touch.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Directly"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="above-Touching">
        <rdfs:label xml:lang="en">above - touching</rdfs:label>
        <rdfs:comment>(#$above-Touching ABOVE BELOW) means that ABOVE is
            located over BELOW and they are touching.  More precisely,
            it implies both (#$above-Directly ABOVE BELOW) and that
            ABOVE #$touches BELOW.  Examples: a person sitting on a
            chair; coffee in a cup; a boat on water; a hat on a head.
            (Note that not every point of ABOVE must be higher than
            every point of BELOW.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Directly"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="accountAdministrator">
        <rdfs:label xml:lang="en">account administrator</rdfs:label>
        <rdfs:comment>The predicate #$accountAdministrator identifies
            the agent who administers a particular account (i.e.
            recorded   obligation of some particular type between
            specified parties).  (#$accountAdministrator ACCT AGENT)
            means that the #$Account ACCT is administered by the
            individual or organization (often a bank) AGENT. See also #$AccountManager.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Account"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="accountBalance">
        <rdfs:label xml:lang="en">balance (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$accountBalance is used to indicate
            the balance of a particular account.  (#$accountBalance ACCT
            BAL) means that the #$FinancialAccount ACCT has the balance
            BAL; BAL is the amount of #$MonetaryValue either owed by, or
            available to, the #$accountHolder (depending upon the type
            of account).</rdfs:comment>
        <rdfs:domain rdf:resource="#FinancialAccount"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="accountHolder">
        <rdfs:label xml:lang="en">account holder</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$Agent to instances of #$Account.  (#$accountHolder ACCT
            AGENT) means that the account ACCT is held by the individual
            or organization AGENT; thus, money (or some other valuable
            such as vacation leave) is owed to or from AGENT in the
            amount shown in the account (see #$accountBalance), and can
            be added to or drawn upon.</rdfs:comment>
        <rdfs:domain rdf:resource="#Account"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="accountSystemOnNetwork">
        <rdfs:label xml:lang="en">account system on network</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$AccountSystem to instances of #$ComputerNetwork.
            (#$accountSystemOnNetwork SYSTEM NETWORK) means that SYSTEM
            is an instance of #$AccountSystem such that either
            (#$nodeInSystem SYSTEM NETWORK) holds or (#$subNetwork
            NETWORK SYSTEM) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#AccountSystem"/>
        <rdfs:range rdf:resource="#ComputerNetwork"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="acknowledgedAct">
        <rdfs:label xml:lang="en">acknowledged act</rdfs:label>
        <rdfs:comment>(#$acknowledgedAct ACKACT COMACT) means that the
            #$CommunicationAct-Single COMACT is acknowledged and
            replied-to by the responsive
            #$Acknowledging-CommunicationAct ACKACT.   Particular
            acceptances or rejections of a particular project proposal
            would involve examples of this predicate, as would a person
            responding to a wedding invitation, or a court responding to
            a motion.  See also #$acknowledgementOf which refers to the
            abstract content of the communication.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#Acknowledging-CommunicationAct"/>
        <rdfs:range rdf:resource="#CommunicationAct-Single"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="acquaintedWith">
        <rdfs:label xml:lang="en">acquaintance (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates an agent to other agents
            with whom s/he is acquainted. (#$acquaintedWith AGENT1
            AGENT2) means that AGENT1 is acquainted with AGENT2 in the
            sense that AGENT1 has met, has knowingly come into physical
            contact with, or has knowingly communicated
            (bi-directionally) with AGENT2.  Typically, this means that
            AGENT1 is aware of some facts about AGENT2 and can recognize
            AGENT2 by appearance, voice, or some other physical
            characteristic.  Note that #$acquaintedWith is _not_
            symmetric: it is possible for AGENT1 to be #$acquaintedWith
            AGENT2 and not vice versa.  This would be the case (e.g.) if
            AGENT2 is nonsentient (cf. #$SentientAnimal) or comatose,
            and thus incapable of recognizing AGENT1.  Another
            (arguable) example of asymmetric acquaintance is where
            AGENT1 is  introduced  to AGENT2 while (the former is) in
            disguise and using a faked identity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#IndividualAgent"/>
        <rdfs:range rdf:resource="#IndividualAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="acronymString">
        <rdfs:label xml:lang="en">acronym</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$acronymString THING STRING) means that THING may be
            referred to by the acronym STRING.  For example, because the
            Medical College Admission Test is sometimes referred to as
            MCAT or M.C.A.T. we assert (#$acronymString
            #$MedicalCollegeAdmissionTest ``MCAT&apos;&apos;).  STRING
            is case-insensitive. See also #$initialismString and the
            #$abbreviation* predicates, as acronyms, abbreviations, and
            initialisms are technically distinct.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:subPropertyOf rdf:resource="#properNameStrings"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="actionExpressesFeeling">
        <rdfs:label xml:lang="en">action expresses feeling</rdfs:label>
        <rdfs:comment>(#$actionExpressesFeeling ACT EMOTYPE) means that
            the particular action ACT actually expresses the doer&apos;s
            feeling of EMOTYPE. Note: additional  complications arise in
            using this in inference, as people can `fake&apos; actions
            such as laughing, crying, etc., to mislead other people. See
            also  #$actionExpressesFeelingToward. If one wishes to make
            statements about tendencies rather than actual expressions,
            e.g. ``smiling tends to express  happiness&apos;&apos;, see #$actionTypeExpressesFeeling.</rdfs:comment>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#FeelingType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="actorPartsAffected">
        <rdfs:label xml:lang="en">actor parts affected</rdfs:label>
        <rdfs:comment>(#$actorPartsAffected ACT PART) means that PART is
            an #$objectActedOn in ACT, and it is one of the
            #$anatomicalParts of the organism which is #$bodilyActedOn
            in ACT.  For example, during a man&apos;s morning shave, his
            #$Beard is an #$actorPartsAffected, but the hand with which
            he shaves is not, because his beard is changed, but his hand
            is not changed (`acted on&apos;) in any significant way.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#AnimalBodyPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="actorPartsInvolved">
        <rdfs:label xml:lang="en">anatomical part involved</rdfs:label>
        <rdfs:comment>(#$actorPartsInvolved ACT PART) means that PART is
            one of the parts (see the predicate #$anatomicalParts) of an
            organism that is playing an active role (see the predicate
            #$doneBy and its specializations) in the event ACT, and,
            moreover, that PART is somehow involved in the event ACT.
            Some examples of #$actorPartsInvolved include: the eyes of
            someone who is sneezing (or crying); the left foot of
            someone playing in a football game; the right hand of
            someone who is shaking hands; the claws of a cat who is
            scratching someone.  As a negative example, consider a
            person&apos;s hair when that person is getting a haircut.
            The hair is not an #$actorPartsInvolved, because the person
            is passive in that event; it is, however, an
            #$actorPartsAffected (q.v.) in that event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#OrganismPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="actors">
        <rdfs:label xml:lang="en">actor (CycL predicate)</rdfs:label>
        <rdfs:comment>The most general instance of #$ActorSlot (q.v.):
            all other actor slots are specializations of this predicate.
            Thus #$actors is a broad relation that holds between a given
            event and any contemporary existing thing (see
            #$SomethingExisting) that is meaningfully involved in the
            event. (#$actors EVENT ACTOR) means that ACTOR is somehow
            saliently (directly or indirectly) involved in EVENT during
            EVENT.  An object&apos;s merely being cotemporal (see
            #$cotemporal) with an event is obviously not sufficient for
            being an actor in it, nor is participating (however
            centrally) in a representation or re-enactment of the event.
            But note that being an  actor  in the sense is _not_
            restricted to things that play  active  (as opposed to
            passive or instrumental) roles     in a given event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#constituentInSituation"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="addressText">
        <rdfs:label xml:lang="en">address text</rdfs:label>
        <rdfs:comment>The predicate #$addressText relates an instance of
            #$ContactLocation to an instance of
            #$Address-LocationDesignator. (#$addressText LOC ADDRESS)
            means that the #$ContactLocation LOC has the
            #$Address-LocationDesignator ADDRESS.</rdfs:comment>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#Address-LocationDesignator"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="adjStrings">
        <rdfs:label xml:lang="en">adj strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$adjStrings WORD STRING) states that STRING is one of the
            adjective strings for the word unit WORD in some
            microtheory.  In other words, some adjectival
            #$SpeechPartPredicate is used on WORD to relate it to
            STRING.  This predicate is  #$notAssertible since it is
            concluded from the current state of the knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:subPropertyOf rdf:resource="#prenominalModifier"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="adjacentPathsAtJunction">
        <rdfs:label xml:lang="en">path adjoining a junction</rdfs:label>
        <rdfs:comment>(adjacentPathsAtJunction JUNCT PATH) means that
            the #$JunctionOfPaths JUNCT has PATH as one of the paths
            (instances of #$Path-Generic) joining it.  A junction may
            connect many paths (it must connect at least three distinct
            paths), and a path may pass through many junctions, and may
            end at a junction.  Examples: all the streets meeting at a
            certain #$Intersection-Street, the particular #$Trachea and
            both primary bronchi meeting at the
            #$TracheobronchialJunction between a certain person&apos;s
            #$Lungs, and three #$LongitudeLines intersecting at the
            #$SouthPole.  Neither PATH nor JUNCTION need be instances of
            #$PartiallyTangible, #$TemporalThing, or #$SpatialThing;
            however if PATH is, JUNCTION must also be.</rdfs:comment>
        <rdfs:domain rdf:resource="#JunctionOfPaths"/>
        <rdfs:range rdf:resource="#Path-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="adjacentTo">
        <rdfs:label xml:lang="en">adjacent to</rdfs:label>
        <rdfs:comment>(#$adjacentTo OBJ1 OBJ2) means that OBJ1 and OBJ2
            are touching, and that their region of contact is (at least
            for practical purposes, relative to the objects&apos;
            dimensions and shapes) a line (i.e. the contact region is
            not a point, though the  line  of contact might actually
            have some height).   Moreover, OBJ1 is neither mostly above
            nor mostly below OBJ2.  Positive examples: adjacent squares
            on a chessboard, bordering countries, a connected pair of
            puzzle pieces.  Negative examples: diagonally touching
            squares on a chessboard, a geographical region and the air
            directly above it, one block stacked on top of another.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="adverbStrings">
        <rdfs:label xml:lang="en">adverb strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$adverbStrings WORD STRING) states that STRING is one of
            the adverb strings for the word unit WORD in some
            microtheory.  In other words, some adverbial
            #$SpeechPartPredicate is used on WORD to relate it to
            STRING.  This predicate is  #$notAssertible since it is
            concluded from the current state of the knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affiliatedWith">
        <rdfs:label xml:lang="en">affiliate (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$affiliatedWith AGENT1 AGENT2) means that AGENT1
            and AGENT2 are somehow affiliated.  This is a broad
            relation, involving at least the voluntary entry into an
            understood formal or semi-formal relationship, which entails
            certain rights and obligations, on the part of at least one
            of the affiliated agents.  For example, the agents might be
            business partners, kin, employer/employee,
            parent-company/subsidiary, or organization/member.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixRuleArity">
        <rdfs:label xml:lang="en">affix rule arity</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#AffixRule"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixRuleCategorialConstraint">
        <rdfs:label xml:lang="en">affix rule categorial constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#AffixRule"/>
        <rdfs:range rdf:resource="#MorphologicalRuleConstraint-Categorial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixRuleResultPOS">
        <rdfs:label xml:lang="en">affix rule result p o s</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#AffixRule"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixRuleSemanticConstraint">
        <rdfs:label xml:lang="en">affix rule semantic constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#AffixRule"/>
        <rdfs:range rdf:resource="#MorphologicalRuleConstraint-Semantic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixSemantics">
        <rdfs:label xml:lang="en">affix semantics</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalItem"/>
        <rdfs:range rdf:resource="#CycLNonAtomicTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="affixString">
        <rdfs:label xml:lang="en">affix string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lexicalItemStrings"/>
        <rdfs:domain rdf:resource="#LexicalItem"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="after">
        <rdfs:label xml:lang="en">after</rdfs:label>
        <rdfs:comment>A #$PrimitiveTemporalPredicate that relates two
            points in time.  (#$after LATER EARLIER) means #$TimePoint
            LATER is after (occurs later in time than) #$TimePoint EARLIER.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#TimePoint"/>
        <rdfs:range rdf:resource="#TimePoint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="afterAdding">
        <rdfs:label xml:lang="en">after adding</rdfs:label>
        <rdfs:comment>Whenever a source is added to a gaf use of a
            predicate, each of that predicate&apos;s #$afterAdding
            functions is called on that source.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="afterRemoving">
        <rdfs:label xml:lang="en">after removing</rdfs:label>
        <rdfs:comment>Whenever a source is removed from a gaf use of a
            predicate, each of that predicate&apos;s #$afterRemoving
            functions is called on that source.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="age">
        <rdfs:label xml:lang="en">age (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates an existing thing to its
            current age, expressed as a quantity of time (see
            #$Time-Quantity).  (#$age THING AMOUNT-OF-TIME) means that
            THING has been in existence for a total of AMOUNT-OF-TIME.
            THING can be a person, a galaxy, or any other existing thing
            (see #$SomethingExisting).  Note, however, that the
            truth-value of a sentence about the age of something is
            dependent upon the temporal context in which the sentence is
            used.  For example, in most contexts (see #$Microtheory) it
            would be a mistake to assert (#$age AlbertEinstein
            (#$YearsDuration 50)), because that sentence is only true in
            contexts restricted to the year-long interval in which
            Einstein had that age.  So the above sentence should only be
            asserted in a microtheory that is temporally qualified to
            that year (roughly 1929) or some part or it.  Alternatively,
            one can temporally qualify the sentence itself using
            #$holdsIn (q.v.).  Thus    (#$holdsIn (#$QuarterFn 2
            (#$YearFn 1929)) (#$age AlbertEinstein (#$YearsDuration
            50)), which means that Einstein is a 50-year-old during the
            entire second quarter of 1929, is true -- regardless of the
            temporal context.</rdfs:comment>
        <rdfs:domain rdf:resource="#SomethingExisting"/>
        <rdfs:range rdf:resource="#Time-Quantity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agentive-Mass">
        <rdfs:label xml:lang="en">agentive - mass</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#agentiveNounStrings"/>
        <rdfs:subPropertyOf rdf:resource="#massNumber-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agentive-Pl">
        <rdfs:label xml:lang="en">agentive - pl</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#agentiveNounStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agentive-Sg">
        <rdfs:label xml:lang="en">agentive - sg</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#singular-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#agentiveNounStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agentiveNounStrings">
        <rdfs:label xml:lang="en">agentive noun strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$agentiveNounStrings WORD STRING) states that STRING is
            one of the agentive noun strings for the word unit WORD in
            some microtheory.  In other words, some agentive
            #$SpeechPartPredicate is used on WORD to relate it to
            STRING.  This predicate is  #$notAssertible since it is
            concluded from the current state of the knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nounStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agreeingAgents">
        <rdfs:label xml:lang="en">agreeing agents</rdfs:label>
        <rdfs:comment>The predicate #$agreeingAgents relates a
            particular agreement to the agents who made, or who are
            making, the agreement.  (#$agreeingAgents AGREE PARTY) means
            that the #$Agreement AGREE has the #$Agent PARTY among its
            agreeing parties.  If an #$Agreement AGREE and an #$Agent
            PARTY are related via #$agreeingAgents, they may also be
            related by more specialized versions of #$agreeingAgents,
            such as #$agreeingBuyer or #$agreeingSeller, #$insuringAgent
            or #$policyHolder, #$employedAgent or #$employingAgent.
            Note that if (#$agreeingAgents AGREE PARTY) holds, the
            #$Agent PARTY will be mentioned in the #$Agreement AGREE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#propositionalInfoAbout"/>
        <rdfs:domain rdf:resource="#Agreement"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="agreementPeriod">
        <rdfs:label xml:lang="en">agreement period</rdfs:label>
        <rdfs:comment>The predicate #$agreementPeriod is used to
            indicate the period of time during which a particular
            agreement is in force.  (#$agreementPeriod AGREE TIME) means
            that the #$Agreement AGREE holds during the #$TimeInterval
            TIME.  TIME may or may not begin at the moment that AGREE is
            created; e.g., a person may sign an employment contract on
            the very day she begins working or several weeks before, to
            begin on a specified future date.  An #$agreementPeriod
            could even begin before the agreement was made, e.g., when
            an agent agrees to pay disputed royalties retroactively.</rdfs:comment>
        <rdfs:domain rdf:resource="#Agreement"/>
        <rdfs:range rdf:resource="#TimeInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ailmentConditionAffects">
        <rdfs:label xml:lang="en">ailing agent</rdfs:label>
        <rdfs:comment>(#$ailmentConditionAffects AILMENT ORGANISM) means
            that the #$Organism-Whole ORGANISM suffers from the
            #$AilmentCondition AILMENT.  See also #$ailmentTypeAffects.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physiologicalConditionAffects"/>
        <rdfs:subPropertyOf rdf:resource="#bodilyDoer"/>
        <rdfs:domain rdf:resource="#AilmentCondition"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="algorithmStartStep">
        <rdfs:label xml:lang="en">algorithm start step</rdfs:label>
        <rdfs:comment>(#$algorithmStartStep ALGORITHM PROGRAM-STEP)
            means that PROGRAM-STEP is the first step of ALGORITHM.</rdfs:comment>
        <rdfs:domain rdf:resource="#Algorithm"/>
        <rdfs:range rdf:resource="#ProgramStep"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="aligned">
        <rdfs:label xml:lang="en">aligned</rdfs:label>
        <rdfs:comment>(#$aligned OBJ1 OBJ2) means that the two objects
            are aligned so as to be oriented in the same way.
            Specifications of this would be #$alignedAlong to specify
            that the two objects are side-by-side, and #$alignedEndToEnd
            to specify that the two objects share a common length axis
            as well. See also a related predicate #$parallelObjects.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="alignedAlong">
        <rdfs:label xml:lang="en">aligned along</rdfs:label>
        <rdfs:comment>(#$alignedAlong OBJ1 OBJ2) means that the two
            objects are adjacent and aligned so as to be oriented in the
            same way.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#aligned"/>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="alignedAlongSurface">
        <rdfs:label xml:lang="en">aligned along surface</rdfs:label>
        <rdfs:comment>(#$alignedAlongSurface OBJ1 OBJ2) means that the
            surface of OBJ1 #$touches OBJ2 over a significant extent of
            OBJ2 (either area-wise or linearly).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#alignedAlong"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="altitudeAboveSeaLevel">
        <rdfs:label xml:lang="en">altitude (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$altitudeAboveSeaLevel OBJECT ALTITUDE) means
            that ALTITUDE is the vertical distance between the bottom of
            an arbitrary object and sea level.  #$Altimeters measure
            ALTITUDE.  See also #$altitudeAboveGround and
            #$distanceAboveSeaLevel (the latter applies only to #$GeographicalRegions.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ambientTemperature">
        <rdfs:label xml:lang="en">ambient temperature</rdfs:label>
        <rdfs:comment>A #$PhysicalAttributeDescriptionSlot. The
            predicate #$ambientTemperature is used to indicate the
            average temperature in the free space around a particular
            object.  (#$ambientTemperature OBJ TEMP) means that the
            space around the tangible object OBJ is at the #$Temperature
            TEMP.  Used with #$holdsIn (q.v.), #$ambientTemperature
            expresses the surrounding temperature for a given object at
            some point in time.  For the temperature of the object
            itself, use #$temperatureOfObject (q.v.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasAttributes"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Temperature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="amplitudeOfSignal">
        <rdfs:label xml:lang="en">amplitude of signal</rdfs:label>
        <rdfs:comment>(#$amplitudeOfSignal WAVE AMP) means the distance
            from the average to the extremes of the signal WAVE is AMP.</rdfs:comment>
        <rdfs:domain rdf:resource="#WavePropagation"/>
        <rdfs:range rdf:resource="#Distance-Absolute"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="analogousFeelings">
        <rdfs:label xml:lang="en">analogous feelings</rdfs:label>
        <rdfs:comment>(#$analogousFeelings EMOTYPE1 EMOTYPE2) means that
            a feeling of the type EMOTYPE1 is analogous to a feeling of
            the type EMOTYPE2.  In part, this means that there is a high
            probability that an agent having an emotion of one type is
            also feeling an emotion of the other type.  Often the two
            feelings differ only in degree, context, etc.  E.g.,
            (#$analogousFeelings #$Irritation #$Anger) and
            (#$analogousFeelings #$Irritation #$Impatience).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <rdfs:domain rdf:resource="#FeelingType"/>
        <rdfs:range rdf:resource="#FeelingType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="anatomicalPartTypeAffected">
        <rdfs:label xml:lang="en">anatomical part type affected</rdfs:label>
        <rdfs:comment>(#$anatomicalPartTypeAffected ACT BODYPARTTYPE)
            means that body parts of the #$AnimalBodyPartType
            BODYPARTTYPE are affected by the action ACT.  For example,
            if BRUSHING is a #$TeethCleaning event, then
            (#$anatomicalPartTypeAffected BRUSHING #$SetOfTeeth).</rdfs:comment>
        <rdfs:domain rdf:resource="#AnimalActivity"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="anatomicalParts">
        <rdfs:label xml:lang="en">anatomical part (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$anatomicalParts ORGANISM PART) means that the
            #$OrganismPart PART is an anatomical part of the
            #$Organism-Whole ORGANISM.  One should use the predicate
            #$physicalParts (q.v.), rather than #$anatomicalParts, to
            relate an instance of #$OrganismPart (for example, a hand)
            to other #$OrganismParts (for example, the fingers of the
            hand) that are part of it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#OrganismPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ancestors">
        <rdfs:label xml:lang="en">#$ancestors</rdfs:label>
        <rdfs:comment>(#$ancestors YOUNGER OLDER) means OLDER is one of
            the biological ancestors of YOUNGER.  OLDER could be one of
            YOUNGER&apos;s biological parents, biological grandparents,
            biological great-grandparents, etc.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="angularAcceleration">
        <rdfs:label xml:lang="en">angular acceleration</rdfs:label>
        <rdfs:comment>The rate at which the angle to an object is accelerating</rdfs:comment>
        <rdfs:domain rdf:resource="#PhysicalEvent"/>
        <rdfs:range rdf:resource="#AngularAccelerationRate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="antisymmetricOn">
        <rdfs:label xml:lang="en">antisymmetric on</rdfs:label>
        <rdfs:comment>This relation can be used to indicate on which
            specialization of its domain, if any, an instance of
            #$BinaryPredicate is antisymmetric. (#$antisymmetricOn PRED
            COL) means that if INS1 and INS2 are instances of COL and
            (PRED INS1 INS2) and (PRED INS2 INS1), then it follows that
            (#$equals INS1 INS2).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="approximatePay">
        <rdfs:label xml:lang="en">#$approximatePay</rdfs:label>
        <rdfs:comment>The predicate #$approximatePay relates occupations
            to  a typical range of pay offered to workers in those
            occupations.  (#$approximatePay JOBTYPE RATE) means that a
            person working in the #$PersonTypeByOccupation JOBTYPE makes
            approximately the #$MonetaryFlowRate RATE as earned income.
            RATE might be expressed in, e.g., #$DollarsPerHour,
            pounds-per-week, or yen-per-year.  RATE refers to average
            pay for the occupation JOBTYPE, excluding any unearned pay
            (such as matching 401K contributions) and the value of other
            employee benefits.</rdfs:comment>
        <rdfs:domain rdf:resource="#PersonTypeByOccupation"/>
        <rdfs:range rdf:resource="#MonetaryFlowRate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="areaOfObject">
        <rdfs:label xml:lang="en">surface area (predicate)</rdfs:label>
        <rdfs:comment>A #$PhysicalAmountSlot that is a specialization of
            #$sizeParameterOfObject  (q.v.), this predicate relates a
            spatial thing to its two-dimensional size  or #$Area (q.v.).
            (#$areaOfObject OBJ AREA) means that the two-dimensional
            size of OBJ is AREA.  OBJ might be, for example, a desk top,
            a geographical  region, or a cross-section of wire.   Of
            course not every spatial thing has  an area.
            #$TwoDimensionalGeometricThings (q.v.) like discs, interiors
            of  squares, and cross sections have areas; and so do
            three-dimensional things  that have only two  salient
            dimensions in most contexts, such as floors,  tennis courts,
            and geograhical regions.  For the representing the areas of
            the latter sort of thing, consider using the more
            specialized predicate  #$areaOfRegion.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sizeParameterOfObject"/>
        <rdfs:domain rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:range rdf:resource="#Area"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="areaOfRegion">
        <rdfs:label xml:lang="en">area of region</rdfs:label>
        <rdfs:comment>This predicate relates a geographical region to
            its physical size or area. (#$areaOfRegion REGION AREA)
            means that the physical size of REGION is AREA.  Examples:
            (#$areaOfRegion #$LakeErie (#$SquareMile 9940)),
            (#$areaOfRegion #$Elba-Island-Italy (#$SquareMile 86)),
            (#$areaOfRegion #$VaticanCity (#$SquareMile 0.17)),
            (#$areaOfRegion #$China-PeoplesRepublic (#$SquareMile
            3705390)).  For stating the areas of other (strictly or
            roughly  two-dimensional ) sorts of objects, see the
            generalization #$areaOfObject; and see #$Area for ways of
            representing areas.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#areaOfObject"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#Area"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="areasOfOrigin">
        <rdfs:label xml:lang="en">areas of origin</rdfs:label>
        <rdfs:comment>The predicate #$areasOfOrigin relates an ethnic
            group to a particular region in which its members
            originated.  (#$areasOfOrigin GROUP REGION) means that the
            #$EthnicGroupType GROUP originated in the
            #$GeographicalRegion REGION.  For example, to indicate that
            Circassians originated in Asia, we would say
            (#$areasOfOrigin #$EthnicGroupOfCircassians
            #$ContinentOfAsia).  Ethnic groups may have originated in
            several different areas; e.g., the #$EthnicGroupOfHutu is
            native to #$Rwanda, #$Burundi, #$Tanzania, and #$Uganda.</rdfs:comment>
        <rdfs:domain rdf:resource="#PersonTypeByEthnicity"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg1Format">
        <rdfs:label xml:lang="en">arg 1 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the first
            (or  arg1 ) argument-place of a given predicate.
            (#$arg1Format PRED FORMAT) means that PRED&apos;s arg1 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg1Genl">
        <rdfs:label xml:lang="en">arg 1 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg1Genl
            RELN COL)  means that semantic well-formedness requires that
            anything given as the first argument to RELN must be a
            subcollection of COL.  That is, (RELN ARG1 ...) is
            semantically well-formed only if (#$genls ARG1 COL) holds.
            For an  explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argGenl for a similar but more flexible  ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg1GenlAttribute">
        <rdfs:label xml:lang="en">arg 1 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg1GenlAttribute REL ATTVAL) means that
            anything given as the first argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-1 ATTVAL) must hold for a
            prospective first argument ARG-1).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg1Isa">
        <rdfs:label xml:lang="en">arg 1 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg1Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the first argument to RELN must be an
            instance of COL.  That is, (RELN ARG1 ...) is semantically
            well-formed only if (#$isa ARG1 COL) holds.  For an
            explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argIsa for a similar but more flexible  ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg2Format">
        <rdfs:label xml:lang="en">arg 2 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the second
            (or  arg2 ) argument-place of a given predicate.
            (#$arg2Format PRED FORMAT) means that PRED&apos;s arg2 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg2Genl">
        <rdfs:label xml:lang="en">arg 2 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg2Genl
            RELN COL)   means that semantic well-formedness requires
            that anything given as the second  argument to RELN must be
            a subcollection of COL.  That is, (RELN ARG1 ARG2 ...)  is
            semantically well-formed only if (#$genls ARG2 COL) holds.
            For an   explanation of semantic well-formedness, see
            #$CycLExpression-Assertible  and its specializations.  See
            #$argGenl for a similar but more flexible ternary   predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg2GenlAttribute">
        <rdfs:label xml:lang="en">arg 2 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg2GenlAttribute REL ATTVAL) means that
            anything given as the second argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-2 ATTVAL) must hold for a
            prospective second argument ARG-2).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg2Isa">
        <rdfs:label xml:lang="en">arg 2 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg2Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the second argument to RELN must be an
            instance of COL.  That is, (RELN ARG1 ARG2 ...) is
            semantically well-formed only if (#$isa ARG2 COL) holds.
            For an  explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argIsa for a similar but more flexible ternary  predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg3Format">
        <rdfs:label xml:lang="en">arg 3 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the third
            (or  arg3 ) argument-place of a given predicate.
            (#$arg3Format PRED FORMAT) means that PRED&apos;s arg3 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg3Genl">
        <rdfs:label xml:lang="en">arg 3 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg3Genl
            RELN COL)   means that semantic well-formedness requires
            that anything given as the third  argument to RELN must be a
            subcollection of COL.  That is, (RELN ARG1 ARG2 ARG3 ...)
            is semantically well-formed only if (#$genls ARG3 COL)
            holds.  For an   explanation of semantic well-formedness,
            see #$CycLExpression-Assertible  and its specializations.
            See #$argGenl for a similar but more flexible ternary   predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg3GenlAttribute">
        <rdfs:label xml:lang="en">arg 3 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg3GenlAttribute REL ATTVAL) means that
            anything given as the third argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-3 ATTVAL) must hold for a
            prospective third argument ARG-3).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg3Isa">
        <rdfs:label xml:lang="en">arg 3 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg3Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the third argument to RELN must be an
            instance of COL.  That is, (RELN ARG1 ARG2 ARG3 ...) is
            semantically well-formed only if (#$isa ARG3 COL) holds.
            For an  explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argIsa for a similar but more flexible ternary  predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg4Format">
        <rdfs:label xml:lang="en">arg 4 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the fourth
            (or  arg4 ) argument-place of a given predicate.
            (#$arg4Format PRED FORMAT) means that PRED&apos;s arg4 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg4Genl">
        <rdfs:label xml:lang="en">arg 4 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg4Genl
            RELN COL)   means that semantic well-formedness requires
            that anything given as the fourth  argument to RELN must be
            a subcollection of COL.  That is,   (RELN ARG1 ARG2 ARG3
            ARG4 ...) is semantically well-formed only if   (#$genls
            ARG4 COL) holds.  For an explanation of semantic
            well-formedness, see   #$CycLExpression-Assertible and its
            specializations.  See #$argGenl for a   similar but more
            flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg4GenlAttribute">
        <rdfs:label xml:lang="en">arg 4 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg4GenlAttribute REL ATTVAL) means that
            anything given as the fourth argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-4 ATTVAL) must hold for a
            prospective fourth argument ARG-4).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg4Isa">
        <rdfs:label xml:lang="en">arg 4 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg4Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the fourth argument to RELN must be an
            instance of COL.  That is,  (RELN ARG1 ARG2 ARG3 ARG4 ...)
            is semantically well-formed only if  (#$isa ARG4 COL) holds.
            For an explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argIsa for a  similar but more flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg5Format">
        <rdfs:label xml:lang="en">arg 5 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the fifth
            (or  arg5 ) argument-place of a given predicate.
            (#$arg5Format PRED FORMAT) means that PRED&apos;s arg5 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg5Genl">
        <rdfs:label xml:lang="en">arg 5 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg5Genl
            RELN COL)   means that semantic well-formedness requires
            that anything given as the fifth  argument to RELN must be a
            subcollection of COL.  That is,   (RELN ARG1 ARG2 ARG3 ARG4
            ARG5 ...) is semantically well-formed only if   (#$genls
            ARG5 COL) holds.  For an explanation of semantic
            well-formedness, see   #$CycLExpression-Assertible and its
            specializations.  See #$argGenl for a   similar but more
            flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg5GenlAttribute">
        <rdfs:label xml:lang="en">arg 5 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg5GenlAttribute REL ATTVAL) means that
            anything given as the fifth argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-5 ATTVAL) must hold for a
            prospective fifth argument ARG-5).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg5Isa">
        <rdfs:label xml:lang="en">arg 5 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg5Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the fifth argument to RELN must be an
            instance of COL.  That is,  (RELN ARG1 ARG2 ARG3 ARG4 ARG5
            ...) is semantically well-formed only if  (#$isa ARG5 COL)
            holds.  For an explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its specializations.  See
            #$argIsa for a  similar but more flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg6Format">
        <rdfs:label xml:lang="en">arg 6 format</rdfs:label>
        <rdfs:comment>An instance of #$ArgFormatPredicate (q.v.) used to
            place a particular #$Format (q.v.) constraint on the sixth
            (or  arg6 ) argument-place of a given predicate.
            (#$arg6Format PRED FORMAT) means that PRED&apos;s arg6 is
            constrained to FORMAT.  See the reified instances #$Format
            for  further details.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg6Genl">
        <rdfs:label xml:lang="en">arg 6 genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.).  (#$arg6Genl
            RELN COL)   means that semantic well-formedness requires
            that anything given as the sixth  argument to RELN must be a
            subcollection of COL.  That is,   (RELN ARG1 ARG2 ARG3 ARG4
            ARG5 ARG6 ...) is semantically well-formed only if
            (#$genls ARG6 COL) holds.  For an explanation of semantic
            well-formedness, see   #$CycLExpression-Assertible and its
            specializations.  See #$argGenl for a   similar but more
            flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg6GenlAttribute">
        <rdfs:label xml:lang="en">arg 6 genl attribute</rdfs:label>
        <rdfs:comment>(#$arg6GenlAttribute REL ATTVAL) means that
            anything given as the sixth argument to the #$Relation REL
            has to be a specialized form of the #$AttributeValue ATTVAL
            (so that (#$genlAttributes ARG-6 ATTVAL) must hold for a
            prospective sixth argument ARG-6).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arg6Isa">
        <rdfs:label xml:lang="en">arg 6 isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.).  (#$arg6Isa
            RELN COL)  means that semantic well-formedness requires that
            anything given as the sixth argument to RELN must be an
            instance of COL.  That is,  (RELN ARG1 ARG2 ARG3 ARG4 ARG5
            ARG6 ...) is semantically well-formed only if  (#$isa ARG6
            COL) holds.  For an explanation of semantic well-formedness,
            see  #$CycLExpression-Assertible and its specializations.
            See #$argIsa for a similar but more flexible ternary predicate.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="argsGenl">
        <rdfs:label xml:lang="en">args genl</rdfs:label>
        <rdfs:comment>A binary #$ArgGenlPredicate (q.v.) that is used to
            put   a specified #$genls based argument-type constraint on
            all of a given relation&apos;s   argument-places at once.
            (#$argsGenl RELN COL) means that semantic well-formedness
            requires that each argument to which RELN is applied
            (regardless of argument-place) be an subcollection of COL.
            For example, `(#$argsGenl #$PerformSimultaneouslyFn
            #$Event)&apos; means that the function
            #$PerformSimultaneouslyFn must only be applied to types of
            events.  #$argsGenl is particularly useful for constraining
            (any and all of) the arguments to a #$VariableArityRelation
            (the preceding example being a case in point); though
            #$argsGenl may be applied to fixed-arity relations as well.
            For an explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its immediate
            specializations.  See also #$argsIsa.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="argsIsa">
        <rdfs:label xml:lang="en">args isa</rdfs:label>
        <rdfs:comment>A binary #$ArgIsaPredicate (q.v.) that is used to
            put   a specified #$isa based argument-type constraint on
            all of a given relation&apos;s   argument-places at once.
            (#$argsIsa RELN COL) means that semantic well-formedness
            requires that each argument to which RELN is applied
            (regardless of argument-place) be an instance of COL.  For
            example, `(#$argsIsa #$PlusFn #$ScalarInterval)&apos; means
            that the function #$PlusFn must only be applied to scalar
            intervals.   #$argsIsa is particularly useful for
            constraining (any and all of) the arguments to a
            #$VariableArityRelation (the preceding example being a case
            in point); though #$argsIsa may be applied to fixed-arity
            relations as well.  For an explanation of semantic
            well-formedness, see #$CycLExpression-Assertible and its
            immediate specializations.  See also   #$argsGenl.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arity">
        <rdfs:label xml:lang="en">arity (CycL predicate)</rdfs:label>
        <rdfs:comment>A #$MetaRelation used for stating that a given
            relation takes a specified number of arguments.  (#$arity
            RELN N)  means that that semantic well-formedness requires
            that RELN take  exactly N arguments at a time.  That is, a
            formula  (RELN ARG1 ... ARGM) is semantically well-formed
            only if M = N.   For example, the #$arity of any instance of
            #$BinaryPredicate is 2. Note that full semantic
            well-formedness requires obeying argument-type constraints
            (see #$ArgTypePredicate) as well as arity constraints.  For
            a general explanation of semantic well-formedness, see
            #$CycLExpression-Assertible.  See also #$CycLExpression-Askable.</rdfs:comment>
        <rdfs:domain rdf:resource="#FixedArityRelation"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arityMax">
        <rdfs:label xml:lang="en">arity max</rdfs:label>
        <rdfs:comment>A #$MetaRelation for specifying the maximum number
            of arguments a given #$VariableArityRelation can take if the
            resulting formula is to be semantically well-formed.
            (#$arityMax RELN N) means   that semantic well-formedness
            requires that RELN take at most N arguments at   a time.
            More precisely: a formula (RELN ARG1..ARGM) is semantically
            well-formed only if M is less than or equal to N.  For
            example, the   maximum-arity of any instance of
            #$UnitOfMeasure is 2.  Note that full semantic
            well-formedness requires obeying argument-type constraints
            (see   #$ArgTypePredicate) as well as arity constraints.
            For a general explanation   of semantic well-formedness, see
            #$CycLExpression-Assertible.  See also   #$arityMin and #$arity.</rdfs:comment>
        <rdfs:domain rdf:resource="#VariableArityRelation"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="arityMin">
        <rdfs:label xml:lang="en">arity min</rdfs:label>
        <rdfs:comment>A #$MetaRelation for specifying the minimum number
            of arguments a given #$VariableArityRelation must take if
            the resulting formula is to be semantically well-formed.
            (#$arityMin RELN N) means that semantic well-formedness
            requires that RELN take at least N arguments at a time.
            More precisely: a formula (RELN ARG1..ARGM) is semantically
            well-formed only if M is greater than or equal to N.  For
            example, the minimum-arity of any instance of
            #$UnitOfMeasure is 1.  Note that full semantic
            well-formedness requires obeying argument-type constraints
            (see #$ArgTypePredicate) as well as arity constraints. For a
            general explanation of semantic well-formedness, see
            #$CycLExpression-Assertible.  See also #$arityMax and #$arity.</rdfs:comment>
        <rdfs:domain rdf:resource="#VariableArityRelation"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="artifactHonors">
        <rdfs:label xml:lang="en">honoree</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$Artifact and #$SymbolicThing to instances of
            #$TemporalThing, and a specialization of #$honorsThing.
            (#$artifactHonors ARTIFACT HONOREE) means that ARTIFACT is
            created or constructed to honor or commemorate HONOREE, and
            to cause people who perceive ARTIFACT to remember and
            respect HONOREE.  HONOREE can be a #$Person, a group of
            people, a pet, an event (such as a battle won) or another
            physical object (even a body part, in the case of the statue
            at Saratoga honoring Gen. Benedict Arnold&apos;s untainted
            leg).  For cases where ARTIFACT is an instance of
            #$MemorialMarker and HONOREE is an #$Agent, see the more
            specific predicate #$monumentHonors.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:subPropertyOf rdf:resource="#symbolizes"/>
        <rdfs:subPropertyOf rdf:resource="#honorsThing"/>
        <rdfs:domain rdf:resource="#Artifact"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="artisticWorksCreated">
        <rdfs:label xml:lang="en">artistic works created</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$Artist to instances of #$ArtObject.
            (#$artisticWorksCreated AGT ART) means that AGT created ART.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Artist"/>
        <rdfs:range rdf:resource="#ArtObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertedArg1BinaryPreds">
        <rdfs:label xml:lang="en">assertion arg1 binary predicate</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$assertedArg1BinaryPreds COL BIN-PRED) means that for at
            least one instance INS of COL and one VALUE, it has been
            asserted that (BIN-PRED INS VALUE). Note that this predicate
            is itself #$notAssertible (q.v.), since it must be computed
            from the state of the knowledge base.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertedTermSentences">
        <rdfs:label xml:lang="en">asserted term sentences</rdfs:label>
        <rdfs:comment>(#$assertedTermSentences THING SENTENCE) means
            that SENTENCE has been asserted to the Cyc Knowledge Base
            (and is thus a  #$CycLAssertion) and that THING is mentioned
            in SENTENCE.  More precisely, and assuming the
            #$assertedTermSentences formula contains no free variables
            (and   is thus a  ground atomic formula  or  GAF ): the CycL
            term immediately following the constant
            `#$assertedTermSentences&apos; in the formula occurs in
            SENTENCE.  For example, (#$assertedTermSentences #$France
            (#$bordersOn #$France #$Germany)) holds.  See also
            #$assertedSentence and #$assertedPredicateArg for related
            predicates about assertions; and see #$termFormulas for a
            more general predicate that does not entail that SENTENCE
            has been asserted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termFormulas"/>
        <rdfs:domain rdf:resource="#CycLTerm"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionDirection">
        <rdfs:label xml:lang="en">assertion direction</rdfs:label>
        <rdfs:comment>(#$assertionDirection ASSERTION DIRECTION) states
            that the #$CycLAssertion ASSERTION has the
            #$CycLAssertionDirection DIRECTION as its inference
            direction.  DIRECTION is normally
            #$Backward-AssertionDirection for rules and
            #$Forward-AssertionDirection for ground atomic formulas (&apos;GAFs&apos;).</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#CycLAssertionDirection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionID">
        <rdfs:label xml:lang="en">assertion i d</rdfs:label>
        <rdfs:comment>A predicate which relates each Cyc assertion to an
            internal identification number for it. This number is unique
            within any given image, though not necessarily across
            images. (#$assertionID ASSERTION ID) states that the
            #$NonNegativeInteger ID is the unique internal id for the
            #$CycLAssertion ASSERTION. For obvious reasons, this
            predicate is #$notAssertible.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionJustificationAttribute">
        <rdfs:label xml:lang="en">assertion justification attribute</rdfs:label>
        <rdfs:comment>(#$assertionJustificationAttribute ASSERTION JUST)
            means that the #$CycLAssertion ASSERTION is supported by a
            justification having the #$JustificationAttribute JUST (for
            example, #$CausallySupported, #$JustifiedByAuthority).</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionMt">
        <rdfs:label xml:lang="en">assertion mt</rdfs:label>
        <rdfs:comment>A predicate which relates Cyc assertions to the
            microtheories in which they reside. (#$assertionMt ASSERTION
            MT) states that the #$CycLAssertion ASSERTION resides in the
            #$Microtheory MT.   Note that the first argument to this
            predicate is #$CycLAssertion, rather than
            #$ELSentence-Assertible. This renders the predicate
            #$functionalInArgs 2, since any given #$CycLAssertion only
            appears in one microtheory (though another assertion with an
            identical #$ELSentence-Assertible may well appear in a
            different microtheory - cf. #$assertionSentence).</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionSentence">
        <rdfs:label xml:lang="en">assertion sentence</rdfs:label>
        <rdfs:comment>(#$assertionSentence ASSERTION SENT) means that in
            the #$CycLAssertion ASSERTION, the statement asserted is
            what is represented by the &apos;epistemological
            formula&apos; or sentence (more precisely,
            #$ELSentence-Assertible) SENT.  Note that each assertion
            will have exactly one corresponding sentence (though
            it&apos;s worth noting that after canonicalization this
            sentence may appear in the browser in another, albeit
            logically equivalent, form -- particularly if it
            &apos;polycanonicalizes&apos;, cf.
            #$MetaAssertionsForPolyCanonicalizingAssertions).     Note,
            however, that some instances of #$ELSentence-Assertible may
            correspond to more than one #$CycLAssertion. For example,
            the formula (#$isa #$Muffet #$Poodle) might appear in the
            following:     (#$ist #$SportsMt (#$isa #$Muffet #$Poodle))
            and     (#$ist #$CyclistsMt (#$isa #$Muffet #$Poodle)).   In
            other words, since any given #$CycLAssertion has the form
            (#$ist MT SOME-EL-SENT), any time an #$ELSentence-Assertible
            is asserted in multiple microtheories the resulting
            assertions in each of those microtheories will share the
            common sentence. See also #$assertionTruth,
            #$assertionStrength  and #$assertionMt.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionStrength">
        <rdfs:label xml:lang="en">assertion strength</rdfs:label>
        <rdfs:comment>(#$assertionStrength ASSERTION STRENGTH) states
            that argumentation has determined that the arguments
            supporting ASSERTION indicate that STRENGTH is the
            justification strength of ASSERTION.  In other words,
            STRENGTH indicates how strongly the truth of ASSERTION is
            justified. The three possible justification strengths are
            #$Default-JustificationStrength,
            #$Monotonic-JustificationStrength and
            #$Unknown-JustificationStrength. See also #$assertionTruth, #$assertionMt.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#JustificationStrength"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assertionTruth">
        <rdfs:label xml:lang="en">assertion truth</rdfs:label>
        <rdfs:comment>(assertionTruth ASSERTION TRUTH) states that
            argumentation has determined that the arguments supporting
            ASSERTION indicate that TRUTH is the truth of ASSERTION.
            TRUTH will either be #$True-JustificationTruth,
            #$False-JustificationTruth or #$Unknown-JustificationTruth.
            See also #$assertionStrength.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#JustificationTruth"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="assistingAgent">
        <rdfs:label xml:lang="en">#$assistingAgent</rdfs:label>
        <rdfs:comment>(#$assistingAgent ACT AGENT) means that AGENT is
            one of the agents assisting in the performance of ACT; AGENT
            itself may or may not also be performing ACT.  AGENT is
            doing some tasks related to ACT but which are not directly
            #$subEvents of performing the main or focus action.  Thus,
            `assisting&apos; here means doing such supporting activities
            as fetching supplies or tools needed in ACT; helping to
            manipulate objects involved in ACT; gathering an audience,
            or booking the performer, if ACT is a public performance,
            and so forth.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#deliberateActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="atomicNumber">
        <rdfs:label xml:lang="en">atomic number (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates an atomic number to an
            element.  (#$atomicNumber ELEMENT INT) means that ELEMENT,
            an instance of #$ElementStuffTypeByNumberOfProtons, has the
            #$PositiveInteger INT for its atomic number.  This means
            that any instance of (#$AtomFn ELEMENT) must have INT many
            protons (see #$Proton) in its atomic nucleus (see
            #$AtomicNucleus).  For example, (#$atomicNumber #$Carbon 6)
            means that every instance of (#$AtomFn #$Carbon) has six
            protons in its nucleus.</rdfs:comment>
        <rdfs:domain rdf:resource="#ElementStuffTypeByNumberOfProtons"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="atomicSymbol">
        <rdfs:label xml:lang="en">atomic symbol (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#abbreviationString-PN"/>
        <rdfs:domain rdf:resource="#ElementStuffTypeByNumberOfProtons"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="authorityForMt">
        <rdfs:label xml:lang="en">authority for microtheory</rdfs:label>
        <rdfs:comment>(#$authorityForMt AUTHORITY MT) means that
            AUTHORITY, either an #$IntelligentAgent or a
            #$InformationBearingThing, claims that the propositions
            asserted in MT are true.  See also the related predicate, #$authorityFor.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="awareOf">
        <rdfs:label xml:lang="en">awareness</rdfs:label>
        <rdfs:comment>(#$awareOf AGENT THING) means that AGENT is aware
            of the (present or past) existence of THING. At minimum
            AGENT must have a belief pertaining to THING, one that could
            be expressed in the form `AGENT believes that X is
            ...&apos;, where `X&apos; is an expression that refers to THING.</rdfs:comment>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="awareOfProp">
        <rdfs:label xml:lang="en">awareness of the proposition</rdfs:label>
        <rdfs:comment>(#$awareOfProp AGENT PROP) means that AGENT is
            aware of the proposition, PROP, in some way.  Maybe AGENT
            believes or disbelieves the proposition, is trying to decide
            on the truth of PROP, is aware that the truth of PROP is at
            issue, has a positive or negative interest in the
            proposition being or becoming true, or in some other way has
            considered PROP.  Normally, a more specific predicate can be
            used.  See #$hasOpinionAsToTruthOf (and its specializations)
            and #$interests-Prop (and its specializations).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="axisOfRotation">
        <rdfs:label xml:lang="en">axis of rotation</rdfs:label>
        <rdfs:comment>(#$axisOfRotation ROT AXIS) means that in the
            #$Movement-Rotation ROT, the #$primaryObjectMoving rotates
            in a counterclockwise direction about AXIS (use the right
            hand rule i.e. point your thumb in the direction that AXIS
            points.  Curl your fingers.  The direction from your
            knuckles to your fingertips is the direction of rotation.  A
            rotation in the opposite direction is simply an axis whose
            direction is 180 degrees away from AXIS.  AXIS must
            spatially intersect some line segment between two points in
            the spatial extent of the #$primaryObjectMoving. That is, it
            must  either spatially intersect the #$primaryObjectMoving
            or go through a &apos;hole&apos; in it. Positive examples
            include the earth spinning on the axis between its poles, a
            tire spinning around an axis through the middle of the wheel
            on which it is installed, and a pendulum swinging on an axis
            through its endpoint. Negative examples include the movement
            of the earth orbiting around the sun and of a child swinging
            on a swing. Both of these are examples of translation, not rotation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#Movement-Rotation"/>
        <rdfs:range rdf:resource="#Axis"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="barLevelOfPhrase">
        <rdfs:label xml:lang="en">bar level of phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$barLevelOfPhrase PHRASE N) indicates that the degree of
            syntactic saturation, or bar level, of PHRASE is N. For
            example, in most linguistic theories incorporating this
            concept, for any #$NounPhrase NP, it is true that
            (#$barLevelOfPhrase NP 2).</rdfs:comment>
        <rdfs:domain rdf:resource="#SententialConstituent"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="barLevelOfPhraseType">
        <rdfs:label xml:lang="en">bar level of phrase type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LinguisticObjectType"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="baseForm">
        <rdfs:label xml:lang="en">base form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="baseOfUnit">
        <rdfs:label xml:lang="en">base of unit</rdfs:label>
        <rdfs:comment>(#$baseOfUnit PUN BUN) means that PUN is an
            instance of #$UnitOfMeasureWithPrefix that is formed by
            affixing an instance of #$MetricUnitPrefix to BUN.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnitOfMeasureWithPrefix"/>
        <rdfs:range rdf:resource="#UnitOfMeasureNoPrefix"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="baseSet">
        <rdfs:label xml:lang="en">base set</rdfs:label>
        <rdfs:comment>(#$baseSet STRUCTURE SET) means that SET is the
            base set of #$RelationalStructure STRUCTURE.  That is, SET
            is the domain from which the individual elements of the
            structure are drawn.  Although there may be several
            relations involved in the relational structure, they all
            relate members of the base set.  As each relational
            structure has a unique base set, this predicate is functional.</rdfs:comment>
        <rdfs:domain rdf:resource="#RelationalStructure"/>
        <rdfs:range rdf:resource="#Set-Mathematical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="basedInRegion">
        <rdfs:label xml:lang="en">based in region</rdfs:label>
        <rdfs:comment>(#$basedInRegion AGENT REGION) means that the
            #$Organization or #$Person, AGENT, operates out of the
            #$GeographicalRegion, REGION.  A person based in a region
            normally resides in that region, even though that may not be
            the person&apos;s permanent residence.  An #$Organization
            based in a region has its headquarters there.  See #$hasHeadquartersInCountry.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:subPropertyOf rdf:resource="#operatesInRegion"/>
        <rdfs:domain rdf:resource="#SocialBeing"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="basicPrice-Event">
        <rdfs:label xml:lang="en">basic price - event</rdfs:label>
        <rdfs:comment>(basicPrice-Event BUYING MONEY) means that the sum
            of the basic price of all the merchandise and services
            bought in the #$Buying event BUYING was the #$MonetaryValue
            MONEY.  MONEY does not include tax or service charges -- for
            that, see #$totalCharge-Event. This predicate is not to be
            confused with #$basicPrice -- which relates _bought things_
            (i.e. instances of #$TemporalThing) to their basic prices.</rdfs:comment>
        <rdfs:domain rdf:resource="#Buying"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="basicSpeechPartPred">
        <rdfs:label xml:lang="en">basic speech part pred</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate asserts the relation between parts of speech and
            their   basic  forms, i.e., the forms from which other
            regular forms are  predictable.  For instance, since the
            regular #$plural of a  #$CountNoun is predictable from the
            #$singular, it is the case that  (#$basicSpeechPartPred
            #$CountNoun #$singular).</rdfs:comment>
        <rdfs:domain rdf:resource="#SpeechPart"/>
        <rdfs:range rdf:resource="#SpeechPartPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="bayesNetOfMicrotheory">
        <rdfs:label xml:lang="en">bayes net of microtheory</rdfs:label>
        <rdfs:comment>A predicate used for probability reasoning using
            &apos;Bayesian Networks&apos;.  (#$bayesNetOfMicrotheory
            BNET MT) means that the #$BayesNet BNET has been created for
            the #$Microtheory MT.  This means that all of the nodes in
            BNET are propositions (Cyc formulae) that are asserted in
            MT, and are linked to one another by #$bayesParent
            assertions in the same MT.  This predicate associates the
            network, a #$DirectedAcyclicGraph, with the microtheory. For
            every #$BayesNet there is exactly one #$Microtheory with
            which it is associated, but (at present) one #$Microtheory
            may have multiple #$BayesNets associated with it.  Some, but
            possibly not all, of the #$CycLAssertions in the
            #$Microtheory will be nodes in the #$BayesNet.</rdfs:comment>
        <rdfs:domain rdf:resource="#BayesNet"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="behind-Directly">
        <rdfs:label xml:lang="en">behind - directly</rdfs:label>
        <rdfs:comment>(#$behind-Directly AFT FORE) means that AFT is
            directly behind tangible object FORE.  More precisely, it
            implies both (#$behind-Generally AFT FORE) and that there is
            at least one line parallel to the backward pointing axis of
            FORE that intersects both AFT and FORE.  Note that FORE must
            have a back side.  AFT may be intangible, such as an image
            projected behind an actor on a stage.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#behind-Generally"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="behind-Generally">
        <rdfs:label xml:lang="en">behind - generally</rdfs:label>
        <rdfs:comment>(#$behind-Generally AFT FORE) means that AFT is
            behind FORE.  More precisely, a line originating at the
            center of FORE projecting away from the front side of FORE
            and parallel to the intrinsic front-to-back axis of FORE
            forms an angle of less than 45 degrees with a line
            intersecting both AFT and FORE.  AFT may be intangible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="beliefStatements">
        <rdfs:label xml:lang="en">belief statements</rdfs:label>
        <rdfs:comment>(#$beliefStatements SYSTEM BELIEF) means that the
            belief expressed by the #$ELSentence-Assertible BELIEF is
            part of the #$BeliefSystem SYSTEM. Note that #$BeliefSystems
            -- ideologies in terms of which agents make sense of the
            world -- are instances of #$AbstractInformationalThing
            (q.v.).  In order to relate a belief to an actual #$Agent
            who believes it, see the predicate #$beliefs.</rdfs:comment>
        <rdfs:domain rdf:resource="#BeliefSystem"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="beliefs">
        <rdfs:label xml:lang="en">#$beliefs</rdfs:label>
        <rdfs:comment>(#$beliefs AGENT SENT) means that the #$Agent
            AGENT subscribes to the truth of the proposition PROP
            expressed by SENT (an #$ELSentence-Assertible).  Note that
            PROP might or might not actually be true. See also the
            predicate #$beliefStatements, which relates a belief to a #$BeliefSystem.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasOpinionAsToTruthOf"/>
        <rdfs:subPropertyOf rdf:resource="#thinksProbable"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="beneficiary">
        <rdfs:label xml:lang="en">beneficiary</rdfs:label>
        <rdfs:comment>(#$beneficiary ACT AGT) means that the #$Agent AGT
            benefits from the performance of the action ACT.  Some
            desire or interest of AGT is served, enabled, helped, or
            satisfied by the performance of ACT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="biases">
        <rdfs:label xml:lang="en">bias (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$biases AGT PROP) means that the #$Agent AGT has
            the unsubstantiated belief PROP (represented by a
            #$ELSentence-Assertible).  Biases generally are so deeply
            rooted in the agent that the agent may not be consciously
            aware that PROP is rationally undersupported, and it may be
            concomittantly harder to change their mind about PROP.
            Note:  PROP might or might not turn out to be true (in
            various contexts); often, PROP is some overgeneralization
            which is sometimes true but often false, or which once was
            true but now is usually false, etc.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#opinions"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="biologicalFather">
        <rdfs:label xml:lang="en">biological father (CycL predicate)</rdfs:label>
        <rdfs:comment>A specialization of #$biologicalParents that
            relates a given #$Animal to its male biological parent.
            (#$biologicalFather OFFSPRING MALE) means that MALE is the
            male  biological parent of OFFSPRING.  See also #$father.</rdfs:comment>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#MaleAnimal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="biologicalMother">
        <rdfs:label xml:lang="en">biological mother (CycL predicate)</rdfs:label>
        <rdfs:comment>A specialization of #$biologicalParents that
            relates a given #$Animal to its female biological parent.
            (#$biologicalMother OFFSPRING FEMALE) means that FEMALE is
            the female  biological parent of OFFSPRING.  Cf. #$mother.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#mother"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#FemaleAnimal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="biologicalOffspring">
        <rdfs:label xml:lang="en">biological child (CycL predicate)</rdfs:label>
        <rdfs:comment>A specialization of #$biologicalRelatives.
            (#$biologicalOffspring PARENT OFFSPRING) means that PARENT
            is one of the biological parents of OFFSPRING.
            Specializations of this predicate include
            #$biologicalDaughters and #$biologicalSons.  Cf. #$children.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="biologicalRelatives">
        <rdfs:label xml:lang="en">relative</rdfs:label>
        <rdfs:comment>(#$biologicalRelatives ORG1 ORG2) means that the
            #$Organism-Whole ORG1 and the #$Organism-Whole ORG2 are
            biological relatives, related by birth.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#relatives"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="birthChild">
        <rdfs:label xml:lang="en">animal born</rdfs:label>
        <rdfs:comment>(#$birthChild BIRTH ANIM) means that ANIM is the
            #$Animal that is born in the #$BirthEvent BIRTH.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#bodilyActedOn"/>
        <rdfs:subPropertyOf rdf:resource="#objectOfStateChange"/>
        <rdfs:domain rdf:resource="#BirthEvent"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="birthDate">
        <rdfs:label xml:lang="en">birthdate (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$birthDate X Y) indicates that the #$Entity X
            came into existence during #$Date Y.  For people, this is
            the date at which they were born, hence the name of this
            predicate.  The first argument to this predicate must be an
            #$Entity, and not just any old #$SomethingExisting, because
            we don&apos;t want to talk about the #$birthDate or
            #$dateOfDeath of a subabstraction like
            AlbertEinsteinWhileAtPrinceton; in other words, proper
            subabstractions will have #$startingDates and #$endingDates,
            but only true #$Entitys will have a #$birthDate or
            #$dateOfDeath.  To specify the #$DayOfYearType on which a
            #$Person was born, use #$birthDay.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startingDate"/>
        <rdfs:domain rdf:resource="#Entity"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="birthParent">
        <rdfs:label xml:lang="en">animal giving birth</rdfs:label>
        <rdfs:comment>A predicate relating a birth event to the parent
            giving birth.  (#$birthParent BIRTH PARENT) means that the
            #$Animal PARENT is the parent giving birth in the
            #$BirthEvent BIRTH.  Note that PARENT is typically also the
            #$femaleParentActor of some preceding #$BiologicalReproductionEvent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#bodilyDoer"/>
        <rdfs:subPropertyOf rdf:resource="#objectOfStateChange"/>
        <rdfs:domain rdf:resource="#BirthEvent"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="boardMembers">
        <rdfs:label xml:lang="en">board members</rdfs:label>
        <rdfs:comment>The predicate #$boardMembers relates a particular
            organization to the persons who serve on its board of
            directors.  (#$boardMembers ORG PERSON) means PERSON belongs
            to that instance of #$BoardOfDirectors which is responsible
            for oversight of the #$Organization ORG.  A member of the
            Board of Directors of an organization may or may not be an
            executive of the organization.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasMembers"/>
        <rdfs:subPropertyOf rdf:resource="#receivesServicesFrom"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="bodilyActedOn">
        <rdfs:label xml:lang="en">agent physically acted on</rdfs:label>
        <rdfs:comment>The predicate #$bodilyActedOn is used to describe
            an event in which a living organism is acted on by some
            external agency.  (#$bodilyActedOn EVENT ORG) means that ORG
            is a living organism (i.e., an #$Organism-Whole) that is
            being affected in EVENT.  ORG itself may be intentionally
            participating in EVENT (e.g., a person voluntarily getting a
            haircut) or not (e.g., an animal hit by a car).  Either way,
            the organism ORG is not an active primary `doer&apos; of
            EVENT.  This predicate is appropriately used to identify
            actors who undergo (instances of) #$DrugTherapy or
            #$IncurringAnInjury. Note an important contrast with
            #$bodilyDoer (q.v.):  #$bodilyActedOn is for events that
            merely happen to the body, as opposed to actions the body
            does.  Because the body of an organism is an active
            `doer&apos; in its instances of #$PhysiologicalCondition,
            including any #$InjuryCondition (which is the physical
            process of a body sustaining an injury and responding by
            healing or deteriorating), an organism is related to events
            of those kinds with #$bodilyDoer rather than
            #$bodilyActedOn.  By contrast, organisms involved in
            instances of #$DrugTherapy (which refers to the effect of a
            drug on the patient) or #$IncurringAnInjury (which refers to
            the event in which an organism gets injured, rather than the
            process of its being in an injured and hopefully healing
            state) should be related to events of those types with #$bodilyActedOn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="bodilyDoer">
        <rdfs:label xml:lang="en">bodily doer (pred)</rdfs:label>
        <rdfs:comment>The predicate #$bodilyDoer relates an instance of
            #$PhysicalEvent to an instance of #$Organism-Whole, where
            the latter is a non-deliberate doer of the former (so that
            the instance of #$Organism-Whole acts without conscious
            intention or volition).  (#$bodilyDoer EVENT DOER) means
            that DOER does EVENT (i.e., DOER is not merely subjected to
            EVENT by external forces), but DOER does EVENT
            non-deliberately.  Note that for certain kinds of actions --
            for example, physical growth, peristalsis, and reflex
            actions -- organisms are necessarily merely #$bodilyDoers.
            For other actions, such as breathing, flinching, or
            shouting, an organism commonly (but not necessarily) acts as
            a #$bodilyDoer, although some cases of such events may be
            deliberately performed by (see the predicate #$performedBy)
            the doer.  Note: an organism which dies of natural causes
            (#$Dying) is the #$bodilyDoer of that event, because of the
            internal processes the body performs during #$Dying.  Also,
            in certain #$PhysiologicalConditions, including an
            #$AilmentCondition (such as #$DiabetesMellitus) or a healing
            process, organisms are considered to be #$bodilyDoers
            because their own bodily processes are creating or
            sustaining those conditions.  An organism killed by an
            external agent, however, is just the #$bodilyActedOn (q.v.)
            in that event; therefore, instances of #$Killing-Biological
            should use #$bodilyActedOn to refer to the organism killed.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#doneBy"/>
        <rdfs:domain rdf:resource="#PhysicalEvent"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="boilingPoint">
        <rdfs:label xml:lang="en">boiling point</rdfs:label>
        <rdfs:comment>(#$boilingPoint STUFF TEMP) means that TEMP is the
            temperature at which the substance STUFF changes from having
            the attribute #$Liquid-StateOfMatter to
            #$Gaseous-StateOfMatter (when sufficient energy is input to
            raise STUFF&apos;s temperature through that point).  Note
            that the boiling point of most substances is
            context-dependent; on a mountaintop in Tibet the boiling
            point of water is much lower than it is in New York City.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Temperature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="borderSubRegions">
        <rdfs:label xml:lang="en">border sub regions</rdfs:label>
        <rdfs:comment>(#$borderSubRegions REGION BORDERREGION) means
            that BORDERREGION is a subregion of REGION which borders on
            some region outside of REGION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subRegions"/>
        <rdfs:domain rdf:resource="#Surface-Open"/>
        <rdfs:range rdf:resource="#Surface-Open"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="bordersOn">
        <rdfs:label xml:lang="en">borders on</rdfs:label>
        <rdfs:comment>(#$bordersOn REGION1 REGION2) means that the
            #$GeographicalRegions REGION1 and REGION2 are physically
            adjacent to each other and do not overlap, i.e. there is a
            border between them.  Examples: (#$bordersOn
            #$CentralUSATimeZone #$MountainUSATimeZone), (#$bordersOn
            (#$TerritoryFn #$Nepal) (#$TerritoryFn #$Tibet)).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjacentTo"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:subPropertyOf rdf:resource="#onSamePlanetSurfaceAs"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="boss">
        <rdfs:label xml:lang="en">#$boss</rdfs:label>
        <rdfs:comment>(#$boss SUPERVISEE SUPERVISOR) means that
            SUPERVISOR is an immediate boss or supervisor of SUPERVISEE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#acquaintedWith"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="businessPartners">
        <rdfs:label xml:lang="en">partner</rdfs:label>
        <rdfs:comment>The predicate #$businessPartners indicates that
            two agents have jointly undertaken some business project;
            they are combining resources in some way to further their
            interests.  (#$businessPartners AGENT1 AGENT2) means AGENT1
            is in partnership with AGENT2 to engage in business
            activities.  The partners are instances of #$Agent and may
            belong to either #$Person or #$Organization.  The
            partnership may be formally recognized (e.g., a
            #$Partnership or some other form of business) or informal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="buyer">
        <rdfs:label xml:lang="en">buyer</rdfs:label>
        <rdfs:comment>The predicate #$buyer relates an agent to a
            business activity.  (#$buyer EVENT AGENT) means that the
            #$Agent AGENT purchases the goods for sale in the
            #$CommercialActivity EVENT.  The #$buyer may purchase the
            goods or services directly or through an agent.  See also
            and compare: #$buyingPerformer, #$buyingAgent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:subPropertyOf rdf:resource="#exchangers"/>
        <rdfs:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="buyingAgent">
        <rdfs:label xml:lang="en">#$buyingAgent</rdfs:label>
        <rdfs:comment>(#$buyingAgent SALE AGENT) means that in the
            #$CommercialActivity SALE, the #$SocialBeing AGENT acts on
            behalf of a would-be buyer to bring about a purchase.  AGENT
            is a performer in SALE (see the predicate #$performedBy),
            but is not the buyer (see the predicate #$buyer).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#buyingPerformer"/>
        <rdfs:subPropertyOf rdf:resource="#mediators"/>
        <rdfs:domain rdf:resource="#CommercialActivity"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="buyingPerformer">
        <rdfs:label xml:lang="en">buyer</rdfs:label>
        <rdfs:comment>(#$buyingPerformer COM AGENT) means that AGENT is
            the agent actually attempting to obtain goods or services in
            a purchase, by performing an active role in the
            #$CommercialActivity COM.  Generally, the agent who is the
            #$buyingPerformer is identical with the #$buyer, but in some
            cases the #$buyingPerformer is instead a #$buyingAgent
            representing the #$buyer.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#CommercialActivity"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="byProducts">
        <rdfs:label xml:lang="en">#$byProducts</rdfs:label>
        <rdfs:comment>This predicate relates a given purposeful action
            of physically creating or destroying something to an
            unintended tangible  output  (see #$outputs) of that action.
            (#$byProducts EVENT OBJECT) means that OBJECT is one of the
            outputs of EVENT, but not one of its intended outputs.  For
            intended outputs, see #$products.  Note that no output can
            be _both_ a product and a by-product of the same event, i.e.
            (#$negationPreds #$products #$byProducts)  holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#outputs"/>
        <rdfs:domain rdf:resource="#PurposefulAction"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="canContainShapes">
        <rdfs:label xml:lang="en">can contain shapes</rdfs:label>
        <rdfs:comment>The predicate #$canContainShapes is used to give
            an approximation of the internal size and shape of
            particular tangible objects, by relating an object to an
            abstract region of space described as a geometric shape with
            definite dimensions.  (#$canContainShapes OBJ SHAPE) gives
            an upper bound for the size of things that can be contained
            in the object OBJ, by specifying the dimensions of an
            abstract shape which OBJ can contain.  #$canContainShapes
            uses the elements of #$ShapeFunction (q.v.) for reference,
            especially the basic shapes generated by
            #$RectangularSolidFn, #$CylinderFn, and #$SphereFn.  For
            example, the trunk of my Honda Civic #$canContainShapes of
            (#$RectangularSolidFn (#$Meter 1) (#$Meter 0.5) (#$Meter
            0.75)).  Cf. #$fitsIn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#GeometricThing-Abstract"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="canonicalizerDirectiveForAllArgs">
        <rdfs:label xml:lang="en">canonicalizer directive for all args</rdfs:label>
        <rdfs:comment>A binary predicate used to control the behavior of
            the #$CycCanonicalizer.  (#$canonicalizerDirectiveForAllArgs
            RELN DIRECTIVE) means that the #$CycCanonicalizer should
            obey DIRECTIVE when canonicalizing any argument of a
            #$CycLFormula whose operator is RELN.  See the instances of
            #$CanonicalizerDirective for more information on how
            particular directives affect canonicalization.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#CanonicalizerDirective"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="capitalCity">
        <rdfs:label xml:lang="en">capital city</rdfs:label>
        <rdfs:comment>The predicate #$capitalCity is used to relate a
            geopolitical entity to its capital.  (#$capitalCity GEO
            CITY) means that CITY is the capital city of the
            #$GeopoliticalEntity GEO.  Examples: the #$capitalCity of
            the #$UnitedStatesOfAmerica is the #$CityOfWashingtonDC; the
            #$capitalCity of #$AmericanSamoa is #$CityOfPagoPagoSamoa.
            Note: to relate an instance of #$State-Geopolitical to its
            capital, use the more specialized predicate #$capitalCityOfThisState.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#geopoliticalSubdivision"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#CapitalCityOfRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cardinality">
        <rdfs:label xml:lang="en">cardinality (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$cardinality SETORCOL N) means that the
            #$SetOrCollection SETORCOL has N members. For instance,
            (#$cardinality #$TheEmptySet 0). Note that the concept of
            cardinality is clearest for finite sets; only in special
            branches of mathematics does one speak of the cardinality of
            infinite sets. See also #$entityCardinality,
            #$Note-cardinality-vs-entityCardinality, #$groupCardinality.</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#Cardinal-Mathematical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cardinalityAtLeast">
        <rdfs:label xml:lang="en">cardinality at least</rdfs:label>
        <rdfs:comment>(#$cardinalityAtLeast SET N) means that SET
            contains at least N elements. Example: (#$cardinalityAtLeast
            (#$SubcollectionWithAttributeFn #$Cat #$BlackColor) 3) iff
            there are at least 3 black cats.</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="carriesInfectionType">
        <rdfs:label xml:lang="en">carries infection type</rdfs:label>
        <rdfs:comment>The predicate (#$carriesInfectionType OBJECT
            INFECT_TYPE) relates a particular organism or other object
            to a type of infection that it carries.
            (#$carriesInfectionType OBJ INFTYP) means that the
            individual OBJ is a carrier of the #$InfectionType INFTYP.
            For example, (#$carriesInfectionType TyphoidMary
            #$TyphoidFever) or (#$carriesInfectionType Needle0567 #$AIDS).</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#InfectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="catalyst">
        <rdfs:label xml:lang="en">catalyzer (pred)</rdfs:label>
        <rdfs:comment>The predicate #$catalyst identifies the particular
            thing that acts as a catalyst in a particular chemical
            reaction.  (#$catalyst R X) means that the
            #$ChemicalReaction R has the particular quantity of
            substance X as a catalyst.  For example, every instance of
            #$Photosynthesis-Generic has some portion of #$Chlorophyll
            as a catalyst; an amount of #$Water may be a #$catalyst in
            some #$OxidationProcess of a #$Metal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#unchangedActors"/>
        <rdfs:domain rdf:resource="#ChemicalReaction"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="causedBy">
        <rdfs:label xml:lang="en">caused by</rdfs:label>
        <rdfs:comment>#$causedBy is the predicate used for   token-token
            event causation, i.e., causation between individual  events.
            (#$causedBy EVENT1 EVENT2) means that EVENT1 is causedBy
            EVENT2.  See #$causes-ThingProp to state that a
            #$TemporalThing causes a proposition.  See #$causes-PropProp
            to express a causal link between one proposition and another.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="causes-PropProp">
        <rdfs:label xml:lang="en">causes - prop prop</rdfs:label>
        <rdfs:comment>A causal-relation predicate that holds between
            sentences (see  #$ELSentence-Assertible).
            (#$causes-PropProp SENT1 SENT2) means that  the
            state-of-affairs described by SENT1 causes the
            state-of-affairs  described by SENT2.  Both of these
            states-of-affairs are presumed to be  actual (from the point
            of view of the context in which the #$causes-PropProp
            sentence is asserted), i.e. both SENT1 and SENT2 are true.
            Thus  (#$implies SENT1 SENT2) will also hold.  But note that
            #$causes-PropProp  differs from #$implies in four important
            ways:  (1) Unlike an #$implies sentence, a #$causes-PropProp
            sentence entails  a certain temporal ordering: the state of
            affairs described by SENT2  must not temporally precede the
            state of affairs described by SENT1  (though they may be
            simultaneous).  (2) Unlike an #$implies sentence, a
            #$causes-PropProp sentence presumes  an underlying mechanism
            of causation.     (3) While #$implies is reflexive,
            #$causes-PropProp is irreflexive:  (#$implies SENT SENT)
            holds for any SENT but (#$causes-PropProp SENT SENT)  never
            holds.  (4) While #$implies is a truth-functional logical
            connective,  #$causes-PropProp is a #$Predicate and is not
            truth-functional.   One consequence of this is that
            contraposition does not hold for  the latter:
            (#$causes-PropProp SENT1 SENT2) does NOT entail
            (#$causes-PropProp (#$not SENT2) (#$not SENT1)).    Note
            that (#$causes-PropProp SENT1 SENT2) can be a more
            informative way  of talking about causation than saying that
            some event EVENT1 causes some  event EVENT2 (see
            #$causes-EventEvent).  This is because often there are  just
            a few key aspects of EVENT1 that cause a few key aspects of
            EVENT2,  to which the remaining details of EVENT1 and EVENT2
            are irrelevant; and  these key aspects can be expressed
            directly in sentences.  For the same  reason,
            #$causes-PropProp statements can be more informative than
            those  that causally relate #$Situations (see
            #$causes-SitSit). See  #$NoteAboutCausalityPredicates for a
            full list of CycL causal-relation  predicates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#causes-ThingProp"/>
        <rdfs:subPropertyOf rdf:resource="#sentenceImplies"/>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="causes-ThingProp">
        <rdfs:label xml:lang="en">source</rdfs:label>
        <rdfs:comment>(#$causes-ThingProp THING PROP) means that THING
            causes the proposition PROP to become true.  THING may be an
            #$Agent, a #$Situation, or  a #$ELSentence-Assertible.  This
            is a very general predicate.  It is almost always better to
            use a more specialized predicate such as #$causes-PropProp,
            #$causes-EventEvent, or #$causes-SitProp, particularly in
            rules.  Nonetheless, #$causes-ThingProp can be useful if one
            wishes to collect all the possible causes of some
            proposition be they #$Situations, #$Agents, other
            propositions (see #$ELSentence-Assertible).  See
            #$NoteAboutCausalityPredicates for a map of related predicates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#enables-ThingProp"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cavityConnectedAlongPathSide">
        <rdfs:label xml:lang="en">cavity connected by a portal</rdfs:label>
        <rdfs:comment>(cavityConnectedAlongPathSide PATH CAVITY) means
            that there is a portal somewhere along the wall of the
            #$Path-Generic (which must also be #$PartiallyTangible) PATH
            which leads to the #$CavityOrContainer CAVITY. It does not
            apply if an end of PATH is the portal, nor to a branching of
            the path, nor a small hole in an otherwise dead end of the
            path. The portal is substantially smaller in width than the
            path, and instead of a smaller path connected there, the
            portal opens into a neighboring #$CavityOrContainer.
            Example: an #$Alveolus attached to a #$RespiratoryBronchiole
            in the #$Lung is so connected.  Or, a room opening along the
            side of a hallway.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#CavityOrContainer"/>
        <rdfs:range rdf:resource="#Path-Simple"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cavityHasWall">
        <rdfs:label xml:lang="en">cavity has wall</rdfs:label>
        <rdfs:comment>(cavityHasWall CAV WALL) means that the the
            #$Cavity CAV has WALL as one of its walls (or part of one of
            its walls), or partly-enclosing inner surfaces.
            #$cavityHasWall is often used for describing the
            relationship between some space or part of a
            #$ConstructionArtifact and the substructures that bound or
            enclose it (e.g., the relationship between a room and its
            walls, floor(s), and ceiling(s)).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#CavityWithWalls"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cavityInteriorRegionOf">
        <rdfs:label xml:lang="en">cavity interior region of</rdfs:label>
        <rdfs:comment>(#$cavityInteriorRegionOf INT OBJ) means that INT
            is all of the interior space (see #$CavityInteriorRegion)
            within the cavity or cavities (possibly discontinuous
            chambers, passages, pockets, bubbles, etc.) that occur
            inside of the #$PartiallyTangible OBJ.  Note that INT does
            not include the walls of the cavity or cavities that occur
            inside of OBJ, just the interior space itself. See also #$CavityInteriorRegionFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inRegion"/>
        <rdfs:domain rdf:resource="#CavityInteriorRegion"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="chemicalProducts">
        <rdfs:label xml:lang="en">chemical product (CycL predicate)</rdfs:label>
        <rdfs:comment>An instance of #$ActorSlot. (#$chemicalProducts
            REACTION PRODUCT) means that PRODUCT, an instance of
            #$ChemicalObject, is produced as a result of REACTION, an
            instance of #$ChemicalReaction. The products are those
            chemicals (instances of #$Molecule or #$Ion) that are formed
            by a reaction. See the type level
            #$chemicalProducts-TypeType and #$chemicalReactants.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#outputsCreated"/>
        <rdfs:domain rdf:resource="#ChemicalReaction"/>
        <rdfs:range rdf:resource="#ChemicalObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="chemicalReactants">
        <rdfs:label xml:lang="en">chemical reactants</rdfs:label>
        <rdfs:comment>An instance of #$ActorSlot. (#$chemicalReactants
            REACTION REACTANT) means that during REACTION, an instance
            of #$ChemicalReaction, REACTANT, an instance of
            #$ChemicalObject, plays a reactant role. The reactants are
            those chemicals that react with other reactants to form the
            products of the reaction, and thus are destroyed in the
            process. See the type level #$chemicalReactants-TypeType and
            also #$chemicalProducts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inputsDestroyed"/>
        <rdfs:domain rdf:resource="#ChemicalReaction"/>
        <rdfs:range rdf:resource="#ChemicalObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="chiefPorts">
        <rdfs:label xml:lang="en">chief ports</rdfs:label>
        <rdfs:comment>The predicate #$chiefPorts relates an instance of
            #$GeographicalRegion to an instance of #$City. (#$chiefPorts
            REGION CITY) means that the #$City CITY is one of the chief
            port cities in the #$GeographicalRegion REGION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#geographicalSubRegions"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#City"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="children">
        <rdfs:label xml:lang="en">#$children</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            Animal to  instances of Animal. (#$children PARENT CHILD)
            means that CHILD is the biological offspring of PARENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#relatives"/>
        <rdfs:subPropertyOf rdf:resource="#acquaintedWith"/>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="choices">
        <rdfs:label xml:lang="en">candidate (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates an act of making a
            selection (see  #$SelectingSomething) to each of the items
            that could be (or could have been) selected in that act.
            (#$choices CHOOSING OPTION) means that in the event
            CHOOSING, OPTION is (was) one of the items that the chooser
            might choose (might have chosen).  Depending upon the type
            of CHOOSING, OPTION might be a person (e.g. a job applicant
            or political candidate), a product (e.g. a computer,
            automobile, or lipstick), a plan or course of action, a
            policy or belief, or  something else.  Also depending upon
            the type of CHOOSING, one or more of the possible choices
            might ultimately be selected.</rdfs:comment>
        <rdfs:domain rdf:resource="#SelectingSomething"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="circumferenceOfObject">
        <rdfs:label xml:lang="en">circumference (CycL predicate)</rdfs:label>
        <rdfs:comment>The distance around a circular object</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sizeParameterOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="citizens">
        <rdfs:label xml:lang="en">#$citizens</rdfs:label>
        <rdfs:comment>The predicate relates a #$Person to a
            #$GeopoliticalEntity. (#$citizens GEOPOL PERSON) means that
            PERSON is a citizen of GEOPOL.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cityInState">
        <rdfs:label xml:lang="en">city in state</rdfs:label>
        <rdfs:comment>(#$cityInState CITY STATE) means that the #$City
            CITY is located in the geopolitical sub-region STATE.  Note
            that STATE may be an instance of #$State-Geopolitical, or it
            may be an instance of some other specialization of
            #$CountrySubsidiary, such as #$Territory. For example, the
            #$CityOfDurhamNC is a #$cityInState of
            #$NorthCarolina-State; Xiamen (Amoy) is a #$cityInState of
            Fujian. See also #$majorCityInState.</rdfs:comment>
        <rdfs:domain rdf:resource="#City"/>
        <rdfs:range rdf:resource="#CountrySubsidiary"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cityOfAddress">
        <rdfs:label xml:lang="en">city of address</rdfs:label>
        <rdfs:comment>(#$cityOfAddress LOC CITY) means that the
            #$ContactLocation LOC is found in the #$City CITY. For
            example, as   #$CycorpHeadquarters is a #$ContactLocation
            for #$Cycorp, then   (#$cityOfAddress #$CycorpHeadquarters
            #$CityOfAustinTX) means that the   Cycorp Headquarters
            building is located in Austin, Texas.  Note that the
            arg-constraint on the first argument should be an instance
            of #$ContactLocation   which serves as a #$pointsOfContact
            for an agent and not the agent itself.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#notFarFrom"/>
        <rdfs:subPropertyOf rdf:resource="#onSamePlanetSurfaceAs"/>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#City"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="clients">
        <rdfs:label xml:lang="en">#$clients</rdfs:label>
        <rdfs:comment>This predicate relates two agents.  (#$clients
            AGENT1 AGENT2) means that AGENT1 provides goods and/or
            services to AGENT2.  AGENT2 may or may not pay AGENT1 for
            the goods/services received.  The predicate #$clients can
            indicate either a one-time or a more long-term relationship.
            See also #$suppliers and #$customers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="closedUnder">
        <rdfs:label xml:lang="en">closed under</rdfs:label>
        <rdfs:comment>An #$IntangibleObjectPredicate that relates a
            given #$SetOrCollection to  any function that it is closed
            under.  (#$closedUnder SETORCOL FUNC)  means that SETORCOL
            is closed with respect to FUNC, in the sense that  FUNC
            returns an element of SETORCOL for any (sequence of)
            element(s)  of SETORCOL taken as argument(s).  More
            precisely: for any sequence  of arguments &lt;ARG1, ...,
            ARGn&gt; for which FUNC is defined and such that  each of
            the ARGi is an element of (see #$elementOf) SETOFCOL, the
            value  FUNC has for those arguments (i.e. (FUNC ARG1 ...
            ARGn)) is itself an  element of SETORCOL.  (Also, FUNC must
            be defined for at least one  such argument-sequence, to rule
            out trivially vacuous cases such as  #$RealNumber&apos;s
            being  closed under  #$MotherFn).  Thus,  (#$closedUnder
            #$Integer #$TimesFn) holds, but  (#$closedUnder
            #$NegativeInteger #$TimesFn) does not.</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#Function-Denotational"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coDecompositions">
        <rdfs:label xml:lang="en">co decompositions</rdfs:label>
        <rdfs:comment>This predicate relates tangibles that are
            continuous or discontinuous physical parts (see
            #$physicalDecompositions) of the same whole.
            (#$coDecompositions PART1 PART2) means that there  is some
            tangible WHOLE such that   (#$physicalDecompositions WHOLE
            PART1) and   (#$physicalDecompositions WHOLE PART2) both hold.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coExtensional">
        <rdfs:label xml:lang="en">co extensional</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections (q.v.) that holds
            between collections whose extents (see #$extent) are exactly
            the same. (#$coExtensional COL1 COL2) means that COL1 and
            COL2 have all their elements in common: every instance of
            (see #$isa) one is an instance of the other.  Note that
            since collections (see #$Collection), unlike mathematical
            sets (see #$Set-Mathematical), are  intensionally defined ,
            two collections can be coextensional without thereby being
            identical (see #$equals).  See also  #$coextensionalSetOrCollections.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genls"/>
        <rdfs:subPropertyOf rdf:resource="#coextensionalSetOrCollections"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coextensionalEntryFormatInArgs">
        <rdfs:label xml:lang="en">coextensional entry format in args</rdfs:label>
        <rdfs:comment>A instance of #$SpecificEntryFormatPredicate
            (q.v.) that amounts to what might be called
            interchangeability of coextensional arguments , taken in a
            broad sense whereby sets and collections (see
            #$SetOrCollection) as well as pairs of relations (see
            #$Relation) can be  coextensional .
            #$coextensionalEntryFormatInArgs can be used to characterize
            (truth-condition-wise) a given argument-place of a predicate
            that is constrained (semantic well-formedness-wise) to being
            filled with instances of only either #$Collection,
            #$SetOrCollection, or #$Relation.  That is, the given
            argument-position&apos;s #$argIsa constraint (or the
            intersection  of the position&apos;s #$argIsa constraints,
            if there are more than one) is to some (proper or improper)
            specialization of either #$SetOrCollection or #$Relation.
            Suppose that #$coextensionalEntryFormatInArgs holds of PRED
            with respect to its Nth argument-place, and that the
            sentence (PRED ... ARGN ...) is true.    It follows that any
            sentence (PRED ... ARGN-PRIME ...) that differs from the
            first sentence at most in its Nth argument is true if and
            only if ARGN-PRIME is coextensional with ARGN.
            Coextensional  is here defined as follows.  Collections are
            coextensional just in case they have exactly the same
            instances (see #$coExtensional); set-or-collections are
            coextensional just in case they have exactly the same
            elements (see #$setOrCollectionsCoextensional); predicates
            are coextensional just in case they hold of exactly the same
            sequences of arguments; and functions are coextensional just
            in case they they are defined for exactly the same sequences
            of arguments and have the same value for any such sequence.
            #$coextensionalEntryFormatInArgs is useful because sometimes
            a certain argument-place of a given predicate is constrained
            to be a collection or set-or-collection or predicate or
            function, and all that&apos;s essential to the
            predicate&apos;s holding, with respect to that argument
            place (and a given fixed array of arguments for its other
            argument places), is the (set-or-)collection&apos;s _extent_
            (see #$extent), the predicate&apos;s  predicate-extent , or
            the function&apos;s domain-to-range correlations.  Such
            argument-places should not have the format
            #$singleEntryFormatInArgs (q.v.), since it is possible for
            two different collections, or a set and a collection, or two
            different predicates, or two different functions to have the
            same extension.  On the other hand, the format
            #$openEntryFormatInArgs (q.v.) would place no real
            restriction on such an argument-place.
            #$coextensionalEntryFormatInArgs characterizes such argument
            places appropriately.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coextensionalSetOrCollectionOrRelations">
        <rdfs:label xml:lang="en">coextensional set or collection or relations</rdfs:label>
        <rdfs:comment>An instance of #$TaxonomicSlot and a
            generalization of  #$coextensionalSetOrCollections.
            #$coextensionalSetOrCollectionOrRelations relates predicates
            and  functions as well as sets and collections; thus it
            holds between  coextensional #$SetOrCollections (q.v.),
            between coextensional  #$Predicates (q.v.), and between
            coextensional  #$Function-Denotationals (q.v.).
            (#$coextensionalSetOrCollectionOrRelations SET|COL|REL-1
            SET|COL|REL-2)  means that SET|COL|REL-1 and SET|COL|REL-2
            are coextensional.  More  precisely: (i) if SET|COL|REL-1
            and SET|COL|REL-2 are both  #$SetOrCollections, then they
            have all their elements in common  (see
            #$coextensionalSetOrCollections); (ii) if SET|COL|REL-1 and
            SET|COL|REL-2 are both #$Predicates, then they hold of
            exactly the same argument-sequences; and (iii) if
            SET|COL|REL-1 and SET|COL|REL-2  are both
            #$Function-Denotationals, then they are defined for exactly
            the same argument-sequences and both have the same value for
            any such sequence.  Note that, since coextensionality
            entails identity  (see #$equals) in the case of sets but
            _not_ in the cases of  collections or relations, it _cannot_
            generally be inferred from  the above that SET|COL|REL-1 and
            SET|COL|REL-2 are identical.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#MathematicalThing"/>
        <rdfs:range rdf:resource="#MathematicalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coextensionalSetOrCollections">
        <rdfs:label xml:lang="en">coextensional set or collections</rdfs:label>
        <rdfs:comment>An instance of #$TaxonomicSlot and a
            generalization of #$coExtensional.
            #$coextensionalSetOrCollections relates mathematical sets as
            well as collections; thus it holds between coextensional
            #$SetOrCollections.  (#$coextensionalSetOrCollections
            SETORCOL1 SETORCOL2) means that SETORCOL1 and SETORCOL2 have
            all their elements in common: any element of (see
            #$elementOf) one is an element of the other.  Since
            coextensionality entails identity (see #$equals) in the case
            of sets but _not_ in the case of collections, it _cannot_ be
            inferred from the above that SETORCOL1 and SETORCOL2 are identical.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subsetOf"/>
        <rdfs:subPropertyOf rdf:resource="#coextensionalSetOrCollectionOrRelations"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cohabitants">
        <rdfs:label xml:lang="en">cohabitant (pred)</rdfs:label>
        <rdfs:comment>A predicate that relates animals that live with
            each other.  (#$cohabitants ANIMAL1 ANIMAL2) means that
            ANIMAL1 and ANIMAL2 live  together in the same house,
            apartment unit, nest, hive, den, or other dwelling.
            Cohabitants are usually but not always of the same species.
            My pet cats are  cohabitants of mine, but the ants in my
            kitchen are not.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#acquaintedWith"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cohabitingFamilyMembers">
        <rdfs:label xml:lang="en">cohabiting family member (CycL predicate)</rdfs:label>
        <rdfs:comment>A #$FamilyRelationSlot that is a specialization of
            both #$cohabitants and  #$relatives.
            (#$cohabitingFamilyMembers MEMBER1 MEMBER2) means that
            MEMBER1 and MEMBER2 are members the same family (see
            #$Family-SocialEntity) -- such  as relatives, spouses, or
            in-laws -- that live with one another.  See also
            #$FamilyCohabitationUnit.  Note that MEMBER1 and MEMBER2
            might be #$Animals  of any type whatsoever; although in
            certain contexts (e.g. #$HumanSocialLifeMt) they are
            presupposed to be #$Persons.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cohabitants"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#relatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="colinearValues">
        <rdfs:label xml:lang="en">colinear values</rdfs:label>
        <rdfs:comment>(#$colinearValues VAL1 VAL2) means that there
            exists a scalar ordering SCALE such that (#$valuesShareScale
            VAL1 VAL2 SCALE). It also implies that either
            (#$followingValue VAL1 VAL2) or (#$followingValue VAL2
            VAL1), and #$followingValue is in turn a specialization of
            #$colinearValues. #$colinearValues can be thought of as a
            version of #$followingValue that is agnostic with regard to
            the ordering of the values.</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="collectionIntersection">
        <rdfs:label xml:lang="en">collection intersection</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections (q.v.) that
            relates a set of collections to the collection whose extent
            (see #$extent) is by definition the intersection of the
            extents of all the collections in that set.
            (#$collectionIntersection INTERSECT SET-OF-COLS) means that
            INTERSECT is the  collection-intersection  of SET-OF-COLS:
            any given thing THING is an instance of INTERSECT if and
            only if THING is an instance of every collection that is an
            element of SET-OF-COLS.  It follows that INTERSECT is itself
            a subcollection of every element of SET-OF-COLS.  Note that,
            since collections are supposed to be  intensionally defined
            , it is theoretically possible that there be more than one
            collection having exactly the extent (i.e. set of instances)
            characterized above.  But COL is to be thought of as the
            collection which _by_definition_ contains all and only the
            instances common to every collection in SET-OF-COLS.  In
            other words, the criterion for instanceship associated with
            INTERSECT (i.e. its  intensional definition ) is in effect
            simply the conjunction of each of the criteria associated
            with the various members of SET-OF-COLS.  This is what
            justifies the above description of INTERSECT as _the_
            collection-intersection corresponding to SET-OF-COLS, and
            what justifies #$collectionIntersection&apos;s being defined
            as a functional predicate.  See the corresponding function
            #$CollectionIntersectionFn; also see #$collectionUnion.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#SetOrCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="collectionUnion">
        <rdfs:label xml:lang="en">collection union</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections (q.v.) that
            relates a set of collections to the collection whose extent
            (see #$extent) is by definition the union of the extents of
            all the collections in that set.  (#$collectionUnion UNION
            SET-OF-COLS) means that UNION is the  collection-union  of
            SET-OF-COLS: any given thing THING is an instance of UNION
            if and only if THING is an instance of some collection that
            is an element of SET-OF-COLS.  It follows that any
            subcollection of some element of SET-OF-COLS is also a
            subcollection of UNION; in particular each element of
            SET-OF-COLS is itself a subcollection of UNION.  Note that,
            since collections are supposed to be  intensionally defined
            , it is theoretically possible that there be more than one
            collection having exactly the extent (i.e. set of instances)
            characterized above.  But UNION is to be thought of as the
            collection which _by_definition_ contains all and only the
            instances of any of the collections in SET-OF-COLS.  In
            other words, the criterion for instanceship associated with
            UNION (i.e. its  intensional definition ) is in effect
            simply the disjunction of each of the criteria associated
            with the various members of SET-OF-COLS.  This is what
            justifies the above description of UNION as _the_
            collection-union corresponding to SET-OF-COLS, and what
            justifies #$collectionUnion&apos;s being defined as a
            functional predicate.  See the corresponding function
            #$CollectionUnionFn; also see #$collectionIntersection.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covering"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#SetOrCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="comment">
        <rdfs:label xml:lang="en">comment</rdfs:label>
        <rdfs:comment>A #$DocumentationPredicate (q.v.) that is used to
            relate a #$CycLIndexedTerm (usually a #$CycLConstant) to a
            #$SubLString containing an English explanation of the
            term&apos;s meaning and use, as an aid to humans (whether
            #$Cyclists or not) browsing the Cyc Knowledge Base.
            (#$comment TERM STRING) means that STRING is a piece of Cyc
            documentation that explains the meaning and use of TERM.
            For example, the passage you are reading now is the comment
            for the CycL constant `#$comment&apos;.  See also #$cyclistNotes.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="commitsForFutureUses">
        <rdfs:label xml:lang="en">thing permanently committed</rdfs:label>
        <rdfs:comment>(#$commitsForFutureUses EVENT OBJECT) means that
            as a result of EVENT, OBJECT is subsequently put into a
            configuration and/or a form where it is serving some ongoing
            #$Role.  Things which are re-usable in their typical uses: a
            videocassette, a battery, a brick, an artist&apos;s canvas,
            a canvas tent.  Non-reusable things: paint, glue, mortar.
            See also #$inputsCommitted, #$recyclableActors.   Consider a
            brick in a wall in a building.  It is `committed for future
            use&apos; in the role of part-of-a-wall in the event of that
            building existing.  While the building is standing, it
            can&apos;t be part-of-a-wall in another building, though it
            could serve other roles such as an artistic accent, or to
            anchor a coat-hook.  After the building is torn down, that
            brick might still be intact, and could be used as
            part-of-a-wall in a future building.  Notice that the brick
            isn&apos;t necessarily transformed by being part of a wall.
            However, so long as OBJECT serves the use to which it is
            `assigned&apos; by EVENT, OBJECT is unavailable to be
            assigned the same #$Role by another event of the same type,
            at least an event that would temporally intersect with this
            committed use of OBJECT.  That is what is meant by it being
            `committed&apos; for a particular future use.  An object may
            be re-used in a similar event, ONLY IF the #$Role to which
            it was assigned in EVENT either comes to its natural end or
            is given up (or thwarted), or in cases where EVENT is
            composed of discontinous pieces of time --- to illustrate
            that latter case, consider a tent that&apos;s used to
            shelter a certain group of workers on weekdays, but is used
            to shelter a different group in a different location on weekends.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="commonGenlPreds">
        <rdfs:label xml:lang="en">common genl preds</rdfs:label>
        <rdfs:comment>A #$RuleMacroPredicate that relates a given
            predicate-type  (see #$PredicateCategory) to any #$Predicate
            that is a  generalization (see #$genlPreds) of all instances
            of that  type.  (#$commonGenlPreds PREDTYPE PRED) means
            that, for any  instance PREDINST of PREDTYPE, (#$genlPreds
            PREDINST PRED)  holds.  This is equivalent to
            (#$relationAllInstance #$genlPreds PREDTYPE PRED).  Note
            that  #$commonGenlPreds is not to be confused with
            #$typedGenlPreds  (q.v.).</rdfs:comment>
        <rdfs:domain rdf:resource="#PredicateCategory"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="communicationTarget">
        <rdfs:label xml:lang="en">intended recipient of communication</rdfs:label>
        <rdfs:comment>The predicate #$communicationTarget is used to
            indicate an intended recipient in a communication act.
            (#$communicationTarget COMM AGENT) means that the agent who
            originates the #$CommunicationAct-Single COMM intends the
            #$recipientOfInfo to be AGENT. Note that AGENT may or may
            not receive the information contained in COMM.  To indicate
            both that AGENT is an intended recipient of COMM, and that
            AGENT actually receives the information contained in COMM,
            use the more specialized predicate #$recipientOfInfo-Intended.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#target"/>
        <rdfs:domain rdf:resource="#CommunicationAct-Single"/>
        <rdfs:range rdf:resource="#Agent-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="communicationToken">
        <rdfs:label xml:lang="en">communication token</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$Communicating to instances of #$InformationBearingThing.
            (#$communicationToken COM IBT) means that IBT carries the
            information transferred in COM and was used to convey that
            information in COM.  IBT may be a tangible object (e.g., a
            newspaper), a sound (e.g., a voice), an image (e.g., from a
            television broadcast), or even a touch (e.g., a staying hand).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Communicating"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="comparativeAdverb">
        <rdfs:label xml:lang="en">comparative adverb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its comparative
            adverbial form. Example: &apos;better&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adverbStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="comparativeDegree">
        <rdfs:label xml:lang="en">comparative degree</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its comparative
            adjectival form. This is often formed by suffixing
            &apos;er&apos; to the regular form. Example: &apos;stronger&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="competingAgents">
        <rdfs:label xml:lang="en">competitor (pred)</rdfs:label>
        <rdfs:comment>(#$competingAgents COMPETITION AGENT) means that
            the AGENT is a competitor in the contest or competition
            COMPETITION, and thus has a chance of being a winner of the
            competition.  This excludes many participants of such
            events, such as referees, judges, and spectators.  If the
            COMPETITION is a team competition, the individual team
            members  are also excluded.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#majorUndertakingsOf"/>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#Competition"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="compositeParts">
        <rdfs:label xml:lang="en">composite parts</rdfs:label>
        <rdfs:comment>This predicate relates a given
            composite-tangible-and-intangible object to any other such
            objects that are parts of the first.  (#$compositeParts
            WHOLE PART) means that WHOLE and PART are both
            #$CompositeTangibleAndIntangibleObjects such that PART is a
            part of WHOLE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:range rdf:resource="#CompositeTangibleAndIntangibleObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="computerIP">
        <rdfs:label xml:lang="en">computer i p</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate that relates instances of
            #$Computer with instances of #$IPAddress. (#$computerIP COMP
            IP) means that COMP has the IP address IP. (Note that a
            given computer might have different IP addresses at
            different times.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#identificationStrings"/>
        <rdfs:domain rdf:resource="#Computer"/>
        <rdfs:range rdf:resource="#IPAddress"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="computerMACAddress">
        <rdfs:label xml:lang="en">computer m a c address</rdfs:label>
        <rdfs:comment>A predicate relating a instance of #$Computer with
            the instance of #$MACAddress associated with one of its
            network cards. (#$computerMACAddress COMP MAC) means that
            COMP is a computer with a network card installed whose MAC
            address is MAC. Note that a single computer can have more
            than one network card and each MAC address is unique to a
            network card, hence one computer can be associated with more
            than one MAC address.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#identificationStrings"/>
        <rdfs:domain rdf:resource="#Computer"/>
        <rdfs:range rdf:resource="#MACAddress"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="computerSpeed">
        <rdfs:label xml:lang="en">computer speed</rdfs:label>
        <rdfs:comment>A predicate relating instances of #$Computer to
            the processing speed of their #$CentralProcessingUnits.
            (#$computerSpeed COMP FREQ) means that COMP is a computer
            which has a central processing unit with speed FREQ (usually
            stated using MegaHertz). Note that a single computer can
            have multiple processors and hence have multiple frequencies
            associated with it.</rdfs:comment>
        <rdfs:domain rdf:resource="#Computer"/>
        <rdfs:range rdf:resource="#Frequency"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="conceptuallyRelated">
        <rdfs:label xml:lang="en">conceptually related</rdfs:label>
        <rdfs:comment>This predicate is used to state the fact of a
            conceptual link between two things, where a very complex
            sentence would be required in order to describe the precise
            nature of this link explicitly.  Examples of such
            conceptually-linked couples include
            #$PublicTransportationDevice /
            #$PublicTransportationScheduleDocument and #$Dog /
            #$DogFood.  The rationale for having such a predicate as
            #$conceptuallyRelated is similar to that behind many
            #$RuleMacroPredicates (q.v.).  Having complex relationships
            represented -- possibly redundantly -- in a more compact
            fashion makes for faster retrieval. Because things can be
            conceptually related in many different ways, no explicit
            definition for this predicate is provided.  Note that
            #$conceptuallyRelated is _not_ a #$SymmetricBinaryPredicate
            (q.v.); but see #$conceptuallyCoRelated for a specialization
            of this predicate that is symmetric.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="conditionallyIndependent">
        <rdfs:label xml:lang="en">conditionally independent</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$conditionallyIndependent PROPOSITION1 PROPOSITION2) means
            that, in the applicable #$Microtheory, PROPOSITION1 and
            PROPOSITION2 are conditionally independent of each other,
            that is, truth or falsehood of one does not increase or
            decrease the #$derivedProbability that the other is true.
            They are, in a sense, irrelevant to each other.  In most
            microtheories, generally, the #$conditionallyIndependent
            statement means that when all we know in the #$Microtheory
            are its accessible #$domainAssumptions, then the truths of
            the two formulae are probabilistically independent.  See
            also #$conditionalProbability and
            #$conditionallyIndependent-Given.  This definition makes no
            presumption as to determinism versus nondeterminism, nor as
            to whether probability is only in the mind of some beholder.
            The definition allows for any of several different systems
            of deriving the probability of one assertion from the
            probabilities of, or conditional probabilities relating,
            other assertions.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedAlongSurface">
        <rdfs:label xml:lang="en">connected along surface</rdfs:label>
        <rdfs:comment>(#$connectedAlongSurface OBJ1 OBJ2) means that the
            surface of OBJ1 is #$connectedTo OBJ2 over a significant
            extent of OBJ2 (either area-wise or linearly).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#alignedAlongSurface"/>
        <rdfs:subPropertyOf rdf:resource="#connectedAtContact"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedAtContact">
        <rdfs:label xml:lang="en">connected at contact</rdfs:label>
        <rdfs:comment>(#$connectedAtContact OBJ1 OBJ2) means that OBJ1
            and OBJ2 are #$connectedTo each other at a point of contact.
            I.e. OBJ1 #$touches OBJ2.  This includes all cases of
            #$connectedTo except some when the two object are #$connectedViaConnector.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedAtEnd">
        <rdfs:label xml:lang="en">connected at end</rdfs:label>
        <rdfs:comment>(#$connectedAtEnd OBJ1 OBJ2) means that an end of
            #$LongAndThin OBJ1 is #$connectedTo OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesAtEnd"/>
        <rdfs:subPropertyOf rdf:resource="#connectedAtContact"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedTo">
        <rdfs:label xml:lang="en">connection</rdfs:label>
        <rdfs:comment>(#$connectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2
            are (directly or indirectly) physically attached in a way
            that allows at most only limited types of relative motion
            between them.  A hinged connection, for example, allows
            limited rotational motion between OBJ1 and OBJ2.  OBJ1 and
            OBJ2 must be in a #$Solid-StateOfMatter.  In many cases,
            being #$connectedTo implicitly involves another object(s);
            e.g. a door is #$connectedTo a door frame by a hinge, which
            is itself #$connectedTo-Directly (q.v.) both the door and
            the frame.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#movesWith"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedTo-Directly">
        <rdfs:label xml:lang="en">connected to - directly</rdfs:label>
        <rdfs:comment>(#$connectedTo-Directly OBJ1 OBJ2) means that OBJ1
            and OBJ2 are directly attached in a way that allows at most
            only certain types of relative motion between them.
            Adjacent links in a bicycle chain, for example, can only
            undergo limited rotational motion in relation to each other.
            OBJ1 and OBJ2 must both be #$SolidTangibleThings, must be
            directly touching  each other, and their mutual
            connectedness must _not_ obtain merely in virtue of some
            third object&apos;s serving as a connector between them.
            For a generalization of this   that does not imply a
            _direct_ connection between objects, see #$connectedTo
            (which is in effect the transitive closure of #$connectedTo-Directly).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-NotAsPart"/>
        <rdfs:subPropertyOf rdf:resource="#connectedTo"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedTo-Rigidly">
        <rdfs:label xml:lang="en">connected to - rigidly</rdfs:label>
        <rdfs:comment>(#$connectedTo-Rigidly OBJ1 OBJ2) means that OBJ1
            and OBJ2 are joined so that no relative motion between them
            can occur at the point of connection unless the connection
            is severed by breakage of some part of the connected objects
            or by disassembly of the connection.  Further, no relative
            motion between the contact surfaces of OBJ1 nor OBJ2 may
            occur.  Thus, if a nail is rigidly connected to a board, the
            only way for that relationship to no longer hold is if the
            nail is pulled out of the hole (e.g. by a hammer or crowbar)
            or if the nail or board is broken in a critical location.
            Note that (#$connectedTo-Rigidly OBJ1 OBJ2) does admit cases
            in which OBJ1 or OBJ2 undergo  plastic deformation.  For
            example, consider the case of a disc rigidly connected via
            glue (see #$gluedTo) to a rubber sheet.  The rubber sheet
            and disc may undergo significant relative motion.  Both of
            the connected objects are solid.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo-Directly"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedTo-SemiRigidly">
        <rdfs:label xml:lang="en">connected to - semi rigidly</rdfs:label>
        <rdfs:comment>A #$ConnectionPredicate and thus a specialization
            of #$connectedTo.   (#$connectedTo-SemiRigidly OBJ1 OBJ2)
            means that there is a physical  connection between OBJ1 and
            OBJ2 that is flexibile enough to permit  limited (and only
            limited) movement of OBJ1 and/or OBJ2 around the  point of
            connection.  Positive examples include a front cover hinged
            to the spine of a book (see #$flapHingedTo) and the gall
            bladder&apos;s  attachment to the liver.  Negative examples
            include a wheel&apos;s connection to its axle and a door
            hinged to a door frame; in both cases the freedom  of
            movement derives from geometrical or mechanical properties
            of the  objects and their connectors, rather than from the
            flexibity of the  connected objects.  Note that all flexible
            connections place some limit  on the freedom of relative
            motion they allow.  An extreme example (in  the  more free
            direction) is the connection between the propeller  and
            fuselage of a rubberband-powered toy airplane.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="connectedViaConnector">
        <rdfs:label xml:lang="en">connected via connector</rdfs:label>
        <rdfs:comment>(#$connectedViaConnector OBJ1 OBJ2) means that
            OBJ1 and OBJ2 are connected via a connector which is
            #$connectedTo each of them.  It is not necessarily the case
            that OBJ1 #$touches OBJ2, but neither is it prohibited.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constantGUID">
        <rdfs:label xml:lang="en">constant g u i d</rdfs:label>
        <rdfs:comment>A predicate which relates each Cyc constant to a
            globally unique external identification string for it. This
            string is the string representation of the Globally Unique
            Identifier (GUID) uniquely associated with the constant,
            which is guaranteed to be unique across time and space.
            (#$constantGUID CONSTANT GUID-STRING) states that the
            #$SubLString GUID-STRING is the string representation of the
            unique external id for the #$CycLConstant CONSTANT. For
            obvious reasons, this predicate is #$notAssertible.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constantID">
        <rdfs:label xml:lang="en">constant i d</rdfs:label>
        <rdfs:comment>A predicate which relates each Cyc constant to an
            internal identification number for it. This number is unique
            within any given image, though not necessarily across
            images. (#$constantID CONSTANT ID) states that the
            #$NonNegativeInteger ID is the unique internal id for the
            #$CycLConstant CONSTANT. For obvious reasons, this predicate
            is #$notAssertible.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constantName">
        <rdfs:label xml:lang="en">constant name</rdfs:label>
        <rdfs:comment>(#$constantName CONSTANT STRING) means that the
            #$SubLString STRING is the  name  for the #$CycLConstant
            CONSTANT.  That is, STRING is the string of characters that
            make up CONSTANT, minus the initial  #  and the following  $ .</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constituentInSituation">
        <rdfs:label xml:lang="en">participant in situation (pred)</rdfs:label>
        <rdfs:comment>(#$constituentInSituation SIT IND) means that
            individual IND is a constituent of the situation SIT.  In
            other words, IND is &apos;part of&apos; SIT.  However, this
            is importantly different than the parthood relation
            expressed by #$parts and its specializations, because the
            constituents of a given situation are not parts per se.
            #$constituentInSituation is a generalization of #$actors,
            which applies only to events.  Example: Bill Clinton and the
            Oval Office are consituents of every situation in which Bill
            Clinton stands in the Oval Office.</rdfs:comment>
        <rdfs:domain rdf:resource="#Situation-Temporal"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constituents">
        <rdfs:label xml:lang="en">#$constituents</rdfs:label>
        <rdfs:comment>The predicate #$constituents is used to indicate a
            particular #$PartiallyTangible which makes up another
            (possibly non-distinct) #$PartiallyTangible thing.
            (#$constituents WHL PART) means that the individual object
            WHL is partially constituted by PART, and PART is more or
            less uniformly distributed in WHL.  For example, the two
            teaspoons of chocolate syrup that I put in my milk become
            #$constituents of my glass of chocolate milk.  Note that
            #$constituents does not entail any special kind of
            association or bond among the constituents of a thing; they
            might be simply mixed, they might be chemically bonded, and
            they might be part of some complex structure.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constrainingObject">
        <rdfs:label xml:lang="en">object determining movement</rdfs:label>
        <rdfs:comment>An #$ActorSlot for objects that serve physically
            to constrain the movements of other objects in
            #$MovementEvents, either by affecting their trajectories, by
            limiting or reducing their speeds, by determining the
            general types of movements they undergo (e.g. rotational vs.
            translational), or by having some other constrictive effect
            on their motions. (#$constrainingObject MOTION OBJ) means
            that OBJ physically constrains the motion of some moving
            object (see #$objectMoving) in MOTION.  OBJECT must be in
            physical contact with (see #$touches) this moving object
            during at least part of MOTION.   OBJECT might or might not
            be in motion itself.  Situations in which
            #$constrainingObjects applies include: an axle constraining
            a wheel turning, a car or other #$transporter carrying
            passengers, and a railroad track guiding a train.  A road
            driven on by a car is a marginally negative example of a
            constraining-object: although the road facilitates the
            car&apos;s motion and in typical cases indirectly determines
            (via the driver&apos;s steering) its trajectory, the car can
            be driven off the road.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:domain rdf:resource="#MovementEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="constrainsArg">
        <rdfs:label xml:lang="en">constrains arg</rdfs:label>
        <rdfs:comment>A #$MetaRelation predicate for stating that a
            given meta-relation is used to put an argument-type or
            format constraint (see e.g. #$ArgConstraintPredicate) on a
            given argument-place of a relation. (#$constrainsArg
            METARELN N) means that METARELN is always used to put a
            constraint on a relation&apos;s Nth argument-place.  For
            example, (#$constrainsArg #$arg2Isa 2) holds.  A slight
            deviation from the above occurs when N is 0: we take
            (#$constrainsArg METARELN 0) to mean that METARELN is used
            to constrain _all_ of a relation&apos;s argument-places; see
            e.g. #$argsIsa and #$argsGenl.</rdfs:comment>
        <rdfs:domain rdf:resource="#MetaRelation"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="consumesPortion">
        <rdfs:label xml:lang="en">thing partially consumed</rdfs:label>
        <rdfs:comment>(#$consumesPortion EV OBJ) means that a portion of
            the object OBJ is used up (consumed) in the event EV.
            However, enough of OBJ remains at the end of EV for it to
            maintain its identity.  Thus #$consumesPortion would be
            appropriate for an apple that has a bite taken out of it in
            an eating event, but not for an apple that has been eaten to
            its core, since the latter is no longer an apple.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containerUsed">
        <rdfs:label xml:lang="en">container used</rdfs:label>
        <rdfs:comment>(#$containerUsed EVENT CONT) means that the
            #$objectActedOn in EVENT is contained in (#$in-ContGeneric)
            CONT during EVENT, and that CONT facilitates EVENT being accomplished.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#instrument-Generic"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Container"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsCavityInteriorRegion">
        <rdfs:label xml:lang="en">contains cavity interior region</rdfs:label>
        <rdfs:comment>(#$containsCavityInteriorRegion OBJECT CAVITY)
            means that #$PartiallyTangible OBJECT has
            #$CavityInteriorRegion CAVITY as a hole or cavity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#surrounds-3D"/>
        <rdfs:subPropertyOf rdf:resource="#hasAsCavity"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#CavityInteriorRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsCavityWithWalls">
        <rdfs:label xml:lang="en">contains cavity with walls</rdfs:label>
        <rdfs:comment>(#$containsCavityWithWalls OBJECT CAVITY) means
            that the #$PartiallyTangible OBJECT contains the
            #$CavityWithWalls CAVITY either somewhere within OBJECT, or
            on OBJECT&apos;s surface.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasAsCavity"/>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#CavityWithWalls"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsInformation">
        <rdfs:label xml:lang="en">contains information</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$InformationStore to instances of
            #$AbstractInformationalThing. (#$containsInformation IS
            INFO) means that INFO is part of the information content of
            the #$InformationBearingThing, IS. See also
            #$containsPropositionalInfo-Complete. For assertions that a
            given IBT contains information about a given #$Thing, see
            #$containsInformationAbout and its specializations.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#InformationStore"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsInformationAbout">
        <rdfs:label xml:lang="en">will concern</rdfs:label>
        <rdfs:comment>An #$ObjectPredicate and specialization of
            #$topicOfIndividual that  relates a given #$InformationStore
            (q.v.) to the thing(s) it contains  information about.
            (#$containsInformationAbout INFOSTORE THING) means
            INFOSTORE is at least in part  about  THING.  THING might be
            any sort  of thing at all.  For instance, THING may be an
            individual, as in   (#$containsInformationAbout
            #$TheTorontoStar-TheNewspaper  #$CityOfTorontoOntario); or
            THING might be a collection, as in
            (#$containsInformationAbout #$PokemonWorld-WWWSite
            #$PokemonCharacter).  This is a very general notion of
            aboutness, which does not require that  THING be explicitly
            referred to in INFOSTORE, or that it be the main  topic of
            INFOSTORE.  (For cases where THING is the main topic, use
            the  more specific #$containsInformationAbout-Focally.)  On
            the other hand, note that an information store&apos;s
            containing information about a given  collection or set is
            generally _not_ a sufficient condition for its  containing
            information about any particular elements of that collection
            or set.  See also #$containsInformation, which relates
            #$InformationBearingThings to the information (in the form
            of  #$AbstractInformationalThings) they contain.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:domain rdf:resource="#InformationStore"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsInformationAbout-Focally">
        <rdfs:label xml:lang="en">contains information about - focally</rdfs:label>
        <rdfs:comment>This predicate relates sources of information to
            their main topics.  (#$containsInformationAbout-Focally IS
            THING) means that IS is generally  about  THING -- which may
            be any instance of #$Thing at all. This predicate represents
            a very general notion of aboutness, which does not require
            that THING be explicitly named in IS, but that it be one of
            the main topics of IS. Note that IS can have more than one
            main topic -- e.g., a textbook can have both logic and set
            theory as main topics.  Use the more general predicate
            #$containsInformationAbout to specify that IS contains some
            information about THING, but that THING is not a main topic
            of IS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#containsInformationAbout"/>
        <rdfs:domain rdf:resource="#InformationStore"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsPortals">
        <rdfs:label xml:lang="en">contains portals</rdfs:label>
        <rdfs:comment>(#$containsPortals OBJECT PORTAL) means that the
            OBJECT has PORTAL as one of its holes, passages, exits or entrances.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:subPropertyOf rdf:resource="#hasAsCavity"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Portal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsPrograms">
        <rdfs:label xml:lang="en">contains programs</rdfs:label>
        <rdfs:comment>This predicate relates computer programs to their
            subprograms.  (#$containsPrograms BIG LITTLE) means that BIG
            has LITTLE as one of its subprograms. For example,
            (#$containsPrograms #$MSOffice #$MSPowerPoint) means that
            Microsoft Office contains Microsoft PowerPoint.  Use the
            more specific #$containsModules if LITTLE is not executable
            on its own.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subWork"/>
        <rdfs:domain rdf:resource="#SoftwareObject-Individual"/>
        <rdfs:range rdf:resource="#SoftwareObject-Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="containsPropositionalInfo-Complete">
        <rdfs:label xml:lang="en">contains propositional info - complete</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$InformationBearingThing to instances of
            #$PropositionalInformationThing.
            (#$containsPropositionalInfo-Complete IS INFO) means that
            the #$InformationStore IS contains all and only  the
            propositional information content of the
            #$PropositionalInformationThing, INFO . This predicate is a
            specialization of #$containsInformation, which relates
            instances of #$InformationStore to instances of #$AbstractInformationalThing.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#containsInformation"/>
        <rdfs:domain rdf:resource="#InformationStore"/>
        <rdfs:range rdf:resource="#PropositionalInformationThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contemporaryInArg">
        <rdfs:label xml:lang="en">contemporary in arg</rdfs:label>
        <rdfs:comment>(#$contemporaryInArg PRED N) means that the
            #$Predicate PRED is such that whenever a formula (PRED ...
            ARGN ...), with ARGN a #$TemporalThing, is true at a moment
            in time, it will be the case that the moment belongs to the
            temporal extent of ARGN (i.e., that ARGN temporally subsumes
            the moment).  For example, it&apos;s the case that
            (#$contemporaryInArg #$awareOf 1).  So from the assertion
            (#$holdsIn (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)), we can conclude (given that Fred is a
            #$TemporalThing) that Fred was alive throughout (temporally
            subsumes) 1992.  But it&apos;s not the case that
            (#$contemporaryInArg #$awareOf 2).  And indeed we
            wouldn&apos;t want to conclude that #$GeorgeWashington was
            alive throughout 1992.  In general (with the qualifications
            indicated below), an assertion (#$holdsIn TIME (PRED ...
            ARGN ...)), with PRED such that (#$contemporaryInArg PRED N)
            and ARGN a #$TemporalThing, licenses the conclusion
            (#$temporallySubsumes ARGN TIME).  And an assertion
            (#$holdsSometimeDuring TIME (PRED ... ARGN ...)) licenses
            the conclusion (#$temporallyIntersects ARGN TIME).  Although
            what constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  In
            particular, in the case of most microtheories, one
            doesn&apos;t have to worry about the possibility of gaps in
            the fabric of time between moments.  (Such gaps would
            undermine the conclusion above about temporal subsumption.)
            Another qualification is that ARGN is not a
            #$IndexicalFirstOrderTerm; in practice, it almost never is.
            In order for a predicate PRED to be contemporary in its Nth
            argument-place, the arity of PRED must be greater than or
            equal to N, and the argument-type of the Nth argument-place
            of PRED must be non-disjoint with #$TemporalThing (or, more
            generally, the intersection of the argument-types of the Nth
            argument-place of PRED must be non-disjoint with
            #$TemporalThing).  This is to bar cases in which a predicate
            would otherwise trivially qualify as contemporary in its Nth
            argument-place.  Note that #$CotemporalObjectsSlots are
            contemporary in both their first and second argument-places,
            and #$CotemporalPredicates are contemporary in at least one argument-place.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contiguousAfter">
        <rdfs:label xml:lang="en">contiguous after</rdfs:label>
        <rdfs:comment>(#$contiguousAfter AFTER BEFORE) means that the
            #$TemporalThing AFTER starts immediately following the
            #$TemporalThing BEFORE.  AFTER and BEFORE have no time
            points in common, but there is also no time point between
            the ending of BEFORE and the starting of AFTER.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="continuouslyConnectedTo">
        <rdfs:label xml:lang="en">continuously connected to</rdfs:label>
        <rdfs:comment>(#$continuouslyConnectedTo OBJ1 OBJ2) means that
            OBJ1 and OBJ2 are #$PartiallyTangibles which are directly
            and almost seamlessly connected (e.g. they are formed from
            the same chunk of material, with no substantial barrier or
            surface or gap separating them.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contradictoryMt">
        <rdfs:label xml:lang="en">contradictory mt</rdfs:label>
        <rdfs:comment>(#$contradictoryMt MT-1 MT-2) means that at least
            some of the assertions of MT-1 (content assertions and/or
            domain assumptions) are inconsistent with assertions of
            MT-2, and no lifting can occur between MT-1 and MT-2 (i.e.
            assertions made in one microtheory should not be made
            visible to the other microtheory). For cases where it is
            specifically domain assumptions that are in conflict, the
            more specialized predicate #$negationMt should be used.</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contradictoryPreds">
        <rdfs:label xml:lang="en">contradictory preds</rdfs:label>
        <rdfs:comment>A #$MetaPredicate and a specialization  of
            #$negationPreds.  #$contradictoryPreds holds between two
            predicates   just in case they are direct  contradictories
            of each other in the  following sense.
            (#$contradictoryPreds PRED1 PRED2) means that PRED1 and
            PRED2 are defined for exactly the same sequences of
            arguments, and that  either one of these predicates holds of
            a given such sequence if and only   if the other predicate
            does not hold of that sequence.  That is,   (PRED1 . ARGS)
            is materially equivalent to (#$not (PRED2 . ARGS)), and
            (PRED2 . ARGS) is materially equivalent to (#$not (PRED1 .
            ARGS)).  This   is stronger than the corresponding
            #$negationPreds form, whose meaning is   explained by
            replacing (both occurrences of) the phrase  is materially
            equivalent to  with  materially implies  in the preceding
            sentence.    For example, (#$contradictoryPreds
            #$knownSentence #$unknownSentence)   holds.  To say that
            PRED1 and PRED2 are defined for exactly the same   sequences
            of arguments  implies that a closed atomic sentence formed
            with a CycL term that denotes PRED1 followed by a sequence
            of argument-terms  is semantically well-formed (see
            #$CycLSentence-Assertible) just in case   the similar
            sentence formed instead with a term for PRED2 is
            semantically   well-formed.  Thus, any argument-type
            constraint (see #$ArgTypePredicate)  on a given
            argument-place (say the Nth) of PRED1 must also apply to the
            Nth argument-place of PRED2, and vice versa.  Otherwise, it
            could happen  that a sentence of the form (PRED1 . ARGS) was
            true while the corresponding  (PRED2 . ARGS) was
            semantically malformed, and thus (#$not (PRED2 . ARGS))
            would not be true.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#negationPreds"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contraryFeelings">
        <rdfs:label xml:lang="en">contrary feelings</rdfs:label>
        <rdfs:comment>(#$contraryFeelings EMOTYPE CONTTYPE) means that a
            feeling of the type EMOTYPE is contrary to a feeling of the
            type CONTTYPE.  One feeling is contrary to another if they
            are opposed in almost all their components.  See also
            #$contrastedFeelings.  It would be very rare for someone to
            feel both an EMOTYPE and CONTTYPE at the same time,
            especially about the same thing/event/situation.  E.g.,
            (#$contraryFeelings #$Gloominess #$Cheerfulness),
            (#$contraryFeelings #$Respect #$Contempt),
            (#$contraryFeelings #$Shame #$Pride), and so on.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#contrastedFeelings"/>
        <rdfs:domain rdf:resource="#FeelingType"/>
        <rdfs:range rdf:resource="#FeelingType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="contrastedFeelings">
        <rdfs:label xml:lang="en">contrasted feelings</rdfs:label>
        <rdfs:comment>(#$contrastedFeelings EMOTYPE CONTTYPE) means that
            a feeling of the type EMOTYPE differs in enough components
            from a feeling of the type CONTTYPE that it is unlikely (but
            not virtually impossible, as in the case of
            #$contraryFeelings) that someone would simultaneously
            experience feelings of both types EMOTYPE and CONTTYPE,
            especially with respect to the same object. E.g.,
            (#$contrastedFeelings #$Pride #$Remorse),
            (#$contrastedFeelings #$Abhorrence #$Respect),
            (#$contrastedFeelings #$Entertained-Emotion #$Panic), etc.
            That last assertion expresses the rule of thumb that one
            does not often feel both entertained and panicy at the same
            time, though those two emotions are clearly not each
            other&apos;s `opposite&apos; by any means.</rdfs:comment>
        <rdfs:domain rdf:resource="#FeelingType"/>
        <rdfs:range rdf:resource="#FeelingType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="controls">
        <rdfs:label xml:lang="en">controls</rdfs:label>
        <rdfs:comment>(#$controls AGENT THING) means that AGENT has
            effective control over THING.  This does not mean that AGENT
            is at every moment directly affecting THING, but that AGENT
            can and will intervene when necessary.  However, it does
            mean that AGENT must exercise some form of influence over
            THING at some time.  For instance, in the military, a
            superior officer stands in this relation to a subordinate
            under his command.  The officer need not at every moment
            tell the soldier what to do, but will intervene to correct
            the subordinate&apos;s actions when needed.  However, the
            officer does at the very least affect the soldier
            psychologically, or the superior does not have effective
            control.  Normally, when an agent is in control of
            something, the agent is held responsible for what that thing
            does, or what happens to it.  Note that #$controls refers to
            a standing relation between an agent and thing, perhaps as a
            result of stable social or causal facts.  Note also,
            however, that the thing controlled might be an _event_
            rather than an object, and in such cases the controller only
            #$controls the event while (i.e. some or all of the time
            during which) the event in taking place; thus it differs
            from an actor-slot like #$directingAgent, which continues to
            hold between a directing agent and the directed event even
            after that event is finished.  For the relation of
            controlling an object during a particular action, see the
            actor-slot #$objectControlled.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ableToControl"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="convexHullOf">
        <rdfs:label xml:lang="en">convex hull of</rdfs:label>
        <rdfs:comment>(#$convexHullOf SURFACE OBJECT) means that SURFACE
            is the convex hull that encloses, precisely, all of the
            minimal convex region of space that spatiallySubsumes all
            parts of OBJECT. See also #$ConvexHullFn for the
            corresponding function. The convex hull is a surface; for
            the minimal convex region of space, see
            #$minimalConvexSpaceSubsuming. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#Surface-Intangible"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="conveyor-Generic">
        <rdfs:label xml:lang="en">conveyer (pred)</rdfs:label>
        <rdfs:comment>(#$conveyor-Generic MOVE OBJ) means that OBJ
            enables or               facilitates the conveyance of what
            is transported        (the animals, goods, people, etc. that
            are the #$transportees)               in the
            #$Conveying-Generic MOVE.  In the case where OBJ
            itself is an #$objectMoving in MOVE, use the more specific
            predicate #$transporter.  If OBJ is known not to be an
            #$objectMoving, use the more specific predicate              #$conveyor-Stationary.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constrainingObject"/>
        <rdfs:subPropertyOf rdf:resource="#instrument-Generic"/>
        <rdfs:domain rdf:resource="#Conveying-Generic"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="conveyor-Stationary">
        <rdfs:label xml:lang="en">stationary conveyer</rdfs:label>
        <rdfs:comment>(#$conveyor-Stationary CONVEY CONVEYOR) means that
            in the #$Conveying-Stationary CONVEY, CONVEYOR facilitates
            the movement of some object (the object is related to CONVEY
            by #$transportees (q.v.)), but CONVEYOR does not move
            together with that object along the path of conveyance.  For
            example, an instance of #$River can move a boat (an instance
            of #$Watercraft) from one location to another, without
            itself moving translationally; i.e., the river does not
            change its location (although some pieces of #$Water in the
            river do) together with the boat.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conveyor-Generic"/>
        <rdfs:domain rdf:resource="#Conveying-Stationary"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="copyProduced">
        <rdfs:label xml:lang="en">copy produced</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$IBTCopying (a specialization of
            #$InformationTransferEvent) to instances of
            #$InformationBearingThing. (#$copyProduced COPYING COPY)
            means that COPY is the copy produced in the #$IBTCopying
            COPYING. This predicate is a specialization of
            #$IBTGeneration. See also #$itemCopied, which relates
            copying events to items copied.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ibtGenerated"/>
        <rdfs:domain rdf:resource="#IBTCopying"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="coreRelatives">
        <rdfs:label xml:lang="en">core relative (CycL predicate)</rdfs:label>
        <rdfs:comment>In this microtheory, (#$coreRelatives PERSON1
            PERSON2) means, specifically, that PERSON2 is a child,
            grandchild, sibling, spouse, parent, or grandparent of
            PERSON1.  In other words, this predicate relates a person to
            her/his (i) siblings, (ii) lineal relatives that are one or
            two generations  above  or  below  her, and (iii) closest
            affine (spouse).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#relatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="correspondingPreds-Capability">
        <rdfs:label xml:lang="en">corresponding preds capability</rdfs:label>
        <rdfs:comment>&apos;(#$correspondingPreds-Capability INST-PRED
            TYPE-PRED)&apos; means that INST-PRED is the
            #$CapabilityPredicate-InstanceLevel corresponding to the
            #$CapabilityPredicate-TypeLevel TYPE-PRED.  An
            instance-level capability predicate restricts its first
            argument to individuals, whereas a type-level capability
            predicate restricts its first argument to collections.  What
            makes two such predicates correspond is that each represents
            the same type of capability.</rdfs:comment>
        <rdfs:domain rdf:resource="#CapabilityPredicate-InstanceLevel"/>
        <rdfs:range rdf:resource="#CapabilityPredicate-TypeLevel"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cospatial">
        <rdfs:label xml:lang="en">cospatial</rdfs:label>
        <rdfs:comment>(#$cospatial THING1 THING2) means that the THING1
            and THING2 have the same spatial extent.  This implies that
            they have the same location, shape, and size.  But it
            doesn&apos;t imply that they are one and the same or have
            any parts in common, since we don&apos;t rule out that
            distinct things might spatially coincide or partially
            overlap without sharing any common parts.  For example, a
            wall and the region of pure space (see #$SpaceRegion) that
            the wall occupies, the surface of the wall and a shadow cast
            on a wall, or the wall and the magnetic field surrounding an
            electrical outlet in the wall.  (As a further example, we
            might wish in some contexts to treat the visual images
            reflected in mirrors as localized things the public,
            external world; these images, then, would spatially
            intersect solid objects situated in back of a mirror without
            being part of them.)  If THING1 are THING2 are ( both ) pure
            space regions,  however, then they are identical (see
            #$equals) if and only if they are cospatial.  See also
            #$spatiallySubsumes and #$spatiallyIntersects.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallySubsumes"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cost">
        <rdfs:label xml:lang="en">#$cost</rdfs:label>
        <rdfs:comment>(#$cost OBJECT MONEY) means that the
            #$TemporalThing OBJECT has a cost in #$MonetaryValue of
            MONEY. Note that this amount can be a discrete quantity or
            an interval.  This concept is subtly different from (and
            considerably more complex than) that of #$basicPrice, which
            denotes the amount of money requested for an item which is
            for sale. For instance, the price of an airconditioning unit
            might be $200 while its #$cost (over a lifetime of repairs,
            and to the environment, if it is environmentally
            destructive) might be considerably higher. See also the
            ternary predicate #$costTo.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cotemporal">
        <rdfs:label xml:lang="en">cotemporal</rdfs:label>
        <rdfs:comment>(#$cotemporal X Y) means that X and Y have the
            exact same temporal extent.  This is a much stronger
            relation than #$temporalBoundsIdentical (q.v.).        Note:
            Cyc&apos;s #$cotemporal relation is equivalent to what James
            Allen independently dubbed the EQUALS relation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIdentical"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cotemporalSubEvents">
        <rdfs:label xml:lang="en">cotemporal sub events</rdfs:label>
        <rdfs:comment>The predicate #$cotemporalSubEvents is used to
            relate an event to some sub-event which has the same
            duration as the whole event, but doesn&apos;t necessarily
            include everything that happens in the whole event.
            (#$cotemporalSubEvents WHOLE PART) means that WHOLE and PART
            are cotemporal events (i.e., they have the same exact
            duration), and PART is a component of WHOLE.  For example, a
            particular instance of #$RainStorm may have distinguishable
            #$cotemporalSubEvents for (1) raining and (2) wind blowing,
            and an instance of swimming #$Backstroke has separable
            events for (1) kicking and (2) arm motion throughout the
            swimming.  See also #$cotemporal, #$subEvents.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cotemporal"/>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryCodeDigraph">
        <rdfs:label xml:lang="en">country code digraph</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$countryCodeDigraph PLACE CODE) means that CODE is an
            internationally recognized two-letter abbreviation for the
            name of PLACE.--Kathy Burns, May 14, 1998</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#abbreviationString-PN"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryName-LocalLongForm">
        <rdfs:label xml:lang="en">country name - local long form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#placeName-LocalLongForm"/>
        <rdfs:domain rdf:resource="#Country"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryName-LocalShortForm">
        <rdfs:label xml:lang="en">country name - local short form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#placeName-LocalShortForm"/>
        <rdfs:domain rdf:resource="#Country"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryName-LongForm">
        <rdfs:label xml:lang="en">country name - long form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#placeName-LongForm"/>
        <rdfs:domain rdf:resource="#Country"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryName-ShortForm">
        <rdfs:label xml:lang="en">country name - short form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#placeName-ShortForm"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="countryOfAddress">
        <rdfs:label xml:lang="en">country of address</rdfs:label>
        <rdfs:comment>(#$countryOfAddress LOC COUNTRY) means that the
            #$ContactLocation LOC is located in the #$Country COUNTRY.
            For example, the contact location for #$Cycorp is related by
            #$countryOfAddress to the #$UnitedStatesOfAmerica.  See also #$ContactLocation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inRegion"/>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#Country"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covering">
        <rdfs:label xml:lang="en">covering</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlot that relates a #$SetOrCollection
            (q.v.)  to a #$SetOrCollectionType (q.v.) that  covers  it,
            i.e. the union of all of the latter&apos;s elements (which
            are themselves sets or collections) includes all of the
            former&apos;s elements.  (#$covering SETORCOL COVER) means
            that COVER is a covering of SETORCOL: the elements of COVER
            are themselves mathematical sets or collections, and every
            element of SETORCOL is an element of at least one of the
            elements of COVER.  For example, the Linnaean taxonomy of
            types of living things (Dog, Mammal, Chordate, Fungus, etc.)
            is a covering of the set of all animals alive today, as
            every animal alive today is a member of one or more of the
            Linnaean categories.  Note that COVER may contain  extra
            elements that are not members of SETORCOL.  For example, the
            union of all the Linnaean categories (see
            #$OrganismClassificationType) is actually much larger than
            the set of animals alive today, encompassing as it does
            plants, extinct animal species, etc.  In order to express an
            assertion about covering, one need not create a new constant
            from scratch to play the role of COVER if such a constant
            doesn&apos;t already exist.  Instead, using the function
            #$TheCovering (q.v.), one can specify a covering by
            enumerating its elements.  (#$TheCovering is a special
            #$ReifiableFunction whose principal reason-for-being is to
            facilitate the inference heuristics associated with
            assertions about covering.)</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Baglike">
        <rdfs:label xml:lang="en">covers - baglike</rdfs:label>
        <rdfs:comment>(#$covers-Baglike WRAP OBJECT) means that the
            #$SheetOfSomeStuff WRAP covers OBJECT as a continuous sheet
            (so that WRAP also touches OBJECT), and is wrapped wholly
            around OBJECT (so that OBJECT is totally enclosed in WRAP).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Sheetlike"/>
        <rdfs:subPropertyOf rdf:resource="#surroundsCompletely"/>
        <rdfs:domain rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Generic">
        <rdfs:label xml:lang="en">covers - generic</rdfs:label>
        <rdfs:comment>(#$covers-Generic COVER THING) means that COVER
            physically covers THING.  This is the most  general
            predicate referring to covering.  More specific predicates
            include #$covers-Sheetlike, #$covers-Paintlike,
            #$covers-Hairlike, and so forth.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Hairlike">
        <rdfs:label xml:lang="en">covers - hairlike</rdfs:label>
        <rdfs:comment>(#$covers-Hairlike HAIR OBJECT) means that HAIR
            consists of a mob of things that are embedded close together
            in OBJECT and cover some portion of its surface.  See also #$Mob.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Generic"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Paintlike">
        <rdfs:label xml:lang="en">covers - paintlike</rdfs:label>
        <rdfs:comment>(#$covers-Paintlike COATING OBJECT) means that
            COATING adheres to and covers OBJECT like a coat of paint.
            Since COATING adheres to OBJECT, COATING directly touches
            (see the predicate #$touchesDirectly) OBJECT.   COATING may
            be either dry (e.g., dried paint) or liquid (e.g., lubricant
            spread on a surface, like cooking oil on a baking pan).
            (#$covers-Paintlike COATING OBJECT) implies that COATING
            isn&apos;t more cohesive with itself than it is with OBJECT,
            so (if dry) it would tend to peel or flake off in small
            pieces, rather than as a whole.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#stuckTo"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Ruglike">
        <rdfs:label xml:lang="en">covers - ruglike</rdfs:label>
        <rdfs:comment>(#$covers-Ruglike MAT OBJECT) means that MAT
            covers at least part of one surface of OBJECT.  MAT is
            #$SheetShaped, and MAT lies with its two longer dimensions
            parallel to OBJECT.  See also #$coversWithConformity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Sheetlike"/>
        <rdfs:domain rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Sheetlike">
        <rdfs:label xml:lang="en">covers - sheetlike</rdfs:label>
        <rdfs:comment>(#$covers-Sheetlike SHEET OBJ) means that SHEET, a
            #$SheetOfSomeStuff, covers OBJ like a sheet.  It may be
            resting on top (#$covers-Ruglike), draped over, or wrapped
            around the object.  #$covers-Baglike is a restricted form of this.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#sheetSurfaceTouches"/>
        <rdfs:domain rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="covers-Skinlike">
        <rdfs:label xml:lang="en">covers - skinlike</rdfs:label>
        <rdfs:comment>(#$covers-Skinlike SKIN OBJECT) means that SKIN
            forms all or part of OBJECT&apos;s outer surface, shell, or
            skin.  The predicate is agnostic as to whether SKIN is a
            part of OBJECT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Generic"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="createdBy">
        <rdfs:label xml:lang="en">#$createdBy</rdfs:label>
        <rdfs:comment>The predicate #$createdBy relates something to its
            creator(s).  (#$createdBy THING AGENT) means that AGENT is
            one of the people, corporations, publishers, etc.,
            responsible for the invention or bringing into being of
            THING.  This is a very general predicate, whose narrower
            specifications such as #$developerOfIBTType, #$ibtCreator,
            #$madeBy, or #$creatorOfCW, should be used if applicable instead.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="crewMember">
        <rdfs:label xml:lang="en">crew member</rdfs:label>
        <rdfs:comment>(#$crewMember OPERATE PERSON) means that the
            #$Person PERSON is a member of the crew needed to perform
            the #$TransportationEvent OPERATE appropriately. Very often
            the only #$crewMember is the #$driverActor (when driving an
            #$Automobile for instance), but there are cases when there
            are more #$crewMembers (when driving a large #$Ship for
            instance). </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#deliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#transportees"/>
        <rdfs:domain rdf:resource="#TransportationEvent"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="customers">
        <rdfs:label xml:lang="en">customer (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates an agent to another agent
            to whom the former sells goods or services.  (#$customers
            SELLER CUSTOMER) means SELLER sells goods and/or services to
            CUSTOMER.  CUSTOMER must actually buy something from SELLER
            in order to be one of SELLER&apos;s #$customers.  (Thus,
            #$customers has a narrower meaning than `customer&apos; in
            colloquial English, which includes potential buyers.)  See
            also #$clients.  Cf. #$buyingAgent (in a particular sales
            event). </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#clients"/>
        <rdfs:subPropertyOf rdf:resource="#doesBusinessWith"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cycleInSystem">
        <rdfs:label xml:lang="en">cycle in system</rdfs:label>
        <rdfs:comment>(#$cycleInSystem CYCLE SYS) means that CYCLE is a
            cycle in the path system SYS.  A cycle in SYS is either a
            loop in SYS or the concatenation of two different paths
            PATH1 and PATH2 in SYS satisfying the following conditions:
            (i) there are two points X and Y in SYS such that
            (#$pathBetweenInSystem PATH1 X Y SYS) and
            (#$pathBetweenInSystem PATH2 X Y SYS), and (ii) no point in
            SYS other than X and Y is on both PATH1 and PATH2.</rdfs:comment>
        <rdfs:domain rdf:resource="#Path-Cyclic"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cyclistNotes">
        <rdfs:label xml:lang="en">cyclist notes</rdfs:label>
        <rdfs:comment>The structure of human insulin is at
            http://biotech.icmb.utexas.edu/images/dict/insulin.gif while
            other mammals may produce different chemical species.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="cyclistPrimaryProject">
        <rdfs:label xml:lang="en">cyclist primary project</rdfs:label>
        <rdfs:comment>(#$cyclistPrimaryProject CYCLIST PROJECT) relates
            a human CYCLIST to the Cyc-based PROJECT on which they are
            primarily working.</rdfs:comment>
        <rdfs:domain rdf:resource="#HumanCyclist"/>
        <rdfs:range rdf:resource="#Cyc-BasedProject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dailyHighTemperature">
        <rdfs:label xml:lang="en">daily high temperature</rdfs:label>
        <rdfs:comment>(#$dailyHighTemperature PLACE TEMP) means that the
            #$Temperature TEMP is the high temperature for a day at the
            #$GeographicalRegion PLACE.  #$dailyHighTemperature is
            typically used for a specified period of time (e.g., a
            particular day or a specific season); it may be used with
            generic temperature ranges as well as precise temperatures.
            Examples: using #$holdsIn, we can say that Austin&apos;s
            temperature for 7/20/96 is 102 degrees Fahrenheit; or we can
            say that for any #$SummerSeason, Austin&apos;s [typical]
            #$dailyHighTemperature is #$VeryHot.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#Temperature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="damages">
        <rdfs:label xml:lang="en">damaged object</rdfs:label>
        <rdfs:comment>(#$damages EV OBJ) means that OBJ is acted on in
            EV in such a way as to end up damaged.  Destruction is
            considered an extreme form of damage.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dateOfDeath">
        <rdfs:label xml:lang="en">date of death</rdfs:label>
        <rdfs:comment>(#$dateOfDeath X Y) indicates that the #$Entity X
            ceased to exist during #$Date Y. For people, this is the
            date at which they died, hence the name of the predicate.
            The first argument to this predicate must be an #$Entity,
            and not just any old #$SomethingExisting, because we
            don&apos;t want to talk about the #$birthDate or
            #$dateOfDeath of a subabstraction like
            AlbertEinsteinWhileAtPrinceton; in other words, proper
            subabstractions will have #$startingDates and #$endingDates,
            but only true #$Entitys will have a #$birthDate or #$dateOfDeath</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endingDate"/>
        <rdfs:domain rdf:resource="#Entity"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dateOfEvent">
        <rdfs:label xml:lang="en">date of event</rdfs:label>
        <rdfs:comment>This predicate relates an event and the calendar
            date on which it transpired. So (#$dateOfEvent EVENT DATE)
            says that EVENT both starts and ends during DATE. For
            example, (#$dateOfEvent #$GettysburgAddress-Speech (#$DayFn
            19 (#$MonthFn #$November (#$YearFn 1863)))). means that
            #$AbrahamLincoln started talking one famous day and also
            finished on that day. One should verify this condition: in
            fact your birthday is determined by the #$endingDate of your
            #$BirthEvent; the #$dateOfEvent may not be clear. See also #$occursDuring.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startingDate"/>
        <rdfs:subPropertyOf rdf:resource="#endingDate"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="deadEndInSystem">
        <rdfs:label xml:lang="en">dead end in system</rdfs:label>
        <rdfs:comment>A #$PathSystemCycLConstant that is a
            specialization of #$nodeInSystem. (#$deadEndInSystem END
            SYS) means that END is a dead-end node in the  #$PathSystem
            SYS.  A node END in SYS is a dead-end node in SYS if there
            is exactly one link LINK in SYS that END is on and END is
            not on any loop  in SYS.  One easy way to illustrate a
            deadend END in SYS is to picture  it as a node with only one
            path (possibly very  short ) in the system  through which
            one can approach or leave END.  Note that no totally
            isolated node in SYS can be a deadend in SYS, nor can any
            point in SYS  that is on a loop in SYS.  If there is no
            specified path-system in which  the path ends, but the
            ending is a dead end of a #$Path-Customary like  a road or
            wire, then use #$pathTerminus instead.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nodeInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dealerFor">
        <rdfs:label xml:lang="en">dealer for</rdfs:label>
        <rdfs:comment>The predicate #$dealerFor relates a retailer to
            the manufacturer(s) whose products are sold by that
            retailer.  (#$dealerFor RETAILER MANUF) means that the
            #$RetailOrganization RETAILER is a dealer for products made
            by the #$ManufacturingOrganization MANUF.  RETAILER may be
            only one of many dealers.  RETAIL sells MANUF&apos;s
            products to the final consumers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#RetailOrganization"/>
        <rdfs:range rdf:resource="#ManufacturingOrganization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="decontextualizedCollectionConventionMt">
        <rdfs:label xml:lang="en">decontextualized collection convention mt</rdfs:label>
        <rdfs:comment>(#$decontextualizedCollectionConventionMt
            DECONT-COL MT) means that assertions of the form (#$isa INS
            DECONT-COL), for any INS, are by convention asserted in MT.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="decontextualizedPredicateConventionMt">
        <rdfs:label xml:lang="en">decontextualized predicate convention mt</rdfs:label>
        <rdfs:comment>(#$decontextualizedPredicateConventionMt
            DECONT-PRED MT) means that the predicate extent of the
            decontextualized predicate DECONT-PRED, by convention, is
            asserted in MT.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defaultCorrespondingRoles">
        <rdfs:label xml:lang="en">default corresponding roles</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLRolePredicate"/>
        <rdfs:range rdf:resource="#BinaryRolePredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defaultGenerationConstraint">
        <rdfs:label xml:lang="en">default part of speech for NL generation</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLTerm"/>
        <rdfs:range rdf:resource="#TermPhrasesConstraint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defendants">
        <rdfs:label xml:lang="en">defendant (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$defendants ARG1 ARG2) means that the agent ARG2
            is the accused party in the lawsuit ARG1.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#litigants"/>
        <rdfs:domain rdf:resource="#Trial"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="definingMt">
        <rdfs:label xml:lang="en">defining mt</rdfs:label>
        <rdfs:comment>(#$definingMt TERM MT) states that TERM only
            begins to have semantic meaning in microtheory MT. In
            microtheories in which MT is not  accessible, TERM is
            #$undefined. Additionally,  (#$termDependsOn TERM MT).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termDependsOn"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="definingTimeUnit">
        <rdfs:label xml:lang="en">defining time unit</rdfs:label>
        <rdfs:comment>(#$definingTimeUnit ?CALENDAR-INTERVAL-TYPE
            ?TIME-UNIT) means that the #$CalendarCoveringType,
            ?CALENDAR-INTERVAL-TYPE, and the unit of time, ?TIME-UNIT,
            are defined in terms of each other.  For example,
            (#$definingTimeUnit #$CalendarDay #$DaysDuration).</rdfs:comment>
        <rdfs:domain rdf:resource="#CalendarCoveringType"/>
        <rdfs:range rdf:resource="#UnitOfTime"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="definiteDescriptions">
        <rdfs:label xml:lang="en">definite descriptions</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$definiteDescriptions IND STRING) means that   IND is the
            unique satisfier of the description   STRING, and thus that
            STRING designates IND.     Keep in mind that, strictly
            speaking, definite descriptions    are not names, one major
            difference being       that descriptions do not
            designate rigidly.  Thus any use of
            #$definiteDescriptions in the KB should either be
            time-indexed, by using #$holdsIn (or some     other
            predicate); placed in an Mt where      the assertion in
            question is guaranteed     to be true; or otherwise
            monitored for   staleness and removed whenever         the
            assertion becomes false.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#IDString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defnIff">
        <rdfs:label xml:lang="en">defn iff</rdfs:label>
        <rdfs:comment>A #$CycInferenceDescriptorPredicate.  (#$defnIff
            COL TEST) means  that TEST is the name of a piece of code in
            the SubL implementation  of Cyc that specifies, and tests
            for, a necessary and sufficient  condition for a CycL
            term&apos;s denoting an instance of (see #$isa) the
            collection COL.  If and only if TEST returns `T&apos; (for
            `True&apos;) when  applied to a particular term can that
            term&apos;s denotatum be considered  an instance of COL; all
            and only terms that denote instances of COL  must fulfill
            TEST&apos;s requirements.  See also #$defnNecessary and  #$defnSufficient.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#defnSufficient"/>
        <rdfs:subPropertyOf rdf:resource="#defnNecessary"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defnNecessary">
        <rdfs:label xml:lang="en">defn necessary</rdfs:label>
        <rdfs:comment>A #$CycInferenceDescriptorPredicate.
            (#$defnNecessary COL TEST) means that TEST is the name of a
            piece  of code in the SubL implementation of Cyc that
            specifies, and tests  for, a necessary condition for a CycL
            term&apos;s denoting an instance of  (see #$isa) the
            collection COL.  Only if TEST returns `T&apos; (for
            `True&apos;) when applied to a particular term can that
            term&apos;s  denotatum be considered an instance of COL; all
            terms that denote  instances of COL must fulfill TEST&apos;s
            requirements, although there  may be additional requirements
            for denoting an instance of COL as  well.  See also
            #$defnSufficient and #$defnIff.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="defnSufficient">
        <rdfs:label xml:lang="en">defn sufficient</rdfs:label>
        <rdfs:comment>A #$CycInferenceDescriptorPredicate.
            (#$defnSufficient COL TEST) means that TEST is the name of a
            piece of code in the SubL implementation of Cyc that
            specifies, and tests for, a sufficient condition for a CycL
            term&apos;s denoting an instance of (see #$isa) the
            collection COL.  If TEST returns `T&apos; (for `True&apos;)
            when applied to a particular term, then that term&apos;s
            denotatum is considered to be an instance of COL.  Note that
            TEST isn&apos;t necessarily a necessary test for membership
            in COL; that is, not all instances of COL must pass the
            test, unless TEST is also a #$defnNecessary for COL.  See
            the related predicates #$defnNecessary and #$defnIff.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="deliberateActors">
        <rdfs:label xml:lang="en">deliberate</rdfs:label>
        <rdfs:comment>(#$deliberateActors ACT ACTOR) means that the
            #$Agent ACTOR is conscious, volitional, and purposeful in
            the #$Event ACT.   ACTOR is aware of acting in ACT, and
            chooses to play the role he/she/it does in ACT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="denotatumArg">
        <rdfs:label xml:lang="en">denotatum arg</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$denotatumArg PRED N) means that the Nth argument to the
            #$NLSemanticPredicate PRED is the denoted Cyc term.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="denotes">
        <rdfs:label xml:lang="en">denotes</rdfs:label>
        <rdfs:comment>A #$MetaLanguagePredicate (q.v.) that relates
            denoting   #$CycLTerms to their denotations: the things in
            the intended model of the CycL   language that those terms
            denote or refer to or stand for.  (#$denotes TERM THING)
            means that TERM denotes THING.  Note that #$denotes&apos;s
            first argument-place is _not_  implicitly quoted  (see
            #$quotedArgument); instead, TERM will often be an explicitly
            quoted term -- i.e. something wrapped in the
            syncategorematic quotation symbol `#$Quote&apos; (see
            #$Quote).  For example, the true sentence `(#$denotes
            (#$Quote #$Plato) #$Plato)&apos; means that the CycL term
            `#$Plato&apos; denotes the person #$Plato.  But note that
            the first argument of #$denotes need not be quoted.
            Suppose (e.g.) that the term `#$Plato&apos; were the CycL
            constant most beloved of #$Cyclists, and that a new constant
            `CyclistsFavoriteConstant&apos; were reified and defined so
            as to reflect this fact.  Then
            `CyclistsFavoriteConstant&apos; would refer to the CycL
            constant `#$Plato&apos;, which in turn denotes the man
            Plato; and so the sentence `(#$denotes
            CyclistsFavoriteConstant #$Plato)&apos; would be true.  Note
            also that not all CycL terms denote, not even all
            #$CycLClosedDenotationalTerms (q.v.); e.g.
            `(#$BorderBetweenFn #$Canada #$Mexico)&apos; fails to denote
            anything (except perhaps in certain counterfactual
            contexts).  Note finally that the sentence `(#$denotes
            #$Plato #$Plato)&apos; is of course _not_ true, as it means
            that the man Plato is a CycL term that denotes the man
            Plato, which is a patent falsehood since no man is a CycL
            term and no man denotes anything (let alone himself).  See
            also #$hasDenotatum, #$quotedIsa, #$EscapeQuote, and the
            shared #$NoteAboutQuotingInCycL.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLExpression"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="densityOfObject">
        <rdfs:label xml:lang="en">density of object</rdfs:label>
        <rdfs:comment>(#$densityOfObject OBJ DENS) means that the
            tangible thing OBJ has the #$Density DENS.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Density"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivationalAffixBasePOS">
        <rdfs:label xml:lang="en">derivational affix base p o s</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#DerivationalAffix"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivationalAffixResultPOS">
        <rdfs:label xml:lang="en">derivational affix result p o s</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#DerivationalAffix"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedProbability">
        <rdfs:label xml:lang="en">derived probability</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$derivedProbability PROPOSITION PROBNO) means that, in the
            applicable #$Microtheory, the a posteriori probability of
            the truth of the formula PROPOSITION, given (and depending
            on) the current state of knowledge of all other assertions,
            is PROBNO (a real number between zero and one, where zero
            means certainly false and one means certainly true).  In
            most microtheories, generally, this refers to the derived
            probability that PROPOSITION is true given the probabilities
            of the other #$CycLAssertions and #$domainAssumptions of the
            #$Microtheory.   Contrast this with #$priorProbability and
            #$derivedProbability-Range.  See also the function version
            of this: #$DerivedProbabilityFn.  A #$derivedProbability
            depends at least partially on, and is in some manner derived
            from or affected by, the probabilities of some or all of the
            other #$CycLAssertions in the #$Microtheory (whether prior,
            derived or conditional) along with the #$domainAssumptions.
            See also #$conditionalProbability.  This definition makes no
            presumption as to determinism versus nondeterminism, nor as
            to whether probability is only in the mind of some beholder.
            The definition allows for any of several different systems
            of deriving the probability of one assertion from the
            probabilities of, or conditional probabilities relating,
            other assertions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#derivedProbability-Range"/>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ScalarPointValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedProbability-Range">
        <rdfs:label xml:lang="en">derived probability - range</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$derivedProbability-Range PROPOSITION PROBRANGE) means
            that, in the applicable #$Microtheory, the a posteriori
            probability of the truth of the formula PROPOSITION, given
            (and depending on) the current state of knowledge of all
            other assertions, is somewhere in the range PROBRANGE
            (either a real number between zero and one, where zero means
            certainly false and one means certainly true, or an interval
            between two such numbers).  In most microtheories,
            generally, this refers to the derived range of derived
            probability that PROPOSITION is true given the probabilities
            (or probability ranges) of the other #$CycLAssertions and
            #$domainAssumptions of the #$Microtheory.   Contrast this
            with #$priorProbability-Range and with #$derivedProbability.
            A #$derivedProbability-Range depends at least partially on,
            and is in some manner derived from or affected by, the
            probabilities of some or all of the other #$CycLAssertions
            in the #$Microtheory (whether prior, derived or conditional)
            along with the #$domainAssumptions.  This definition makes
            no presumption as to determinism versus nondeterminism, nor
            as to whether probability is only in the mind of some
            beholder.  The definition allows for any of several
            different systems of deriving the probability of one
            assertion from the probabilities of, or conditional
            probabilities relating, other assertions.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#Probability"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedUsingAffix">
        <rdfs:label xml:lang="en">derived using affix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordHasConstituent"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#DerivationalAffix"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedUsingPrefix">
        <rdfs:label xml:lang="en">derived using prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#derivedUsingAffix"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#DerivationalPrefix"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedUsingSuffix">
        <rdfs:label xml:lang="en">derived using suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#derivedUsingAffix"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#DerivationalSuffix"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="derivedUsingWordFormationType">
        <rdfs:label xml:lang="en">derived using word formation type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#LexicalWordFormationProcess"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="desires">
        <rdfs:label xml:lang="en">#$desires</rdfs:label>
        <rdfs:comment>(#$desires AGT PROP) means that the #$Agent AGT
            desires that the world be as the proposition PROP
            (represented by a #$ELSentence-Assertible) describes it to
            be.  #$desires is implied by #$goals, but is weaker:  PROP
            might be some desirable state of affairs that the agent is
            not actively working, or planning, to make/keep true; e.g.,
            #$WorldPeace.  See also #$goals and #$intends.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveInterest-Prop"/>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAboutProposition"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="destination-RoundTrip">
        <rdfs:label xml:lang="en">destination - round trip</rdfs:label>
        <rdfs:comment>(#$destination-RoundTrip TRIP PLACE) means that
            the #$PartiallyTangible PLACE is the destination of the
            outbound leg (see the predicate #$outboundLegOfRoundTrip) of
            the #$Translation-RoundTrip TRIP, and that PLACE is the
            starting point of the inbound leg (see the predicate
            #$inboundLegOfRoundTrip) of TRIP.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:domain rdf:resource="#Translation-RoundTrip"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="determinerAgreement">
        <rdfs:label xml:lang="en">determiner agreement</rdfs:label>
        <rdfs:comment>(#$determinerAgreement DET POS-PRED) means that
            the determiner DET requires that the part of speech of the
            N-bar it is a specifier of be a spec-pred of POS-PRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalItem"/>
        <rdfs:range rdf:resource="#NLSyntacticPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="determinerStrings">
        <rdfs:label xml:lang="en">determiner strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$determinerStrings WORD STRING) states that STRING is the
            determiner form for the word unit WORD in some microtheory.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="developerOfIBTType">
        <rdfs:label xml:lang="en">developer of i b t type</rdfs:label>
        <rdfs:comment>The predicate #$developerOfIBTType relates a
            specific work to its creator(s).  (#$developerOfIBTType
            IBTTYPE AGENT) means that AGENT is one of the people,
            corporations, publishers, etc., responsible for the
            invention or bringing into being of the
            #$SpecifiedInformationBearingThingType IBTTYPE, which may be
            a book, television show, computer program, musical score,
            etc.  For example, #$OrsonWelles is a #$developerOfIBTType
            for #$CitizenKane-TheMovie.</rdfs:comment>
        <rdfs:domain rdf:resource="#IBTContentType"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="deviceControlledBy">
        <rdfs:label xml:lang="en">device controlled by</rdfs:label>
        <rdfs:comment>This predicate relates physical devices to the
            devices that control them.  (#$deviceControlledBy DEV
            CONTROL) means that CONTROL controls DEV.  Most of the time,
            the controls will be #$physicalParts of the device.  However
            there are some notable exceptions --  TV remote controls,
            for example -- which control a device but are not
            #$physicalParts of that device.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#PhysicalDevice"/>
        <rdfs:range rdf:resource="#ControlDevice"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="deviceUsed">
        <rdfs:label xml:lang="en">#$deviceUsed</rdfs:label>
        <rdfs:comment>The predicate #$deviceUsed relates an event to a
            device used in that event. (#$deviceUsed EVENT OBJECT) means
            that the #$PhysicalDevice OBJECT plays an instrumental role
            in the #$Event EVENT (see the more generalized predicate
            #$instrument-Generic), OBJECT is intentionally used in
            EVENT, and standardly (for example, in the
            #$HumanActivitiesMt) OBJECT&apos;s role in EVENT is
            consistent with the object&apos;s #$primaryFunction.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#instrument-Generic"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#PhysicalDevice"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dimensionsOfObject">
        <rdfs:label xml:lang="en">dimensions of object</rdfs:label>
        <rdfs:comment>This predicate relates an object to its
            dimensions.  (#$dimensionsOfObject OBJ DIM) means that DIM
            is one of the dimensions of OBJ.  When making assertions
            about a particular object use a more specific predicate
            whenever possible, e.g. #$heightOfObject, #$widthOfObject, #$diameterOfObject.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sizeParameterOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directObjectRoles">
        <rdfs:label xml:lang="en">direct object roles</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#requiredActorSlots"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#ActorSlot"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directedCycleInSystem">
        <rdfs:label xml:lang="en">directed cycle in system</rdfs:label>
        <rdfs:comment>(#$directedCycleInSystem CYCLE SYS) means that
            CYCLE is a cycle in the #$Semi-DirectedPathSystem SYS that
            observes the directions of paths in SYS, i.e., all parts of
            CYCLE that are paths in SYS must observe the orders or
            directions of the paths in SYS.  For example, if PATH is a
            path in SYS directed from X to Y in SYS, and if LINK is a
            link in SYS directed from Y to X, and in addition if LINK is
            different from PATH, then (#$JoinPathsIntoCycleFn (#$TheList
            X PATH Y LINK X)) is a cycle in SYS that observes the
            directions of paths in SYS. Note that in a
            #$Semi-DirectedPathSystem SYS, every loop in SYS is a
            directed cycle in SYS.  Otherwise a directed cycle is a
            &apos;proper&apos; cycle, i.e., it is the concatenation of
            some directed paths in SYS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cycleInSystem"/>
        <rdfs:domain rdf:resource="#Path-Cyclic"/>
        <rdfs:range rdf:resource="#Semi-DirectedPathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directingAgent">
        <rdfs:label xml:lang="en">#$directingAgent</rdfs:label>
        <rdfs:comment>An instance of #$ActorSlot (q.v.) that is a
            specialization of #$deliberateActors and an
            inverse-specialization (see  #$genlInverse) of #$controls.
            (#$directingAgent EVENT DIRECTOR) means that  DIRECTOR
            deliberately controls or directs EVENT.  AGENT might or
            might not  perform EVENT directly.  If an agent other than
            DIRECTOR performs (see  #$performedBy) EVENT, then that
            performer&apos;s actions in EVENT are controlled  by at
            least one of EVENT&apos;s directing agents.  (In many cases,
            of course,  EVENT will have only one director.)
            Non-performing directors typically  control the actual
            performers by communicating instructions (or orders,
            commands, etc.) to them.  For example,  (#$directingAgent
            PSOBicentennialConcertOfBeethovensNinth WilliamSteinberg)
            holds, because Steinberg was the conductor of that concert;
            he directed  the many other musicians who performed in that
            event.  Other examples are  (#$directingAgent
            MassacreAtMyLai LtWilliamCalley) and  (#$directingAgent
            TateLaBiancaMurders CharlesManson).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#deliberateActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="direction-Pointing">
        <rdfs:label xml:lang="en">direction - pointing</rdfs:label>
        <rdfs:comment>(#$direction-Pointing OBJ DIR) means that the
            intrinsic pointing axis of OBJ points in the direction DIR
            (which is described using an instance of
            #$UnitVectorInterval).  Pointing axes may be ascribed to
            certain objects especially in relation to their function(s);
            e.g., objects which are intended to indicate direction
            (e.g., a pointer stick, a compass needle); objects which
            cause motion in a certain direction (e.g., a gun, a train);
            objects which are accessed from a certain direction (e.g.,
            cupboards, couches).</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directionOfTranslation-Avg">
        <rdfs:label xml:lang="en">direction of translation - avg</rdfs:label>
        <rdfs:comment>Predicate used to specify the &apos;general&apos;
            direction of travel in a  #$Movement-TranslationEvent. The
            direction will be stated as a range  specified with a vector
            interval. </rdfs:comment>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directionOfTranslation-Throughout">
        <rdfs:label xml:lang="en">#$directionOfTranslation-Throughout</rdfs:label>
        <rdfs:comment>(#$directionOfTranslation-Throughout MOVEMENT DIR)
            means that the object moving  in MOVEMENT (see the predicate
            #$primaryObjectMoving) moves in the direction DIR
            throughout MOVEMENT, so that DIR is the direction of the
            object moving during each time slice (see #$timeSlices) of MOVEMENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#directionOfTranslation-Avg"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="directionPreservingSubSystems">
        <rdfs:label xml:lang="en">direction preserving sub systems</rdfs:label>
        <rdfs:comment>(#$directionPreservingSubSystems SYS SUBSYS) means
            that (i) both SYS and SUBSYS are semi-directed path systems
            (see #$Semi-DirectedPathSystem), (ii) SUBSYS is a subsystem
            of SYS (so that (#$subPathSystems SYS SUBSYS) holds), and
            (iii) SUBSYS preserves the directions of links, in the
            following sense: for each link LINK in SUBSYS,
            (#$linkFromToInSystem LINK X Y SUBSYS) iff
            (#$linkFromToInSystem LINK X Y SYS).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subPathSystems"/>
        <rdfs:domain rdf:resource="#Semi-DirectedPathSystem"/>
        <rdfs:range rdf:resource="#Semi-DirectedPathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dirtinessOfObject">
        <rdfs:label xml:lang="en">dirtiness of object</rdfs:label>
        <rdfs:comment>(#$dirtinessOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of #$Dirtiness.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Dirtiness"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="disjointDirections">
        <rdfs:label xml:lang="en">disjoint directions</rdfs:label>
        <rdfs:comment>A predicate that relates #$VectorIntervals (q.v.)
            whose directions do  not overlap.  (#$disjointDirections
            VECTOR1 VECTOR2) means that the direction-interval
            components of VECTOR1 and VECTOR2 are disjoint with  each
            other.  Specializations of this predicate include
            #$oppositeDirection-Interval and #$perpendicularVectors.</rdfs:comment>
        <rdfs:domain rdf:resource="#VectorInterval"/>
        <rdfs:range rdf:resource="#VectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="disjointWith">
        <rdfs:label xml:lang="en">disjoint with</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlot predicate that relates
            collections (see #$Collection) that have no instances in
            common. (#$disjointWith  COL1 COL2) means that COL1 is
            disjoint with COL2: nothing is an element of both. That is,
            there is no THING such that both (#$isa THING COL1) and
            (#$isa THING COL2) hold. For example, (#$disjointWith
            #$Herbivore #$Carnivore) holds because no animal is both a
            herbivore and a carnivore. Note that #$disjointWith is _not_
            irreflexive (see #$IrreflexiveBinaryPredicate): it is
            possible for a collection to be disjoint with itself, though
            only if it is empty (i.e. has no instances). Thus, for
            example, (#$disjointWith #$Nothing #$Nothing) holds.  Cf. #$intersectsWith.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#no-GenQuant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dislikes-Generic">
        <rdfs:label xml:lang="en">disliking</rdfs:label>
        <rdfs:comment>(#$dislikes-Generic SUBJ OBJ) means that SUBJ
            dislikes OBJ. This is a very general dislike relation which
            is most useful for organising dislike relations and for use
            during inference; for representation purposes, use a specialization.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAbout"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="dislikesObject">
        <rdfs:label xml:lang="en">dislike</rdfs:label>
        <rdfs:comment>(#$dislikesObject AGT OBJ) means that when the
            sentient agent AGT is interacting in some way with OBJ, that
            agent feels some measure of displeasure --- that is,
            (#$feelsEmotion AGT (#$LowAmountFn #$Enjoyment)).  The kinds
            of interactions that produce displeasure depend largely on
            what kind of thing OBJ is. Thus, `Joe dislikes the Mona
            Lisa&apos; implies that Joe feels displeasure when viewing
            the Mona Lisa. But `Joe dislikes pizza&apos; implies that
            Joe feels displeasure when eating that kind of food, and
            would prefer not to eat it.  There are some specialized
            predicates of #$dislikesObject that give more information
            such as #$hates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#dislikes-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#negativeVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAboutExistingThing"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="distanceAboveSeaLevel">
        <rdfs:label xml:lang="en">distance above sea level</rdfs:label>
        <rdfs:comment>(#$distanceAboveSeaLevel REG DIST) means that the
            altitude above sea level of the #$GeographicalRegion REG is
            the #$Distance DIST.  For elements of #$Mountain, distance
            is measured from sea level to the peak; for elements of
            #$Lake, from the surface to sea level; for cities, from the
            center of town to sea level.  Examples:
            (#$distanceAboveSeaLevel #$PikesPeak-Mount
            (#$Foot-UnitOfMeasure 14110)); (#$distanceAboveSeaLevel
            #$MountEverest (#$Foot-UnitOfMeasure 29028));
            (#$distanceAboveSeaLevel #$MountFuji-Volcano
            (#$Foot-UnitOfMeasure 12389)); (#$distanceAboveSeaLevel
            #$LakeHuron (#$Foot-UnitOfMeasure 580)).  To describe
            ``distance above sea level&apos;&apos; for a
            non-#$GeographicalRegion, see #$altitudeAboveSeaLevel.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#altitudeAboveSeaLevel"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="distanceOfRotation">
        <rdfs:label xml:lang="en">distance of rotation</rdfs:label>
        <rdfs:comment>A predicate that relates a particular rotational
            motion event to the total angular distance travelled by the
            moving object (see the predicate #$objectMoving) in that
            event.  (#$distanceOfRotation ROT DIST) means that in the
            event ROT, the #$objectMoving travels the angular distance
            DIST.  Note that DIST is the total angular distance
            travelled by the #$objectMoving, and not just the net
            angular displacement of the #$objectMoving. So if a person
            spins around ten times, then the #$distanceOfRotation in
            that spinning event is 3600 degrees, not zero.</rdfs:comment>
        <rdfs:domain rdf:resource="#Movement-Rotation"/>
        <rdfs:range rdf:resource="#AngularDistance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="distanceTranslated">
        <rdfs:label xml:lang="en">distance translated</rdfs:label>
        <rdfs:comment>This predicate relates a translational movement
            event to the total distance travelled by the #$objectMoving
            in that event.  (#$distanceTranslated MOVE DIST) means that
            in the event MOVE, the #$objectMoving covered the distance
            DIST.  Note that DIST is the actual distance travelled by
            the object, not merely its net change in position; so if the
            #$motionPathway-Complete of MOVE is a round trip a mile each
            way to the store, the #$distanceTranslated would be 2 miles,
            not zero.</rdfs:comment>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="doOutputBlockClose">
        <rdfs:label xml:lang="en">do output block close</rdfs:label>
        <rdfs:comment>A binary complex action predicate.
            (#$doOutputBlockClose PROGRAMMER FILE) means that PROGRAMMER
            appends a symbol or symbols to the end of FILE, which
            signals the closing of the current code block.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerProgrammer"/>
        <rdfs:range rdf:resource="#ComputerFile-Abstract"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="doOutputBlockOpen">
        <rdfs:label xml:lang="en">do output block open</rdfs:label>
        <rdfs:comment>A binary complex action predicate.
            (#$doOutputBlockOpen PROGRAMMER FILE) means that PROGRAMMER
            appends a symbol or symbols to the end of FILE, which
            signals the beginning of a  program code block.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerProgrammer"/>
        <rdfs:range rdf:resource="#ComputerFile-Abstract"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="doesBusinessWith">
        <rdfs:label xml:lang="en">does business with</rdfs:label>
        <rdfs:comment>(#$doesBusinessWith AGENT1 AGENT2) means that
            AGENT1 does some business with AGENT2.  Minimally,
            (#$doesBusinessWith AGENT1 AGENT2) implies that AGENT1 and
            AGENT2 at least occasionally negotiate to buy or sell
            products or services from one other. The two agents may or
            may not complete the sale or purchase, or enter into any
            actual contracts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="domainAssumptions">
        <rdfs:label xml:lang="en">domain assumptions</rdfs:label>
        <rdfs:comment> A #$MicrotheoryPredicate that relates a given
            #$Microtheory to an #$ELSentence-Assertible that expresses
            one of its &apos;domain assumptions&apos;.
            (#$domainAssumptions MT PROP) means that the microtheory MT
            has the proposition PROP as a domain assumption, which means
            that all assertions explicitly made in MT assume that PROP
            is true.  For example, (#$domainAssumptions
            #$ChristianTrinityMt (#$equals #$JesusChrist #$GodTheSon)).
            Another way of thinking of this is that the various
            `content&apos; assertions of MT only apply to objects that
            satisfy all its #$domainAssumptions (i.e. that the
            quantifiers #$forAll and #$thereExists will be restricted in
            MT in this way).  So if it&apos;s true in MT that:
            (#$forAll ?x Q)  and if we lift this axiom to another
            microtheory (MT2) that does not make the domain assumption
            P, then the axiom becomes:   (#$forAll ?x (#$implies P Q))
            (Or, of course ((#$forAll ?x (#$implies (#$and P1 P2 P3...)
            Q)), where there is more than one relevant domain
            assumption).  See also #$mtAdditionConstraint.</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="doneBy">
        <rdfs:label xml:lang="en">doer (pred)</rdfs:label>
        <rdfs:comment>This predicate relates an event to its  doer .
            (#$doneBy EVENT DOER) means that DOER is the  doer  in the
            event EVENT: some activity on the part of DOER causes or
            carries out EVENT.  This predicate is agnostic as to whether
            DOER does EVENT intentionally or not. Note that DOER need
            not even be animate or an agent; e.g. the event in which Mt.
            Vesuvius erupted and buried Pompeii was #$doneBy Mt.
            Vesuvius.  See the specializations #$performedBy and
            #$bodilyDoer for cases in which the  doer  is, respectively,
            an #$Agent acting deliberately and an #$Organism-Whole
            behaving non-deliberately.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:subPropertyOf rdf:resource="#constituentInSituation"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="doorwayHasCovering">
        <rdfs:label xml:lang="en">doorway has covering</rdfs:label>
        <rdfs:comment>A predicate that relates a doorway to a physical
            covering used to seal it.  (#$doorwayHasCovering DOORWAY
            COVER) means that the instance DOORWAY of #$Doorway has as a
            physical covering the instance COVER of #$DoorwayCovering.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#portalHasCovering"/>
        <rdfs:domain rdf:resource="#Doorway"/>
        <rdfs:range rdf:resource="#DoorwayCovering"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="driverActor">
        <rdfs:label xml:lang="en">driver (pred)</rdfs:label>
        <rdfs:comment>(#$driverActor DRIVE DRIVER) means that the
            #$Person DRIVER controls (see #$ControllingATransporter) the
            transporter (related to DRIVE by the predicate #$transporter
            (q.v.)) in the #$TransportInvolvingADriver DRIVE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#crewMember"/>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#TransportInvolvingADriver"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="duration">
        <rdfs:label xml:lang="en">#$duration</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            length of time it happened or existed.  (#$duration
            TEMPTHING DURATION) means that DURATION is the length of
            time TEMPTHING happened (if an event) or existed (if a
            physical object or static situation).  If TEMPTHING is
            #$temporallyContinuous,  its #$duration is the same as its
            #$measure (the elapsed time from start to end); but if
            TEMPTHING is discontinuous, its #$duration is strictly less
            than its #$measure.  For example, the #$duration of
            Sundays-in-April-2001 is (#$DaysDuration 5), whereas the
            #$measure of that same temporal object is (#$DaysDuration 29).</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Time-Quantity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eMailAddressText">
        <rdfs:label xml:lang="en">e mail address text</rdfs:label>
        <rdfs:comment>(#$eMailAddressText OBJ ADDR) means that an e-mail
            address of OBJ is ADDR.  This predicate can be used to
            associate multiple e-mail addresses with one instance of
            #$PartiallyIntangible.  See also the more specializaed
            predicate, #$preferredEMailAddressText, which associates a
            unique e-mail address with an instance of #$PartiallyIntangible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#identificationStrings"/>
        <rdfs:domain rdf:resource="#PartiallyIntangible"/>
        <rdfs:range rdf:resource="#EMailAddress"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eastOf">
        <rdfs:label xml:lang="en">east of</rdfs:label>
        <rdfs:comment>(#$eastOf EAST WEST) means that the
            #$SpatialThing-Localized EAST is situated to the east of the
            #$SpatialThing-Localized WEST, when viewed in a planetary
            frame of reference (typically the terrestrial frame of
            reference).  To relate the positions of fixed (as opposed to
            moveable) instances of #$GeographicalThing, use the more
            specific predicate #$permanentlyEastOf.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#onSamePlanetSurfaceAs"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eatsWillingly">
        <rdfs:label xml:lang="en">eats willingly</rdfs:label>
        <rdfs:comment>The predicate #$eatsWillingly is used to relate an
            #$Animal to the type of food it will willingly eat.  In a
            normal #$EatingEvent, the food consumed is of a type that
            the eater #$eatsWillingly.  As negative examples, no
            vegetarian or herbivore #$eatsWillingly meat.</rdfs:comment>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#TemporalStuffType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="effectOfAction-Props">
        <rdfs:label xml:lang="en">effect of action - props</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$ELSentence-Assertible to instances of
            #$ELSentence-Assertible. (#$effectOfAction-Props ACTION-PROP
            PROP) means that an effect of ACTION-PROP is PROP, where
            ACTION-PROP is a proposition of the form (PRED . ARGS), PRED
            is an instance of #$ActionPredicate, and PROP is any
            proposition that describes the effect(s) of ACTION-PROP.
            Thus, #$effectOfAction-Props should be used only when the
            first argument is a proposition in which an instance of
            #$ActionPredicate  occurs in the arg0 place.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="elInverse">
        <rdfs:label xml:lang="en">el inverse</rdfs:label>
        <rdfs:comment>arg1 is a binary predicate, otherwise
            unrestricted; arg2 is also a   binary predicate such that
            (a) it can be thought of as the inverse of   arg1, and (b)
            arg2 is an #$ELRelation; e.g., (#$elInverse #$genls #$specs).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="elasticityOfObject">
        <rdfs:label xml:lang="en">elasticity of object</rdfs:label>
        <rdfs:comment>This predicate relates a solid thing to its degree
            of elasticity (that is, to its capacity to readily return to
            its original shape after being deformed, but not broken).
            (#$elasticityOfObject OBJ DEGREE) means that the
            #$SolidTangibleThing OBJ has DEGREE as its degree of
            elasticity (where DEGREE is an instance of #$Elasticity).
            Note that the higher the  degree of elasticity, the more
            quickly and completely the object returns to its previous shape.</rdfs:comment>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#Elasticity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="elementOf">
        <rdfs:label xml:lang="en">element of</rdfs:label>
        <rdfs:comment>(#$elementOf THING SETORCOL) means that THING is
            an element of the mathematical set or collection SETORCOL.
            #$elementOf is a more general relation than #$isa, since
            #$isa is used exclusively to talk about membership in
            instances of #$Collection.  #$elementOf, unlike #$isa, can
            also be used to talk about membership in arbitrarily-defined
            mathematical sets (instances of #$Set-Mathematical), such as
            those denoted by #$TheSet expressions.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="emitter">
        <rdfs:label xml:lang="en">emitter (pred)</rdfs:label>
        <rdfs:comment>The Cyc predicate #$emitter is used to identify
            the source of an emission.  (#$emitter EMIT OBJ) means that
            OBJ provides the force involved in making the
            #$objectEmitted move from OBJ to someplace outside of OBJ.
            See also #$providerOfMotiveForce, #$fromLocation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#providerOfMotiveForce"/>
        <rdfs:subPropertyOf rdf:resource="#fromLocation"/>
        <rdfs:domain rdf:resource="#Emission"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="employedAgent">
        <rdfs:label xml:lang="en">employed agent</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$WorkAgreement to instances of #$Employee, and identifies
            the particular employee who is covered by a particular work
            agreement.  (#$employedAgent AGREE WORKER) means that AGREE
            covers the employee WORKER. See also #$jobAgreement, which
            relates instances of #$WorkAgreement to instances of
            #$HasPositionRelationship, #$employingAgent and #$employees
            (which relates employees to their employers).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#agreeingAgents"/>
        <rdfs:domain rdf:resource="#WorkAgreement"/>
        <rdfs:range rdf:resource="#Employee"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="employeeStatus">
        <rdfs:label xml:lang="en">employee status</rdfs:label>
        <rdfs:comment>#$employeeStatus relates a person to an instance
            of #$EmployeeTypeByWorkStatus. For example (#$employeeStatus
            WORKER #$FullTimeWorker) means that WORKER has a full time job.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#EmployeeTypeByWorkStatus"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="employees">
        <rdfs:label xml:lang="en">#$employees</rdfs:label>
        <rdfs:comment>A specialization of #$hasWorkers (q.v.) that
            relates employers to their  paid employees.  (#$employees
            EMPLOYER WORKER) means WORKER regularly  performs work for
            EMPLOYER, and EMPLOYER pays WORKER for that work (often  by
            paycheck).  EMPLOYER directs the manner in which WORKER
            performs the  work and might provide the workplace, tools,
            materials, capital, or other  assistance for the work.
            EMPLOYER is commonly an organization but may be  a person;
            e.g. (#$employees PerryMason PaulDrake).  Note that in many
            contexts the use of this predicate require proper temporal
            qualification;  e.g. (#$holdsIn (#$YearFn 1999) (#$employees
            #$NBC-TVNetwork #$KatieCouric)).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasWorkers"/>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="employingAgent">
        <rdfs:label xml:lang="en">employing agent</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$WorkAgreement to instances of #$Agent.  (#$employingAgent
            AGREE EMPLOYER) means that the #$Agent EMPLOYER has entered
            into the #$WorkAgreement AGREE with some employee, and AGREE
            obligates EMPLOYER to compensate that employee for specified
            work.  See also #$employedAgent and #$employees (which
            relates employees to their employers).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#agreeingAgents"/>
        <rdfs:domain rdf:resource="#WorkAgreement"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="emptiesInto">
        <rdfs:label xml:lang="en">empties into</rdfs:label>
        <rdfs:comment>(#$emptiesInto RIV WAT) means that the instance of
            #$Stream RIV flows into WAT, an instance of #$BodyOfWater
            that is not an instance of #$Stream.  Examples:
            (#$emptiesInto #$AmazonRiver #$AtlanticOcean);
            (#$emptiesInto #$HuangHeRiver #$YellowSea).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#bordersOn"/>
        <rdfs:domain rdf:resource="#Stream"/>
        <rdfs:range rdf:resource="#BodyOfWater"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="enables-Generic">
        <rdfs:label xml:lang="en">enables - generic</rdfs:label>
        <rdfs:comment>(#$enables-Generic X Y) says that X    enables Y.
            This predicate serves as a generalization over all
            individual-level enables-* predicates. Please use one of its
            spec preds or axiomatically  defined specializations (i.e.,
            spec preds of #$enablesAgentTo-Generic), whenver  possible.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="enables-ThingProp">
        <rdfs:label xml:lang="en">enables - thing prop</rdfs:label>
        <rdfs:comment>(#$enables-ThingProp THING SENT) means that THING
            enables the proposition PROP expressed by SENT to become or
            remain true.  This relation is weaker than causation, but
            the above formula entails (partly depending on the kind of
            thing THING is) that either THING&apos;s existing,
            obtaining, occurring, playing a certain role in an event, or
            performing a certain action is at least a salient
            contributing cause of PROP&apos;s becoming or remaining
            true.  For example, my car enabled -- but did not cause --
            it to be true that I arrived at work today.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#enables-Generic"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endToEndConnected">
        <rdfs:label xml:lang="en">end to end connected</rdfs:label>
        <rdfs:comment>A #$ConnectionPredicate and specialization of
            #$connectedAtEnd (q.v.) that  relates tangible paths (see
            #$Path-Simple) that are connected end-to-end.
            (#$endToEndConnected PATH1 PATH2) means that one end of
            PATH1 is connected  to one end of another PATH2, in such a
            way that they share no subpaths and  that flow or transport
            is allowed between them.  This kind of connection is  not a
            #$JunctionOfPaths since there is no third distinct path
            joined there.   In pipe welding, these end-to-end
            connections are called butt welds or  circumferential pipe welds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedAtEnd"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endingDate">
        <rdfs:label xml:lang="en">ending date</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate that is used to
            specify the date (see #$Date) on which a given temporal
            thing ends or ceases to exist.  (#$endingDate TEMP-THING
            DATE) means that  TEMP-THING ends (if TEMP-THING is an event
            or other  #$Situation-Temporal) or ceases to exist (if
            TEMP-THING is a physical object or other
            #$SomethingExisting) sometime during DATE.  That is,
            (#$temporallySubsumes DATE (#$EndFn TEMP-THING)) holds.
            Note that DATE, though defined in terms of a calendar, need
            not be a particular day or year (e.g. it might be a
            particular minute or month or decade).  See also
            #$endingPoint and  #$startingDate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endingPoint">
        <rdfs:label xml:lang="en">end (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            time point at which it ends or ceases to exist.
            (#$endingPoint THING POINT) means that #$TemporalThing THING
            ends at #$TimePoint POINT, which is the last moment of its
            temporal extent.  See also #$startingPoint.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TimePoint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endsAfterEndingOf">
        <rdfs:label xml:lang="en">ending after the end of</rdfs:label>
        <rdfs:comment>(#$endsAfterEndingOf LATER EARLY) means that LATER
            ceases to exists or occur after EARLY ceases to exist or
            occur.  That is, the #$endingPoint of LATER is later than
            the #$endingPoint of EARLY, or, equivalently, (#$after
            (#$EndFn LATER) (#$EndFn EARLY).    This implies nothing
            about whether, or by how much, LATER and EARLY overlap,
            except that they can&apos;t be fully #$cotemporal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endsAfterStartingOf">
        <rdfs:label xml:lang="en">ending after the start of</rdfs:label>
        <rdfs:comment>(#$endsAfterStartingOf ENDER STARTER) means that
            ENDER ceases to exist or occur after STARTER begins to exist
            or occur. That is, the #$endingPoint of ENDER is later than
            the #$startingPoint of STARTER.  Equivalently: (#$after
            (#$EndFn ENDER) (#$StartFn STARTER)).  This implies nothing
            about whether, or by how much, the temporal extents of ENDER
            and STARTER overlap.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endsDuring">
        <rdfs:label xml:lang="en">ends during</rdfs:label>
        <rdfs:comment>(#$endsDuring X Y) means Y covers the end of X,
            i.e. the #$endingPoint of X is properly contained in
            (#$temporalBoundsContain) Y.  Note that X and Y don&apos;t
            necessarily intersect, however, if Y is continuous, they do.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="endsOfPathSegment">
        <rdfs:label xml:lang="en">ends of path segment</rdfs:label>
        <rdfs:comment>(#$endsOfPathSegment PATH END) means that END is
            at one end of the #$Path-Generic PATH; END may be either a
            junction or a genuine terminal-end of the path segment (note
            that if PATH is an instance of #$Path-Simple, then it would
            be related to one of its genuine terminal-ends via the more
            specialized predicate #$pathTerminus).  #$endsOfPathSegment
            is also used to relate an instance of
            #$SimpleLoopedSegmentOfPath (q.v.) to its single end-point.
            Note that if PATH is an instance of #$PartiallyTangible,
            #$SpatialThing, or #$TemporalThing, then END is also;
            however, neither of them need to be an instance of any of
            these collections.</rdfs:comment>
        <rdfs:domain rdf:resource="#Path-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="englishGloss">
        <rdfs:label xml:lang="en">english gloss</rdfs:label>
        <rdfs:comment>To be used to refer to the manual english
            rendering of an assertion or perhaps a constant but see also
            #$denotation.  #$englishGloss assertions may be used to
            enhance or supplement automatic nl generation results, serve
            as a training data set for a program which learns to
            generate NL from CycL, etc..  This predicate should not be
            used for commentary.  For commentary see #$comment or #$cyclistNotes.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="entitySubAbstractions">
        <rdfs:label xml:lang="en">entity sub abstractions</rdfs:label>
        <rdfs:comment>(#$entitySubAbstractions ENTITY THING) means that
            THING, an instance of #$SomethingExisting, is a
            sub-abstraction of the #$Entity ENTITY (and so
            (#$subAbstractions ENTITY THING) holds).  Note that each
            instance of #$SomethingExisting will generally have a unique
            #$Entity of which it is a sub-abstraction.  For example,
            (#$entitySubAbstractions AlbertEinstein AlbertEinsteinWhileAtPrinceton).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subAbstractions"/>
        <rdfs:domain rdf:resource="#Entity"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="epistleAddresseeText">
        <rdfs:label xml:lang="en">epistle addressee text</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            predicate for recording the &apos;to&apos; information for
            an epistle in the New Testament. This information is useful
            in generating the various ways of referring to epistles.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="equalStrings-CaseInsensitive">
        <rdfs:label xml:lang="en">equal strings - case insensitive</rdfs:label>
        <rdfs:comment>(#$equalStrings-CaseInsensitive STRING1 STRING2)
            means that the #$CharacterStrings STRING1 and STRING2
            contain the same characters in the same order, although some
            of the characters in STRING1 may differ in case from some of
            the characters in STRING2.  For example,
            (#$equalStrings-CaseInsensitive  Foo   fOo ) holds.</rdfs:comment>
        <rdfs:domain rdf:resource="#CharacterString"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="equalSymbols">
        <rdfs:label xml:lang="en">equal symbols</rdfs:label>
        <rdfs:comment>This binary predicate, both of whose arguments
            are #$quotedArguments, can be used to make identity
            assertions about symbols.  Stated loosely,  (#$equalSymbols
            X Y) means that X and Y are one and the same symbol.  Given
            that the arguments are  quoted , however, it is more
            accurate to say: A GAF consisting of the expression
            `#$equalSymbols&apos; followed by CycL expressions A and B
            (all enclosed within a pair of parentheses) is true if and
            only if A and B are (two occurrences of) the same
            expression.  Note that this is stronger than merely saying
            that A and B denote the same thing.  As an example (using
            English expressions for convenience), the name `Bertrand
            Russell&apos; and the description `the author of  On
            Denoting &apos; are two different  expressions, even though
            they both denote the same person.  Two symbols can even
            share the same intensional meaning and still be different
            symbols; e.g. `bachelor&apos; and `unmarried male&apos;. The
            relation #$equalSymbols does hold, however,  between
            `bachelor&apos; and `bachelor&apos; (at least if we pretend
            that `bachelor&apos; is a   CycL expression), as it does
            between the CycL constant `#$BertrandRussell&apos; and  the
            Cycl constant `#$BertrandRussell&apos;.  See also
            #$differentSymbols and #$equals.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#equals"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="equals">
        <rdfs:label xml:lang="en">equals</rdfs:label>
        <rdfs:comment>The binary identity relation.  (#$equals THING1
            THING2) means that THING1 and THING2 are  numerically  (as
            opposed to  qualitatively ) identical, i.e. they are one and
            the same thing.  A sentence of the above form is true if and
            only if the terms occupying the two argument-places of
            `#$equals&apos; denote the same thing.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="equatable">
        <rdfs:label xml:lang="en">equatable</rdfs:label>
        <rdfs:comment>(#$equatable TT1 TT2) indicates that the two
            #$TheTerms, TT1 and TT2, can bind to each other.  One case
            of this is when TT1 and TT2 are #$LogicalFields which are
            allowed to join due to a #$joinDependency.</rdfs:comment>
        <rdfs:domain rdf:resource="#TheTerm"/>
        <rdfs:range rdf:resource="#TheTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ethnicGroupsHere">
        <rdfs:label xml:lang="en">ethnic groups here</rdfs:label>
        <rdfs:comment>(#$ethnicGroupsHere PLACE PERSONTYPE) means that
            people of the ethnic group PERSONTYPE inhabit the territory
            of the #$GeopoliticalEntity, PLACE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inhabitantTypes"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#PersonTypeByEthnicity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ethnicity">
        <rdfs:label xml:lang="en">ethnicity</rdfs:label>
        <rdfs:comment>(#$ethnicity PERSON GROUPTYPE) means that the
            instance of #$Person PERSON belongs to the instance of
            #$EthnicGroupType GROUPTYPE.   For example, (#$ethnicity
            #$JohnWilkesBooth #$CensusGroupOfCaucasians).  Note that an
            instance of #$Person may belong to more than one instance of #$EthnicGroupType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#PersonTypeByEthnicity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="evaluate">
        <rdfs:label xml:lang="en">evaluate</rdfs:label>
        <rdfs:comment>If the arg1 of #$evaluate is a variable,
            (#$evaluate VAR EXPRESSION) is satisfied by an HL module
            which evaluates EXPRESSION and binds VAR to the result.  For
            example, (#$evaluate ?SUM (#$PlusFn 1 2)) would bind ?SUM to
            3. If the arg1 is a fully-bound expression, then the HL
            module checks to see if the arg2 evaluates to the arg1. For
            example, asking (#$evaluate 3 (#$PlusFn 1 2)) returns #$True.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELNonAtomicTerm-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="evaluationDefn">
        <rdfs:label xml:lang="en">evaluation defn</rdfs:label>
        <rdfs:comment>The Cyc predicate #$evaluationDefn is used to
            relate an evaluatable Cyc function or predicate to the name
            of the piece of code that is used to evaluate it.
            (#$evaluationDefn E-REL NAME) means that the #$SubLSymbol
            NAME is the name of a piece of Heuristic Level (SubL) code
            in the Cyc system which is used to compute the value of
            expressions containing the #$EvaluatableRelation E-REL.</rdfs:comment>
        <rdfs:domain rdf:resource="#EvaluatableRelation"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="evaluationInput">
        <rdfs:label xml:lang="en">evaluation input</rdfs:label>
        <rdfs:comment>(#$evaluationInput EVAL OBJ) means that in the
            instance of #$Evaluating, EVAL, information about OBJ is
            evaluated.  The performer (#$performedBy) of the evaluation
            must be #$awareOf OBJ.  If the result EVAL is one or more
            assertions about OBJ (see #$subjectOfEvaluation), use the
            more specific predicate, #$evaluee-Direct.  For example, in
            a reading of animal tracks at a water hole, the tracks are
            an #$evaluationInput, but not a #$subjectOfEvaluation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectOfMentalSituation"/>
        <rdfs:domain rdf:resource="#Evaluating"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="evaluee-Direct">
        <rdfs:label xml:lang="en">thing evaluated (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$evaluee-Direct relates a
            particular process of evaluation to the thing which is being
            evaluated in that process.  (#$evaluee-Direct EVAL OBJ)
            means that OBJ is both an input being considered
            (#$evaluationInput) during the instance of #$Evaluating,
            EVAL, and the thing about which information is concluded.
            As examples: each contestant for Miss America 1996 is a
            #$evaluee-Direct in the 1996 Miss America Pageant; I am the
            #$evaluee-Direct in my annual employee review. A borderline
            example is an instance of #$PhysicalDevice being the
            #$evaluee-Direct in the research phase of an article for a
            Consumer Report article;  Although information about the
            specific device was determined, that device was being used
            as a prototype in order to determine information about a
            specific type of device.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subjectOfEvaluation"/>
        <rdfs:subPropertyOf rdf:resource="#evaluationInput"/>
        <rdfs:domain rdf:resource="#Evaluating"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventHonors">
        <rdfs:label xml:lang="en">honoree</rdfs:label>
        <rdfs:comment>(#$eventHonors OCCURRENCE AGENT) means that the
            #$Agent AGENT is honored or commemorated by the
            #$SocialOccurrence OCCURRENCE.  If AGENT is a living
            #$Person, then (#$eventHonors OCCURRENCE AGENT) usually
            implies that AGENT is present at OCCURRENCE.  Note that this
            is the appropriate predicate for relating a #$Funeral to the
            deceased person for whom the #$Funeral is in honor.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#highlyRelevantInEvent"/>
        <rdfs:domain rdf:resource="#SocialOccurrence"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventOccursAt">
        <rdfs:label xml:lang="en">#$eventOccursAt</rdfs:label>
        <rdfs:comment>The predicate #$eventOccursAt relates a particular
            event to the instance of #$SpatialThing-Localized in which
            it occurs.  (#$eventOccursAt EVENT PT) means that the
            spatial extent of EVENT is within PT. For example,
            (#$eventOccursAt LomaPrietaEarthquake SanFranciscoBayArea).
            Use the predicate #$eventPartiallyOccursAt to relate an
            event to any instance of #$SpatialThing-Localized in which
            some sub-event of it occurs.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:subPropertyOf rdf:resource="#eventPartiallyOccursAt"/>
        <rdfs:subPropertyOf rdf:resource="#eventOccursNear"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventOccursNear">
        <rdfs:label xml:lang="en">nearby location (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$eventOccursNear relates an event
            to its approximate location.  (#$eventOccursNear EVENT LOC)
            means that EVENT occurs at or near (see #$near) LOC.
            #$eventOccursNear is useful when the more exact location is
            unknown, hard to specify, or not worth reifying; otherwise
            use  #$eventOccursAt.  For example, #$eventOccursNear could
            be used to CycLify   Bob was cycling by the dam ,  We played
            checkers near the TV , and  He is standing by the
            horse&apos;s hind legs .  See the #$cyclistNotes for ideas
            on how to formalize this.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventOutcomes">
        <rdfs:label xml:lang="en">#$eventOutcomes</rdfs:label>
        <rdfs:comment>The predicate #$eventOutcomes relates a particular
            event to the situations that follow from it either by
            causation or by agency (where the first event figures in the
            agent&apos;s reason for the subsequent action).
            (#$eventOutcomes EVT RESULT) means that, in some sense,
            RESULT occurred because EVT occurred.  #$eventOutcomes is
            very general and includes RESULTs from #$causes-EventEvent,
            #$inReactionTo, #$postEvents, and #$postSituation.  For
            knowledge representation, always use the more specific
            relations where they are known.  #$eventOutcomes is useful
            in querying for the broad range of outcomes of an event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#eventResults"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Situation-Temporal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventOverlaps">
        <rdfs:label xml:lang="en">event overlaps</rdfs:label>
        <rdfs:comment>This predicate relates overlapping events.
            (#$eventOverlaps EVENT1 EVENT2) means that EVENT1 and EVENT2
            share a common subevent.  That is, there is a SUBEVENT such
            that both (#$subEvents EVENT1 SUBEVENT) and (#$subEvents
            EVENT2 SUBEVENT) hold.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventPartiallyOccursAt">
        <rdfs:label xml:lang="en">location of some of the event</rdfs:label>
        <rdfs:comment>A predicate used to state that some part of an
            event occurs at a certain location.
            (#$eventPartiallyOccursAt EVENT PLACE) means that some
            sub-event of that event, SUB-EVENT, is such that
            (#$eventOccursAt SUB-EVENT PLACE).  However, SUB-EVENT need
            not be reified.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="eventResults">
        <rdfs:label xml:lang="en">event results</rdfs:label>
        <rdfs:comment>&apos;(#$eventResults EVENT RESULT)&apos; means
            that RESULT is a #$TemporalThing that in some way came about
            due to EVENT occurring.  This is a very general predicate,
            and RESULT may be an #$Event caused by EVENT, or a
            #$SomethingExisting created by EVENT.  Also, RESULT may come
            about directly or indirectly as a result of EVENT.</rdfs:comment>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="exampleAssertions">
        <rdfs:label xml:lang="en">example assertions</rdfs:label>
        <rdfs:comment>(#$exampleAssertions TERM ASSERTION) means that
            the #$CycLAssertion ASSERTION provides a good example of how
            to use the #$CycLReifiableDenotationalTerm TERM.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="exampleNATs">
        <rdfs:label xml:lang="en">example n a ts</rdfs:label>
        <rdfs:comment>(#$exampleNATs FN NAT) means that the
            #$CycLNonAtomicTerm NAT  represents a good example of the
            use of the #$Function-Denotational FN.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termFormulas"/>
        <rdfs:domain rdf:resource="#Function-Denotational"/>
        <rdfs:range rdf:resource="#CycLClosedNonAtomicTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="examplePredSentences">
        <rdfs:label xml:lang="en">example pred sentences</rdfs:label>
        <rdfs:comment>(#$examplePredSentences PRED EXPRESSION) means
            that the  #$CycLFormula EXPRESSION represents a good example
            usage of the  #$Predicate PRED.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termFormulas"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#ELTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="exchangers">
        <rdfs:label xml:lang="en">exchanger (pred)</rdfs:label>
        <rdfs:comment>The predicate #$exchangers is used to identify the
            (typically, two) #$Agents involved in an instance of
            #$ExchangeOfUserRights.   In such an event, each of the
            #$exchangers gives up possession of one thing and gains
            possession of another which was previously possessed by the
            other agent.  (#$exchangers EXCH AGENT) means that AGENT is
            one of the parties having such a dual role in the
            #$ExchangeOfUserRights EXCH.  Every instance of
            #$ExchangeOfUserRights has two sub-events which are
            instances of #$TransferringPossession (e.g., a dollar bill
            goes in one direction and some french fries and a few coins
            go in the other direction.)  Each of the #$exchangers is
            both a #$toPossessor (in one of the two
            #$TransferringPossession sub-events of EXCH) and a
            #$fromPossessor (in the other sub-event).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#ExchangeOfUserRights"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="executablePathname">
        <rdfs:label xml:lang="en">executable pathname</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerProgram-CW"/>
        <rdfs:range rdf:resource="#IDString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="executableProgramName">
        <rdfs:label xml:lang="en">executable program name</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#properNameStrings"/>
        <rdfs:domain rdf:resource="#ComputerFile-CW"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="executionOfPlan">
        <rdfs:label xml:lang="en">execution of plan</rdfs:label>
        <rdfs:comment>A #$MicrotheoryPredicate that relates a given
            instance of  #$PlanSpecificationMicrotheory to any
            #$PurposefulAction that  is a carrying-out of the plan in
            question.   (#$executionOfPlan PLANSPEC ACTION) means that
            ACTION is a complex event that figures as (a complete)
            execution of the #$Plan (q.v.)  represented by PLANSPEC.
            ACTION might be reified in the PLANSPEC  microtheory itself
            or in some more general microtheory to which  PLANSPEC has
            access (via #$genlMt).</rdfs:comment>
        <rdfs:domain rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:range rdf:resource="#PurposefulAction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="exhibitors">
        <rdfs:label xml:lang="en">exhibitors</rdfs:label>
        <rdfs:comment>(#$exhibitors GATHERING AGENT) means that the
            #$Agent AGENT actively presents information to the attendees
            of #$SocialGathering GATHERING. AGENT may be marketing a
            product by putting it or information about it  on display,
            or AGENT may be displaying artwork, or the results of a
            scientific study.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#SocialGathering"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="expansion">
        <rdfs:label xml:lang="en">expansion</rdfs:label>
        <rdfs:comment>Some relations (e.g., instances of
            #$RuleMacroPredicate) can be defined in terms of more basic
            or primitive constructs. (#$expansion RELATION FORMULA)
            associates RELATION with the FORMULA that defines it.  The
            arg2 is allowed to reference generic-argument keywords, such
            as :ARG1 :ARG2  which represent respectively the arg1 and
            the arg2 within uses of RELATION.  For example, (#$expansion
            #$genls (#$implies (#$isa ?object :ARG1) (#$isa ?object
            :ARG2))) indicates that the gaf (#$genls #$Poodle #$Dog) is
            defined as  (#$implies (#$isa ?object #$Poodle) (#$isa
            ?object #$Dog))).  Importantly, the expansion-formula arg2
            must be necessary and sufficient; it denotes the definition
            of the uses of relation arg1; there can be only one
            expansion for any relation.  Furthermore, no two relations
            can share a common expansion; thus, there can be only one
            possible contraction from a formula that corresponds to an
            expansion into a compact form that references expandable
            relations.  For example, (#$implies (#$isa ?object #$Poodle)
            (#$isa ?object #$Dog))) has the unambiguous contraction of
            (#$genls #$Poodle #$Dog).  The expansion arg2 can (and
            should when possible) make use of relations that have
            expansions.  Note that the example above references
            #$implies which would itself have the expansion (#$or (#$not
            :ARG1) :ARG2).  Thus, the full expansion of a relation can
            involve recursive expansions.  For example, the full
            expansion of #$genls would be (#$or (#$isa ?object :ARG1)
            (#$not (#$isa ?object :ARG2)))).  No relation may reference
            itself (either directly or indirectly via recursion) in its
            expansion (or in its full recursive expansion).   See
            #$GenericArgTemplate, #$ELRelation, #$expansionAxiom.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#ELTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="expansionAxiom">
        <rdfs:label xml:lang="en">expansion axiom</rdfs:label>
        <rdfs:comment>(#$expansionAxiom PRED ASSERT) means that the
            assertion ASSERT is part of the expansion of PRED.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#salientAssertions"/>
        <rdfs:domain rdf:resource="#RuleMacroPredicate"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="expansionDefn">
        <rdfs:label xml:lang="en">expansion defn</rdfs:label>
        <rdfs:comment>(#$expansionDefn &lt;Relation&gt; &lt;Symbol&gt;)
            denotes that during canonicalization  the subl function
            definition of &lt;Symbol&gt; is used to transform an EL
            expression  (&lt;Relation&gt; . &lt;args&gt;) into the
            appropriate HL formula.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="expects">
        <rdfs:label xml:lang="en">will expect</rdfs:label>
        <rdfs:comment>(#$expects AGT PROP) means that AGT believes it
            highly likely that PROP will be true at some time in the future.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasOpinionAsToTruthOf"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="exports">
        <rdfs:label xml:lang="en">export (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$exports COUNTRY PRODUCT-TYPE) means that the
            region COUNTRY has substantial regular exports of the goods
            or services PRODUCT-TYPE to other countries. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#regionProduces"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#ProductType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="extent">
        <rdfs:label xml:lang="en">extent</rdfs:label>
        <rdfs:comment>This predicate relates a given set or collection
            (see #$SetOrCollection) to its extension: the set consisting
            of all of (and only)   its elements (see #$elementOf).
            (#$extent SETORCOL SET) means that every element   of
            SETORCOL is an element of SET and every element of SET is an
            element of SETORCOL. If SETORCOL happens to be a set (see
            #$Set-Mathematical) itself, then  SET and SETORCOL are
            identical (see #$equals), as sets are identified and
            distinguished strictly in terms of their elements.
            Conversely, if SETORCOL happens to be a collection (see
            #$Collection), then SET and SETORCOL are distinct  (see
            #$different), as no collection is a set.  See also #$coextensionalSetOrCollections.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subsetOf"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#Set-Mathematical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="extentCardinality">
        <rdfs:label xml:lang="en">extent cardinality</rdfs:label>
        <rdfs:comment>(#$extentCardinality SETORCOL N) means that there
            are N terms in the currently represented extent of
            #$SetOrCollection SETORCOL.  See also, #$cardinality,
            #$entityCardinality, #$Note-cardinality-vs-entityCardinality.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cardinalityAtLeast"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="externalParts">
        <rdfs:label xml:lang="en">external part (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$externalParts OBJ PART) means that OBJ has PART
            as one of its external #$physicalParts. See #$surfaceParts,
            an important specialization of #$externalParts, for parts
            which do not extend from one side to the opposite side of ARG1.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="facesDirection">
        <rdfs:label xml:lang="en">faces direction</rdfs:label>
        <rdfs:comment>(#$facesDirection OBJ DIR) means that the
            intrinsic forward axis of OBJ (i.e., the vector normal to
            its intrinsic front side) points in the direction DIR.  Note
            that an object only has an intrinsic forward axis if it has
            some intrinsic front side by virtue of its design or
            function.  For example, trains, cars, and bullets have
            intrinsic front faces by virtue of the direction in which
            they are intended to travel.  Other objects, such as
            refrigerators, bookshelves against walls, and televisions,
            have front faces by virtue of how people usually view the
            object.  Spheres, being symmetric, do not have an intrinsic
            forward axis.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="facets-Covering">
        <rdfs:label xml:lang="en">faceted covering</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections and a
            specialization of both #$facets-Generic and #$covering
            (qq.v.).    (#$facets-Covering COL COLTYPE) means that
            COLTYPE corresponds to   one way of dividing the entirety of
            COL into subcollections.    Specifically, (i) the instances
            of COLTYPE are all the same sort of   subcollection of COL
            and (ii) each instance of COL is an instance of   at least
            one instance of of COLTYPE.  For example,
            (#$facets-Covering #$BaseballPlayer
            #$BaseballPlayerTypeByPosition)  holds, since each baseball
            player plays at least one position.  Note that
            #$facets-Covering is _not_ a specialization of
            #$partitionedInto; e.g. some baseball players play more than
            one   position.  Cf. the more specialized
            #$facets-Partition, and also  #$facets-Strict.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#facets-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#covering"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#CollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="facets-Generic">
        <rdfs:label xml:lang="en">facets - generic</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections and the most
            general of the  faceting  predicates.  (#$facets-Generic COL
            COLTYPE)   means that COLTYPE corresponds to one way of
            dividing COL up into   subcollections.  Specifically, the
            instances of COLTYPE are all the same   sort of
            subcollection of COL.  But unlike with the more specific
            #$facets-Strict (q.v.), the instances of COLTYPE need not
            all be disjoint   with each other.  For example,
            (#$facets-Generic #$Movie-CW #$MovieTypeByGenre) holds,
            because each   instance of #$MovieTypeByGenre is a
            subcollection of #$Movie-CW whose  instances are all movies
            of some particular genre.  And since movie   genres overlap
            (e.g. a given movie might be both a children&apos;s film and
            an action film), #$MovieTypeByGenre is not a strict faceting
            of   #$Movie-CW.  See also #$facets-Covering and #$facets-Partition.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#CollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="facets-Partition">
        <rdfs:label xml:lang="en">facets - partition</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections and a
            specialization of #$facets-Strict, #$facets-Covering, and
            #$partitionedInto (qq.v.).  (#$facets-Partition COL COLTYPE)
            means  that COLTYPE corresponds to one way of dividing the
            entirety of COL  into disjoint subcollections.
            Specifically, (i) the instances of  COLTYPE are all the same
            sort of subcollection of COL and (ii) each  instance of COL
            is an instance of exactly one instance of of COLTYPE.   For
            example,  (#$facets-Partition #$FixedArityFunction
            #$FixedArityFunctionTypeByArity) holds, as each fixed-arity
            function has exactly one arity (see #$arity).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#partitionedInto"/>
        <rdfs:subPropertyOf rdf:resource="#facets-Covering"/>
        <rdfs:subPropertyOf rdf:resource="#facets-Strict"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#DisjointCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="facets-Strict">
        <rdfs:label xml:lang="en">facets - strict</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections and a
            specialization of #$facets-Generic (q.v.).  (#$facets-Strict
            COL COLTYPE)   means that COLTYPE corresponds to one way of
            dividing COL up into   disjoint subcollections.
            Specifically, the instances of COLTYPE are   all the same
            sort of subcollection of COL and are, moreover, all
            disjoint with (see #$disjointWith) each other.  For example,
            #$DogTypeByBreed strictly facets #$Dog, because the breeds
            of dog   constitute mutually disjoint subcollections of
            #$Dog.  Other possible   ways of strictly faceting #$Dog are
            by sex, by size, and by whether or   not they are
            domesticated.  Note that (#$facets-Strict COL COLTYPE)
            does _not_ imply (#$covering COL COLTYPE), since the
            instances of   COLTYPE might not cover all of COL.  For
            example, some dogs belong to   no breed.  Cf.
            #$facets-Covering and #$facets-Partition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#facets-Generic"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#DisjointCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="failureForAgents">
        <rdfs:label xml:lang="en">failure</rdfs:label>
        <rdfs:comment>The predicate #$failureForAgents is used to
            indicate that a particular agent fails to achieve (at least
            one of) its goals in a particular action.
            (#$failureForAgents ENDEAVOR AGENT) means that the #$Agent
            AGENT had some purpose in performing ENDEAVOR that was not
            realized.  See also #$purposeInEvent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="familyName">
        <rdfs:label xml:lang="en">family name (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$familyName X STRNG) means that #$Person X is known by the
            #$HumanFamilyNameString STRNG as his or her family name
            (surname).  E.g., (#$familyName #$Lenat
            ``Lenat&apos;&apos;).  A person rarely has more than one
            family name at any one time.  Family names may change as a
            result of certain actions, such as marriages, deaths, etc.,
            in various cultures.  In current (20th Century) Western
            cultures, #$familyNames are the same as #$lastNames, while
            in many Eastern cultures (Chinese, Japanese, Korean,
            Vietnamese) they are #$firstNames.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:subPropertyOf rdf:resource="#lastName"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#HumanFamilyNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fanOutArg">
        <rdfs:label xml:lang="en">fan out arg</rdfs:label>
        <rdfs:comment>(#$fanOutArg PRED N) means that
            transitively-related assertions using PRED usually
            &apos;&apos;fan out&apos;&apos; in the direction of argument
            position N.  For example, (#$fanOutArg
            #$geographicalSubRegions 2) means that usually a
            geographical region has more direct sub-regions than
            super-regions, so for any region REG there will likely be
            more assertions of the form (#$geographicalSubRegions REG
            SUB) than there are assertions of the form
            (#$geographicalSubRegions SUPER REG).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#TransitiveProperty"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fartherNorthThan">
        <rdfs:label xml:lang="en">farther north than</rdfs:label>
        <rdfs:comment>(#$fartherNorthThan THING-1 THING-2) means that
            THING-1 is farther to the north than THING-2 is, although it
            need not be #$northOf THING-2; they must be on the same
            planet surface, and the northernmost point(s) of THING-1 is,
            strictly speaking, closer to the North Pole than the
            northernmost point(s) of THING-2.   Example:
            (#$fartherNorthThan #$CityOfRomeItaly #$CityOfBostonMA). An
            example shows a technical difference between #$northOf and
            #$fartherNorthThan:  the #$CityOfRioDeJaneiroBrazil is
            #$fartherNorthThan the #$CityOfMelbourneAustralia, even
            though the shortest air route from Melbourne to Rio is to
            fly directly south (almost over the #$SouthPole).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#onSamePlanetSurfaceAs"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fastenedTo">
        <rdfs:label xml:lang="en">fastened to</rdfs:label>
        <rdfs:comment>(#$fastenedTo OBJ1 OBJ2) means that there is an
            assembly consisting of OBJ1, OBJ2, and one or more fasteners
            configured so that OBJ1 and OBJ2 are rigidly connected.  The
            fasteners in question may be (among other things) screws,
            nails, rivets, nuts and bolts, or staples.  The fasteners
            penetrate all the way through at least one of the objects
            (either OBJ1 or OBJ2) and may or may not go all the way
            through the other object.  Examples: a utility shelf screwed
            into the wall; paper notices stapled to a bulletin board;
            shingles nailed to the roof of a house.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:subPropertyOf rdf:resource="#connectedViaConnector"/>
        <rdfs:subPropertyOf rdf:resource="#connectedTo-Rigidly"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="father">
        <rdfs:label xml:lang="en">#$father</rdfs:label>
        <rdfs:comment>An instance of #$FamilyRelationSlot and a
            specialization of #$coreRelatives.  (#$father CHILD FATHER)
            means that FATHER is a male animal (there might be more than
            one) who fills the role of father for CHILD.  In  the case
            of humans, FATHER might be CHILD&apos;s biological father,
            adoptive  father, step father, or foster father.  But note
            that being a person&apos;s  #$biologicalFather (q.v.) is
            neither necessary nor sufficient for being  his/her father
            in the present sense.  In the case of nonhuman animals,
            however, #$father holds between two given creatures if and
            only if  #$biologicalFather does.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#MaleAnimal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="faxNumberText">
        <rdfs:label xml:lang="en">fax number text</rdfs:label>
        <rdfs:comment>The predicate #$faxNumberText relates a particular
            location to the fax number at that location.
            (#$faxNumberText LOC NUM) means that NUM is a string
            denoting (one of) the fax number(s) of the #$ContactLocation LOC.</rdfs:comment>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#PhoneNumber"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fedByConfluenceOfRivers">
        <rdfs:label xml:lang="en">fed by confluence of rivers</rdfs:label>
        <rdfs:comment>A #$SpatialPredicate and specialization of
            #$tributaries (q.v.) that holds  only between #$Rivers.
            (#$fedByConfluenceOfRivers BIGRIVER SMALLRIVER)  means that
            BIGRIVER is either formed by or increased in volume by a
            confluence of rivers that includes SMALLRIVER.  That is,
            there is some  place where SMALLRIVER merges with one or
            more other rivers (besides  BIGRIVER itself) to form or
            increase the volume of BIGRIVER.  Note that  the
            #$fedByConfluenceOfRivers relation does _not_ hold in cases
            where a  smaller river feeds all by itself into (and thereby
            increases the volume of) a bigger river; for such cases use
            the more general #$tributaries.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tributaries"/>
        <rdfs:domain rdf:resource="#River"/>
        <rdfs:range rdf:resource="#River"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="feelsEmotion">
        <rdfs:label xml:lang="en">feels emotion</rdfs:label>
        <rdfs:comment>(#$feelsEmotion AGENT FEELING) means that AGENT
            has the #$FeelingAttribute FEELING. For example
            (#$feelsEmotion AGENT (#$HighAmountFn #$Happiness)) means
            that AGENT is feeling a high amount of happiness.</rdfs:comment>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#FeelingAttribute"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="femaleParentActor">
        <rdfs:label xml:lang="en">female parent actor</rdfs:label>
        <rdfs:comment>(#$femaleParentActor EVENT ORGANISM) means that
            ORGANISM is the female parent in the
            #$SexualReproductionEvent EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parentActors"/>
        <rdfs:domain rdf:resource="#SexualReproductionEvent"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fieldsOfActivity">
        <rdfs:label xml:lang="en">fields of activity</rdfs:label>
        <rdfs:comment>A specialization of #$fieldsOfCompetence.
            (#$fieldsOfActivity PERSON FIELD)  means that PERSON is or
            was active in the #$FieldOfStudy FIELD.  Usually,  PERSON
            has made, is making, or intends to make some contribution to
            FIELD.  E.g. (#$fieldsOfActivity #$Thales #$MilesianSchool) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#fieldsOfCompetence"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#FieldOfStudy"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fieldsOfCompetence">
        <rdfs:label xml:lang="en">fields of competence</rdfs:label>
        <rdfs:comment>(#$fieldsOfCompetence PERSON FIELD) means that the
            #$Person PERSON has actual competence and knowledgability in
            the #$FieldOfStudy FIELD, or at least is recognized by peers
            and colleagues in FIELD as being competent in FIELD. See
            also the related predicates #$expertRegarding and #$domainsOfSpecialization.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#FieldOfStudy"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fieldsOfFormalEducation">
        <rdfs:label xml:lang="en">fields of formal education</rdfs:label>
        <rdfs:comment>(#$fieldsOfFormalEducation PERSON FIELD) means
            that the #$Person PERSON has had formal academic or tutorial
            education in the #$FieldOfStudy FIELD.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#fieldsOfCompetence"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#FieldOfStudy"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fileCopyFoundOnComputer">
        <rdfs:label xml:lang="en">file copy found on computer</rdfs:label>
        <rdfs:comment>This predicate relates computer file copies to
            computational systems.  (#$fileCopyFoundOnComputer COPY
            COMPUTER) means that COPY is found on COMPUTER, (e.g. in
            memory, on disk, etc.).  Cf. #$fileFoundOnComputer.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerFileCopy"/>
        <rdfs:range rdf:resource="#ComputationalSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="finitaryJunctionInSystem">
        <rdfs:label xml:lang="en">finitary junction in system</rdfs:label>
        <rdfs:comment>(#$finitaryJunctionInSystem X SYS) means that X is
            a finitary junction in the #$PathSystem SYS, i.e., X is an
            intersection joining only finitely many links and loops in
            SYS.  More strictly, a junction X in a #$PathSystem SYS is
            finitary if there are only finitely many links and loops in
            SYS that X is on.  As examples, all 3-way or 4-way junctions
            in SYS are finitary junctions.  See
            #$threeWayJunctionInSystem, #$fourWayJunctionInSystem,
            #$junctionInSystem and #$FinitaryJunctionPathSystem</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#junctionInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="firstName">
        <rdfs:label xml:lang="en">first name (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. An
            instance of #$ProperNamePredicate-Strict and a
            specialization of #$nameString.  (#$firstName AGENT
            NAMESTRING) means that AGENT is  known by NAMESTRING as his
            or her first name.  Note that a person  rarely has more than
            one first name, though s/he may have one or  more nicknames
            that acquaintances use interchangeably with, or  instead of,
            her/his actual first name.  For example, a person whose
            first name is `Robert&apos; might have the nicknames
            `Bob&apos; and `Bobby&apos;.   See #$nicknames and #$commonNickname.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#givenNames"/>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#HumanGivenNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="firstPersonSg-Present">
        <rdfs:label xml:lang="en">first person sg - present</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its first person
            singular verb form. This predicate is only used for the
            auxiliary verbs &apos;be&apos;, &apos;have&apos;, and
            &apos;do&apos;.  Example: &apos;am&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonThirdSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="firstSubEvents">
        <rdfs:label xml:lang="en">first sub events</rdfs:label>
        <rdfs:comment>This predicate relates an event to one of its
            sub-events -- namely, the sub-event that begins it.
            #$firstSubEvents is the common specialization of both
            #$subEvents and #$temporallyStartedBy. (#$firstSubEvents
            EVENT START) implies (#$subEvents EVENT START) and
            (#$temporallyStartedBy EVENT START).  That is,
            (#$firstSubEvents EVENT START) means that START is the first
            part of EVENT.  For example, if one relieving pain (see
            #$RelievingPain) by taking a pill, then (one of) the first
            sub-events in that event is an instance of #$Ingesting.
            Note that there can be more than one  first  subevent for
            any given event.  For example,  in a baseball game, the
            entire first inning can be considered to be the first
            subevent of the game, and yet the first pitch made during
            the first inning can also be considered to be the first
            subevent of the game. See also #$lastSubEvents.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyStartedBy"/>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fitsIn">
        <rdfs:label xml:lang="en">fits in</rdfs:label>
        <rdfs:comment>The predicate #$fitsIn is used to give an
            approximation of the external size and shape of particular
            tangible objects, by relating an object to an abstract
            region of space described as a geometric shape with definite
            dimensions.  (#$fitsIn OBJ SHAPE) gives an upper bound for
            the size of the object OBJ, by stating what sized shape OBJ
            will fit inside.  #$fitsIn uses the elements of
            #$ShapeFunction (q.v.) for reference, especially the basic
            shapes generated by #$RectangularSolidFn, #$CylinderFn, and
            #$SphereFn.  (Note: actual instances of
            AbstractPhysicalShape are NOT used for assertions made with
            #$fitsIn.)  Examples: (#$fitsIn #$Pittman
            (#$RectangularSolidFn (#$Meter 2) (#$Meter 0.35) (#$Meter
            0.25))) and (#$fitsIn HopeDiamond (#$CylinderFn (#$Centi
            (#$Meter 10) (#$Centi(#$Meter 10))).  When #$fitsIn is used
            in a rule to represent a class of objects with variable
            sizes, the #$ShapeFunction used should refer to the largest
            size that such objects normally have.  For example, by
            default, any sandwich SW (#$fitsIn SW (#$RectangularSolidFn
            (#$Inch 12) (#$Inch 12) (#$Inch 6))).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#GeometricThing-Abstract"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="followingIntervalType">
        <rdfs:label xml:lang="en">following interval type</rdfs:label>
        <rdfs:comment>(#$followingIntervalType X Y) indicates that every
            instance of X is followed by some instance of Y, and every
            instance of Y is preceded by some instance of X.  The
            instance of Y is #$contiguousAfter the instance of X.  For
            example,  (#$followingIntervalType #$Saturday #$Sunday).
            Every Saturday is followed by a Sunday, and every Sunday is
            preceded by a Saturday; the Sunday is #$contiguousAfter the Saturday.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalObjectType"/>
        <rdfs:range rdf:resource="#TemporalObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="followingValue">
        <rdfs:label xml:lang="en">following value</rdfs:label>
        <rdfs:comment>The Cyc predicate #$followingValue is used to
            represent an ordering of generic attributes.
            (#$followingValue VAL1 VAL2) means that VAL2 is a greater
            value than VAL1 on a scale that they share.
            (#$followingValue VAL1 VAL2) implies (#$greaterThan VAL2
            VAL1).  Typically, one uses #$followingValue when the values
            VAL1 and VAL2 are elements of #$GenericQuantity, and they
            are not grounded in numerically quantifiable units of
            measure (see
            #$NoteAboutGivingGenericValueFunctionsNumericValues).  If
            VAL1 and VAL2 do have numerical grounding, a
            #$followingValue formula is unnecessary since
            #$numericallyEqual, #$greaterThanOrEqualTo, and
            #$greaterThan, are automatically computable using arithmetic
            relations holding between the minimum and maximum of val1
            and val2.  (See #$minQuantValue, #$maxQuantValue.)  For
            example, one must use #$followingValue to state that
            (#$HighAmountFn #$Glamor) is more glamorous than
            (#$LowAmountFn #$Glamor).  On the other hand, it is
            unnecessary to assert a #$followingValue relation between
            (#$MilesPerHour 5) and (#$MilesPerHour 25 60) since
            #$greaterThan is arithmetically determinable.  See also
            #$GenericQuantity, #$GenericValueFunction.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lessThan"/>
        <rdfs:subPropertyOf rdf:resource="#colinearValues"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="foodSourceFor">
        <rdfs:label xml:lang="en">food source for</rdfs:label>
        <rdfs:comment>The predicate #$foodSourceFor relates a particular
            organism to the kinds of things it usually eats.
            (#$foodSourceFor ORG OBJTYPE) means that ORG is an organism
            that typically eats some instances of OBJTYPE for food.
            Note that OBJTYPE refers to a type of food source, not a
            particular object that ORG eats.  For example,
            (#$foodSourceFor #$RonaldReagan #$Popcorn) means that
            #$Popcorn is a #$foodSourceFor Ronald Reagan, i.e., Ronald
            Reagan often eats (instances of) popcorn.</rdfs:comment>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="formalityOfWS-New">
        <rdfs:label xml:lang="en">formality of w s - new</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$formalityOfWS-New ASRTN FORM) means that the word or
            phrase whose meaning is given by the
            #$CycLNLSemanticAssertion ASRTN is typically used in a
            register that has formality level FORM.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLNLAssertion"/>
        <rdfs:range rdf:resource="#FormalityOfSpeech"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="formerName">
        <rdfs:label xml:lang="en">former name</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$formerName THING NAME) means that NAME was once, but is
            no longer commonly in use as the name for THING. For example
            (#$formerName #$TheArtistFormerlyKnownAsPrince  Prince )
            indicates that the singer and composer of  1999  previously
            was named Prince.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fourWayJunctionInSystem">
        <rdfs:label xml:lang="en">four way junction in system</rdfs:label>
        <rdfs:comment>(#$fourWayJunctionInSystem JUNCT SYS) means that
            JUNCT is a 4-way junction in the #$PathSystem SYS.
            Formally, a 4-way junction in SYS is any node X in SYS such
            that either there are exactly 4 links and no loops in SYS
            that X is on, there are exactly 2 loops and no links in SYS
            that X is on, or there are exactly 2 links and 1 loop in SYS
            that X is on.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#finitaryJunctionInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fragilityOfObject">
        <rdfs:label xml:lang="en">fragility of object</rdfs:label>
        <rdfs:comment>(#$fragilityOfObject OBJ DEGREE) means that the
            tangible object OBJ has the #$DegreeOfFragility DEGREE.  The
            higher the fragility, the more easily the object can be broken.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="freezingPoint">
        <rdfs:label xml:lang="en">freezing point</rdfs:label>
        <rdfs:comment>(#$freezingPoint STUFF TEMP) means that TEMP is
            the temperature at which the substance STUFF changes from
            having the attribute #$Liquid-StateOfMatter to
            #$Solid-StateOfMatter (when sufficient energy is output to
            lower STUFF&apos;s temperature through this point).  Note
            that the freezing point of most substances is
            context-dependent (e.g., based on altitude and other factors.)</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Temperature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="frequencyOfSignal">
        <rdfs:label xml:lang="en">frequency (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$frequencyOfSignal WAVE FREQ) means that the
            #$WavePropagation event WAVE consists of waves that occur at
            intervals of FREQ.  FREQ is a measure of #$Frequency
            generally expressed as cycles per unit of time; frequency of
            electromagnetic radiation is standardly measured in #$Hertz.</rdfs:comment>
        <rdfs:domain rdf:resource="#WavePropagation"/>
        <rdfs:range rdf:resource="#Frequency"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="friends">
        <rdfs:label xml:lang="en">#$friends</rdfs:label>
        <rdfs:comment>(#$friends X Y) means X and Y are friends;
            typically they have a close relationship of reciprocal care,
            concern, respect, enjoyment, and mutual regard based on
            emotional (and/or ideological and intellectual)
            compatibility, shared interests, etc. Note:  In the cases of
            assertions of two non-human animals being friends, there may
            be some anthropomorphism going on.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#likesAsFriend"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="from-Generic">
        <rdfs:label xml:lang="en">from - generic</rdfs:label>
        <rdfs:comment>(#$from-Generic GEN-TRANS THING) means that the
            #$GeneralizedTransfer GEN-TRANS has an origin or starting
            point THING.  Because #$GeneralizedTransfer covers many
            kinds of transfer, both physical and abstract, this starting
            point can be of many types.  In a #$Translocation it is a
            #$PartiallyTangible location (see #$fromLocation), while in
            #$TransferringPossession it is an #$Agent (see
            #$fromPossessor).  #$from-Generic encompasses all kinds of
            starting points; as a rule, it is better to use more the
            specific predicates when possible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#terminalOfTrans-Generic"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fromGroup">
        <rdfs:label xml:lang="en">from group</rdfs:label>
        <rdfs:comment>A specialization of #$from-Generic, #$fromGroup
            can be used to indicate, in a more specific way, the
            instance of #$Group from which the #$transferredThing is
            transferred in some instance of #$GroupTransfer.
            (#$fromGroup TRANS GROUP) means that in the  instance TRANS
            of #$GroupTransfer, the #$transferredThing is transferred
            from the instance GROUP of #$Group.  See also
            #$GroupTransferOut and #$toGroup.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#from-Generic"/>
        <rdfs:domain rdf:resource="#GroupTransfer"/>
        <rdfs:range rdf:resource="#Group"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fromLocation">
        <rdfs:label xml:lang="en">#$fromLocation</rdfs:label>
        <rdfs:comment>This predicate is used to indicate the starting
            point of a particular movement from one place to another.
            (#$fromLocation MOVE LOC) means that LOC is where some
            salient moving-object (see #$objectMoving) in the
            #$Translocation MOVE is found at the beginning of MOVE and
            is where it begins this motion.  This moving-object might or
            might not be #$Stationary at LOC at the beginning of MOVE.
            If MOVE is a single-pathway translation (see
            #$Translation-SingleTrajectory), then each of its salient
            moving-objects is found at LOC when MOVE starts.  If MOVE
            has multiple movers and multiple pathways (see
            #$Translation-MultiTrajectory), then at least some of the
            moving-objects can be found at LOC when MOVE starts.  If
            MOVE is a flow (such as a river flowing, a wind blowing, a
            tornado, a typhoon, some clouds moving, or air filling your
            lungs when you take a breath; see #$Translation-Flow), then
            at least some portion of the fluid moving-object can be
            found at LOC when MOVE starts.  See also
            #$motionPathway-Complete and #$pathConnects.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:subPropertyOf rdf:resource="#from-Generic"/>
        <rdfs:domain rdf:resource="#Translocation"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fromOrganization">
        <rdfs:label xml:lang="en">from organization</rdfs:label>
        <rdfs:comment>A specialization of #$from-Generic,
            #$fromOrganization can  be used to indicate, in a more
            specific way,  the instance of #$Organization from which the
            instance  of #$IntelligentAgent is transferred in some
            instance of #$OrganizationalTransfer.  (#$fromOrganization
            TRANS ORG) means that in the   instance TRANS of
            #$OrganizationalTransfer, the  #$transferredThing is
            transferred from the instance  ORG of #$Organization.  See
            also #$OrganizationalTransferIn and  #$toOrganization.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#fromGroup"/>
        <rdfs:domain rdf:resource="#OrganizationalTransfer"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fromPossessor">
        <rdfs:label xml:lang="en">agent losing possession</rdfs:label>
        <rdfs:comment>This predicate identifies an #$Agent who loses
            some right to use an object.  (#$fromPossessor LOSS AGENT)
            means that AGENT enjoys some #$UserRightsAttribute over the
            #$objectOfPossessionTransfer at the start of the
            #$LosingUserRights event LOSS, but no longer has that
            particular #$UserRightsAttribute after the LOSS ends.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#from-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#LosingUserRights"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fruitOfType">
        <rdfs:label xml:lang="en">fruit of type</rdfs:label>
        <rdfs:comment>A binary predicate that relates specializations of
            #$Plant to specializations of #$Fruit.  (#$fruitOfType
            PLANT-TYPE FRUIT-TYPE) means that FRUIT-TYPE is the type of
            fruit that PLANT-TYPE bears.</rdfs:comment>
        <rdfs:domain rdf:resource="#ExistingObjectType"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="fullName">
        <rdfs:label xml:lang="en">complete name (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#HumanNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="functionCommutesWith">
        <rdfs:label xml:lang="en">function commutes with</rdfs:label>
        <rdfs:comment>Used to assert that the order  of application of
            two functions is irrelevant, and that the  functions commute
            with each other.  This information is used  to canonicalize
            terms involving these functions.  For instance,  if
            (#$functionCommutesWith FOO BAR) is asserted, then the two
            terms (FOO (BAR X)) and (BAR (FOO X)) will canonicalize to
            the  same thing.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnaryFunction"/>
        <rdfs:range rdf:resource="#UnaryFunction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="functionalInArgs">
        <rdfs:label xml:lang="en">functional in args</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for specifying the
            argument-place(s) with respect to which a given
            #$FunctionalPredicate (q.v) is  functional .
            (#$functionalInArgs PRED N) means that PRED is functional in
            its Nth argument-place.  That is, for any particular way of
            fixing all of PRED&apos;s other arguments, there will be at
            most one thing that, if taken as the Nth argument, would
            result in a true sentence.  For example, #$biologicalMother
            is functional in its second argument, as nothing has more
            than one biological mother.  In most cases, the entry-format
            (see #$Format) of a functional argument-place should be
            #$singleEntryFormatInArgs (q.v.).  In some cases, however,
            the  entry-format is #$intervalEntryFormatInArgs (q.v.), and
            then the meaning of (#$functionalInArgs PRED N) deviates
            slightly from that described above.  In such a case there
            might be more than one instance of #$ScalarInterval (q.v.)
            that, when taken as PRED&apos;s Nth argument (and keeping
            the other arguments fixed), yields a true statement; but if
            so, all such (equivalently  truth-yielding )
            scalar-intervals must _overlap_ one another (see
            #$quantityIntersects).  For example, #$heightOfObject&apos;s
            second, functional argument-place has the interval-entry
            format, reflecting the fact that it might be true to say of
            a given basketball player (e.g.) _either_ that he is
            6-feet-11-inches in height or that he is between 6-feet-10
            and 7-feet in height.  Obviously, the specified integer N
            must be less than or equal to the arity (see #$arity) of
            PRED.  Note that, for some ways of fixing the other
            arguments, there might be _nothing_ that would yield a true
            sentence when put in PRED&apos;s functional argument-place.
            For example, #$dictator is functional in its second argument
            because a given country can have at most one dictator at a
            given time; but of course some countries have no dictator.</rdfs:comment>
        <rdfs:domain rdf:resource="#FunctionalPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="futureTense-Generic">
        <rdfs:label xml:lang="en">future tense - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tensed"/>
        <rdfs:subPropertyOf rdf:resource="#thirdPersonSg-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#plural-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genExpansion">
        <rdfs:label xml:lang="en">gen expansion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            Common Lisp format string ARG2 can be applied to the
            argument list ARG3 to generate pseudo-English for the #$Cyc
            #$Relation ARG1</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#ELTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genKeyword">
        <rdfs:label xml:lang="en">gen keyword</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. An
            #$NLGenerationPredicate that  relates a given CycL
            denotational term to the SubL keyword   that is used to
            represent it in generating natural language   from CycL.
            (#$genKeyword CYCL-TERM KEYWORD) means that   KEYWORD
            represents CYCL-TERM in the generation of natural   language
            paraphrases of CycL expressions, e.g. in #$genFormat
            (q.v.) assertions.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#SubLKeyword"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genStringAssertion">
        <rdfs:label xml:lang="en">gen string assertion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genStringAssertion-Precise">
        <rdfs:label xml:lang="en">gen string assertion - precise</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genStringAssertion-Terse">
        <rdfs:label xml:lang="en">gen string assertion - terse</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genTemplate">
        <rdfs:label xml:lang="en">gen template</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#KeywordVariableTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="generalSemantics">
        <rdfs:label xml:lang="en">general semantics</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="generalizations">
        <rdfs:label xml:lang="en">generalizations</rdfs:label>
        <rdfs:comment>The most general reified instance of
            #$TaxonomicSlotForAnyThing (q.v.).  #$generalizations
            relates things  of various kinds to things of the same kind
            that are correlatively   more general or inclusive than
            them.  Thus it relates a set (see   #$Set-Mathematical) to
            its supersets, a collection (see #$Collection)   to the
            collections that subsume it, a more-specific predicate (see
            #$Predicates) to those predicates that are correspondingly
            less-specific  than it, etc.  #$generalizations is itself
            the common generalization   of a number of more
            type-specific generalization predicates, such as
            #$subsetOf, #$genls, and #$genlPreds (qq.v.).  When making
            assertions to  the Cyc Knowledge Base, it is better to use
            one of these more specific   predicates instead of
            #$generalizations whenever possible.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="generateArgWithOutsideScope">
        <rdfs:label xml:lang="en">generate arg with outside scope</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#RuleMacroPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genericPathway-Complete">
        <rdfs:label xml:lang="en">complete pathway used</rdfs:label>
        <rdfs:comment>For those transfers in which the item transferred
            follows some spatial path, this predicate allows
            representation of the relation between the transfer and the
            single path followed by the item in that transfer.  More
            formally, (#$genericPathway-Complete TRANS PATH) means that
            the route of the instance TRANS of #$GeneralizedTransfer is
            spatial and the #$transferredThing follows some (perhaps
            improper) part of the instance PATH of #$Path-Spatial
            throughout all of TRANS.  Thus, any
            #$genericPathway-Complete of an instance TRANS of
            #$GeneralizedTransfer connects the  starting  and  stopping
            points, the #$from-Generic and the #$to-Generic, of TRANS;
            if this is the complete extent of the path, use the more
            specific #$genericPathway-Exact.  Note that the instance
            PATH of #$Path-Spatial may, and often will, extend beyond
            these  starting  and  stopping  points.  See also
            #$infoPathway-Complete and #$motionPathway-Complete;  it is
            usually better to use one of these more specific predicates.
            Another related predicate is #$genericPathway-Partial.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genericPathway-Partial"/>
        <rdfs:subPropertyOf rdf:resource="#eventOccursAt"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genericPathway-Exact">
        <rdfs:label xml:lang="en">exact pathway used</rdfs:label>
        <rdfs:comment>For those transfers in which the item transferred
            follows some spatial path, this predicate allows
            representation of the relation between the transfer and the
            single path followed by the item in that transfer.  More
            formally, (#$genericPathway-Exact TRANS PATH)  means that
            the route of the instance TRANS of #$GeneralizedTransfer  is
            spatial and the #$transferredThing follows the complete
            instance PATH of #$Path-Spatial throughout all of TRANS.
            Thus, any #$genericPathway-Exact of an instance TRANS of
            #$GeneralizedTransfer has the  starting  and  stopping
            points, the #$from-Generic and the #$to-Generic, of TRANS as
            its endpoints.  The instance PATH of #$Path-Spatial may not
            extend beyond these  starting  and  stopping  points (use
            #$genericPathway-Complete for that meaning).  See also
            #$infoPathway-Exact and #$motionPathway-Exact; it is usually
            better to use one of these more specific predicates.
            Another related predicate is #$genericPathway-Partial.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genericPathway-Complete"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genericPathway-Partial">
        <rdfs:label xml:lang="en">partial pathway used</rdfs:label>
        <rdfs:comment>For those transfers in which the item transferred
            follows (at least in part) some spatial route, this
            predicate allows representation of the relation between the
            transfer and one of the spatial paths followed by the item
            in that transfer. More formally, (#$genericPathway-Partial
            TRANS PATH) means that at least part of the route of TRANS
            is spatial and and at least part of this part follows the
            instance PATH of #$Path-Spatial. For example, if a certain
            trip TRANS takes a person from a home in Austin to one in
            Dallas via (mostly) I-35, part of the trip may occur along
            highways other than I-35 and part of it will occur along
            ordinary streets in Austin and Dallas.  Thus only part of
            TRANS occurs along I-35.  We may represent this in CycL by
            stating (#$genericPathway-Partial TRANS Interstate35).  As
            another example, consider an e-mail sent from one PC to
            another. Suppose this transfer of information INFOTRANS
            occurs along several distinct cables. If one of these cables
            is CABLE001, then we may correctly assert
            (#$genericPathway-Partial INFOTRANS CABLE001). See also
            #$genericPathway-Complete and especially its #$cyclistNotes
            for a comparison with this predicate.  Note, along these
            lines, that in both examples above, it would be incorrect to
            replace #$genericPathway-Partial with
            #$genericPathway-Complete, since the entire transfer did not
            occur along either I-35 or CABLE001, respectively. For more
            specific predicates see #$infoPathway-Partial and
            #$motionPathway-Partial. Note that it is usually better to
            use one of these more specific predicates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#eventPartiallyOccursAt"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlAttributes">
        <rdfs:label xml:lang="en">genl attributes</rdfs:label>
        <rdfs:comment>An instance of #$TaxonomicSlot and a
            specialization of #$generalizations.  #$genlAttributes can
            be used to relate a more-specific instance of
            #$AttributeValue to other instances that are correlatively
            more-general.  (#$genlAttributes SPEC-ATT GENL-ATT) means
            that SPEC-ATT generalizes to GENL-ATT in the sense that
            anything that possesses the former attribute possesses the
            latter as well.  That is, for any THING, (#$hasAttributes
            THING SPEC-ATT) implies (#$hasAttributes THING GENL-ATT).
            For example, (#$genlAttributes #$SilverColor #$Grayish)
            means that anything that is silver-colored is also grayish.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#AttributeValue"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlFuncs">
        <rdfs:label xml:lang="en">genl funcs</rdfs:label>
        <rdfs:comment>An instance of #$MetaRelation and a specialization
            of #$generalizations.  #$genlFuncs can be used to relate an
            instance of #$CollectionDenotingFunction to other instances
            that are correlatively   more general with respect to the
            collections they return as values for the same arguments.
            (#$genlFuncs SPEC-FUNC GENL-FUNC) means that the collection
            that is the value of GENL-FUNC for any given sequence of
            arguments is a generalization (see #$genls) of the value (if
            any) of SPEC-FUNC for that same sequence of arguments.  That
            is, whenever SPEC-FUNC is defined for (i.e. associates a
            value with) a sequence &lt;X1, ..., Xn&gt;, (#$genls
            (SPEC-FUNC X1 ... Xn) (GENL-FUNC X1 ... Xn)) holds.  For
            example, (#$genlFuncs #$MobFn #$GroupFn) holds, so (e.g.)
            (#$MobFn #$Person) is a specialization of (#$GroupFn
            #$Person).  Cf. #$genlFunctions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:range rdf:resource="#CollectionDenotingFunction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlFunctions">
        <rdfs:label xml:lang="en">genl functions</rdfs:label>
        <rdfs:comment>This predicate relates a function to another
            function that is more general than it in the sense of being
            defined for a broader class of arguments (i.e. having a
            domain that is a superset of that of the first function).
            (#$genlFunctions SPEC GENL) means that for any sequence of
            arguments that SPEC maps to some particular VALUE, GENL also
            maps that sequence to VALUE.  GENL might also be defined for
            certain argument-sequences for which  SPEC is not.  For
            example, since the integers are a subset of the real
            numbers, the square-function defined on the integers is
            related by #$genlFunctions to the square-function defined on
            the reals.  (Cf. #$genlFuncs for a different predicate not
            to be confused with this one.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#Function-MathematicalObject"/>
        <rdfs:range rdf:resource="#Function-MathematicalObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlInverse">
        <rdfs:label xml:lang="en">genl inverse</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that one binary
            predicate is a generalization of the _inverse_ of another
            binary predicate.    (#$genlInverse PRED GENL-INV-PRED)
            means that GENL-INV-PRED is a    generalized inverse  of
            PRED.  That is, (PRED ARG1 ARG2) implies   (GENL-INV-PRED
            ARG2 ARG1).  For example,   (#$genlInverse #$grandchildren
            #$ancestors) means that grandparents are   ancestors of
            their grandchildren.  See also #$genlPreds and #$negationInverse.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlMt">
        <rdfs:label xml:lang="en">genl mt</rdfs:label>
        <rdfs:comment>This predicate relates a more specific microtheory
            to a more general one, where the former constitutes a
            specialization with respect to the latter.  More precisely:
            (#$genlMt SPEC-MT GENL-MT) means that any assertion that is
            true in GENL-MT is also true in SPEC-MT.  Thus a query posed
            in SPEC-MT has access to all of the assertions asserted in
            GENL-MT.  (The consequences of this are far-reaching since
            #$genlMt is transitive.)  One   particular microtheory, the
            #$BaseKB, is in the unique position of being  a
            generalization (via #$genlMt) of every microtheory.  (Note
            that, for technical reasons, all #$genlMt assertions should
            be made in the #$BaseKB.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlMt-Vocabulary">
        <rdfs:label xml:lang="en">genl mt - vocabulary</rdfs:label>
        <rdfs:comment>A specialization of #$genlMt, which relates Cyc
            microtheories to their corresponding  vocabulary
            microtheories  (which define terms used in those
            microtheories). (#$genlMt-Vocabulary MT VOCAB_MT) means that
            VOCAB_MT is the #$VocabularyMicrotheory which contains the
            definitional information for Cyc terms used in no more
            general #$Microtheory than MT. For example,
            (#$genlMt-Vocabulary #$InformationGMt #$InformationGVocabularyMt).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlMt"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#VocabularyMicrotheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlOrSpecPreds">
        <rdfs:label xml:lang="en">genl or spec preds</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlot (q.v.) that relates two
            #$Predicates just in case either one of them is a
            generalization of the other via #$genlPreds (q.v.).
            (#$genlOrSpecPreds PRED1 PRED2) means that either
            (#$genlPreds PRED1 PRED2) or (#$genlPreds PRED2 PRED1)
            holds.  Thus #$genlOrSpecPreds is in effect the  union  of
            #$genlPreds and its inverse.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlPreds">
        <rdfs:label xml:lang="en">genl preds</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that one predicate
            is a generalization of another.  (#$genlPreds SPEC-PRED
            GENL-PRED) means that GENL-PRED is a generalization of
            SPEC-PRED.  That is, (GENL-PRED ARG1..ARGN) holds whenever
            (SPEC-PRED ARG1..ARGN) holds.  For example, (#$genlPreds
            #$touches #$near) holds, as touching something implies being
            near it.  As for the respective arities (see #$arity) of
            SPEC-PRED AND GENL-PRED, both predicates might have the same
            fixed-arity (see #$FixedArityRelation), both might have
            variable-arity (see #$VariableArityRelation), or SPEC-PRED
            might have a fixed-arity and GENL-PRED variable-arity.  (But
            it cannot be the case that SPEC-PRED has variable-arity and
            GENL-PRED has a fixed-arity.)  See also #$negationPreds,
            #$genlInverse, and #$negationInverse.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlOrSpecPreds"/>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlPredsEntryFormatInArgs">
        <rdfs:label xml:lang="en">genl preds entry format in args</rdfs:label>
        <rdfs:comment>An instance of  #$SpecificEntryFormatPredicate
            (q.v.) that is used only with argument-places  that are
            constrained to instances (see #$argIsa) of #$Predicate
            (q.v.) or  some specialization thereof.
            (#$genlPredsEntryFormatInArgs PRED N) means  that, for any
            particular way of fixing the other arguments to PRED besides
            the Nth, for any two predicates such that if either one is
            taken as the Nth  argument PRED holds of those arguments,
            one those predicates must be a  generalization (see
            #$genlPreds) of the other.  That is, if the sequences
            &lt;... ARGN ...&gt; and &lt;... ARGN-PRIME ...&gt; differ
            at most in their Nth items  and both (PRED ... ARGN ...) and
            (PRED ... ARGN-PRIME ...) hold, then  either (#$genlPreds
            ARGN ARGN-PRIME) or (#$genlPreds ARGN-PRIME ARGN) must
            hold.  For example, #$genlPredsEntryFormatInArgs holds of
            #$soleFunction  with repsect to its third argument-place.
            This allows us to state both  (#$typeSoleFunction
            #$Bus-RoadVehicle #$TransportInvolvingADriver #$transporter)
            and (#$typeSoleFunction #$Bus-RoadVehicle
            #$TransportInvolvingADriver #$vehicle), given (#$genlPreds
            #$vehicle #$transporter).</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genls">
        <rdfs:label xml:lang="en">generalization</rdfs:label>
        <rdfs:comment>A instance of #$TaxonomicSlotForCollections (q.v.)
            and   a specialization of #$generalizations.  #$genls
            relates a given collection   (see #$Collection) to those
            collections that subsume it.  More precisely,  (#$genls
            SUBCOL SUPERCOL) means that SUPERCOL is a supercollection of
            SUBCOL:   anything that is an instance of (see #$isa) SUBCOL
            is also an instance of  SUPERCOL.  For example, (#$genls
            #$Dog #$Mammal) holds.  #$genls is one of  the most
            commonly-occurring predicates in the Cyc Knowledge Base, and
            one of   the relations most fundamental to the Cyc ontology.
            See also #$subsetOf.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subsetOf"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="genlsEntryFormatInArgs">
        <rdfs:label xml:lang="en">genls entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.) that is used only with argument-places that are
            constrained to instances (see #$argIsa) of #$Collection
            (q.v.) or some specialization thereof.
            (#$genlsEntryFormatInArgs PRED N) means that, for any
            particular way of fixing the other arguments to PRED besides
            the Nth, for any two collections such that if either one is
            taken as the Nth argument PRED holds of those arguments,
            those collections must not be disjoint (see #$disjointWith).
            That is, if the sequences &lt;... ARGN ...&gt; and &lt;...
            ARGN-PRIME ...&gt; differ at most in their Nth items and
            both (PRED ... ARGN ...) and (PRED ... ARGN-PRIME ...) hold,
            then (#$disjointWith ARGN ARGN-PRIME) must _not_ hold.  For
            example,   #$genlsEntryFormatInArgs holds of #$resultIsa
            (q.v.) with respect to it second   argument-place.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="geographicalSubRegions">
        <rdfs:label xml:lang="en">geographical sub regions</rdfs:label>
        <rdfs:comment>(#$geographicalSubRegions SUPER SUB) means that
            SUPER and SUB are both elements of #$GeographicalRegion, and
            the area SUB lies wholly within the region SUPER (see
            #$inRegion).  SUPER may or may not completely surround SUB,
            as they may share an outer boundary (e.g., the
            #$UnitedStatesOfAmerica and  #$Texas-State in the
            #$WorldGeographyDualistMt).   Note that, if either argument
            to #$geographicalSubRegions is an instance of
            #$GeopoliticalEntity, the assertion must be made in
            #$WorldGeographyDualistMt or a specMt thereof.   To relate
            two instances of #$GeopoliticalEntity, use the predicate
            #$geopoliticalSubdivision, if it applies.  See also
            #$surroundsHorizontally and #$bordersOn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:subPropertyOf rdf:resource="#onSamePlanetSurfaceAs"/>
        <rdfs:subPropertyOf rdf:resource="#subRegions"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallySubsumes"/>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="geopoliticalSubdivision">
        <rdfs:label xml:lang="en">geopolitical subdivision</rdfs:label>
        <rdfs:comment>(#$geopoliticalSubdivision BIG SMALL) means that
            the #$GeopoliticalEntity SMALL is a part of the larger
            #$GeopoliticalEntity BIG.  The territory (see the constant
            #$TerritoryFn) of SMALL is a geographical sub-region (see
            the predicate #$geographicalSubRegions) of the territory of
            BIG.  The government (see the constant #$GovernmentFn) of
            BIG usually has some sovereignty over the government of SMALL.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ableToControl"/>
        <rdfs:subPropertyOf rdf:resource="#subordinateOrganizations"/>
        <rdfs:subPropertyOf rdf:resource="#controls"/>
        <rdfs:subPropertyOf rdf:resource="#geographicalSubRegions"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#GeopoliticalEntity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="gerund">
        <rdfs:label xml:lang="en">gerund</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#massNumber-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#untensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="givenNames">
        <rdfs:label xml:lang="en">given name (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$givenNames AGENT NAME) means that NAME is a given name
            (i.e. a first name or  Christian name ) of AGENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#HumanGivenNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="giver">
        <rdfs:label xml:lang="en">giver</rdfs:label>
        <rdfs:comment>This predicate relates a giver to the event in
            which s/he/it gives.  (#$giver GIVING AGENT) means that
            AGENT is the giver in GIVING.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:subPropertyOf rdf:resource="#fromPossessor"/>
        <rdfs:domain rdf:resource="#GivingSomething"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="goals">
        <rdfs:label xml:lang="en">objective (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$goals AGENT SENT) means that the proposition
            PROP expressed by the sentence SENT is the content of a goal
            that AGENT has.  That is, one of AGENT&apos;s goals is that
            PROP be made (or kept) true.  Goals are typically
            future-directed : either (i) PROP is not currently true (or
            at least is believed by AGENT not to be currently true) and
            AGENT  wants it to become true or (ii) PROP is currently
            true (or at least is believed by AGENT to be currently true)
            and AGENT wants it to remain true.  Also, AGENT intends to
            play some sort of active role in bringing about the truth of
            PROP, and plans  accordingly.  This distinguishes goals from
            mere desires or expectations (see  #$desires and #$expects).
            See also #$Goal and #$goalCategoryForAgent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasOpinionAsToTruthOf"/>
        <rdfs:subPropertyOf rdf:resource="#desires"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="gospelName-Short">
        <rdfs:label xml:lang="en">gospel name - short</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            predicate for recording the short name of a Gospel, e.g.
            &apos;Mark&apos;. Useful for generating other, predictable,
            gospel names.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="governedByAgreement">
        <rdfs:label xml:lang="en">governed by agreement</rdfs:label>
        <rdfs:comment>The predicate #$governedByAgreement relates an
            event to an agreement that stipulates something with respect
            to it, such as certain conditions that are to hold during
            the event, or whether the event should or should not occur.
            (#$governedByAgreement EVT AGR) means that some aspects of
            the instance of #$HumanActivity EVT are controlled by, or
            &apos;under the jurisdiction of&apos;, the instance of
            #$Agreement AGR.  For example, a #$BuyingGroup may have
            #$SalesContracts with its #$suppliers that specify what
            prices may be charged for goods bought by members of the
            group during the agreement period.  But note that an
            event&apos;s being governed by an agreement does not entail
            that the event conforms to what the agreement stipulates: an
            act that violates the agreement is still governed by it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#HumanActivity"/>
        <rdfs:range rdf:resource="#Agreement"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="governingBody">
        <rdfs:label xml:lang="en">governing body</rdfs:label>
        <rdfs:comment>The predicate #$governingBody identifies the
            suborganization which has governing authority over a
            particular organization.  (#$governingBody ORG GOVORG) means
            that GOVORG sets the policies and rules for ORG.  GOVORG is
            recognized, at least informally, and effectively functions
            by administering the internal and external affairs of ORG,
            whether or not the relationship is rigidly defined.  An
            important specialization of this predicate is #$government,
            which relates a #$GeopoliticalEntity to its #$RegionalGovernment.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="government">
        <rdfs:label xml:lang="en">government</rdfs:label>
        <rdfs:comment>The predicate #$government identifies the
            political entity which has governing authority over a
            particular geopolitical region.  (#$government GEOPOL GOV)
            means that the #$RegionalGovernment GOV is the government of
            the #$GeopoliticalEntity GEOPOL.  That is, GOV claims to be
            the government of GEOPOL, is recognized as such at least
            informally, and effectively functions as such (by
            administering the internal and external affairs of GEOPOL),
            whether or not GOV has formal diplomatic recognition.
            Effectively functioning as a #$government includes having
            the power to settle disputes, collect revenue, and provide services.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#governingBody"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#RegionalGovernment"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="grandchildren">
        <rdfs:label xml:lang="en">#$grandchildren</rdfs:label>
        <rdfs:comment>An instance of #$FamilyRelationSlot.
            (#$grandchildren OLDER YOUNGER) means that YOUNGER is a
            child (see the predicate #$children) of a child of OLDER.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="granuleOfSpatialStuff">
        <rdfs:label xml:lang="en">granule of spatial stuff</rdfs:label>
        <rdfs:comment>(#$granuleOfSpatialStuff STUFFTYPE OBJTYPE) means
            that the collection STUFFTYPE has as its spatial granules
            (or granularity level) the collection OBJTYPE. If some
            collection is spatially stuff-like, that means that the
            instances of that collection can be divided spatially, and
            the physical portions remaining will still be instances of
            that collection; e.g., a physical portion of some instance
            of #$SandMob is still sand (cf. #$ExistingStuffType). Such
            division cannot go on indefinitely in this way, however:
            eventually, division of something spatially stuff-like will
            result in the object-like &apos;granules&apos; out of which
            the stuff-like thing is composed. For instances, division of
            sand would eventually result in individual grains of sand,
            division of water would eventually get down to individual
            molecules of water, etc. At this level of division or below,
            the remaining physical portions do NOT count as instances of
            the stuff-type from which they were divided. This may seem
            counter-intuitive: isn&apos;t an individual molecule of
            water still water? Perhaps in some sense, but since the
            individual granules of a stuff typically do _not_ have most
            of the properties that the groups made of the granules have
            (including the property of being stuff-like), we do not
            count the individual granules as instances of the collection
            of which they are granules.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#granuleOfStuff"/>
        <rdfs:domain rdf:resource="#ExistingStuffType"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="granuleOfStuff">
        <rdfs:label xml:lang="en">granule of stuff</rdfs:label>
        <rdfs:comment>This predicate relates instances of #$StuffType to
            the type of object whose instances act as the  granules  of
            instances of the collection.  (#$granuleOfStuff STUFFTYPE
            OBJECTTYPE) means that if STUFF is an instance of STUFFTYPE
            and STUFFPART is any self-connected subdivision of STUFF,
            then: (i) if STUFFPART is  larger  than an instance of
            OBJECTTYPE it must itself be an instance of STUFFTYPE, (ii)
            if STUFFPART is equal to or  smaller  than an instance of
            OBJECTTYPE it is not necessarily an instance of STUFFTYPE,
            and (iii) there is no other instance of #$ObjectType for
            which (i) and (ii) hold and such that its own instances are
            comparably  smaller  than those of OBJECTTYPE.  This applies
            to specs of #$PartiallyTangible, #$Situation, and
            #$AbstractInformationalThing.  For instance, consider an
            instance of #$CharacterString.  If we take a substring (a
            connected piece) of the string (see #$substring) the result
            will be a new instance of #$CharacterString.  However, we
            could not take a single character in the string
            (#$Character-Abstract) and further divide it into new
            character strings.  Hence the granularity level for a
            character string is #$Character-Abstract.  Note that one
            will likely want to use specializations of this predicate
            for most temporal and/or spatial stuff types, i.e.,
            #$granuleOfTemporalStuff or #$granuleOfSpatialStuff.  Also
            note that, unlike its specializations, #$granuleOfStuff is
            not, at this time (Oct. 2000), a specialization of
            #$disjointWith.  We would not, for instance, want to insist
            that instances of #$Character-Abstract cannot be instances
            of #$CharacterString.</rdfs:comment>
        <rdfs:domain rdf:resource="#StuffType"/>
        <rdfs:range rdf:resource="#ObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="granuleOfTemporalStuff">
        <rdfs:label xml:lang="en">granule of temporal stuff</rdfs:label>
        <rdfs:comment>(#$granuleOfTemporalStuff STUFFTYPE OBJTYPE) means
            that the collection STUFFTYPE has as its temporal granules
            (or granularity level) the collection OBJTYPE. If some
            collection is temporally stuff-like, that means that the
            instances of that collection can be divided temporally, and
            the temporal slices remaining will still be instances of
            that collection; e.g., a time slice of some instance of
            #$Person is still a person, and a temporal slice of a
            walking process is still a walking process (cf.
            #$TemporalStuffType). Such division cannot always go on
            indefinitely, however: eventually, division of something
            temporally stuff-like will result in the temporally
            object-like &apos;granules&apos; out of which the stuff-like
            thing is composed. For instances, division of a walking
            process would eventually result in individual steps. At this
            level of division or below, the remaining temporal slices do
            NOT count as instances of the temporal stuff-type from which
            they were divided. This may seem counter-intuitive, but
            since the individual temporal granules of a temporal stuff
            typically do NOT have most of the properties that the groups
            made of the granules have (including the property of being
            temporally stuff-like),  we do not count the individual
            granules as instances of the collection of which they are
            granules. See also #$granuleOfSpatialStuff.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#granuleOfStuff"/>
        <rdfs:subPropertyOf rdf:resource="#disjointWith"/>
        <rdfs:domain rdf:resource="#TemporalStuffType"/>
        <rdfs:range rdf:resource="#TemporalObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="greaterThan">
        <rdfs:label xml:lang="en">greater than</rdfs:label>
        <rdfs:comment>A #$NumericComparisonPredicate that is a
            generalization of the  mathematical greater-than ( &gt; )
            relation to #$ScalarIntervals (q.v.) of all sorts, including
            quantitative intervals as well as point values (see
            #$ScalarPointValue).  (#$greaterThan VALUE1 VALUE2) means
            that  VALUE1 is greater than VALUE2 with respect to some
            scale that they  are both on.  More precisely, there is some
            #$TotallyOrderedScalarIntervalType SCALE that both VALUE1
            and VALUE2 are instances of and either (i) SCALE is a
            specialization of  #$NumericValue (e.g. #$RealNumber) and
            the minimum (see #$minQuantValue) of VALUE1 is greater than
            the maximum (see #$maxQuantValue) of VALUE2 or (ii)
            (#$followingValueOnScale VALUE2 VALUE1 SCALE) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#greaterThanOrEqualTo"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="greaterThanOrEqualTo">
        <rdfs:label xml:lang="en">greater than or equal to</rdfs:label>
        <rdfs:comment>A #$NumericComparisonPredicate that is a
            generalization of the  mathematical greater-than-or equal-to
            ( &gt;= ) relation to  #$ScalarIntervals (q.v.) of all
            sorts, including quantitative  intervals as well as point
            values (see #$ScalarPointValue).   (#$greaterThanOrEqualTo
            VALUE1 VALUE2) means that VALUE1 is  greater than or equal
            to VALUE2 with respect to some scale that  they are both on.
            More precisely, there is some
            #$TotallyOrderedScalarIntervalType SCALE that both VALUE1
            and  VALUE2 are instances of and either (i) SCALE is a
            specialization  of #$NumericValue (e.g. #$RealNumber) and
            the minimum  (see #$minQuantValue) of VALUE1 is greater than
            or equal to the  maximum (see #$maxQuantValue) of VALUE2,
            (ii)  (#$followingValueOnScale VALUE2 VALUE1 SCALE) holds,
            or (iii) (#$equals VALUE1 VALUE2) holds.  See also #$lessThanOrEqualTo.</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="groundOf">
        <rdfs:label xml:lang="en">ground of</rdfs:label>
        <rdfs:comment>(#$groundOf OBJ GROUND) means that GROUND is the
            stationary surface on which OBJ is located and possibly supported.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Touching"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Surface-Physical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="groupCardinality">
        <rdfs:label xml:lang="en">group cardinality</rdfs:label>
        <rdfs:comment>A predicate used to indicate the total number of
            members there are in a particular group.
            (#$groupCardinality GROUP NUM) means that the number of
            members in the #$Group GROUP is the #$Cardinal-Mathematical
            NUM.  For example (#$groupCardinality
            #$SevenWondersOfTheAncientWorld 7).  Cyc infers that the
            #$groupCardinality of pairs is 2, and dozens, 12. For
            stating the cardinalities of sets or collections rather than
            groups, see #$cardinality and #$entityCardinality.</rdfs:comment>
        <rdfs:domain rdf:resource="#Group"/>
        <rdfs:range rdf:resource="#Cardinal-Mathematical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="groupMemberType">
        <rdfs:label xml:lang="en">group member type</rdfs:label>
        <rdfs:comment>The predicate #$groupMemberType is used in
            characterizing the members of a particular group.
            (#$groupMemberType GROUP TYPE) means that all of
            GROUP&apos;s members are elements of the collection TYPE.
            For example, to state that the #$groupMembers of the Austin
            City Council are humans, one would write (#$groupMemberType
            AustinCityCouncil #$Person).  The members of a particular
            group might be characterized in more than one way; e.g., a
            Hispanic Business Council may have both the
            #$groupMemberType #$EthnicGroupOfHispanics and the
            #$groupMemberType #$BusinessPerson (provided that all of its
            members are Hispanic business people).  For
            &apos;typical&apos; or &apos;expected&apos; characteristics
            of members, see also #$memberTypes and #$typeHasTypicalMemberTypes.</rdfs:comment>
        <rdfs:domain rdf:resource="#Group"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="groupMembers">
        <rdfs:label xml:lang="en">group member</rdfs:label>
        <rdfs:comment>This predicate relates a group (see #$Group) to
            its individual members.  (#$groupMembers GROUP MEMBER) means
            that MEMBER is a member of GROUP.  For example,
            #$PyramidOfCheops is a group-member of the
            #$SevenWondersOfTheAncientWorld, and #$BillClinton is a
            group-member of the #$DemocraticParty.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Group"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hangsAround">
        <rdfs:label xml:lang="en">hangs around</rdfs:label>
        <rdfs:comment>(#$hangsAround LOOP OBJ) means that LOOP is a
            semi-flexible loop, looped around a piece of OBJ.  LOOP is
            supported by gripping friction and/or LOOP&apos;s limited
            ability to elongate as it moves down on OBJ.  See also #$hangsFrom.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo-Directly"/>
        <rdfs:subPropertyOf rdf:resource="#surrounds-2D"/>
        <rdfs:subPropertyOf rdf:resource="#hangsFrom"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hangsFrom">
        <rdfs:label xml:lang="en">will hang</rdfs:label>
        <rdfs:comment>(#$hangsFrom OBJ1 OBJ2) means that OBJ1 is
            suspended from OBJ2, either directly touching it (like a
            weight attached to a line) or through some intermediary
            object (like a weight suspended from the ceiling via a
            hook).  All of OBJ1&apos;s weight is #$supportedBy OBJ2.
            Most, if not all, of OBJ1 is below OBJ2; certainly, the
            center of OBJ1 is below the connection point. If pushed,
            OBJ1 will undergo an instance of #$Swinging (q.v.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#supportedBy"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasAgents">
        <rdfs:label xml:lang="en">has agents</rdfs:label>
        <rdfs:comment>(#$hasAgents AGENT1 AGENT2) means that AGENT2 acts
            on behalf of AGENT1.  This does not mean that AGENT2&apos;s
            actions are entirely controlled by AGENT1, but that
            AGENT1&apos;s desires and goals can influence (prohibit,
            enable or constrain) the behavior of AGENT2 in some domain.
            Examples include several kinds of situations:
            #$subOrganizations (the U.S. government has the U.S. Army as
            an agent), servants and slaves, and agents engaged for
            shorter periods of time or more restricted purposes, such as
            #$buyingAgents and #$sellingAgents.  In these latter cases,
            where control is not absolute, the predicate #$hasAgents
            applies only in a narrow context.  Often, but not always,
            AGENT1 and AGENT2 temporally intersect.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#superiors"/>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasAsCavity">
        <rdfs:label xml:lang="en">has as cavity</rdfs:label>
        <rdfs:comment>(#$hasAsCavity OBJECT CAVITY) means that
            #$PartiallyTangible OBJECT has CAVITY as a hole or cavity.
            #$hasAsCavity accepts both instances of #$CavityWithWalls
            and #$CavityInteriorRegion for CAVITY.  If the type of
            cavity is known, use the more specific predicate
            #$containsCavityInteriorRegion or #$containsCavityWithWalls,
            as appropriate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyContains"/>
        <rdfs:subPropertyOf rdf:resource="#movesWith"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Cavity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasAttributes">
        <rdfs:label xml:lang="en">trait (CycL predicate)</rdfs:label>
        <rdfs:comment>A very general predicate that relates a thing to
            an attribute or property (see #$AttributeValue) that it has.
            (#$hasAttributes THING ATT) means that ATT characterizes
            THING. There are a large number of more specialized
            predicates in CycL that represent more specific ways in
            which an attribute might characterize a thing; such
            predicates should be used instead  of #$hasAttributes when
            possible. Thus #$mainColorOfObject is preferrable to
            #$hasAttributes for stating that a physical object has a
            particular main color. See also #$AttributeType.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasBeenIn">
        <rdfs:label xml:lang="en">has been in</rdfs:label>
        <rdfs:comment>A predicate linking a thing to its prior history;
            (#$hasBeenIn OBJECT PLACE) means that the thing OBJECT has
            at one time during its lifetime been in (in the general
            sense of #$inRegion) the thing PLACE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasBeliefSystems">
        <rdfs:label xml:lang="en">belief system (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates intelligent agents to
            belief-systems (such as religions, philosophical schools,
            political theories, etc.) that they accept.
            (#$hasBeliefSystems AGENT SYSTEM) means that AGENT holds the
            #$BeliefSystem SYSTEM.  For example, (#$hasBeliefSystems
            BorisYeltsin #$RussianOrthodoxReligion) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#BeliefSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasClimateType">
        <rdfs:label xml:lang="en">climate (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$hasClimateType relates a
            particular region to the type of climate had in that region.
            (#$hasClimateType AREA CLIME) means that the climate in the
            #$GeographicalRegion AREA is of the #$ClimateCycleType
            CLIME.  See also #$ClimateCycleType, #$AnnualClimateCycle.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#ClimateCycleType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasEmotionAbout">
        <rdfs:label xml:lang="en">has emotion about</rdfs:label>
        <rdfs:comment>(#$hasEmotionAbout AGENT THING) means that AGENT
            has some emotion of some kind about THING.  This means that
            the agent [#$Agent] is also #$awareOf THING.  One should
            normally use a more specific predicate than
            #$hasEmotionAbout, depending upon the type of emotion and
            whether THING is a proposition [#$ELSentence-Assertible] a
            collection, a #$TemporalThing, or something else.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasEmotionAboutExistingThing">
        <rdfs:label xml:lang="en">has emotion about existing thing</rdfs:label>
        <rdfs:comment>(#$hasEmotionAboutExistingThing AGENT OBJ) means
            that when the sentient agent AGENT is interacting in some
            way with OBJ, that agent feels some emotion --- that is,
            (#$feelsEmotion AGENT &lt;something&gt;). The kinds of
            interactions that produce such emotion depend largely on
            what kind of thing OBJ is.  Thus, `Joe likes the Mona
            Lisa&apos; implies that Joe feels Enjoyment when viewing the
            Mona Lisa.  But `Joe dislikes pizza&apos; implies that Joe
            feels displeasure [(#$LowAmountFn #$Pleasure-Feeling)] when
            eating that kind of food.  Use specializations of
            #$hasEmotionAboutExistingThing (including #$likesObject and
            #$dislikesObject) whenever possible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAbout"/>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasEmotionAboutProposition">
        <rdfs:label xml:lang="en">has emotion about proposition</rdfs:label>
        <rdfs:comment>(#$hasEmotionAboutProposition AGENT PROP) means
            that AGENT has some emotion of some kind about the
            proposition, PROP.  Normally a more specialized predicate is used.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAbout"/>
        <rdfs:subPropertyOf rdf:resource="#awareOfProp"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasHabitat">
        <rdfs:label xml:lang="en">habitat (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$hasHabitat is used to relate an
            organism to the region where it lives.  (#$hasHabitat ORG
            REGION) means that the organism ORG lives in the
            #$EcologicalRegion REGION. Typically, REGION will belong to
            one of the subsets of #$EcologicalRegion which represent
            specific biomes (e.g., #$Desert, #$CoralReef).  See also #$residesInRegion.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#EcologicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasHeadquartersInCountry">
        <rdfs:label xml:lang="en">has headquarters in country</rdfs:label>
        <rdfs:comment>The predicate #$hasHeadquartersInCountry
            identifies a country in which a particular organization has
            one of its headquarters.  (#$hasHeadquartersInCountry ORG
            COUNTRY) means that the #$Organization ORG has one of its
            headquarters and places of primary central control in the
            #$Country COUNTRY.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#officeInCountry"/>
        <rdfs:subPropertyOf rdf:resource="#basedInRegion"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Country"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasLevels">
        <rdfs:label xml:lang="en">has levels</rdfs:label>
        <rdfs:comment>This predicate relates buildings (or other
            instances of #$ConstructionArtifact) to their levels.
            (#$hasLevels ARTIFACT LEVEL)  means that LEVEL is a level
            (e.g., a floor) of ARTIFACT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#ConstructionArtifact"/>
        <rdfs:range rdf:resource="#LevelOfAConstruction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasMembers">
        <rdfs:label xml:lang="en">member (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$hasMembers relates a particular
            organization to the agents who are members of that
            organization.  This predicate indicates `generic&apos;
            membership, although there may be specialized kinds of
            membership in the same organization.  (#$hasMembers ORG
            AGENT) means that AGENT is a member of the #$Organization
            ORG; typically, membership eligibility is determined by ORG
            and accepted with AGENT&apos;s voluntary affiliation.  In
            general, a member may be any #$Agent, including other
            #$Organizations (such as member countries in the United
            Nations), although only instances of #$Person can be members
            of instances of #$OrganizationOfPeopleOnly.  The truth of an
            assertion made with #$hasMembers may be time-dependent and,
            if so, should be qualified appropriately.  For example,
            (#$holdsIn (#$YearFn 1975) (#$hasMembers
            #$UnitedNationsOrganization #$Taiwan-RepublicOfChina)) is
            true, but (#$holdsIn (#$YearFn 1995) (#$hasMembers
            #$UnitedNationsOrganization #$Taiwan-RepublicOfChina)) is not.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:subPropertyOf rdf:resource="#groupMembers"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasOpinionAsToTruthOf">
        <rdfs:label xml:lang="en">has opinion as to truth of</rdfs:label>
        <rdfs:comment>(#$hasOpinionAsToTruthOf AGT PROP) means that the
            Agent AGT has an opinion as to the truth of the proposition
            PROP.  This may be knowledge, doubt, or a mere feeling.  See
            the specPreds, #$beliefs, #$knows, #$opinions, #$biases,
            #$notices, and #$doubts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOfProp"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasOwnershipIn">
        <rdfs:label xml:lang="en">has ownership in</rdfs:label>
        <rdfs:comment>This predicate relates agents to things of which
            they have part or whole ownership.  (#$hasOwnershipIn AGENT
            THING) means that AGENT owns a part (or the whole) of THING.
            For example, Ted Turner #$hasOwnershipIn Atlanta&apos;s
            Olympic Stadium; there may be other owners.  See also
            #$legalOwnerOf and #$ownsShare.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasPatients">
        <rdfs:label xml:lang="en">has patients</rdfs:label>
        <rdfs:comment>The predicate #$hasPatients represents a
            relationship between a medical professional and a patient
            (including nonhuman animals).  (#$hasPatients MEDIC PATIENT)
            means that the #$MedicalCareProvider MEDIC is treating the
            recipient-of-care PATIENT.  PATIENT may be a human or a
            nonhuman animal.  An assertion using #$hasPatients holds
            only during the time that PATIENT has a condition that is
            being treated by MEDIC; it does not represent or imply a
            long term doctor-patient relationship.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#clients"/>
        <rdfs:domain rdf:resource="#MedicalCareProvider"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasPortalToRegion">
        <rdfs:label xml:lang="en">has portal to region</rdfs:label>
        <rdfs:comment>ARG1 is connected to ARG2 through some type of
            portal (e.g. #$hasPortalToRegion (MyMasterBedroom MyMasterBathroom))</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasRooms">
        <rdfs:label xml:lang="en">room (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$hasRooms BUILD ROOM) means that the
            #$SpaceInAHOC ROOM is a room or demarcated space which is
            physically contained within the #$ConstructionArtifact
            BUILD, and that ROOM is not removable from BUILD.  Spaces
            that can be identified in this way include lobbies,
            hallways, kitchens, closets, dining rooms, gymnasia,
            studios, stairwells, and bedrooms.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#containsCavityWithWalls"/>
        <rdfs:subPropertyOf rdf:resource="#internalParts"/>
        <rdfs:domain rdf:resource="#ConstructionArtifact"/>
        <rdfs:range rdf:resource="#SpaceInAHOC"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasSameEntityAs">
        <rdfs:label xml:lang="en">has same entity as</rdfs:label>
        <rdfs:comment>(#$hasSameEntityAs X Y) indicates that X and Y are
            both subabstractions of the same #$Entity.  The unique
            #$Entity of which X is an #$entitySubAbstractions is the
            same as the unique #$Entity of which Y is an
            #$entitySubAbstractions.  For instance,
            AlbertEinsteinAsAnAdult and AlbertEinsteinWhileAtPrinceton
            are in this relationship.</rdfs:comment>
        <rdfs:domain rdf:resource="#SomethingExisting"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hasWorkers">
        <rdfs:label xml:lang="en">will employ</rdfs:label>
        <rdfs:comment>The predicate #$hasWorkers relates two instances
            of #$Agent.  (#$hasWorkers AGENT1 AGENT2) means that AGENT2
            regularly works for AGENT1.  This predicate can be used to
            relate a business to its employees, a master craftsman to
            his apprentices, or an organization to its subcontractors.
            Note that (#$hasWorkers AGENT1 AGENT2) does not necessarily
            imply that AGENT2 is an employee of AGENT1, since AGENT2 may
            be working voluntarily for AGENT1.  Note also that
            assertions using #$hasWorkers should usually be temporally
            qualified, since when one agent regularly works for another,
            that agent usually does so only for a portion of  his, her,
            or its life, rather than for all of it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#worksWith"/>
        <rdfs:subPropertyOf rdf:resource="#hasAgents"/>
        <rdfs:subPropertyOf rdf:resource="#receivesServicesFrom"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="headquarters">
        <rdfs:label xml:lang="en">headquarters (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$headquarters relates a particular
            organization to the construction artifact(s) which serve as
            its headquarters.  (#$headquarters ORG HEADQUARTERS) means
            that the #$ConstructionArtifact HEADQUARTERS (which
            typically will be a group of buildings, rooms, or offices)
            houses the main administrative and decision-making bodies of
            the #$Organization ORG.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalQuarters"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#ConstructionArtifact"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="headsPhraseOfType">
        <rdfs:label xml:lang="en">heads phrase of type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpeechPart"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hears">
        <rdfs:label xml:lang="en">hears</rdfs:label>
        <rdfs:comment>(#$hears AGT OBJ) means that the #$PerceptualAgent
            AGT perceives sounds emananating from or as the result of
            OBJ.  Events such as the shooting of a gun and tangible
            objects such as telephones are things which can emit audible
            sound and thus be perceived auditorily. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#perceives"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="heightOfObject">
        <rdfs:label xml:lang="en">stature (CycL predicate)</rdfs:label>
        <rdfs:comment>A #$PhysicalAmountSlot used for stating the
            heights of tangible objects and other (polydimensional)
            spatial things.  (#$heightOfObject OBJECT HEIGHT) means that
            the #$Distance (q.v.) from OBJECT&apos;s bottom boundary to
            its top boundary is HEIGHT.   Top  and  bottom  are often
            determined by an object&apos;s intrinsic default
            orientation, if it has one (see #$TopAndBottomSidedObject).
            But some objects have tops and bottoms -- and thus heights
            -- only by virtue of their spatial relations to certain
            other objects in their environments.  In any case, having a
            height requires being at least two-dimensional (see
            #$TwoOrHigherDimensionalThing).  See also #$lengthOfObject,
            #$widthOfObject, and #$depthOfObject.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#dimensionsOfObject"/>
        <rdfs:domain rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="highlyRelevantInEvent">
        <rdfs:label xml:lang="en">highly relevant in event</rdfs:label>
        <rdfs:comment>This predicate relates instances of #$Event to
            things that are highly relevant in the event, help to define
            the nature of the event, but play no direct role in carrying
            out the actual event. For instance, in a tribute to a dead
            person it may be the case that (#$highlyRelevantInEvent
            TributeToDeadPersonA PersonA), (but see the more specialized
            predicate, #$eventHonors).  This predicate should apply only
            to things that play some central, but indirect, role in an
            event, i.e. note that #$actors is a  genlPreds of this
            predicate.  Often this predicate applies to things that
            motivate the event in question.  Also note that it should
            help to distinguish the event from other events of a
            slightly more general type.  For instance, a particular kind
            of chair might be highly relevant in a chair buying event
            but the capitalist system is not.  Insofar as other shopping
            events also involve the capitalist system, the capitalist
            system does not distinguish the chair buying event from
            other shopping events.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="highlyRelevantPredAssertion">
        <rdfs:label xml:lang="en">highly relevant pred assertion</rdfs:label>
        <rdfs:comment>(#$highlyRelevantPredAssertion PREDICATE
            ASSERTION) states that the given ASSERTION should be
            heuristically considered highly relevant to inferences
            concluding uses of the given PREDICATE in the current mt.
            See also #$highlyRelevantAssertion and #$highlyRelevantMt.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hingedTo">
        <rdfs:label xml:lang="en">hinged to</rdfs:label>
        <rdfs:comment>(#$hingedTo OBJ1 OBJ2) means that there is some
            hinge connecting OBJ1 and OBJ2, allowing limited rotational
            motion (but no other sort of relative motion) between OBJ1
            and OBJ2.  The connecting hinge may be part of OBJ1, part of
            OBJ2, or separate from both OBJ1 and OBJ2. Note that
            (#$hingedTo OBJ1 OBJ2) implies that some edge of OBJ1
            adjoins some edge of OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#rotationallyConnectedTo"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="holdsIn">
        <rdfs:label xml:lang="en">holds in</rdfs:label>
        <rdfs:comment>A formula, without free variables, of the form
            (#$holdsIn TEMP-THING FORMULA) means that the formula
            FORMULA is true at every moment in the temporal extent of
            the #$TemporalThing TEMP-THING (i.e., every moment
            temporally subsumed by TEMP-THING).  For example, the
            assertion (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot))
            expresses that throughout all of the year 1992 Nick owned
            Spot.  Thus it follows, for example, that Nick owned Spot on
            July 5th, 1992 - that is, (#$holdsIn (#$DayFn 5 (#$MonthFn
            #$July (#$YearFn 1992))) (#$owns Nick Spot)).  An assertion
            of the form (#$holdsIn TEMP-THING (PRED ... ARG ...)), with
            ARG a #$TemporalThing, doesn&apos;t in general imply that
            ARG temporally subsumes or even temporally intersects
            TEMP-THING.  For example, (#$holdsIn (#$YearFn 1992)
            (#$awareOf Fred #$GeorgeWashington)) doesn&apos;t imply
            (#$temporallyIntersects #$GeorgeWashington (#$YearFn 1992)).
            However, in the case of certain predicates PRED, temporal
            subsumption of TEMP-THING by ARG will follow (in almost all
            microtheories); see #$CotemporalObjectsSlot,
            #$CotemporalPredicate, and #$contemporaryInArg.  Although
            what constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  That
            is, in the case of most microtheories, one almost never has
            to worry about assertions running into problems because of
            time intervals that are too small, and one doesn&apos;t have
            to worry about the possibility of gaps in the fabric of time
            between moments.  Note that the characterization above of
            the meaning of a closed formula (#$holdsIn TEMP-THING
            FORMULA) isn&apos;t meant to imply that one can&apos;t
            quantify into the argument-places of #$holdsIn.
            (Alternatively to using #$holdsIn, we could create a
            microtheory MT one of whose assumptions was a temporal one,
            limiting all axioms to holding throughout 1992 [i.e.,
            (#$holdsInTime-Always MT (#$YearFn 1992))].  Then in that
            microtheory we could simply assert (#$owns Nick Spot).  But
            it would be incorrect to assert (#$owns Nick Spot) in the
            #$BaseKB, since, for example, in 3500 BCE Nick didn&apos;t
            own Spot, nor when Nick was a baby did he own Spot, etc.)
            See also #$holdsSometimeDuring.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#holdsSometimeDuring"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="holdsInTime-Sometime">
        <rdfs:label xml:lang="en">holds in time - sometime</rdfs:label>
        <rdfs:comment>(#$holdsInTime-Sometime MT TIME) means that the
            assertions in the #$Microtheory MT are true sometime during
            the temporal extent of the #$TemporalThing TIME.  See also #$holdsInTime-Always.</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="holdsSometimeDuring">
        <rdfs:label xml:lang="en">holds sometime during</rdfs:label>
        <rdfs:comment>A formula, without free variables, of the form
            (#$holdsSometimeDuring TEMP-THING FORMULA) means that the
            formula FORMULA is true at some moment in the temporal
            extent of the #$TemporalThing TEMP-THING (i.e., some - at
            least one - moment temporally subsumed by TEMP-THING).  For
            example, the assertion (#$holdsSometimeDuring (#$MonthFn
            #$July (#$YearFn 1992)) (#$owns Nick Spot)) expresses that
            at some moment during July 1992 Nick owned Spot.  Thus it
            follows, for example, that at some moment during the year
            1992 Nick owned Spot - that is, (#$holdsSometimeDuring
            (#$YearFn 1992) (#$owns Nick Spot)).  An assertion of the
            form (#$holdsSometimeDuring TEMP-THING (PRED ... ARG ...)),
            with ARG a #$TemporalThing, doesn&apos;t in general imply
            that ARG temporally intersects TEMP-THING.  For example,
            (#$holdsSometimeDuring (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)) doesn&apos;t imply
            (#$temporallyIntersects #$GeorgeWashington (#$YearFn 1992)).
            However, in the case of certain predicates PRED, temporal
            intersection of TEMP-THING by ARG will follow; see
            #$CotemporalObjectsSlot, #$CotemporalPredicate, and
            #$contemporaryInArg.  Although what constitutes a moment can
            vary with context, for most microtheories explicit
            considerations of temporal granularity (in this sense)
            don&apos;t come into play.  That is, in the case of most
            microtheories, one almost never has to worry about
            assertions running into problems because of time intervals
            that are too small, and one doesn&apos;t have to worry about
            the possibility of gaps in the fabric of time between
            moments.  Note that the characterization above of the
            meaning of a closed formula (#$holdsSometimeDuring
            TEMP-THING FORMULA) isn&apos;t meant to imply that one
            can&apos;t quantify into the argument-places of
            #$holdsSometimeDuring.  (Alternatively to using
            #$holdsSometimeDuring, we could create a microtheory MT one
            of whose assumptions was a temporal one, limiting all axioms
            to holding at some moment during the year 1992 [i.e.,
            (#$holdsInTime-Sometime MT (#$YearFn 1992))].  Then in that
            microtheory we could simply assert (#$owns Nick Spot).  But
            it would be incorrect to assert (#$owns Nick Spot) in the
            #$BaseKB, since, for example, in 3500 BCE Nick didn&apos;t
            own Spot, nor when Nick was a baby did he own Spot, etc.)
            See also #$holdsIn.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="honorsThing">
        <rdfs:label xml:lang="en">honors thing</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$TemporalThing to instances of #$Thing. (#$honorsThing OBJ
            THING) means that OBJ commemorates or memorializes THING.
            This is a very general predicate which can be used to talk
            about monuments, holidays and many other things. For
            instance, (#$honorsThing #$StatueOfLiberty
            #$Freedom-Emotion). See also the more specialized
            #$artifactHonors and #$monumentHonors.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hostOfEvent">
        <rdfs:label xml:lang="en">host</rdfs:label>
        <rdfs:comment>(#$hostOfEvent GATHERING AGENT) means that AGENT
            is a host of the #$SocialGathering GATHERING.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#SocialGathering"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="hungerLevelOf">
        <rdfs:label xml:lang="en">hunger level of</rdfs:label>
        <rdfs:comment>The predicate #$hungerLevelOf is used to express
            how hungry an #$Animal is.  The first argument is a
            #$LevelOfHunger (q.v.):  for instance, #$Hungry, #$Starving,
            #$Stuffed.  The second argument is the #$Animal who feels
            hunger at this level.</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="iboCreated">
        <rdfs:label xml:lang="en">ibo created</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$IBOCreation to instances of #$InformationBearingObject.
            (#$iboCreated CREATION IBO) means that the tangible
            information-bearing object IBO is created in the event
            CREATION.  For example, my copy of today&apos;s morning
            newspaper was created during the previous night&apos;s
            paper-publishing event. If the  information-bearing object
            generated by CREATION is not a physical object (i.e. an
            instance of #$PartiallyTangible), use the less specific
            predicate #$ibtGenerated.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ibtGenerated"/>
        <rdfs:subPropertyOf rdf:resource="#outputsCreated"/>
        <rdfs:domain rdf:resource="#IBOCreation"/>
        <rdfs:range rdf:resource="#InformationBearingObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ibtGenerated">
        <rdfs:label xml:lang="en">ibt generated</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$IBTGeneration to instances of #$InformationBearingThing.
            (#$ibtGenerated GEN IBT) means that the
            #$InformationBearingThing IBT (be it a gesture, a novel, a
            picture projected on a screen or a computer program copy)
            comes into existence in, or as an immediate consequence of,
            the event GEN.  See also #$IBTGeneratedFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationDestination"/>
        <rdfs:domain rdf:resource="#IBTGeneration"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ibtUsed">
        <rdfs:label xml:lang="en">ibt used</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$Event to instances of #$InformationBearingThing.
            (#$ibtUsed EVENT IBT) means that IBT is directly used in
            EVENT in some way. For instance, EVENT might be the reading
            of a pamphlet and IBT might be the pamphlet read, or EVENT
            may be the installation of a computer program and IBT be the
            #$ComputerProgramCopy installed. See also the predicate
            #$informationUsed, which relates instances of #$Event to
            instances of #$AbstractInformationalThing.</rdfs:comment>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="identificationStrings">
        <rdfs:label xml:lang="en">identification strings</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate that relates instances of
            #$Thing to instances of #$IDString.
            (#$identificationStrings THING STRING) means that STRING is
            used somehow to identify THING. Its many notable
            specializations include #$constantID, #$taxIDNumber and
            #$computerIP. STRING may be a unique identifier for THING or
            it may be possible that more than one thing is identified by STRING.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#IDString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Among">
        <rdfs:label xml:lang="en">in - among</rdfs:label>
        <rdfs:comment>(#$in-Among OBJ GROUP) means that the
            #$PartiallyTangible OBJ is physically located within the
            tangible #$Group GROUP.  OBJ may (but need not) be a member
            of GROUP.  OBJ is spatially distinct (see the predicate
            #$spatiallyDisjoint) from any (other) group-member of GROUP.
            Examples: a bird in the branches of a tree would be
            #$in-Among those branches, and a zebra in its herd would be
            #$in-Among that herd.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ContClosed">
        <rdfs:label xml:lang="en">in - cont closed</rdfs:label>
        <rdfs:comment>(#$in-ContClosed OBJ CONT) means  that
            #$PartiallyTangible OBJ is completely contained within one
            or more cavities within #$SolidTangibleThing CONT, and that
            it is not possible for OBJ to leave CONT as an object
            without either the opening of a portal in CONT or the
            non-standard significant deformation of OBJ or CONT.  CONT
            need not have a portal.  Parts of OBJ may extend out through
            portals in CONT.  If OBJ can temporarily undergo (a not-too
            forceful) shape deformation in order to fit through a portal
            in CONT, then OBJ is not #$in-ContClosed with respect to
            CONT.  Positive examples include water in a bottle with a
            closed cap; a person in a closed jail cell sticking his arms
            through the bars; King Kong in a flimsy cage; a model of a
            ship in a bottle (where the model must be disassembled to
            force it out); egg yolk in an egg shell.  Negative examples
            include a morsel of bread in a prison cell (morsels are
            small enough to leave the cell by passing in between the
            bars of the cell -- use #$in-ContOpen); an egg yolk in an
            egg -- use #$internalParts; water in an open bottle (the
            necessary deformation is not forceful).   A positive
            borderline example is a skinny person in a jail cell who
            could just barely manage to squeeze through the bars (the
            necessary deformations, although self-imposed, would be
            abnormal and unexpected).  A negative borderline example is
            a spelunker who has crawled through a narrow passage into a
            cave (the deformations needed to get in (and therefore out)
            were self-imposed and not abnormal).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContCompletely"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ContCompletely">
        <rdfs:label xml:lang="en">in - cont completely</rdfs:label>
        <rdfs:comment>(#$in-ContCompletely OBJ CONT) means that OBJ is
            completely within one or more cavities in CONT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ContFullOf">
        <rdfs:label xml:lang="en">in - cont full of</rdfs:label>
        <rdfs:comment>(#$in-ContFullOf STUFF CONT) means that STUFF is
            the substance that fills the cavity/cavities of CONT.  STUFF
            is unique in that it is the only substance that `fills&apos;
            the cavity, even though other things may be within CONT
            (e.g., as #$in-ContGeneric).  Filling the container means
            that the inside surface of CONT touches the filling STUFF at
            virtually all points of CONT&apos;s inner surface, rather
            than touching whatever stuff CONT itself is immersed in and
            which CONT&apos;s outside surface touches (e.g., air).  The
            only thing which can override this #$touches (i.e., get
            alongside CONT&apos;s inside wall without being STUFF) would
            be some other object which is also in CONT (e.g., with
            #$in-ContGeneric).  In order to fill the container, STUFF
            must be #$Pourable or have a shape which conforms to the
            shape of CONT&apos;s cavity.  Cf. #$in-ContGeneric to cover
            cases of stuff which is in a container without filling it. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContCompletely"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ContGeneric">
        <rdfs:label xml:lang="en">in - cont generic</rdfs:label>
        <rdfs:comment>(#$in-ContGeneric OBJ CONT) means that OBJ is
            contained, confined, or held in CONT. OBJ is not a part of
            CONT.  CONT has a cavity (see #$CavityWithWalls) and OBJ is
            at least partly within (see #$spatiallyIntersects) the
            interior of this cavity. If CONT moves, OBJ is, by default,
            caused to move so as to remain within that cavity (see
            #$movesWith). If OBJ leaves the confines of CONT, then
            either OBJ passes through some appropriately sized portal of
            CONT, or OBJ breaks into smaller pieces that themselves pass
            through appropriately sized portals of CONT, or OBJ breaks
            through a wall of CONT.  CONT may function as an open or
            closed container with respect to objects of the size of OBJ.
            If CONT is closed with respect to OBJ, then #$in-ContClosed
            is the preferred more specific predicate. If CONT is open
            with respect to OBJ, #$in-ContOpen is preferred. If OBJ is a
            fluid which completely fills CONT (for example, a cup of
            coffee brimming over) then #$in-ContFullOf is more precise.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#movesWith"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyDisjoint"/>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ContOpen">
        <rdfs:label xml:lang="en">in - cont open</rdfs:label>
        <rdfs:comment>(#$in-ContOpen OBJ CONT) means that OBJ is
            contained in CONT -- CONT confines or holds OBJ in -- but
            OBJ can be  removed from CONT without having to either A)
            open any portals in CONT  B) break some part of CONT or C)
            break OBJ into smaller pieces such  that it can fit through
            some portal of CONT&apos;s.  Note that  (#$in-ContOpen OBJ
            CONT) is a relationship based on the size of OBJ  and the
            largest portal of CONT that OBJ might be able to traverse
            through.  For example, a paperclip might be #$in-ContOpen a
            jail cell even  though the person locked inside would be
            #$in-ContClosed the jail  cell.  This is because the paper
            clip is small enough to fit in  between the bars of the cell
            whereas the person is not.  See  #$portalState for
            vocabulary relating containers to whether its  portals are
            open or closed.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Embedded">
        <rdfs:label xml:lang="en">in - embedded</rdfs:label>
        <rdfs:comment>(#$in-Embedded OBJ1 OBJ2) means that some portion
            of OBJ1 is embedded in OBJ2 at least semi-permanently.  OBJ1
            is thus #$connectedTo OBJ2.  The remaining portion of OBJ1
            is not embedded in OBJ2. The #$in-Embedded relationship
            comes about during the formation of OBJ1 or OBJ2.  Examples:
            grass in the ground, hair in the scalp, or eyes in sockets.
            Also, OBJ1 is not beneath the surface of OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sticksInto"/>
        <rdfs:subPropertyOf rdf:resource="#connectedAtContact"/>
        <rdfs:subPropertyOf rdf:resource="#aligned"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Floating">
        <rdfs:label xml:lang="en">in - floating</rdfs:label>
        <rdfs:comment>(#$in-Floating OBJ LIQUID) means that the
            #$SolidTangibleThing OBJ is floating on the surface of the
            #$LiquidTangibleThing LIQUID.  Thus, (#$in-Floating OBJ
            LIQUID) implies that OBJ is buoyant and that OBJ is partly
            immersed (see the predicate #$in-ImmersedPartly) in LIQUID.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Touching"/>
        <rdfs:subPropertyOf rdf:resource="#in-ImmersedPartly"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#LiquidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Held">
        <rdfs:label xml:lang="en">in - held</rdfs:label>
        <rdfs:comment>(#$in-Held OBJ HOLDER) means that
            #$SolidTangibleThing OBJ is being held or restrained by the
            #$HolderGripper HOLDER, which is touching and applying
            pressure to OBJ.  HOLDER may be either a device used (see
            #$deviceUsed) or an anatomical part used (see
            #$anatomicalPartTypeAffected) in an instance of
            #$HoldingAnObject; in either case, OBJ would be the
            #$objectActedOn.  Examples  include salad held by tongs, a
            bread crumb in ant&apos;s pincers, a bird in a hand, and a
            long two-by-four in a vice.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#HolderGripper"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ImmersedFully">
        <rdfs:label xml:lang="en">in - immersed fully</rdfs:label>
        <rdfs:comment>(#$in-ImmersedFully OBJ FLUID) means that FLUID is
            the unique fluid in which OBJ is completely immersed.  Thus,
            as a default inference, every outside surface region of OBJ
            #$touches FLUID.  E.g., (live) fish are fully immersed in
            water, and people are usually immersed in air (even though
            the bottoms of their feet touch the ground and not the air).
            Examples like air bubbles in water or mercury globules
            immersed in air suggest that the #$arg1Isa should be kept
            general, i.e., #$PartiallyTangible rather than #$SolidTangibleThing.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ImmersedGeneric"/>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#FluidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ImmersedGeneric">
        <rdfs:label xml:lang="en">in - immersed generic</rdfs:label>
        <rdfs:comment>A #$SpatialPredicate that is a specialization of
            #$touches and (via  #$genlInverse) #$surroundsHorizontally.
            (#$in-ImmersedGeneric OBJ FLUID)  means that OBJ is immersed
            in FLUID.  OBJ might be completely or partially  immersed in
            FLUID, but FLUID must touch OBJ and must conform to a
            significant portion of the surface of OBJ.   See also the
            specializations #$in-ImmersedFully and #$in-ImmersedPartly.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#FluidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-ImmersedPartly">
        <rdfs:label xml:lang="en">in - immersed partly</rdfs:label>
        <rdfs:comment>(#$in-ImmersedPartly OBJ FLUID) means that a
            portion of OBJ is immersed in FLUID, but OBJ is not
            completely surrounded by FLUID.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ImmersedGeneric"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#FluidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Lodged">
        <rdfs:label xml:lang="en">in - lodged</rdfs:label>
        <rdfs:comment>(#$in-Lodged LODGER LODGEE) means that LODGER is
            lodged in LODGEE.  In particular, LODGER has been forced
            into LODGEE and is not a part of LODGEE.  There is a rigid
            connection between LODGEE and LODGER.  In typical cases, the
            outside end of LODGER is at the surface of LODGEE, or LODGER
            extends partially outside of LODGEE (see #$sticksInto).
            However, in certain exceptional cases, such as schrapnel
            deep in flesh, LODGEE in some cases may be lodged wholly
            inside of LODGER.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo-Rigidly"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Permeates">
        <rdfs:label xml:lang="en">in - permeates</rdfs:label>
        <rdfs:comment>(#$in-Permeates LIQUID SOLID)  means that LIQUID
            permeates SOLID.  LIQUID must be separable from SOLID  by
            physical, not chemical means.  LIQUID must be a
            #$LiquidTangibleThing, and SOLID a #$SolidTangibleThing.  If
            LIQUID is not a constituent (#$constituents) of SOLID, then
            SOLID is #$Porous.  Exemplars include water permeating a wet
            sponge (Sponge-CleaningImplement), #$Oil soaking a sponge,
            or water in #$Soil-Generic.  Negative exemplars include
            vapor suspended in #$Air  (see, e.g. #$suspendingFluid or
            #$solute) .  Other negative exemplars  include liquids which
            undergo a chemical change and combine with some  other
            substance, e.g. water which becomes a chemical part of plant
            material in photosynthesis.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#LiquidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Snugly">
        <rdfs:label xml:lang="en">in - snugly</rdfs:label>
        <rdfs:comment>(#$in-Snugly INNER OUTER) means that INNER is
            #$in-ContGeneric OUTER, that INNER #$touches OUTER, and that
            a #$FrictionProcess would be necessary for a
            #$RemovingSomething in which INNER is the #$objectMoving and
            OUTER is the #$fromLocation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="in-Spiked">
        <rdfs:label xml:lang="en">in - spiked</rdfs:label>
        <rdfs:comment>(#$in-Spiked SPIKE OBJ) means that SPIKE, an
            object with at least one sharp end, is lodged in OBJ, so
            that (#$in-Lodged SPIKE OBJ) holds.  Moreover, SPIKE is
            lodged in OBJ because a sharp end of SPIKE has pierced OBJ.
            For example, #$in-Spiked would hold between a tack lodged in
            a wall or a nail driven into a two-by-four.  Typically, the
            rigid connection between OBJ and SPIKE can support forces
            substantially greater than the weight of SPIKE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-Lodged"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inFrontOf-Directly">
        <rdfs:label xml:lang="en">in front of - directly</rdfs:label>
        <rdfs:comment>(#$inFrontOf-Directly FORE AFT) means that FORE is
            directly in front of tangible object AFT.  More precisely,
            it implies both (#$inFrontOf-Generally FORE AFT) and that
            there is at least one line parallel to the forward pointing
            axis of AFT that intersects both FORE and AFT.  FORE may be
            an intangible, such as an image projected onto a screen.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inFrontOf-Generally"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inFrontOf-Generally">
        <rdfs:label xml:lang="en">in front of - generally</rdfs:label>
        <rdfs:comment>(#$inFrontOf-Generally FORE AFT) means that FORE
            is in front of the tangible object AFT.  More precisely, the
            intrinsic back-to-front axis of AFT is within 45 degrees of
            some line intersecting both FORE and AFT.  Note that FORE
            may be an intangible spatial object, such as an image
            projected onto a screen.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inPlane">
        <rdfs:label xml:lang="en">in plane</rdfs:label>
        <rdfs:comment>(#$inPlane OBJ SURFACE) means that OBJ spatially
            intersects with the #$FlatSurface SURFACE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#FlatSurface"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inRegion">
        <rdfs:label xml:lang="en">in region</rdfs:label>
        <rdfs:comment>This is a general locative predicate that has a
            diverse group of specializations.  (#$inRegion OBJ1 OBJ2)
            means, roughly, that OBJ1 is located  at  or  in  OBJ2.
            OBJ1 might or might not be a part (see #$parts) of OBJ2.
            Certain important specializations (and
            inverse-specializations) of #$inRegion, however, differ on
            this point.  To take three examples: #$spatiallySubsumes is
            noncommital on the parthood issue, #$objectFoundInLocation
            implies that the  object  is _not_ a part of the  location ,
            while #$physicalDecompositions is a specialization of #$parts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#notFarFrom"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inboundLegOfRoundTrip">
        <rdfs:label xml:lang="en">inbound leg of round trip</rdfs:label>
        <rdfs:comment>(#$inboundLegOfRoundTrip TRIP INBOUND) means that
            the translational movement INBOUND is the final portion of
            the round-trip translation event TRIP.  In other words,
            INBOUND is the `return trip&apos; portion of TRIP.  During
            the INBOUND leg, the object moving in TRIP (see the
            predicate #$objectMoving) travels from the destination of
            TRIP (see the predicate #$destination-RoundTrip) back to its
            origin (see the predicate #$origin-RoundTrip).  Since the
            origin of TRIP is the ending point of INBOUND, it is related
            to INBOUND by #$toLocation (q.v.), and since the destination
            of TRIP is the starting point of INBOUND, it is related to
            INBOUND by #$fromLocation (q.v.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Translation-RoundTrip"/>
        <rdfs:range rdf:resource="#Translation-LocationChange"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="includedInIntervalType">
        <rdfs:label xml:lang="en">included in interval type</rdfs:label>
        <rdfs:comment>(#$includedInIntervalType SHORTER LONGER) means
            that for every instance X of SHORTER, there is an instance Y
            of LONGER such that (#$temporallySubsumes Y X) holds. Note
            that (#$includedInIntervalType SHORTER LONGER) does not
            necessarily entail (#$temporallySubsumes-TypeType LONGER
            SHORTER).  See also #$temporallySubsumes-TypeType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intersectsIntervalType"/>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="includedItems">
        <rdfs:label xml:lang="en">included items</rdfs:label>
        <rdfs:comment>The predicate #$includedItems is used to identify
            the peripheral items that come with a particular packaged
            product.  (#$includedItems FORM ITEM) means that the
            #$Individual ITEM is one of the things that are included in
            the #$FormalProduct FORM, along with its #$mainProduct; but
            ITEM is not the main product itself.  ITEM can be an
            accessory, owner&apos;s manual, warranty agreement, or
            included service.  ITEM is something that is a regular part
            of the package.  ITEM does NOT refer to free samples or
            extras thrown in--for that, see #$includesWithProductType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#PackagedProduct"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="income">
        <rdfs:label xml:lang="en">#$income</rdfs:label>
        <rdfs:comment>An instance of #$IntervalBasedQuantitySlot (q.v.)
            that is used to state the income or wage of a person or
            other agent in  terms of a #$MonetaryFlowRate (q.v.), such
            as #$DollarsPerYear or  #$DollarsPerHour.  (#$income AGENT
            RATE) means that AGENT has the income  or wage RATE.
            Normally, a agent&apos;s yearly earnings are described as
            income , while hourly earnings are called  wages ; the
            predicate  #$income encompasses both of these.</rdfs:comment>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#MonetaryFlowRate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="independentArg">
        <rdfs:label xml:lang="en">independent arg</rdfs:label>
        <rdfs:comment>A #$MetaPredicate that is used to state, of a
            given  (ternary) #$InterArgConstraintPredicate, that it is
            (always) used to constrain a relation in such a way that a
            certain specified argument-place of the relation is for the
            independent  argument (with respect to that constraint).
            (#$independentArg INT-ARG-PRED N) means that any sentence of
            the form (INT-ARG-PRED RELN ...) constrains RELN in some way
            that treats RELN&apos;s Nth argument as independent.  For
            example, (#$independentArg #$interArgIsa3-4 3) holds.  See
            the comment on #$InterArgConstraintPredicate for an
            explanation of what it means to be an  independent  argument
            in this sense.  Note that #$independentArg is contrained to
            apply only to _ternary_ inter-argument constraint
            predicates, as only they have already-fixed positions for
            the corresponding independent and dependent arguments; thus
            it cannot (on pain of semantic malformedness) be applied to
            the quintary inter-argument constraint predicates, such as #$interArgIsa.</rdfs:comment>
        <rdfs:domain rdf:resource="#TernaryPredicate"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="indexicalReferent">
        <rdfs:label xml:lang="en">indexical referent</rdfs:label>
        <rdfs:comment>(#$indexicalReferent INDCONCEPT THING) means that
            in the context of the assertion, the #$IndexicalConcept
            INDCONCEPT has the referent THING.  This is a
            #$FunctionalSlot, in keeping with the idea that the
            predicate will return one and only one &apos;value&apos; for
            the second argument place at any given point in context
            space.  However, be advised that the arg2 will change from
            context to context.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#equals"/>
        <rdfs:domain rdf:resource="#IndexicalConcept"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infectionCausedByOrganism">
        <rdfs:label xml:lang="en">infecting organism</rdfs:label>
        <rdfs:comment>This predicate relates a particular instance of
            #$Infection to an organism which causes that infection.
            (#$infectionCausedByOrganism INFECT ORG) means that the
            organism ORG is one of the causes of the infection INFECT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Infection"/>
        <rdfs:range rdf:resource="#Microorganism"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infectionHost">
        <rdfs:label xml:lang="en">host</rdfs:label>
        <rdfs:comment>This predicate relates a particular case of
            #$Infection to the organism it is infecting.
            (#$infectionHost INF ORG) means that INF is an #$Infection
            in which the host organism is ORG.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ailmentConditionAffects"/>
        <rdfs:domain rdf:resource="#Infection"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infinitive">
        <rdfs:label xml:lang="en">infinitive</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate relates #$LexicalWords (q.v.) to their
            corresponding infinitive verb forms.  (#$infinitive WORD
            STRING) means that STRING is an infinitive verb form of
            WORD.  But note that for the sake of convenience STRING does
            _not_ include the marker `to&apos; that is commonly given at
            the beginning of an (English) infinitive.  For example,
            #$infinitive relates #$Hit-TheWord simply to the string
            `hit&apos; (rather than `to hit&apos;).  Note also that, in
            the Knowledge Base (KB), the closed atomic sentences (i.e.
            GAF s) built with #$infinitive typically have #$SubLStrings
            (q.v.) as their second arguments, as indicated by a
            surrounding pair of double-quotation marks.  So the above
            example actually appears in the KB as `(#$infinitive
            #$Hit-TheWord  hit )&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#untensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="influencesAgent">
        <rdfs:label xml:lang="en">influences agent</rdfs:label>
        <rdfs:comment>(#$influencesAgent AGENT AFFECTED) means that
            AGENT influences the actions of AFFECTED. It does not imply
            that there is a present action of AFFECTED that can be
            explained by the influence of AGENT.  For example,
            (#$influencesAgent TEACHER STUDENT) can true over the period
            of a semester when only of some the student&apos;s actions
            can be explained by the influence of the teacher. In the
            defining context for this predicate, we do not give any
            examples intended to distinguish the minimum amount and
            frequency of influence that is sufficient for this predicate
            to apply at a given interval of time.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#ableToAffect"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infoAdded">
        <rdfs:label xml:lang="en">info added</rdfs:label>
        <rdfs:comment>(#$infoAdded UPDATE INFO) means that the
            #$AbstractInformationalThing INFO is added to an instance of
            #$InformationBearingObject (q.v.) in the
            #$InformationUpdating UPDATE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#infoTransferred"/>
        <rdfs:domain rdf:resource="#InformationUpdating"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infoRemoved">
        <rdfs:label xml:lang="en">info removed</rdfs:label>
        <rdfs:comment>(#$infoRemoved CHANGE INFO) means that in the
            #$InformationUpdating action, CHANGE, INFO was removed from
            the IBO (#$InformationBearingObject) acted on.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#infoTransferred"/>
        <rdfs:domain rdf:resource="#InformationUpdating"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="infoTransferred">
        <rdfs:label xml:lang="en">info transferred</rdfs:label>
        <rdfs:comment>A #$BinaryRolePredicate that is used to specify
            some or all of the  meaningful content of a particular
            transferral of information (see
            #$InformationTransferEvent).  (#$infoTransferred TRANSFER
            INFO) means  that INFO is information (see
            #$AbstractInformationalThing) that is  transferred due to
            TRANSFER.  INFO originates (see #$informationOrigin) from
            some agent or #$InformationBearingThing (IBT) and, after
            TRANSFER,  is had by another agent or is contained in
            another IBT (see  #$informationDestination); INFO may
            persist in the origin as well.  For example, when I read the
            front page of the newspaper, some  information about current
            world events is transferred from the  newspaper to me.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constituentInSituation"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="informStatement">
        <rdfs:label xml:lang="en">inform statement</rdfs:label>
        <rdfs:comment>A #$MicrotheoryDesignatingPredicate and a
            specialization of #$ist (q.v.) that relates a given
            information                    context, or  PIT  (see
            #$PropositionalInformationThing), to any sentence
            that is true in that context.  (#$informStatement PIT SENT)
            means that SENT                    is true in PIT: SENT is
            asserted either in PIT itself or in some more general
            microtheory MT such that (#$genlMt PIT MT) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ist"/>
        <rdfs:subPropertyOf rdf:resource="#ist-Information"/>
        <rdfs:domain rdf:resource="#PropositionalInformationThing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="informationDestination">
        <rdfs:label xml:lang="en">information destination</rdfs:label>
        <rdfs:comment>A specialization of both #$informationTerminal and
            #$to-Generic that is used to  indicate where information is
            transferred in a given #$InformationTransferEvent.
            (#$informationDestination TRANSFER DESTINATION) means that
            in TRANSFER, the  information being transferred is sent to,
            given to, or impressed upon DESTINATION. DESTINATION is
            typically either an #$InformationBearingThing (at least upon
            the completion of TRANSFER, if not before) or an agent; but
            note that  in the latter case one would normally use the
            more specific predicate  #$recipientOfInfo.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#to-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#informationTerminal"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="informationOrigin">
        <rdfs:label xml:lang="en">information origin</rdfs:label>
        <rdfs:comment>A specialization of #$informationTerminal  (q.v.)
            that is used to indicate the source of information for a
            particular  #$InformationTransferEvent (q.v.).
            (#$informationOrigin TRANSFER ORIGIN)  means that the
            information being transferred in TRANSFER comes from ORIGIN.
            ORIGIN is either an instance of #$InformationBearingThing or
            an agent.   Note that if ORIGIN still exists after the
            ending of TRANSFER, it  presumably also still contains the
            information that was transferred.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#from-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#informationTerminal"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="informationTerminal">
        <rdfs:label xml:lang="en">information terminal</rdfs:label>
        <rdfs:comment>This predicate is used to indicate any instance of
            #$TemporalThing the plays            the role of either
            #$informationDestination or #$informationOrigin in any
            instance of #$InformationTransferEvent, i.e. plays the role
            of endpoint.  (#$informationTerminal TRANS THING)
            means the #$TemporalThing THING was either the origin or
            destination            of the #$InformationTransferEvent TRANS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#terminalOfTrans-Generic"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="informationUsed">
        <rdfs:label xml:lang="en">information used</rdfs:label>
        <rdfs:comment>(#$informationUsed EVENT INFO) means that INFO
            plays an instrumental role in EVENT, serving the purpose of
            some agent.  For example, the  doer  of EVENT may use INFO
            to initiate or guide EVENT or one of its subevents (as when
            someone uses a computer program to compose a document).  Or
            the  doer  of EVENT may be guided in EVENT by INFO (as when
            someone follows instructions). See also the predicate
            #$ibtUsed, which relates instances of #$Event to instances
            of #$InformationBearingThing.</rdfs:comment>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ingredients">
        <rdfs:label xml:lang="en">ingredient (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$ingredients is used to indicate a
            particular input used to make a particular artifact.
            (#$ingredients ART INGR) means that the #$PartiallyTangible
            thing INGR was one of the #$inputs to the creation of the
            #$Artifact ART, and INGR (or matter derived from it) is one
            of ART&apos;s #$physicalParts.    This is a general
            predicate that usually can be stated in a more specific
            manner.  For example: #$ingredients-Separable applies only
            to those inputs which retain their identity in the creation
            process and which are incorporated into the resulting
            #$Artifact; #$ingredients-Constituent applies to ingredients
            that permiate the resulting #$Artifact; and
            #$ingredients-Destroyed refer to ingredients that have been
            transformed in the creation process.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#Artifact"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inhabitantTypes">
        <rdfs:label xml:lang="en">inhabitant types</rdfs:label>
        <rdfs:comment>The predicate #$inhabitantTypes relates an
            instance of #$GeographicalRegion to a specialization of
            #$Person.  (#$inhabitantTypes REGION TYPE) means that TYPE
            is one of the primary types of people living in the
            #$GeographicalRegion REGION.  TYPE may be based on
            ethnicity, nationality, age, economics -- in short, on any
            demographic class.  For example, (#$inhabitantTypes
            #$UnitedStatesOfAmerica #$AdultMiddleClassAmerican),
            (#$inhabitantTypes #$UnitedStatesOfAmerica
            #$WorkingAdultAmericanWoman), (#$inhabitantTypes
            #$UnitedStatesOfAmerica #$MexicanImmigrantToUSA).</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="initialParameterValue">
        <rdfs:label xml:lang="en">initial parameter value</rdfs:label>
        <rdfs:comment>A specialization of the binary predicate
            #$softwareParameterValue. (#$initialParameterValue PARAM
            VALUE) means that  PARAM begins execution of a
            #$ComputerProcessRunning with the value VALUE in the current context.</rdfs:comment>
        <rdfs:domain rdf:resource="#SoftwareParameter"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="initialismString">
        <rdfs:label xml:lang="en">initialism</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$initialismString THING STRING) means that THING may be
            referred to by the initialism STRING. This is a special case
            of #$acronymString where the string is formed by the first
            letters of each word; also, the string generally isn&apos;t
            pronounced as a word.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#acronymString"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="initialsString">
        <rdfs:label xml:lang="en">initials</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$initialsString AGENT STRING) means that AGENT may be
            referred to by the initials STRING. This is a special case
            of #$initialismString where the agent is a human (or is
            anthropomorphized as in fiction).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#initialismString"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#Abbreviation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inputs">
        <rdfs:label xml:lang="en">input</rdfs:label>
        <rdfs:comment>This predicate is an #$ActorSlot that relates a
            given event to an object or material that is used in that
            event and thereby either  used up  (i.e. destroyed) or
            incorporated into another object. (#$inputs EVENT OBJECT)
            means that OBJECT is a pre-existing participant in (see
            #$preActors) the #$CreationOrDestructionEvent EVENT which,
            during and due to EVENT, is either destroyed (see
            #$inputsDestroyed) or incorporated into a new entity (see
            #$inputsCommitted).  For example, the pigments used to paint
            the Mona Lisa were #$inputs to Leonardo&apos;s painting
            process; however, his brushes were not #$inputs, even though
            they were changed a little by it.  In general, in instances
            of #$Manufacturing, materials or objects are inputs if they
            find their way into the product manufactured or if they are
            destroyed in the manufacturing process (e.g. the coke used
            in manufacturing steel).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inputsCommitted">
        <rdfs:label xml:lang="en">input incorporated into the end result</rdfs:label>
        <rdfs:comment>The predicate #$inputsCommitted is used when some
            #$inputs to a particular event is incorporated into some
            #$outputs of that event, but remains recognizable rather
            than being destroyed.  (#$inputsCommitted EVENT OBJECT)
            means that OBJECT exists before EVENT and continues to exist
            afterwards, and as a result of EVENT, OBJECT becomes
            incorporated into something created during EVENT.  Once
            incorporated into the output of EVENT, OBJECT can&apos;t be
            independently incorporated in any other creation event.  For
            example, bricks that are used to build a wall continue to
            exist as bricks once the wall has been built.  While a part
            of the wall, a brick cannot be used as an independent input
            in another creation event. (See also #$outputsCreated.)
            Note: there is a grey area between #$inputsCommitted and
            #$inputsDestroyed; the less possible it is to take apart the
            relevant #$outputs of EVENT and get OBJECT back as an
            independent thing, the more likely it is that the
            relationship between EVENT and OBJECT should be
            #$inputsDestroyed, rather than #$inputsCommitted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#inputs"/>
        <rdfs:subPropertyOf rdf:resource="#commitsForFutureUses"/>
        <rdfs:domain rdf:resource="#CreationEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inputsDestroyed">
        <rdfs:label xml:lang="en">thing destroyed</rdfs:label>
        <rdfs:comment>The predicate #$inputsDestroyed is used to relate
            a particular event to the items which are destroyed by it.
            (#$inputsDestroyed EVENT OBJECT) means that OBJECT exists
            before EVENT, is affected by EVENT, and due to that
            involvement, the entity ENTITY such that
            (#$entitySubAbstractions OBJECT ENTITY) ends its existence
            as an #$Entity sometime during EVENT. (As does the OBJECT as
            its present instantiation of #$SomethingExisting.)  For
            instance, suppose  (#$inputsDestroyed AppleEatingEvent001
            RedApple001), then the SomethingExisting, RedApple001 is
            destroyed in the event and, as importantly, so is the apple
            entity of which the red apple is a subabstraction. OBJECT
            may or may not be a #$deliberateActors in EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inputs"/>
        <rdfs:subPropertyOf rdf:resource="#damages"/>
        <rdfs:domain rdf:resource="#DestructionEvent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instanceElementType">
        <rdfs:label xml:lang="en">instance element type</rdfs:label>
        <rdfs:comment>(#$instanceElementType SET-TYPE COLLECTION) states
            that every element of every instance of SET-TYPE is an
            instance of COLLECTION. For example, (#$instanceElementType
            #$Set-Mathematical #$Thing).  See #$typeGenls for a
            predicate which states a similar relationship for a
            collection of collections rather than a collection of sets.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instanceListLength">
        <rdfs:label xml:lang="en">instance list length</rdfs:label>
        <rdfs:comment>(#$instanceListLength LIST-TYPE N) states that
            every list which is an instance of LIST-TYPE will contain
            exactly N elements.  For example, (#$instanceListLength
            (#$ListOfLengthFn 2) 2).</rdfs:comment>
        <rdfs:domain rdf:resource="#ObjectType"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instantiationOfWork">
        <rdfs:label xml:lang="en">instantiation of work</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate which relates instances of
            #$InformationStore to instances of #$DevisedPracticeOrWork.
            (#$instantiationOfWork IS WORK) means that IS is an
            instantiation of the #$DevisedPracticeOrWork, WORK. Roughly,
            this is the relation that holds between any event or object
            (for instance, a particular copy of the novel _Moby_Dick_)
            and any #$DevisedPracticeOrWork  embodied  in this event or
            object (for instance, the novel _Moby_Dick_ considered qua
            artistic creation and independently of any printed copy of
            it). Examples of pairs to which this predicate applies
            include; any #$BookCopy and any #$Book-CW of which it is a
            copy; any #$GameEvent and any #$Game which the #$GameEvent
            is the playing of; any #$Medal-Physical and any
            #$AwardPractice (like an #$OlympicGoldMedal) which that
            #$Medal-Physical embodies. See also #$instantiationOfAIT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#containsInformation"/>
        <rdfs:domain rdf:resource="#InformationBearingThing"/>
        <rdfs:range rdf:resource="#DevisedPracticeOrWork"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instructionsFollowed">
        <rdfs:label xml:lang="en">instructions followed</rdfs:label>
        <rdfs:comment>This predicate relates acts in which an agent
            follows a set of instructions to the instructions that agent
            follows. (#$instructionsFollowed FOLLOWING INSTRUCTIONS)
            means that  FOLLOWING involves some agent purposefully and
            accurately following INSTRUCTIONS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationUsed"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Instructions"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instrument-Generic">
        <rdfs:label xml:lang="en">instrumental</rdfs:label>
        <rdfs:comment>The predicate #$instrument-Generic is used to link
            a particular event to any of the objects which play an
            instrumental role in it.  (#$instrument-Generic EVENT
            OBJECT) means that OBJECT plays an intermediate causal role
            in EVENT, facilitating the occurrence of EVENT, and serving
            some purpose of some #$Agent.  This can happen in at least
            two ways: either the `doer&apos; of EVENT acts on OBJECT,
            which in turn acts on something else (as when someone uses a
            hammer to pound in a nail) or the `doer&apos; of EVENT acts
            on something, making it possible for OBJECT to act on that
            thing (as when someone puts wet clothes out in the sun to
            dry).  Typically, an #$instrument-Generic is not
            significantly altered by playing that role in an event.
            #$deviceUsed is an important specialization of #$instrument-Generic.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:subPropertyOf rdf:resource="#instrumentalRole"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instrumentType-Generic">
        <rdfs:label xml:lang="en">instrument type - generic</rdfs:label>
        <rdfs:comment>(#$instrumentType-Generic EVT TYPE) says that some
            instance(s) of TYPE were used during EVT.  In other words,
            (#$relationInstanceExists #$instrument-Generic EVT TYPE).
            This is an extremely general predicate. Whenever possible,
            one of  the spec preds, #$objectTypeUsed or #$stuffTypeUsed
            should be used.</rdfs:comment>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="instrumentalRole">
        <rdfs:label xml:lang="en">instrumental role</rdfs:label>
        <rdfs:comment>This predicate is a generalization of
            #$instrument-Generic  that relates an event (or other
            temporal situation) to an   individual that plays an
            instrumental role in it (or in bringing   it about).
            (#$instrumentalRole SIT INSTR) means that INSTR  is used (in
            a broad sense of `used&apos;) by the  doer  DOER of SIT  in
            order to  do  (or bring about) SIT.  DOER will usually (but
            not necessarily) be an #$Agent-Generic.  If SIT is an
            #$Event,   DOER is s/he who (or that which) fills the
            #$doneBy actor slot   with respect to SIT.  If SIT is a
            #$StaticSituation, DOER is   somebody who (or something
            that) is both a primary   #$constituentInSituation of SIT
            and has played a salient causal   role in bringing SIT about
            (see #$causalActors).  Consider a   situation of George W.
            Bush napping on his cot; whether this is   construed as an
            event or as a static situation, Bush would be its    doer
            in the present sense and the cot would be playing an
            #$instrumentalRole.  If SIT is an event and INSTR is
            partially   tangible, use #$instrument-Generic or a
            specialization thereof.    But if SIT is a static situation
            or INSTR is an intangible   individual (such as a
            #$CommunicationConvention or a #$Letter-CW),
            #$instrumentalRole itself might need to be used.  For a
            type-level   version of this predicate, see #$instrumentalRole-Type.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constituentInSituation"/>
        <rdfs:domain rdf:resource="#Situation-Temporal"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intangibleComponent">
        <rdfs:label xml:lang="en">intangible component</rdfs:label>
        <rdfs:comment>(#$intangibleComponent WHOLE PART) means that PART
            is the entire intangible part of the
            #$CompositeTangibleAndIntangibleObject WHOLE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intangibleParts">
        <rdfs:label xml:lang="en">intangible parts</rdfs:label>
        <rdfs:comment>(#$intangibleParts WHOLE PART) means that PART is
            one of the intangible parts of WHOLE.  To relate something
            with both tangible and intangible parts to its entire
            intangible extent, use the specialization #$intangibleComponent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:range rdf:resource="#IntangibleIndividual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="integerRange">
        <rdfs:label xml:lang="en">integer range</rdfs:label>
        <rdfs:comment>(#$integerRange INTEGER-TYPE SCALAR-INTERVAL)
            states that the quantity SCALAR-INTERVAL represents the
            range of the collection of integers INTEGER-TYPE.  For
            example, (#$integerRange (#$IntegerFromFn 1 10) (#$Unity 1 10)).</rdfs:comment>
        <rdfs:domain rdf:resource="#IntegerTypeByRange"/>
        <rdfs:range rdf:resource="#IntervalOnNumberLine"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intendedAudience">
        <rdfs:label xml:lang="en">audience (CycL predicate)</rdfs:label>
        <rdfs:comment>A binary predicate relating instances of
            #$InformationBearingThing to instances of #$Agent.
            (#$intendedAudience IBT AGT) means that the
            #$InformationBearingThing IBT has the #$Agent AGT as its
            intended audience--viewer, reader, listener, etc.  AGT
            (possibly along with other agents) is supposed to access the
            information represented in IBT.  For example, the
            #$intendedAudience of a personal letter is usually its
            addressee. Note that AGT is not necessarily an individual
            person, since the collection #$Agent includes organizations
            also. Note that this predicate differs from
            #$informationDestination and its specializations such as
            #$recipientOfInfo-Intended in that these relate instances of
            #$InformationTransferEvent (not instances of
            #$InformationBearingThing) to instances of #$Agent. See also #$intendedAudienceType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#InformationBearingThing"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intendedAudienceType">
        <rdfs:label xml:lang="en">intended audience type</rdfs:label>
        <rdfs:comment>The predicate #$intendedAudienceType indicates the
            type of agents who are the intended recipients of certain
            information.  (#$intendedAudienceType AIT TYPE) means that
            agents who are instances of TYPE are in the intended
            audience of the particular #$AbstractInformationalThing AIT.
            Examples: the #$intendedAudienceType for the information in
            a copy of `AMA Journal&apos; is the collection of American
            physicians; the #$intendedAudienceType of TV commercials for
            sugary packaged cereals are those members of #$HumanChild
            living in the broadcast area. See also #$intendedAudience,
            which relates #$InformationBearingThings to particular
            agents (not to agent types).</rdfs:comment>
        <rdfs:domain rdf:resource="#AbstractInformationalThing"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intendedForUseBy">
        <rdfs:label xml:lang="en">intended for use by</rdfs:label>
        <rdfs:comment>(#$intendedForUseBy PROD TYPE) means that the
            #$Product PROD is intended to be used by individuals of the
            #$ExistingObjectType TYPE, where TYPE must be a
            subcollection of #$Organism-Whole.  E.g., many types of
            products are only for use by adults, by women, by dogs, etc.
            Note:  This is a good example of a predicate which is
            redundant but useful.  `Redundant&apos; means that any
            assertion one states using #$intendedForUseBy could be
            stated, albeit less tersely, using other, more basic
            predicates in the KB, in this case #$intends and
            #$usesObject.  Often, a huge number of axioms can be
            drastically shortened by introducing such a redundant
            predicate, and writing axioms that define it in terms of the
            more-basic predicates.</rdfs:comment>
        <rdfs:domain rdf:resource="#Product"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intends">
        <rdfs:label xml:lang="en">will intend</rdfs:label>
        <rdfs:comment>This predicate can be used to state some
            particular thing that a given intelligent agent intends or
            has in mind as a purpose, represented as a propositional
            attitude. (#$intends AGENT SENT) means that AGENT intends
            the proposition PROP expressed by SENT to become (or remain)
            true. This implies that AGENT believes s/he has at least
            some degree of influence or control over bringing about (or
            maintaining) the truth of PROP.  While this predicate is
            obviously similar to #$goals (q.v.), AGENT&apos;s intending
            PROP is likely to be more short-term and event-centered ( I
            did it because I intended that... ) and more mechanically
            satisfied ( I intend to turn off the lamp ) than any of
            AGENT&apos;s goals. You may intend to turn off the lamp, but
            it would be odd to call that one of your goals.  For a
            similar predicate that represents intending in relation to
            types of temporal situations, see #$intends-SitType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#desires"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln1-2">
        <rdfs:label xml:lang="en">inter arg reln 1 - 2</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln1-2 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the first and second arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ..) is
            semantically well-formed only if (BINPRED ARG1 ARG2) holds.
            For example, (#$interArgReln1-2 #$relativePosition
            #$cotemporal) means that the first and second arguments in
            #$relativePosition assertions must be cotemporal.  For an
            explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its direct specializations.
            See also the more general quaternary predicate
            #$interArgReln, which has two argument-places for specifying
            the pair of RELN&apos;s arguments that must be related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln1-3">
        <rdfs:label xml:lang="en">inter arg reln 1 - 3</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln1-3 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the first and third arguments to RELN (in that order) in the
            GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ..) is
            semantically well-formed only if (BINPRED ARG1 ARG3) holds.
            For further explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its direct specializations.
            See also the more general quaternary predicate
            #$interArgReln, which has two argument-places for specifying
            the pair of RELN&apos;s arguments that must be related by
            BINPRED.  If the relationship between the first and third
            argument is not a constraint, but should be inferred, use
            the related predicate: #$interArgReln-Inferred.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln1-4">
        <rdfs:label xml:lang="en">inter arg reln 1 - 4</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln1-4 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the first and fourth arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG1 ARG4)
            holds.  For further explanation of semantic well-formedness,
            see #$CycLExpression-Assertible and its direct
            specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln2-1">
        <rdfs:label xml:lang="en">inter arg reln 2 - 1</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln2-1 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the second and first arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ..) is
            semantically well-formed only if (BINPRED ARG2 ARG1) holds.
            For example, (#$interArgReln2-1
            #$testFollowUpWithSubstitutions #$genlMt) means that the
            arg2 and arg1 of a #$testFollowUpWithSubstitutions assertion
            must be related by #$genlMt.  For further explanation of
            semantic well-formedness, see #$CycLExpression-Assertible
            and its direct specializations. See also the more general
            quaternary predicate #$interArgReln, which has two
            argument-places for specifying the pair of RELN&apos;s
            arguments that must be related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln2-3">
        <rdfs:label xml:lang="en">inter arg reln 2 - 3</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln2-3 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the second and third arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ..) is
            semantically well-formed only if (BINPRED ARG2 ARG3) holds.
            For further explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its direct specializations.
            See also the more general quaternary predicate
            #$interArgReln, which has two argument-places for specifying
            the pair of RELN&apos;s arguments that must be related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln2-4">
        <rdfs:label xml:lang="en">inter arg reln 2 - 4</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln2-4 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the second and fourth arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG2 ARG4)
            holds.  For further explanation of semantic well-formedness,
            see #$CycLExpression-Assertible and its direct
            specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln3-1">
        <rdfs:label xml:lang="en">inter arg reln 3 - 1</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln3-1 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the third and first arguments to RELN (in that order) in the
            GAF/NAT.  That is, a formula (RELN ARG1 ARG2 arg3 ..) is
            semantically well-formed only if (BINPRED ARG3 ARG1) holds.
            For further explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its direct specializations.
            See also the more general quaternary predicate
            #$interArgReln, which has two argument-places for specifying
            the pair of RELN&apos;s arguments that must be related by
            BINPRED.  Use #$interArgReln-Inferred to conclude that
            (BINPRED ARG3 ARG1) holds.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln3-2">
        <rdfs:label xml:lang="en">inter arg reln 3 - 2</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln3-2 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the third and second arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ..) is
            semantically well-formed only if (BINPRED ARG3 ARG2) holds.
            For further explanation of semantic well-formedness, see
            #$CycLExpression-Assertible and its direct specializations.
            See also the more general quaternary predicate
            #$interArgReln, which has two argument-places for specifying
            the pair of RELN&apos;s arguments that must be related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln3-4">
        <rdfs:label xml:lang="en">inter arg reln 3 - 4</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln3-4 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the third and fourth arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG3 ARG4)
            holds.  For example, (#$interArgReln3-4
            #$candidateEngagementAreaOfCOAForForces #$opponents) means
            that the arg3 and arg4 in a
            #$candidateEngagementAreaOfCOAForForces assertion must be
            opponents.  For further explanation of semantic
            well-formedness, see #$CycLExpression-Assertible and its
            direct specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln4-1">
        <rdfs:label xml:lang="en">inter arg reln 4 - 1</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln4-1 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the fourth and first arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG4 ARG1)
            holds.  For further explanation of semantic well-formedness,
            see #$CycLExpression-Assertible and its direct
            specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln4-2">
        <rdfs:label xml:lang="en">inter arg reln 4 - 2</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln4-2 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the fourth and second arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG4 ARG2)
            holds.  For further explanation of semantic well-formedness,
            see #$CycLExpression-Assertible and its direct
            specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interArgReln4-3">
        <rdfs:label xml:lang="en">inter arg reln 4 - 3</rdfs:label>
        <rdfs:comment>A binary #$InterArgRelnPredicate (q.v.).
            (#$interArgReln4-3 RELN BINPRED) means that a formula built
            from RELN (i.e. a  GAF  or  NAT ; see
            #$CycLClosedAtomicSentence and  #$CycLClosedNonAtomicTerm)
            is semantically well-formed only if BINPRED holds between
            the fourth and third arguments to RELN (in that order) in
            the GAF/NAT.  That is, a formula (RELN ARG1 ARG2 ARG3 ARG4
            ..) is semantically well-formed only if (BINPRED ARG4 ARG3)
            holds.  For further explanation of semantic well-formedness,
            see #$CycLExpression-Assertible and its direct
            specializations. See also the more general quaternary
            predicate #$interArgReln, which has two argument-places for
            specifying the pair of RELN&apos;s arguments that must be
            related by BINPRED.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interests-Prop">
        <rdfs:label xml:lang="en">interests - prop</rdfs:label>
        <rdfs:comment>(#$interests-Prop AGENT PROP) means that in the
            context of the assertion, AGENT has a substantial stake in
            whether PROP is true or false.  The interest may be
            &apos;pro&apos; or &apos;con&apos;--i.e., AGENT may want
            PROP to be true or AGENT may want PROP to be false.  What is
            required is that agent care strongly about what the
            truth-value is.  AGENT may be justified in doing so or not.
            #$interests-Prop is one of the weakest instances of
            #$PropositionalAttitudeSlot, and features several stronger
            predicates as specializations, notably #$biases, #$desires,
            #$intends, and #$goals.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:subPropertyOf rdf:resource="#awareOfProp"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="internalParts">
        <rdfs:label xml:lang="en">interior (CycL predicate)</rdfs:label>
        <rdfs:comment>A #$PhysicalPartPredicate and a specialization of
            both #$physicalParts  and #$physicallyContains (qq.v.).
            (#$internalParts OBJ PART) means that  OBJ has PART as one
            of its internal physical parts.  That is, PART is  totally
            inside OBJ and is part of OBJ.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicallyContains"/>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="internalSubRegions">
        <rdfs:label xml:lang="en">internal sub regions</rdfs:label>
        <rdfs:comment>(#$internalSubRegions REGION INTERNALREGION) means
            that INTERNALREGION is a subregion of REGION which does not
            border on anything outside of REGION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subRegions"/>
        <rdfs:domain rdf:resource="#Surface-Generic"/>
        <rdfs:range rdf:resource="#Surface-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="internationalOrganizationMemberCountries">
        <rdfs:label xml:lang="en">international organization member countries</rdfs:label>
        <rdfs:comment>This predicate relates international organizations
            to countries that belong to them.
            (#$internationalOrganizationMemberCountries ORG NATION)
            means that NATION (as represented by its national government
            or other legally designated body) is a member of the
            #$InternationalOrganizationOfCountries ORG.  For example,
            #$Bahrain is an #$internationalOrganizationMemberCountries
            of the #$LeagueOfArabStates and of the
            #$UnitedNationsOrganization, and #$China-PeoplesRepublic is
            a #$internationalOrganizationMemberCountries of the
            #$UnitedNationsOrganization but #$Taiwan-RepublicOfChina is not.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasMembers"/>
        <rdfs:domain rdf:resource="#InternationalOrganizationOfCountries"/>
        <rdfs:range rdf:resource="#Country"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intersectionType">
        <rdfs:label xml:lang="en">intersection type</rdfs:label>
        <rdfs:comment>(#$intersectionType FUNC COL) states that each use
            of the unary function FUNC denotes a collection which is the
            intersection of COL and arg 1 of the use of the function.
            For example, (#$intersectionType #$JuvenileFn
            #$JuvenileAnimal) implies that the non-atomic term
            (#$JuvenileFn #$Dog) denotes the collection which is the
            intersection of #$JuvenileAnimal and #$Dog.  See also
            #$UnaryIntersectionFunction, #$collectionIntersection and #$resultGenl.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnaryIntersectionFunction"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intersectsIntervalType">
        <rdfs:label xml:lang="en">intersects interval type</rdfs:label>
        <rdfs:comment>A binary predicate that relates a specialization
            of #$TemporalThing to another specialization of
            #$TemporalThing. (#$intersectsIntervalType X Y) indicates
            that every instance of X #$temporallyIntersects some
            instance Y.  For example (#$intersectsIntervalType #$January
            #$Wednesday) means that every January overlaps some
            Wednesday.This relation, #$intersectsIntervalType, is
            neither commutative -- (#$intersectsIntervalType #$January
            #$Wednesday) but not (#$intersectsIntervalType #$Wednesday
            #$January) -- nor transitive  -- both
            (#$intersectsIntervalType #$CalendarSummer #$June) and
            (#$intersectsIntervalType #$June #$CalendarSpring) may be
            true even though (#$intersectsIntervalType #$CalendarSummer
            #$CalendarSpring) is not true.</rdfs:comment>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intersectsWith">
        <rdfs:label xml:lang="en">intersects with</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlot that relates collections whose
            extents (see #$extent) intersect or overlap.
            (#$intersectsWith COL1 COL2)   means that COL1 and COL2 have
            at least one instance in common.    Note that this predicate
            is _not_ reflexive: it is trivially   possible for a
            #$Collection to fail to intersect with itself,   though only
            if it is empty (i.e. has no instances).  Thus, for
            example, (#$intersectsWith #$Nothing #$Nothing) _fails_ to
            hold.  Cf. #$disjointWith.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intervalBound">
        <rdfs:label xml:lang="en">interval bound</rdfs:label>
        <rdfs:comment>(#$intervalBound INT BOUND) means that either the
            upper or the lower bound - or both - of INT is BOUND.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#quantityIntersects"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intervalEndedBy">
        <rdfs:label xml:lang="en">interval ended by</rdfs:label>
        <rdfs:comment>This predicate relates time intervals to the
            temporal things that immediately follow them.
            (#$intervalEndedBy INT TEMP-OBJ) means that INT is the
            instance of #$TimeInterval that immediately precedes
            TEMP-OBJ . The beginning of INT coincides with the beginning
            of all time (#$Always-TimeInterval), if time has a
            beginning. See #$IntervalEndedByFn.</rdfs:comment>
        <rdfs:domain rdf:resource="#TimeInterval"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intervalEntryFormatInArgs">
        <rdfs:label xml:lang="en">interval entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.) that is used only with argument-places that are
            constrained to instances (see #$argIsa) of #$ScalarInterval
            (q.v.) or some specialization thereof.
            (#$intervalEntryFormatInArgs PRED N) means that, for any
            particular way of fixing the other arguments to PRED besides
            the Nth, for any two intervals such that if either one is
            taken as the Nth argument PRED holds of those arguments,
            those intervals must  overlap  (see #$quantityIntersects).
            That is, if the sequences &lt;... ARGN ...&gt; and &lt;...
            ARGN-PRIME ...&gt; differ at most in their Nth items and
            both (PRED ... ARGN ...) and (PRED ... ARGN-PRIME ...) hold,
            then (#$quantityIntersects ARGN ARGN-PRIME) holds.  For
            example, #$intervalEntryFormatInArgs holds of
            #$bodyTemperature with respect to its second argument-place
            because, while a given creature (at a given moment in time)
            has a single exact (see #$ScalarPointValue) body
            temperature, we want the predicate #$bodyTemperature to be
            flexible enough to allow us to   specify this temperature
            with varying degrees of precision (e.g. as    98.6 degrees
            Fahrenheit  or as  between 98 and 99 degrees Fahrenheit  or
            as    less than 100 degrees Fahrenheit ).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#functionalInArgs"/>
        <rdfs:domain rdf:resource="#FunctionalPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="intervalStartedBy">
        <rdfs:label xml:lang="en">interval started by</rdfs:label>
        <rdfs:comment>This predicate that relates time intervals to the
            temporal things that immediately precede them.
            (#$intervalStartedBy INT TEMP-OBJ) means that INT is the
            instance of #$TimeInterval that immediately follows
            TEMP-OBJ. The end of INT coincides with the end of all time
            (#$Always-TimeInterval), if time has an end. See #$IntervalStartedByFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#contiguousAfter"/>
        <rdfs:domain rdf:resource="#TimeInterval"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interviewee">
        <rdfs:label xml:lang="en">interviewee (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$interviewee INTERVIEW AGT) means that the
            #$Agent AGT is an interviewee in the #$Interviewing event INTERVIEW.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#Interviewing"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="interviewer">
        <rdfs:label xml:lang="en">interviewer (pred)</rdfs:label>
        <rdfs:comment>(#$interviewer INTERVIEW AGT) means that the
            #$Agent AGT is an interviewer in the #$Interviewing event INTERVIEW.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Interviewing"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="inverseQuantFunctions-Nonsymmetric">
        <rdfs:label xml:lang="en">inverse quant functions - nonsymmetric</rdfs:label>
        <rdfs:comment>This predicate relates a given unary, quantitative
            function (see #$FunctionFromQuantitiesToQuantities) to
            another that is an  inverse  of it, in the sense that
            whenever the latter function maps a thing ARG to some thing
            VALUE, the former function maps VALUE to ARG.
            (#$inverseQuantFunctions-Nonsymmetric FUNC INV) means that,
            for any ARG in the domain of INV (see #$inDomainOf), (FUNC
            (INV ARG)) is ARG.  For example, the
            #$inverseQuantFunctions-Nonsymmetric of the natural
            logarithm function (#$LogFn) is the exponential function
            (#$ExpFn) since (#$LogFn (#$ExpFn ARG)) is ARG for all ARG
            in the domain of #$ExpFn.  Note that this predicate is
            usually used to relate a quantitative function to what is
            considered its standard inverse, e.g. the cosine function to
            the arc cosine function.  Both arguments to
            #$inverseQuantFunctions-Nonsymmetric are instances of
            #$FunctionFromQuantitiesToQuantities and #$UnaryFunction.
            Note also that this function is not symmetric. For a more
            general and symmetric predicate that can be used to relate
            any one-to-one function (see #$OneToOneFunction) to its
            inverse, regardless of whether or not either is a
            quantitative function, see #$inverseFunctions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <rdfs:domain rdf:resource="#FunctionFromQuantitiesToQuantities"/>
        <rdfs:range rdf:resource="#FunctionFromQuantitiesToQuantities"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="irregularlyDerivedFrom">
        <rdfs:label xml:lang="en">irregularly derived from</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#morphologicallyDerivedFrom"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#BaseWordForm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="irrelevantPredAssertion">
        <rdfs:label xml:lang="en">irrelevant pred assertion</rdfs:label>
        <rdfs:comment>(#$irrelevantPredAssertion PREDICATE ASSERTION)
            states that the given ASSERTION should be heuristically
            considered irrelevant to inferences concluding uses of the
            given PREDICATE in the current mt.  See also
            #$irrelevantAssertion and #$irrelevantMt.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="isa">
        <rdfs:label xml:lang="en">isa</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlot (q.v.) that relates things of
            any   kind to collections (see #$Collection) of which they
            are instances.    (#$isa THING COL) means that THING is an
            instance of the collection COL.    #$isa is by far the most
            commonly-occurring predicate in the Cyc Knowledge   Base,
            and is one of the relations most fundamental to the Cyc
            ontology.  An important logical feature of #$isa is that it
            transfers through    #$genls (q.v.): (#$isa THING COL) and
            (#$genls COL SUPERCOL) jointly   imply (#$isa THING
            SUPERCOL).  This logical feature is expressed in a   rule
            that -- along with various other rules that also sanction
            the   derivation of #$isa sentences -- has been asserted to
            the Knowledge Base.    As a result, only a small fraction of
            the #$isa based ground atomic   formulas (or  GAF s; see
            #$CycLClosedAtomicSentence) the Cyc system    knows  to be
            true have been manually asserted; the vast majority   have
            been derived, or are derivable, automatically by the Cyc
            inference   engine via the use of such rules.  See also #$elementOf.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#elementOf"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="isolatedNodeInSystem">
        <rdfs:label xml:lang="en">isolated node in system</rdfs:label>
        <rdfs:comment>(#$isolatedNodeInSystem NODE SYSTEM) means that
            the node NODE in the #$PathSystem SYSTEM is an isolated
            point in SYSTEM, i.e., NODE is not on any link or loop in
            SYSTEM.  Note that an isolated point in SYSTEM must be a
            node in SYSTEM.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nodeInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ist">
        <rdfs:label xml:lang="en">ist</rdfs:label>
        <rdfs:comment>This predicate relates a microtheory to any
            sentence that is true in it.  (#$ist MT SENT) means that the
            CycL sentence SENT (or, if you prefer, the proposition SENT
            expresses) is true in the microtheory MT.  Note that SENT
            need not actually be _asserted_ in MT; MT might for example
            inherit  SENT from a more general microtheory.  (Cf. #$ist-Asserted.)</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ist-Agreement">
        <rdfs:label xml:lang="en">ist - agreement</rdfs:label>
        <rdfs:comment>The predicate #$ist-Agreement is used to indicate
            the propositions which have been agreed upon in a particular
            agreement.  (#$ist-Agreement AGR PROP) means that the
            #$Agreement AGR pertains to (commits its agreeing parties
            to) making the proposition (#$ELSentence-Assertible) PROP
            true. Since each #$Agreement is represented in Cyc as a
            #$Microtheory, the way that this is expressed is to say that
            PROP is considered to _be_ true within the microtheory which
            represents AGR.  PROP may or may not be true in reality (or,
            thus, according to #$Microtheorys intended to represent
            reality).   (#$ist-Agreement AGR PROP) should not be taken
            to be a simple specialization of (#$ist MT PROP) for cases
            where MT is an instance of #$Agreement. Whereas #$ist
            relates any particular microtheory to all assertions that
            happen to be true in that microtheory, #$ist-Agreement
            indicates only those assertions in an #$Agreement
            microtheory which pertain to the agreement itself (and are
            not just something that happens to be true in it, e.g., that
            one of the #$agreeingAgents is named  Joe ).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ist"/>
        <rdfs:domain rdf:resource="#Agreement"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ist-Asserted">
        <rdfs:label xml:lang="en">ist - asserted</rdfs:label>
        <rdfs:comment>A #$MicrotheoryDesignatingPredicate that is used
            to relate CycL sentences to microtheories in which they are
            explicitly asserted. (#$ist-Asserted MT SENT) states that
            there is a #$CycLAssertion for SENT in the #$Microtheory MT.
            This predicate is therefore a more specialized form of #$ist
            (q.v.) with the additional requirement that there be an
            actual assertion for SENT in MT.    Note that the above is
            also more precise than (#$ist MT (#$assertedSentence SENT)),
            which states that there is an assertion for SENT in some
            microtheory visible from (see #$genlMt) MT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ist"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ist-Information">
        <rdfs:label xml:lang="en">ist - information</rdfs:label>
        <rdfs:comment>An instance of #$MicrotheoryDesignatingPredicate
            (q.v.) and a specialization of #$ist (q.v.).
            (#$ist-Information PIT SENT) means that the #$Proposition
            (q.v.) expressed by SENT is part of the explicitly-stated
            (as opposed to the merely inferred) informational content of
            the #$PropositionalInformationThing PIT.  This does _not_
            entail that SENT itself is asserted either in PIT (cf.
            #$ist-Asserted) or in some more general microtheory PIT-GENL
            whose content PIT inherits (via the inverse of #$genlMt);
            but it does entail that either (i) a sentence SENT-PRIME
            that has the same informational content (i.e. expresses the
            same proposition) as SENT is asserted in PIT or in some
            PIT-GENL or (ii) SENT is a conjunction each conjunct CONJi
            of which is such that there is some sentence with the same
            informational content as CONJi asserted either in PIT or in
            some PIT-GENL.</rdfs:comment>
        <rdfs:domain rdf:resource="#PropositionalInformationThing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="itemCopied">
        <rdfs:label xml:lang="en">copy (CycL predicate)</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$IBTCopying (a specialization of
            #$InformationTransferEvent) to instances of
            #$InformationBearingThing. (#$itemCopied COPY IBT) means
            that the reproduction event COPY produces a copy of the
            information-bearing thing IBT. This predicate is a
            specialization of #$informationOrigin. See also
            #$copyProduced, which relates copying events to the copies
            they produce (rather than to their sources).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationOrigin"/>
        <rdfs:domain rdf:resource="#IBTCopying"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="itemWorn">
        <rdfs:label xml:lang="en">item worn</rdfs:label>
        <rdfs:comment>This is used to indicate that a particular article
            of clothing (or other wearable item) is worn in a particular
            situation.  (#$itemWorn WEARING ITEM) means that ITEM is
            worn during WEARING. To specify the wearer of an item in a
            situation, use the predicate #$wearer.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#WearingSomething"/>
        <rdfs:range rdf:resource="#SomethingToWear"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="jobAttributes">
        <rdfs:label xml:lang="en">job attributes</rdfs:label>
        <rdfs:comment>The predicate #$jobAttributes describes a type of
            job as #$BlueCollar, #$WhiteCollar, #$Unionized, etc.
            (#$jobAttributes JOBTYPE ATTRIBUTE) means that ATTRIBUTE
            describes a general property of JOBTYPE.  Note that this
            predicate applies to instances of #$PersonTypeByOccupation
            (kinds of occupations, as represented by the collections of
            persons in those occupations), not to a particular job held
            by some individual person.</rdfs:comment>
        <rdfs:domain rdf:resource="#PersonTypeByOccupation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="judicialAgents">
        <rdfs:label xml:lang="en">judge (pred)</rdfs:label>
        <rdfs:comment>(#$judicialAgents EV JUDGE) means that the #$Agent
            JUDGE is acting as a judge in the event EV.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#mediators"/>
        <rdfs:domain rdf:resource="#SocialOccurrence"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="junctionInSystem">
        <rdfs:label xml:lang="en">junction in system</rdfs:label>
        <rdfs:comment>(#$junctionInSystem JUNCTION SYS) means that
            JUNCTION is a junction in the #$PathSystem SYS, i.e., a node
            in SYS that is an &apos;intersection&apos; or
            &apos;branching point&apos; of links or loops in SYS.  (For
            the case when no SYS is specified, see #$JunctionOfPaths.)
            Formally, a node X in SYS is a junction in SYS iff either
            there are three (different) links in SYS such that X is on
            all of them, or there are two (different) loops in SYS such
            that X is on both of them, or there is a link in SYS and
            there is a loop in SYS such that X is on both of them.  For
            different kinds of junctions in a path system, see
            #$threeWayJunctionInSystem, #$fourWayJunctionInSystem.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nodeInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keAssertedTermSentences">
        <rdfs:label xml:lang="en">ke asserted term sentences</rdfs:label>
        <rdfs:comment>(#$keAssertedTermSentences TERM SENTENCE) means
            that a #$CycLAssertion of the form SENTENCE exists such that
            TERM is referred to as a term within that sentence, and that
            SENTENCE contains no #$keIrrelevantTerms.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#assertedTermSentences"/>
        <rdfs:domain rdf:resource="#CycLTerm"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryExampleCol">
        <rdfs:label xml:lang="en">ke common query example col</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            relation is a &apos;query&apos; analog of
            #$examplePredSentences. It is used to specify, for a given
            #$Collections, examples that typify frequently asked
            questions (FAQs) applying either to the collection as a
            whole or to its instances.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keCommonQueryForTerm"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#CycLFormula"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryExampleReln">
        <rdfs:label xml:lang="en">ke common query example reln</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            relation is a &apos;query&apos; analog of
            #$examplePredSentences.  It is used to specify, for a given
            #$Predicate, examples that typify frequently asked questions
            (FAQs) that  users may reasonably be expected to have with
            regard to that predicate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keCommonQueryForTerm"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#CycLFormula"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryForTerm">
        <rdfs:label xml:lang="en">ke common query for term</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is intended to express the relationship that holds
            between a #$CycLReifiableDenotationalTerm and a query that
            may be commonly or sensibly asked about it.  It is
            considered a #$KEFacilitationPredicate, insofar as it can be
            used to prompt users with queries that may be usefully asked.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#CycLFormula"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryPredForInstances">
        <rdfs:label xml:lang="en">ke common query pred for instances</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            macro predicate for #$keCommonQueryForTerm.
            (#$keCommonQueryPredForInstances COL PRED) means that for
            any instance INST of COL, (#$keCommonQueryForTerm INST (PRED
            INST :WHAT).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryPredForInstances-Inverse">
        <rdfs:label xml:lang="en">ke common query pred for instances - inverse</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            macro predicate for #$keCommonQueryForTerm.
            (#$keCommonQueryPredForInstances-Inverse COL PRED) means
            that for any instance INST of COL, (#$keCommonQueryForTerm
            INST (PRED :WHAT INST).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryPredForSpecs">
        <rdfs:label xml:lang="en">ke common query pred for specs</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            macro predicate for #$keCommonQueryForTerm.
            (#$keCommonQueryPredForSpecs COL PRED) means that for any
            specialiazation SPEC of COL, (#$keCommonQueryForTerm SPEC
            (PRED SPEC :WHAT).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keCommonQueryPredForSpecs-Inverse">
        <rdfs:label xml:lang="en">ke common query pred for specs - inverse</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            macro predicate for #$keCommonQueryForTerm.
            (#$keCommonQueryPredForSpecs-Inverse COL PRED) means that
            for any specialiazation SPEC of COL, (#$keCommonQueryForTerm
            SPEC (PRED :WHAT SPEC).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keConsiderationInverse">
        <rdfs:label xml:lang="en">ke consideration inverse</rdfs:label>
        <rdfs:comment>(#$keConsiderationInverse COL BIN-PRED) means that
            for  every instance INS of COL,  it should be
            determined whether there exist some VALUE such that
            (BIN-PRED INS VALUE) could be asserted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keConsiderationPreds">
        <rdfs:label xml:lang="en">ke consideration preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keConsiderationPreds COL BIN-PRED) means that for every
            instance INS of COL, it should be considered whether there
            exist some VALUE such that (BIN-PRED INS VALUE) could be asserted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keFarthestGenlsStrongSuggestionInverse">
        <rdfs:label xml:lang="en">ke farthest genls strong suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsStrongSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is strongly suggested that there exist
            some VALUE such that (BIN-PRED VALUE SPEC-COL) is known in
            the KB.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keFarthestGenlsStrongSuggestionPreds">
        <rdfs:label xml:lang="en">ke farthest genls strong suggestion preds</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsStrongSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is strongly suggested that there exist
            some VALUE such that (BIN-PRED SPEC-COL VALUE) is known in
            the KB.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keFarthestGenlsWeakSuggestionInverse">
        <rdfs:label xml:lang="en">ke farthest genls weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsWeakSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is weakly suggested that there exist
            some VALUE such that (BIN-PRED VALUE SPEC-COL) is known in
            the KB.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keFarthestGenlsWeakSuggestionPreds">
        <rdfs:label xml:lang="en">ke farthest genls weak suggestion preds</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsWeakSuggestionPreds COL
            BIN-PRED) means that for  every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have any
            specializations other than itself, it is weakly suggested
            that  there exist some VALUE such that (BIN-PRED SPEC-COL
            VALUE) is known in  the KB.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsConsiderationInverse">
        <rdfs:label xml:lang="en">ke genls consideration inverse</rdfs:label>
        <rdfs:comment>(#$keGenlsConsiderationInverse COL BIN-PRED) means
            that for every specialization SPEC-COL of COL, it should be
            considered whether there there exist some VALUE such that
            (BIN-PRED VALUE  SPEC-COL) should be asserted in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsConsiderationPreds">
        <rdfs:label xml:lang="en">ke genls consideration preds</rdfs:label>
        <rdfs:comment>(#$keGenlsConsiderationPreds COL BIN-PRED) means
            that for  every specialization SPEC-COL of COL, it should be
            considered whether there is some VALUE such that (BIN-PRED
            SPEC-COL VALUE) is known in  the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsRelevantInverse">
        <rdfs:label xml:lang="en">ke genls relevant inverse</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            is, by definition, the most general instance of a  certain
            kind of #$KEFacilitationPredicate.  Its specializations
            include #$keGenlsStrongSuggestionInverse,
            #$keGenlsConsiderationInverse,
            #$keGenlsWeakSuggestionInverse and, of course, any
            specializations of those predicates.
            #$keGenlsRelevantInverse was created  mainly for practical
            reasons, i.e., to use in situations where one  might want to
            consider the disjunction of its specializations.  See  the
            comments on the specializations for clearer explanations.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsRelevantPreds">
        <rdfs:label xml:lang="en">ke genls relevant preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            is, by definition, the most general instance of a  certain
            kind of #$KEFacilitationPredicate.  Its specializations
            include #$keGenlsStrongSuggestionPreds,
            #$keGenlsConsiderationPreds,  #$keGenlsWeakSuggestionPreds
            and, of course, any  specializations of those predicates.
            #$keGenlsRelevantPreds was created  mainly for practical
            reasons, i.e., to use in situations where one  might want to
            consider the disjunction of its specializations.  See  the
            comments on the specializations for clearer explanations.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsStrongConsiderationPreds">
        <rdfs:label xml:lang="en">ke genls strong consideration preds</rdfs:label>
        <rdfs:comment>(#$keGenlsStrongConsiderationPreds COL BIN-PRED)
            means that for every specialization SPEC-COL of COL, it
            should be considered whether there is some VALUE such that
            (BIN-PRED SPEC-COL VALUE) holds, and if there is, it is
            strongly suggested that this relationship be made known in
            the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsConsiderationPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsStrongSuggestionInverse">
        <rdfs:label xml:lang="en">ke genls strong suggestion inverse</rdfs:label>
        <rdfs:comment>A #$KEFacilitationPredicate and a specialization
            of #$keGenlsRelevantInverse.
            (#$keGenlsStrongSuggestionInverse COL BINPRED) means that
            for every known  (i.e. reified-in-the-KB) specialization
            SPEC of COL, it is strongly suggested  that there be some
            THING such that (BINPRED THING SPEC) is known in the
            Knowledge Base.  See also #$keGenlsStrongSuggestionPreds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsStrongSuggestionPreds">
        <rdfs:label xml:lang="en">ke genls strong suggestion preds</rdfs:label>
        <rdfs:comment>A #$KEFacilitationPredicate and a specialization
            of #$keGenlsRelevantPreds. (#$keGenlsStrongSuggestionPreds
            COL BINPRED) means that for every known  (i.e.
            reified-in-the-KB) specialization SPEC of COL, it is
            strongly suggested  that there be some THING such that
            (BINPRED SPEC THING) is known in the Knowledge Base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsWeakSuggestionInverse">
        <rdfs:label xml:lang="en">ke genls weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keGenlsWeakSuggestionInverse COL BIN-PRED)
            means that for every specialization SPEC-COL of COL, it is
            weakly suggested that there exist some VALUE such that
            (BIN-PRED VALUE SPEC-COL) is known in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keGenlsWeakSuggestionPreds">
        <rdfs:label xml:lang="en">ke genls weak suggestion preds</rdfs:label>
        <rdfs:comment>A #$KEFacilitationPredicate and a specialization
            of #$keGenlsRelevantPreds (q.v.).
            (#$keGenlsWeakSuggestionPreds COL BINPRED) means that for
            every specialization SPEC of COL, it is weakly suggested
            that there be some VALUE such that (BINPRED SPEC VALUE) is
            known in the KB.  See also #$keGenlsStrongSuggestionPreds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keGenlsRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keInducedStrongSuggestionPreds">
        <rdfs:label xml:lang="en">ke induced strong suggestion preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keStrongSuggestionPreds COL BIN-PRED) means that for
            every instance INS of COL, there is strongly suggested that
            there exist some VALUE such that (BIN-PRED INS VALUE) is
            known in the KB.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keInteractionRequirement">
        <rdfs:label xml:lang="en">ke interaction requirement</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keInteractionRequirement TERM RULE) states that whenever
            the interaction is in state represented by TERM, the rule
            RULE should fire. Example: (#$keInteractionRequirement
            #$UIA-GeneralMilitary-DemoEnvironmentMt RULE).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keInteractionStrongSuggestion">
        <rdfs:label xml:lang="en">ke interaction strong suggestion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keInteractionStrongSuggestion TERM SENTENCE) states that
            for TERM, it is strongly suggested that Cyc know whether
            SENTENCE obtains, and if so, with what bindings for its
            existentially quantified variables.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keNeighborSuggestion">
        <rdfs:label xml:lang="en">ke neighbor suggestion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keNeighborSuggestion TERM FORMULA) states an extremely
            weak suggestion that something like FORMULA might be true
            about TERM due to a similar formula being true of some
            heighboring concept in the ontology.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="kePlausibleConsideration">
        <rdfs:label xml:lang="en">ke plausible consideration</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$kePlausibleConsideration TERM FORMULA) means that FORMULA
            expresses information that could be useful to the KB if
            asserted about TERM.  Such judgements are based on
            generalizations about things of the same type. Note that if
            FORMULA is salient to term, it may be strongly or weakly
            suggested that FORMULA be known to be true in the system,
            see #$keWeakSuggestion, #$keStrongSuggestion.  As an example
            of how this differs from strong or weak suggestions consider
            a partition of a collection, call it CollectionA.   It is
            probably useful to consider whether new specializations of
            CollectionA should also be made specializations of one of
            the partition cells.  However, we wouldn&apos;t strongly or
            weakly suggest that it be made such a specialization until
            after we&apos;ve considered whether it fits into one of the cells.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRelevant">
        <rdfs:label xml:lang="en">ke relevant</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            is, by definition, the most general instance of
            #$KEFacilitationPredicate.  It is intended as a
            generalization for #$keStrongSuggestion, #$keWeakSuggestion,
            #$keNeighborSuggestion, #$keStrongConsideration and
            #$kePlausibleConsideration or any other such predicates
            which may be suggested.  This predicate, along with
            #$keRelevantPreds, #$keRelevantInverse,
            #$keGenlsRelevantPreds, #$keGenlsRelevantInverse are
            designed to facilitate the implementation of rapid knowledge
            formation tools implementing #$KEFacilitationPredicates. One
            should almost always use one of its specializations.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRelevantInverse">
        <rdfs:label xml:lang="en">ke relevant inverse</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            is, by definition, the most general instance of a  certain
            kind of #$KEFacilitationPredicate.  Its specializations
            include #$keRequirementInverse, #$keStrongSuggestionInverse,
            #$keConsiderationInverse, #$keWeakSuggestionInverse and, of
            course, any  specializations of those predicates.
            #$keRelevantInverse was created  mainly for practical
            reasons, i.e., to use in situations where one  might want to
            consider the disjunction of its specializations.  See  the
            comments on the specializations for clearer explanations.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRelevantPreds">
        <rdfs:label xml:lang="en">ke relevant preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            is, by definition, the most general instance of a  certain
            kind of #$KEFacilitationPredicate.  Its specializations
            include #$keRequirementPreds, #$keStrongSuggestionPreds,
            #$keConsiderationPreds, #$keWeakSuggestionPreds and, of
            course, any  specializations of those predicates.
            #$keRelevantPreds was created  mainly for practical reasons,
            i.e., to use in situations where one  might want to consider
            the disjunction of its specializations.  See  the comments
            on the specializations for clearer explanations.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRequirement">
        <rdfs:label xml:lang="en">ke requirement</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keRequirement OBJ FORMULA) states a strong expectation
            for the term OBJ that FORMULA must be known to be true.
            This can be used in rules to state KE constraints and
            invariants that should be encouraged or enforced.  It can
            also be used in tools that look for KB omissions that
            explicitly violate these expectations.  See also
            #$keStrongSuggestion, #$keWeakSuggestion, #$keRequirementPreds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRequirementPreds">
        <rdfs:label xml:lang="en">ke requirement preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keRequirementPreds COL BIN-PRED) means that for every
            instance INS of COL, there is an expectation that there
            exist some VALUE such that (BIN-PRED INS VALUE) is known in
            the KB.  Any violation of this kind of expectation
            essentially represents a violation of KB construction
            integrity rather than a logical contradiction.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keRequirementTernaryPreds">
        <rdfs:label xml:lang="en">ke requirement ternary preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keRequirementTernaryPreds COL TER-PRED) means that for
            every instance INS of COL, there is an expectation that
            there exist some VALUE-1 and some VALUE-2 such that
            (TER-PRED INS VALUE-1 VALUE-2) is known in the KB.  Any
            violation of this kind of expectation essentially represents
            a violation of KB construction integrity rather than a
            logical contradiction.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#TernaryPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongConsideration">
        <rdfs:label xml:lang="en">ke strong consideration</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keStrongConsideration TERM FORMULA) means that FORMULA
            could be salient to TERM and, if salient, it is strongly
            expected that the information expressed in FORMULA be
            asserted about TERM.  Note that the meaning of this
            predicate is not simply that the suggestion be strongly
            considered.  Rather, it is that if the ke suggestion is
            salient it is strongly suggested that the appropriate
            information be asserted in the KB.  An example may help to
            clarify the distinction between #$kePlausibleConsideration
            and #$keStrongConsideration, a specialization.  Note that if
            one creates a collection it is useful to consider whether
            there are facetings of the collection.  However, we
            wouldn&apos;t make this a  strong consideration  insofar as
            some facets are worth articulating in the KB but many other
            ad-hoc facets are not worth asserting in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#kePlausibleConsideration"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongConsiderationInverse">
        <rdfs:label xml:lang="en">ke strong consideration inverse</rdfs:label>
        <rdfs:comment>(#$keConsiderationInverse COL BIN-PRED) means that
            for  every instance INS of COL,  it should be
            determined whether there exist some VALUE such that
            (BIN-PRED INS VALUE) could be asserted and if so it is
            strongly suggested that it be asserted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keConsiderationInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongConsiderationPreds">
        <rdfs:label xml:lang="en">ke strong consideration preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keStrongConsiderationPreds COL BIN-PRED) means that for
            every instance INS of COL, it should be determined whether
            there exist some VALUE such that (BIN-PRED INS VALUE) and if
            there is, it is strongly suggested that this relationship be
            made known in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keConsiderationPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongSuggestion">
        <rdfs:label xml:lang="en">ke strong suggestion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keStrongSuggestion TERM FORMULA) states a strong
            suggestion that FORMULA should be known to be true about
            TERM.  This is most useful at expressing suggestions or
            expectations about TERM which can then be used by tools that
            look for KB omissions, or conditions that explicitly violate
            these expectations.  See also #$keWeakSuggestion,
            #$keRequirement, #$keStrongSuggestionPreds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongSuggestionInverse">
        <rdfs:label xml:lang="en">ke strong suggestion inverse</rdfs:label>
        <rdfs:comment>A #$KEFacilitationPredicate and a specialization
            of #$keRelevantInverse. (#$keStrongSuggestionInverse COL
            BINPRED) means that for every known (i.e. Cyc-reified)
            instance INST of COL, it is strongly suggested that there be
            some reified THING such that (BINPRED THING INST) is known
            in the Knowledge  Base.  See also #$keStrongSuggestionPreds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keStrongSuggestionPreds">
        <rdfs:label xml:lang="en">ke strong suggestion preds</rdfs:label>
        <rdfs:comment>A #$KEFacilitationPredicate and a specialization
            of #$keRelevantPreds. (#$keStrongSuggestionPreds COL
            BINPRED) means that for every known (i.e. Cyc-reified)
            instance INST of COL, it is strongly suggested that there be
            some reified THING such that (BINPRED INST THING) is known
            in the Knowledge  Base.  See also #$keStrongSuggestionInverse.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keSuggestionApplies">
        <rdfs:label xml:lang="en">ke suggestion applies</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate relates terms in the KB to formulas expressing KE
            suggestions for things of that type which do in fact apply
            to the term in question.  (#$keSuggestionApplies TERM
            FORMULA) relates TERM to some FORMULA containing a
            suggestion about information that should be asserted about
            TERM.  For instance, if some collection is partitioned it
            might be suggested in some formula, FORM-EX, that subsets of
            the collection be considered for membership in one of the
            partition cells.  If in fact, this suggestion applies to a
            given subset, SUB-EX, of the collection, i.e. if it should
            be made a specialization of one of the partition cells, it
            would be the case that (#$keSuggestionApplies COL FORM).</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keWeakSuggestion">
        <rdfs:label xml:lang="en">ke weak suggestion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$keWeakSuggestion TERM FORMULA) states a weak suggestion
            that FORMULA should possibly be known to be true about TERM.
            This is most useful at expressing weak suggestions or
            expectations about TERM which can then be used by tools that
            look for KB omissions, or conditions that explicitly violate
            these expectations.  See also #$keRequirements,
            #$keStrongSuggestion, #$kePlausibleConsideration, #$keStrongConsideration.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevant"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keWeakSuggestionInverse">
        <rdfs:label xml:lang="en">ke weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keWeakSuggestionInverse COL BIN-PRED) means
            that for every instance INST of COL, it is weakly suggested
            that there exist some VALUE such that (BIN-PRED VALUE INST)
            is known in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="keWeakSuggestionPreds">
        <rdfs:label xml:lang="en">ke weak suggestion preds</rdfs:label>
        <rdfs:comment>(#$keWeakSuggestionPreds COL BIN-PRED) means that
            for every instance INST of COL, it is weakly suggested that
            there exist some VALUE such that (BIN-PRED INST VALUE) is
            known in the KB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keRelevantPreds"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="knows">
        <rdfs:label xml:lang="en">knows</rdfs:label>
        <rdfs:comment>(#$knows AGENT PROP) means that AGENT (an instance
            of #$IntelligentAgent) knows PROP (an instance of
            #$ELSentence-Assertible).  (#$knows AGENT PROP) implies that
            (i) the proposition PROP is true, (ii) AGENT believes the
            proposition PROP, and (iii) AGENT is justified in believing PROP.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#beliefs"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="knowsAbout">
        <rdfs:label xml:lang="en">will know</rdfs:label>
        <rdfs:comment>(#$knowsAbout AGENT THING) means that the
            #$IntelligentAgent AGENT knows something about THING .  This
            predicate represents more than simple awareness, but exactly
            what is known -- the content of AGENT&apos;s knowledge about
            THING -- is not specified.  For example, (#$knowsAbout
            #$MichaelJordan #$Basketball-TheGame).   Note: many
            commonsense rules can conclude (#$knowsAbout AGENT THING) --
            e.g., those having to do with AGENT&apos;s occupation,
            college degrees, city of residence,... in fact, almost any
            assertion about AGENT can lead to presumptions that he/she
            probably #$knowsAbout something.  #$knowsAbout in turn can
            serve (weakly) in arguments about whether or not AGENT
            #$knows (q.v.) specific common assertions involving THING,
            and in arguments about whether or not AGENT #$knowsValue
            (q.v.) of some particular predicate applied to THING, etc.
            See also #$expertRegarding.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="knowsCommConvention">
        <rdfs:label xml:lang="en">knows comm convention</rdfs:label>
        <rdfs:comment>A #$MentalSlot that relates agents to
            communucation conventions that they are able to use.
            (#$knowsCommConvention AGENT CONV) means that AGENT knows
            the #$CommunicationConvention CONV and can use it to encode
            or decode information.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#CommunicationConvention"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="languageOfCommunication">
        <rdfs:label xml:lang="en">language of communication</rdfs:label>
        <rdfs:comment>The predicate #$languageOfCommunication is used to
            indicate a language used by agents in a particular
            communication event.  (#$languageOfCommunication COM LANG)
            means that in the #$Communicating COM,  at least some of the
            information transferred is expressed in the language LANG.
            LANG may be a natural language, a computer language, a
            musical system, or other symbolic system such as #$AmericanSignLanguage.</rdfs:comment>
        <rdfs:domain rdf:resource="#Communicating"/>
        <rdfs:range rdf:resource="#Language"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="languageOfLexicon">
        <rdfs:label xml:lang="en">language of lexicon</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate relates an instance of #$LexicalMicrotheory to the
            #$Language whose words it describes. For instance,
            (#$languageOfLexicon #$EnglishMt #$EnglishLanguage) means
            that #$EnglishMt describes how words are used in the #$EnglishLanguage.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalMicrotheory"/>
        <rdfs:range rdf:resource="#NaturalLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="languageSpoken">
        <rdfs:label xml:lang="en">language spoken</rdfs:label>
        <rdfs:comment>(#$languageSpoken AGENT NATLANG) means that the
            #$IntelligentAgent AGENT speaks the natural human language
            NATLANG at least somewhat fluently.  The language must be
            speakable by humans, as are English, Latin, or Japanese, but
            not LISP, C or LINCOS.  See also #$NaturalLanguage.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsCommConvention"/>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#NaturalLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="languagesSpokenHere">
        <rdfs:label xml:lang="en">languages spoken here</rdfs:label>
        <rdfs:comment>(#$languagesSpokenHere REG LANG) means that LANG
            is a language spoken in geographical region REG.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#NaturalLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lastName">
        <rdfs:label xml:lang="en">last name (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. An
            instance of #$ProperNamePredicate-Strict and a
            specialization of #$nameString.  (#$lastName AGENT
            NAMESTRING) means that AGENT is known by NAMESTRING as his
            or her last name.  Note that a person rarely has more than
            one last name at any one time.  Note also that last names
            may change as a result of certain actions, such as
            marriages, deaths, etc., in various cultures.  In Western
            cultures a #$lastName is generally a surname (see
            #$familyName), while in Eastern cultures a #$lastName is
            generally a given name (see #$givenNames).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:subPropertyOf rdf:resource="#familyName"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#HumanFamilyNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lastSubEvents">
        <rdfs:label xml:lang="en">completion</rdfs:label>
        <rdfs:comment>This predicate relates an event to one of its
            sub-events -- namely, the sub-event that ends it.
            #$lastSubEvents is the common specialization of both
            #$subEvents and #$temporallyFinishedBy.  (#$lastSubEvents
            EVENT END) implies (#$subEvents EVENT END) and
            (#$temporallyFinishedBy EVENT END).  That is,
            (#$lastSubEvents EVENT END) means that END is the last part
            of EVENT.  Note that more than one event can be considered
            to be the last part of another event -- for example, in a
            baseball game of nine innings, the entire ninth inning can
            be considered to be the last subevent of the game, and yet
            the last outo of the ninth inning can also be considered to
            be the last subevent of the game.  See also #$firstSubEvents.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyFinishedBy"/>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="laterSubAbstractions">
        <rdfs:label xml:lang="en">later sub abstractions</rdfs:label>
        <rdfs:comment>(#$laterSubAbstractions EARLIER LATER) means that
            LATER and EARLIER are both sub-abstractions (see the
            predicate #$subAbstractions) of the same entity (so that
            (#$hasSameEntityAs LATER EARLIER) holds) and the
            sub-abstraction LATER starts sometime after the beginning of
            EARLIER (so that (#$startsAfterStartingOf LATER EARLIER) holds).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasSameEntityAs"/>
        <rdfs:domain rdf:resource="#SomethingExisting"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="laterThan">
        <rdfs:label xml:lang="en">later than</rdfs:label>
        <rdfs:comment>#$laterThan is similar to #$greaterThan, but takes
            #$Dates as arguments.  (#$laterThan LATE_DATE EARLY_DATE) is
            true when LATE_DATE and EARLY_DATE are #$Dates, and
            LATE_DATE starts after EARLY_DATE is over.  #$laterThan is evaluatable.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#Date"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="laws">
        <rdfs:label xml:lang="en">laws</rdfs:label>
        <rdfs:comment>The predicate #$laws is used to relate a
            geopolitical region (country, state, city, etc.) to a law or
            entire legal code which applies there.  (#$laws GEOPOL CODE)
            means that the #$GeopoliticalEntity GEOPOL officially has
            the law (or set of laws) CODE.  See also #$GovernmentCOC for
            the representation of a #$Law or a #$LegalCode as a #$Microtheory.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#GovernmentCOC"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lengthOfObject">
        <rdfs:label xml:lang="en">length (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$lengthOfObject OBJECT LENGTH) means that the
            length of OBJECT is LENGTH.  Which dimension of a given
            object counts as its length partly depends on such things as
            the type of object it is, its shape, and its spatial
            relations to other objects in its environment.  Length is
            normally  measured as the #$Distance from (what one
            intuitively thinks of as) one  end  of the object to its
            other  end , and often corresponds to the dimension of the
            object that has the greatest magnitude.  Some types of
            objects (e.g. trains and yachts) have front and back ends --
            and thus lengths -- by virtue of having an intrinsic default
            orientation (see #$FrontAndBackSidedObject and the other
            specializations of #$BilateralObject).  For some other types
            of objects (e.g. shoelaces and hair strands), length is
            determined by that dimension that is of much greater
            magnitude, relatively speaking, than any of the
            object&apos;s other dimensions.  Still other objects have
            lengths by virtue of having orientations determined only in
            relation to their environments (e.g. the  length  of a row
            of adjacent buldings might be the distance across the side
            of the row that faces the street, whether or not that
            happens to be the row&apos;s dimension of greatest
            magnitude).  See also #$widthOfObject, #$heightOfObject, and #$depthOfObject.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#dimensionsOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lessLikelyThan-Derived">
        <rdfs:label xml:lang="en">less likely than - derived</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$lessLikelyThan-Derived PROPOSITION1 PROPOSITION2) means
            that, in the applicable #$Microtheory, the &lt;em&gt;a
            posteriori&lt;/em&gt; #$derivedProbability that PROPOSITION1
            is true is less than the &lt;em&gt;a posteriori&lt;/em&gt;
            #$derivedProbability that PROPOSITION2 is true, taking into
            account other evidence and the truth or falsehood of other
            assertions.  This predicate does not say what the
            probabilities actually are numerically; it is just an
            ordering (or rather partial ordering) relation between the
            two propositions.  In most microtheories, generally, this
            #$lessLikelyThan-Derived means that the probability that
            PROPOSITION1 is true is less than the probability that
            PROPOSITION2 is true, given the probabilities of other
            #$Assertions in the #$Microtheory and the
            #$domainAssumptions accessible in the #$Microtheory.
            Contrast this with #$lessLikelyThan (which makes no claim of
            dependence on or independence from other assertions) and
            with #$lessLikelyThan-Prior (which does not take into
            account any dependence on other assertions).  This
            definition makes no presumption as to determinism versus
            nondeterminism, nor as to whether probability is only in the
            mind of some beholder.  The definition allows for any of
            several different systems of deriving the probability of one
            assertion from the probabilities of, or conditional
            probabilities relating, other assertions.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lessLikelyThan-Prior">
        <rdfs:label xml:lang="en">less likely than - prior</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$lessLikelyThan-Prior PROPOSITION1 PROPOSITION2) means
            that, in the applicable #$Microtheory, the &lt;em&gt; a
            priori&lt;/em&gt; probability that PROPOSITION1 is true is
            less than the &lt;em&gt; a priori&lt;/em&gt; probability
            that PROPOSITION2 is true.  This predicate does not say what
            the probabilities actually are numerically; it is just an
            ordering (or rather partial ordering) relation between the
            two propositions.  In most microtheories, generally, this
            #$lessLikelyThan-Prior means that the &apos;prior&apos;
            probability that PROPOSITION1 is true is less than the
            &apos;prior&apos; probability that PROPOSITION2 is true,
            given only the truth of the #$domainAssumptions accessible
            in the applicable #$Microtheory, without regard to any
            further evidence or the truth of any other assertions.
            Contrast this with #$lessLikelyThan (which makes no claim of
            dependence on or independence from other assertions) and
            with #$lessLikelyThan-Derived (which assumes dependence on
            other assertions).  This definition makes no presumption as
            to determinism &lt;em&gt;versus&lt;/em&gt; nondeterminism,
            nor as to whether probability is only in the mind of some beholder.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lessThan">
        <rdfs:label xml:lang="en">less than</rdfs:label>
        <rdfs:comment>A #$NumericComparisonPredicate that is a
            generalization of the mathematical less-than ( &lt; )
            relation to  #$ScalarIntervals (q.v.) of all sorts,
            including quantitative  intervals as well as point values
            (see #$ScalarPointValue).   (#$lessThan VALUE1 VALUE2) means
            that VALUE1 is less than VALUE2  with respect to some scale
            that they are both on.  More precisely,  there is some
            #$TotallyOrderedScalarIntervalType SCALE that both  VALUE1
            and VALUE2 are instances of and either (i) SCALE is a
            specialization of #$NumericValue (e.g. #$RealNumber) and the
            maximum (see #$maxQuantValue) of VALUE1 is less than the
            minimum (see #$minQuantValue) of VALUE2 or (ii)
            (#$followingValueOnScale VALUE1 VALUE2 SCALE) holds.  Note
            that  #$lessThan is an #$ELRelation (q.v.), and the above
            sentence would actually canonicalize to (#$greaterThan
            VALUE2 VALUE1).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lessThanOrEqualTo"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lessThanOrEqualTo">
        <rdfs:label xml:lang="en">less than or equal to</rdfs:label>
        <rdfs:comment>A #$NumericComparisonPredicate that is a
            generalization of the  mathematical less-than-or-equal-to (
            &lt;= ) relation to  #$ScalarIntervals (q.v.) of all sorts,
            including quantitative  intervals as well as point values
            (see #$ScalarPointValue).   (#$lessThanOrEqualTo VALUE1
            VALUE2) means that VALUE1 is  less than or equal to VALUE2
            with respect to some scale that  they are both on.  More
            precisely, there is some  #$TotallyOrderedScalarIntervalType
            SCALE that both VALUE1 and  VALUE2 are instances of and
            either (i) SCALE is a specialization  of #$NumericValue
            (e.g. #$RealNumber) and the maximum  (see #$maxQuantValue)
            of VALUE1 is less than or equal to the  minimum (see
            #$minQuantValue) of VALUE2, (ii)  (#$followingValueOnScale
            VALUE1 VALUE2 SCALE) holds, or (iii) (#$equals VALUE1
            VALUE2) holds.  Note that  #$lessThanOrEqualTo is an
            #$ELRelation (q.v.), and the above  sentence would actually
            canonicalize to  (#$greaterThanOrEqualTo VALUE2 VALUE1).</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="levelWith">
        <rdfs:label xml:lang="en">level with</rdfs:label>
        <rdfs:comment>(#$levelWith OBJ1 OBJ2) means that OBJ1 and OBJ2
            are roughly the same vertical distance from some horizontal
            surface in the frame of reference.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lexemeOfWordForm">
        <rdfs:label xml:lang="en">lexeme of word form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLWordForm"/>
        <rdfs:range rdf:resource="#LexicalWord"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lexicalItemStrings">
        <rdfs:label xml:lang="en">lexical item strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalItem"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="lexicalWordTypeForLanguage">
        <rdfs:label xml:lang="en">lexical word type for language</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LivingLanguage"/>
        <rdfs:range rdf:resource="#LexicalWordTypeByLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="likes-Generic">
        <rdfs:label xml:lang="en">liking</rdfs:label>
        <rdfs:comment>(#$likes-Generic SUBJ OBJ) means that SUBJ likes
            OBJ. This is a very general liking relation which is most
            useful for organising  liking relations and for use during
            inference; for representation  purposes, use a spec-Pred.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAbout"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="likesAsFriend">
        <rdfs:label xml:lang="en">liking as friend</rdfs:label>
        <rdfs:comment>An instance of both #$InterPersonalRelationSlot
            and #$LikesPredicate that relates a given agent to another
            agent s/he feels friendliess toward.  (#$likesAsFriend
            AGENT1 AGENT2) means that AGENT1 enjoys interacting socially
            with AGENT2.  See also #$Friendliness.  Note that this  does
            not preclude AGENT1&apos;s  liking , or being fond of,
            AGENT2 in other  senses (e.g. a romantic sense) as well.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:subPropertyOf rdf:resource="#likesObject"/>
        <rdfs:subPropertyOf rdf:resource="#acquaintedWith"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#PerceptualAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="likesObject">
        <rdfs:label xml:lang="en">liking object</rdfs:label>
        <rdfs:comment>An instance of both #$CognitiveAwarenessPredicate
            and #$LikesPredicate. (#$likesObject AGENT OBJ) means that
            AGENT likes OBJ.  The intended sense  of  likes  here is
            fairly general, encompassing a variety of ways in  which
            somebody can be said to like various kinds of things.
            Typically,  it implies at least that AGENT feels some
            measure of #$Enjoyment when s/he  interacts with OBJ. There
            are specializations of #$likesObject that give  more
            information about the kind of interaction between AGENT and
            OBJ that  results in Enjoyment; see e.g. #$likesAsFriend and #$loves.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasEmotionAboutExistingThing"/>
        <rdfs:subPropertyOf rdf:resource="#likes-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="linkClosedSubSystems">
        <rdfs:label xml:lang="en">link closed sub systems</rdfs:label>
        <rdfs:comment>(#$linkClosedSubSystems SYS SUBSYS) means that the
            path system SUBSYS is a subsystem of the path system SYS
            (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS
            &apos;preserves&apos; all links in SYS between nodes in
            SUBSYS, i.e., if (#$linkBetweenInSystem LINK X Y SYS) holds
            and X and Y are in SUBSYS, LINK is a link in SUBSYS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subPathSystems"/>
        <rdfs:domain rdf:resource="#PathSystem"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="linkInSystem">
        <rdfs:label xml:lang="en">link in system</rdfs:label>
        <rdfs:comment>(#$linkInSystem LINK SYS) means that LINK is an
            instance of #$Path-Simple taken as a primitive path (called
            a link) in the #$PathSystem SYS.  For each link LINK in a
            path system SYS, there is a unique pair {X, Y} of different
            nodes in SYS (see #$nodeInSystem) such that X and Y are the
            two end-points of LINK in SYS.  Other points can also be on
            LINK, but they cannot be nodes in SYS.  There can be no
            point on a link that is different from its end points but
            nevertheless on another link; in other words, no matter how
            many points there are on a particular link in a path system,
            none of them can be an &apos;intersection&apos; (see
            #$junctionInSystem) except the end points of the link, which
            are nodes in the system.  Each link in SYS is also a path in
            SYS; that is, (#$linkInSystem LINK SYS) implies
            (#$pathInSystem LINK SYS).  Note that there is no general
            collection of all links.  Any path can be a link if you can
            somehow ignore the intersection points on it -- it all
            depends on the #$PathSystem.  Note also that in some cases
            (such as talking about relations between different
            #$PathSystems), using (#$LinksFn SYS) to denote the set of
            all links in SYS is more convenient than using the predicate #$linkInSystem.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pathInSystem"/>
        <rdfs:domain rdf:resource="#Path-Simple"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="linksOfCustomarySystem">
        <rdfs:label xml:lang="en">links of customary system</rdfs:label>
        <rdfs:comment>(#$linksOfCustomarySystem ASSUMEDSYSTEM LINK)
            means that the #$CustomarySystemOfLinks ASSUMEDSYSTEM has
            the individual #$SimpleSegmentOfPath LINK as one of its
            links (where &apos;link&apos; means a path with no junctions
            along it).  Each such link is of the path type that
            ASSUMEDSYSTEM is made of: a highway system is assumed to be
            comprised of roadways linking junctions or towns (and some
            dead-ends); each roadway without junctions is one of the
            links.  The parts of a road (pavement, streetlight, stripe
            in middle, culverts, etc.) are not #$linksOfCustomarySystem.
            Similarly the #$linksOfCustomarySystem of a plumbing system
            are the pipes, but not the straps holding the pipes.  Thus a
            #$CustomarySystemOfLinks may have various kinds of #$parts
            that are not #$linksOfCustomarySystem.  Contrast this with
            the formal case where a specified #$PathSystem is given; in
            this case the predicates #$linkInSystem and #$pathInSystem
            are used.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#CustomarySystemOfLinks"/>
        <rdfs:range rdf:resource="#Path-Customary"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="listMembers">
        <rdfs:label xml:lang="en">list members</rdfs:label>
        <rdfs:comment>A predicate that relates an ordered n-tuple, or
            #$List (q.v.), to each of the items on that list.
            (#$listMembers LIST MEMBER) means that MEMBER is a member of
            LIST.  For example, if LIST = (#$TheList A B C B) then LIST
            has exactly three members: A, B, and C.  See also #$SetOfListMembersFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tupleMembers"/>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="litigants">
        <rdfs:label xml:lang="en">litigant (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$litigants TRIAL AGENT) means that the #$Agent
            AGENT is one of the contending parties in the #$Trial TRIAL.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#Trial"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="loopInSystem">
        <rdfs:label xml:lang="en">loop in system</rdfs:label>
        <rdfs:comment>(#$loopInSystem LOOP SYS) means that LOOP is a
            &apos;loop&apos; in SYS, which is like a link in SYS except
            that it has exactly one node on it as if it is a link whose
            two end nodes are the same.  Each loop in SYS is also a
            cycle in SYS, see #$cycleInSystem.  The differences between
            a loop and a (non-loop) cycle in SYS include that (i) there
            is exactly one point in SYS on a loop (which must be a node
            in SYS), but there may in general be any finite number of
            nodes (and even as many points as there are real numbers) on
            some (non-loop) cycle in SYS, and that (ii) The unique node
            in SYS on a loop may or may not be an end point of a link in
            SYS, but each node on a (non-loop) cycle in SYS must be an
            end point of at least two links in SYS.  These imply that
            there can be at most one &apos;intersection point&apos; on a
            loop in SYS but there can be any finite number of
            &apos;intersection points&apos; on a (non-loop) cycle in
            SYS.  See #$pointOnCycle and #$junctionInSystem. Note that
            under current treatment of loops in a path system, if one
            would like to talk about a &apos;loop&apos; in a path system
            a &apos;part&apos; of which is a path in the system, then
            he/she should make it a cycle rather than a loop in the
            system because according to what we said above, no
            &apos;part&apos; of a loop in the system can be presented as
            a path in the system.  Note also that in some cases (such as
            talking about relations between different #$PathSystems),
            using (#$LoopsInSystemFn SYS) to denote the set of all loops
            in SYS is more convenient than using the predicate #$loopInSystem.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cycleInSystem"/>
        <rdfs:domain rdf:resource="#Path-Cyclic"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="loves">
        <rdfs:label xml:lang="en">#$loves</rdfs:label>
        <rdfs:comment>(#$loves AGENT1 AGENT2) means AGENT1 loves AGENT2;
            AGENT2 has a strong emotional affect on AGENT1 whereby
            AGENT1 is usually loyal and devoted to and wishes well
            AGENT2, seeks AGENT2&apos;s companionship, and will incur
            substantial personal cost to help AGENT2.  Any #$Agent can
            love any other #$Agent, though there are specialized types
            of love which are restricted to two animals, two adult
            people, a person and a corporation, etc.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#likesObject"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="madeBy">
        <rdfs:label xml:lang="en">made by</rdfs:label>
        <rdfs:comment>The predicate #$madeBy is used to indicate that a
            particular product was made by a particular company (or
            companies).  (#$madeBy PROD COMORG) means that PROD, an
            instance of #$Product, was made by the
            #$CommercialOrganization COMORG.  See also the predicate #$makesProductType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#createdBy"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#SomethingExisting"/>
        <rdfs:range rdf:resource="#CommercialOrganization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mainConstituent">
        <rdfs:label xml:lang="en">main constituent</rdfs:label>
        <rdfs:comment>A predicate that relates objects to further
            objects which are their main constituents.
            (#$mainConstituent WHOLE PART) means that WHOLE is partially
            constituted by PART (so that (#$constituents WHOLE PART)
            holds), and (as a default) the physical properties of WHOLE
            are those of PART.  For example, for a particular instance
            of #$Lemonade, there is an instance of #$Water which is the
            #$mainConstituent, and most of the physical properties of
            that instance of #$Lemonade derive from that instance of
            #$Water.  On the other hand, a person is _not_ considered to
            have some portion of #$Water as #$mainConstituent, even
            though much of a person&apos;s mass is #$Water, since the
            physical properties of a person are not the same as those of water.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constituents"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mainProduct">
        <rdfs:label xml:lang="en">main product</rdfs:label>
        <rdfs:comment>The predicate #$mainProduct is used to identify
            the main item in a particular group of items that a customer
            gets when buying a packaged product.  (#$mainProduct
            PACKAGED-PROD PROD) means that the particular #$Product PROD
            is the main item of the #$PackagedProduct PACKAGED-PROD--as
            distinct from the accessories, agreements, packaging,
            literature, etc., that come along with it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="majorCityInState">
        <rdfs:label xml:lang="en">major city in state</rdfs:label>
        <rdfs:comment>A specialization of #$cityInState (q.v.).
            (#$majorCityInState CITY STATE) means that CITY is generally
            considered  to be a major (i.e. highly-populated or
            important) city in STATE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cityInState"/>
        <rdfs:domain rdf:resource="#City"/>
        <rdfs:range rdf:resource="#CountrySubsidiary"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="majorUndertakingsOf">
        <rdfs:label xml:lang="en">emotionally invested acter</rdfs:label>
        <rdfs:comment>(#$majorUndertakingsOf ACTION AGENT) means that
            AGENT consciously performed ACTION.  The success and
            consequence(s) of ACTION are important to AGENT.  As a
            result, for a sentient AGENT, failure usually results in
            AGENT feeling negative emotions, and success positive emotions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="makesProductType">
        <rdfs:label xml:lang="en">makes product type</rdfs:label>
        <rdfs:comment>The predicate #$makesProductType is used to
            indicate that a particular company makes a specific (i.e.,
            type of) product.  (#$makesProductType ORG PRODTYP) means
            that the #$CommercialOrganization ORG manufactures the
            #$ProductType PRODTYP.  Cf. #$madeBy, #$mainProductType and #$soleProductType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#ProductType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="maleParentActor">
        <rdfs:label xml:lang="en">male parent actor</rdfs:label>
        <rdfs:comment>(#$maleParentActor EVENT ORGANISM) means that
            ORGANISM is the male parent in the #$SexualReproductionEvent EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parentActors"/>
        <rdfs:domain rdf:resource="#SexualReproductionEvent"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="maleficiary">
        <rdfs:label xml:lang="en">#$maleficiary</rdfs:label>
        <rdfs:comment>(#$maleficiary EVENT AGENT) means that the #$Agent
            AGENT is harmed by the occurrence of the #$Event EVENT.
            That is, the interest or welfare of AGENT is thwarted,
            blocked, or harmed in EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="many-GenQuant">
        <rdfs:label xml:lang="en">many</rdfs:label>
        <rdfs:comment>This constant represents at least one relevant
            meaning of the  determiner `many&apos; as a generalized
            quantifier. To make things simpler, assume the case in which
            both arguments are collections: then we interpret
            (#$many-GenQuant COL1 COL2) as true iff the cardinality of
            (#$CollectionIntersection2Fn COL1 COL2) is greater than 1/2
            the  cardinality of (#$CollectionDifferenceFn COL1 COL2),
            i.e. iff at least one third of the instances of COL1 are
            also instances of COL2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#several-GenQuant"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="markCreated">
        <rdfs:label xml:lang="en">mark created</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$MarkingOnASurface (a specialization of #$Event) to
            instances of #$VisualMark (a specialization of
            #$InformationBearingThing). (#$markCreated MARKING MARK)
            means that MARK is the visual mark left by the event
            MARKING. See also the predicates #$marks (which relates the
            agent doing the marking to the object marked), and
            #$objectHasVisualMarks (which relates the mark itself to the
            object marked).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#outputsCreated"/>
        <rdfs:domain rdf:resource="#MarkingOnASurface"/>
        <rdfs:range rdf:resource="#VisualMark"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="marks">
        <rdfs:label xml:lang="en">marks</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$Agent-Generic to instances of #$PartiallyTangible.
            (#$marks AGENT OBJECT) means that AGENT makes or places a
            #$VisualMark MARK on OBJECT, after which
            (#$objectHasVisualMarks OBJECT MARK) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="massNumber">
        <rdfs:label xml:lang="en">mass number</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$massNumber WORD STRING) means that STRING is the mass
            noun form of WORD.  For example,  paper  is the mass noun
            form of #$Paper-TheWord.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#massNumber-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="massNumber-Generic">
        <rdfs:label xml:lang="en">mass number - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates that express mass number.
            (#$massNumber-Generic WORD STRING) means that the
            #$EnglishWord WORD has STRING as a mass form: either
            #$massNumber (the form corresponding to the #$MassNoun part
            of speech), #$pnMassNumber (for #$ProperMassNoun forms), or
            #$agentive-Mass (for #$AgentiveNoun forms).  This predicate
            is #$notAssertible, since it will always cash out as an
            assertion on one of its spec-preds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonSingular-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#nonPlural-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="massOfObject">
        <rdfs:label xml:lang="en">#$massOfObject</rdfs:label>
        <rdfs:comment>(#$massOfObject OBJ MASS) means that the tangible
            object OBJ has #$Mass MASS.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Mass"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mate">
        <rdfs:label xml:lang="en">#$mate</rdfs:label>
        <rdfs:comment>(#$mate PERSON1 PERSON2) means that PERSON1 and
            PERSON2 are mates and long-term monogamous companions.  In
            the #$UnitedStatesSocialLifeMt each person has at most only
            one mate at a time.  Hence, this predicate has #$SingleEntry arguments.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#romanticInterest"/>
        <rdfs:subPropertyOf rdf:resource="#friends"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="maxQuantValue">
        <rdfs:label xml:lang="en">max quant value</rdfs:label>
        <rdfs:comment>(#$maxQuantValue SCALAR POINT) means that the
            upper limit of the quantity SCALAR is POINT, an instance of
            #$ScalarPointValue.  SCALAR is an instance of
            #$ScalarInterval.  For example, the #$maxQuantValue for the
            pay of mail room employees might be (#$DollarsPerHour 6.5);
            e.g., (#$maxQuantValue `MailPay&apos; (#$DollarsPerHour
            6.5)).  Another example: (#$maxQuantValue (#$Unity 5 10) 10).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intervalBound"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarPointValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="maximalConnectedSubSystems">
        <rdfs:label xml:lang="en">maximal connected sub systems</rdfs:label>
        <rdfs:comment>(#$maximalConnectedSubSystems SYS SUB) means that
            SUB is a maximal connected subsystem of SYS, i.e., that SUB
            is an entire connected piece of SYS without other
            disconnected pieces of SYS.  That is to say, (i) SUB is a
            connected path system (see the collection
            #$ConnectedPathSystem), and consequently must have at least
            one node, say NODE, in it, (ii) SUB is a subsystem of SYS,
            and (iii) for every connected subsystem SUB1 of SYS
            containing NODE, SUB1 is a subsystem of SUB.  Thus a maximal
            connected subsystem SUB of a path system SYS must satisfy
            the conditions that (a) for each point X in SUB and each
            point Y in SYS that is not in SUB, X and Y are not connected
            in SYS, (b) for any nodes X and Y in SUB, for any link LINK
            in SYS between X and Y, LINK must also be in SUB, and (c)
            for each point X in SYS, if X is on a link in SYS which is
            also a link in SUB, then X must also be in SUB.  It follows
            that if SUB is a maximal connected subsystem of SYS, SUB
            must be a link-closed subsystem as well as a point-closed
            subsystem of SYS.  Another consequence is that if SUB is a
            maximal connected subsystem of SYS, and if X is a point in
            SUB and is on a loop in SYS, then the loop must also be in SUB.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#linkClosedSubSystems"/>
        <rdfs:subPropertyOf rdf:resource="#pointClosedSubSystems"/>
        <rdfs:domain rdf:resource="#PathSystem"/>
        <rdfs:range rdf:resource="#ConnectedPathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="measure">
        <rdfs:label xml:lang="en">measure</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            total elapsed time from its start to its end. (#$measure
            TEMPTHING MEASURE) means that MEASURE is the total elapsed
            time from when TEMPTHING started to happen (if an event) or
            started to exist (if a physical object or static situation)
            to when TEMPTHING ended or ceased to exist.  If TEMPTHING is
            #$temporallyContinuous,  its #$measure is the same as its
            #$duration (the length of time during which it actually
            happened or existed); but if TEMPTHING is discontinuous, its
            #$measure is strictly greater than its #$duration.  For
            example, the discontinuous event  GeorgeWashingtonSleeping
            has a #$measure that is about three times as long as its
            #$duration (assuming he slept about 8 hours a night).</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Time-Quantity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mediators">
        <rdfs:label xml:lang="en">mediator (pred)</rdfs:label>
        <rdfs:comment>(#$mediators OCCUR AGENT) means that AGENT
            participates deliberately in the #$SocialOccurrence OCCUR,
            and, by doing so, helps facilitate OCCUR.  For example,
            #$mediators would relate a judge to the trial he or she
            oversees, or a selling agent (see the specialization
            #$sellingAgent) to a sale he or she helps to bring about.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#SocialOccurrence"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="memberOfSpecies">
        <rdfs:label xml:lang="en">member of species</rdfs:label>
        <rdfs:comment>(#$memberOfSpecies ORG SPECIES) means that the
            organism ORG is a member of the #$BiologicalSpecies SPECIES.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#BiologicalSpecies"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="membershipMaintainedUnder">
        <rdfs:label xml:lang="en">membership maintained under</rdfs:label>
        <rdfs:comment>This predicate relates collections to the parthood
            relationships by which the collection is deemed  stuff-like
            . (#$membershipMaintainedUnder STUFFTYPE PARTHOODPRED) means
            that if STUFF is an instance of STUFFTYPE, (PARTHOODPRED
            STUFF STUFFPART), and STUFFPART is above the granularity
            level for STUFFTYPE, then STUFFPART is also an instance of
            STUFFTYPE.  For instance, if one takes a temporal slice (see
            #$timeSlices) of an instance of #$SightSeeing, that temporal
            slice will also be an instance of #$SightSeeing (if it meets
            granularity requirements). Hence,
            (#$membershipMaintainedUnder #$SightSeeing #$timeSlices).
            In fact, for any instance, TST, of #$TemporalStuffType it
            will be the case that (#$membershipMaintainedUnder TST
            #$timeSlices) and for any instance of #$ExistingStuffType,
            EST, it will be the case that (#$membershipMaintainedUnder
            EST #$physicalPortions).</rdfs:comment>
        <rdfs:domain rdf:resource="#StuffType"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="methodForAction">
        <rdfs:label xml:lang="en">method for action</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$ELSentence-Assertible to instances of
            #$ELSentence-Assertible.  (#$methodForAction ACTION
            ACTION_SEQUENCE) states that ACTION_SEQUENCE describes an
            appropriate method for carrying out the action described by
            ACTION. For cases where ACTION_SEQUENCE consists of a series
            of steps sufficiently atomic that they might be reasoned
            over by an AI planner (cf. #$PlanningDomainMicrotheory), see
            the more specialized predicate #$planForTask.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="microtheoryDesignationArgnum">
        <rdfs:label xml:lang="en">microtheory designation argnum</rdfs:label>
        <rdfs:comment>Used to specify which argument of a given
            #$MicrotheoryDesignatingRelation designates the microtheory
            in which to interpret some formula.</rdfs:comment>
        <rdfs:domain rdf:resource="#MicrotheoryDesignatingRelation"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="middleName">
        <rdfs:label xml:lang="en">middle name</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            specialization of #$nameString (q.v.).  (#$middleName PERSON
            STRING) means that PERSON is known by STRING as his or her
            middle name.   Persons usually  have no more than one middle
            name.  STRING is typically a #$HumanGivenNameString, though
            in some cultures certain people have
            #$HumanFamilyNameStrings for their middle names.  See also #$middleNameInitial.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#HumanNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="minQuantValue">
        <rdfs:label xml:lang="en">min quant value</rdfs:label>
        <rdfs:comment>(#$minQuantValue SCALAR POINT) means that the
            lower limit of SCALAR is POINT, an element of
            #$ScalarPointValue.  SCALAR is an instance of
            #$ScalarInterval.  For example, the #$minQuantValue for the
            pay of mail room employees might be (#$DollarsPerHour 4.5);
            e.g., (#$minQuantValue `MailPay&apos; (#$DollarsPerHour
            4.5)).  Another example: (#$minQuantValue (#$Unity 5 10) 5).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intervalBound"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarPointValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="modalInArg">
        <rdfs:label xml:lang="en">modal in arg</rdfs:label>
        <rdfs:comment>(#$modalInArg PRED N) means that PRED is a
            #$ModalPredicate that takes a propositional argument in the
            Nth argument place.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="moduleExportsProgramFunction">
        <rdfs:label xml:lang="en">module exports program function</rdfs:label>
        <rdfs:comment>A binary predicate relating an instance of
            #$ComputerProgramModule-CW with an instance of
            #$ProgramStep. (#$moduleExportsProgramFunction MODULE
            FUNCTION) means that importing MODULE into a computer
            program allows that program to access FUNCTION as a program step.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#ApplicationProgram"/>
        <rdfs:range rdf:resource="#ProgramStep"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="monetaryValueOfThing">
        <rdfs:label xml:lang="en">monetary value of thing</rdfs:label>
        <rdfs:comment>(#$monetaryValueOfThing THING VALUE) means that
            #$TemporalThing THING (which may be goods or services) is in
            some sense worth #$MonetaryValue VALUE. This may be due to
            its appraised value (for which see #$appraisedValue), due to
            its having been bought for the price VALUE some time in the
            past (for which see #$bookValue), due to its being currently
            for sale at the price VALUE (for which see #$basicPrice),
            due to its being a piece of #$Currency that has been
            manufactured to stand for the amount of money VALUE (for
            which see #$tenderValue), or for other reasons. This
            predicate is thus very much an umbrella term. See also the
            ternary predicate #$monetaryValueOfThingTo.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="moneyTransferMode">
        <rdfs:label xml:lang="en">money transfer mode</rdfs:label>
        <rdfs:comment>(#$moneyTransferMode TRANSACTION  TYPE) means that
            in some particular money transfer TRANSACTION,  the
            #$MoneyTenderType used in that transaction was TYPE, e.g.,
            #$CreditCard, #$Check-TenderObject, etc.</rdfs:comment>
        <rdfs:domain rdf:resource="#MoneyTransfer"/>
        <rdfs:range rdf:resource="#MoneyTenderType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="moneyTransferred">
        <rdfs:label xml:lang="en">money transferred</rdfs:label>
        <rdfs:comment>This predicate indicates the amount of money
            involved in a particular transfer of funds.
            (#$moneyTransferred TRANSFER MONEY) means that the
            #$MonetaryValue MONEY is transferred in the money transfer
            event TRANSFER.  Note that MONEY is distinct from the
            physical #$TenderObjects (q.v.) used to accomplish TRANSFER
            (cf. #$objectTendered).  For example, the #$moneyTransferred
            in a car payment might be 400 U.S. dollars, while the
            #$objectTendered in the payment is an instance of
            #$Check-TenderObject (q.v.).</rdfs:comment>
        <rdfs:domain rdf:resource="#MoneyTransfer"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="monumentHonors">
        <rdfs:label xml:lang="en">honoree</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$MemorialMarker to instances of #$Agent (note that each
            such instance may be an individual or a group).
            (#$monumentHonors MONUMENT HONOREE(S)) means that MONUMENT
            is a #$MemorialMarker constructed to honor or commemorate
            HONOREE(S), and to cause people who perceive MONUMENT to
            remember and respect HONOREE(S). As an instance of #$Agent,
            HONOREE(S) must not be an event or a physical object. (For
            honoring these, see the more general #$artifactHonors).
            Usually, but not always, the MONUMENT is built by someone
            other than HONOREE(S) (but some people build monuments to
            themselves).  If HONOREE(S) is living when MONUMENT is
            built, HONOREE(S) may be present at an #$Event of
            announcing, inaugurating or unveiling the MONUMENT; see #$eventHonors.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsAfterEndingOf"/>
        <rdfs:subPropertyOf rdf:resource="#artifactHonors"/>
        <rdfs:domain rdf:resource="#MemorialMarker"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="morphologicalConstraintRelevantToWord">
        <rdfs:label xml:lang="en">morphological constraint relevant to word</rdfs:label>
        <rdfs:comment>(#$morphologicalConstraintRelevantToWord
            CONSTRAINT WORD)  means that the
            #$MorphologicalRuleConstraint CONSTRAINT applies  to the
            #$LexicalWord WORD. For example, a CONSTRAINT such as
            (#$MorphemeCategorialConstraintFn #$DeverbalAffix #$Verb) is
            relevant to all words which are derived with deverbal affixes.</rdfs:comment>
        <rdfs:domain rdf:resource="#MorphologicalRuleConstraint"/>
        <rdfs:range rdf:resource="#LexicalWord"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="morphologicalRuleRelevantToWord">
        <rdfs:label xml:lang="en">morphological rule relevant to word</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#AffixRule"/>
        <rdfs:range rdf:resource="#LexicalWord"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="morphologicallyDerivedFrom">
        <rdfs:label xml:lang="en">morphologically derived from</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordHasConstituent"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#BaseWordForm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="most-GenQuant">
        <rdfs:label xml:lang="en">most - gen quant</rdfs:label>
        <rdfs:comment>(#$most-GenQuant COL1 COL2) is true iff over half
            the elements of COL1 are also elements of COL2.</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mother">
        <rdfs:label xml:lang="en">mother (CycL predicate)</rdfs:label>
        <rdfs:comment>An instance of #$FamilyRelationSlot and a
            specialization of #$coreRelatives.  (#$mother CHILD MOTHER)
            means that MOTHER is a female  animal (there might be more
            than one) that fills the role of mother for CHILD. In the
            case of humans, MOTHER might be CHILD&apos;s biological
            mother, adoptive  mother, stepmother, or foster mother.  But
            note that being a person&apos;s  #$biologicalMother (q.v.)
            is neither necessary nor sufficient for being  his/her
            mother in the present sense.  In the case of nonhuman
            animals (see #$NonPersonAnimal), however, #$mother holds
            between two given creatures  if and only if
            #$biologicalMother does.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#FemaleAnimal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="motionPathway-Complete">
        <rdfs:label xml:lang="en">#$motionPathway-Complete</rdfs:label>
        <rdfs:comment>This predicate can be used to indicate that the
            trajectory or trajectories travelled by one or more objects
            during a movement event follow some spatial path throughout
            the entire movement. More formally, if MOVE is an instance
            of #$Translation-SingleTrajectory, (#$motionPathway-Complete
            MOVE PATH) means that the instance  PATH of #$Path-Spatial
            contains the entire instance of #$Trajectory along which the
            objects moving (see #$objectMoving) travel in MOVE.  Note
            that there can be at most one #$motionPathway-Complete in
            this case.  If MOVE is an instance of
            #$Translation-MultiTrajectory, (#$motionPathway-Complete
            MOVE PATH) means that the instance PATH of #$Path-Spatial
            contains the entire instance of #$Trajectory along which at
            least one of the objects moving in MOVE travels.  In this
            case, more than one #$motionPathway-Complete may exist.
            (Note that the instance of #$Traversal determined by the
            #$trajectory-Complete need not occupy the whole length of
            PATH.) To explain this predicate somewhat differently, any
            #$motionPathway-Complete of an instance of
            #$Movement-TranslationEvent connects the starting and
            stopping points (the #$fromLocation and #$toLocation) of the
            whole trajectory of at least one object in the movement
            event (See also #$pathConnects).   Note that PATH may be a
            marked or unmarked instance of #$Path-Spatial.  See also
            #$trajectoryPassesThrough and #$motionPathway-Partial. You
            can use #$trajectoryPassesThrough to state that an object
            passes through a particular location on the object&apos;s trajectory.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genericPathway-Complete"/>
        <rdfs:subPropertyOf rdf:resource="#motionPathway-Partial"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="motionPathway-Exact">
        <rdfs:label xml:lang="en">path of motion</rdfs:label>
        <rdfs:comment>(#$motionPathway-Exact MOVE PATH) indicates that
            the trajectory or trajectories travelled by one or more
            objects during a movement event is the spatial path PATH.
            More formally, if MOVE is an instance of
            #$Translation-SingleTrajectory, (motionPathway-Complete MOVE
            PATH) means that the instance PATH of #$Path-Spatial is the
            entire instance of #$Trajectory along which the objects
            moving (see #$objectMoving) travel in MOVE.  Note that there
            can be at most one #$motionPathway-Complete if MOVE is an
            instance of #$Translation-SingleTrajectory.  If MOVE is an
            instance of #$Translation-MultiTrajectory,
            (#$motionPathway-Exact MOVE PATH) means that the instance
            PATH of #$Path-Spatial is the entire instance of
            #$Trajectory along which at least one of the objects moving
            in MOVE travels.  In this case, more than one
            #$motionPathway-Complete may exist.  (Note that the instance
            of #$Traversal determined by the trajectory-Complete need
            not occupy the whole length of PATH.) To explain this
            predicate somewhat differently, any #$motionPathway-Complete
            of an instance of #$Movement-TranslationEvent connects the
            starting and stopping points (the fromLocation and
            toLocation) of the whole trajectory of at least one object
            in the movement event (See also #$pathConnects).  Note that
            PATH may be a marked or unmarked instance of #$Path-Spatial.
            See also #$trajectoryPassesThrough and #$motionPathway-Complete.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genericPathway-Exact"/>
        <rdfs:subPropertyOf rdf:resource="#motionPathway-Complete"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="motionPathway-Partial">
        <rdfs:label xml:lang="en">path overlapping the path of motion</rdfs:label>
        <rdfs:comment>This predicate can be used to indicate one of the
            paths followed in some movement event. More formally,
            (#$motionPathway-Partial MOVE PATH) means that the instance
            MOVE of #$Movement-TranslationEvent has a trajectory (see
            #$trajectory-Complete) with a sub-trajectory in common with
            some #$subPaths of the instance PATH of #$Path-Spatial. For
            example, if a certain trip to Dallas from Austin is via
            highway I-35, this does not imply either that the whole
            journey is along I-35 (it also may be along driveways and
            side streets), or that it is along all of I-35 (which would
            take you from the Mexican border all the way to the Canadian
            border).  A part of the journey is along a part of I-35.
            Contrast this predicate with #$motionPathway-Complete, which
            indicates the relation between a movement MOVE and an
            instance of #$Path-Spatial followed throughout all of MOVE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genericPathway-Partial"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Path-Spatial"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="movesInDirection-Throughout">
        <rdfs:label xml:lang="en">moves in direction - throughout</rdfs:label>
        <rdfs:comment>(#$movesInDirection-Throughout OBJ DIR) means that
            OBJ moves in the  direction DIR throughout all spatial and
            temporal slices of OBJ.  Since instances of #$Entity rarely
            move in one direction throughout their  entire existence,
            assertions involving #$movesInDirection-Throughout  will
            usually be qualified with a #$holdsIn.  This predicate is
            useful  for inheriting the direction of motion of an  object
            to its temporal or spatial parts.  If such an inference is
            too  strong see #$movesInDirection-Average.  Negative
            exemplar cases of the  relationship include a winding river
            whose different spatial slices  follow different directions,
            or a deflating balloon whose different  temporal slices move
            in different directions.  Positive exemplar  usages of
            #$movesInDirection-Throughout could relate a specific point
            of the winding river to its direction, or could relate the
            deflating  balloon at particular instant in time to its
            direction.  Related  predicates include
            #$directionOfTranslation-Avg and
            #$directionOfTranslation-Throughout which relate a
            #$Movement-TranslationEvent to a direction that all
            #$objectMovings of  that event move in.
            #$movesInDirection-Throughout is to be preferred  over
            #$directionOfTranslation-Throughout in situations where the
            computational cost of reifying a movement event (see
            #$Movement-TranslationEvent) is not warranted.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="movesWith">
        <rdfs:label xml:lang="en">moves with</rdfs:label>
        <rdfs:comment>(#$movesWith MOVED MOVER) means that if MOVER
            undergoes translation (see #$Movement-TranslationEvent) then
            MOVED by default also undergoes a translation in the same
            direction and same speed.  However, this default is defeated
            if MOVED is undergoing motion relative to MOVER. For
            example, a person would #$movesWith the Titanic if they were
            #$on-Physical it.  However, if MOVED is moving relative to
            MOVER, then its &apos;absolute&apos; motion is computed by
            subtracting its motion relative to MOVER from the
            &apos;absolute&apos; motion vector of MOVER.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mtInferenceFunction">
        <rdfs:label xml:lang="en">mt inference function</rdfs:label>
        <rdfs:comment>A #$CycInferenceDescriptorPredicate.
            (#$mtInferenceFunction MT FUNCTION) means that FUNCTION is
            the name of a piece of code in the SubL implementation of
            Cyc that specifies how inferences will be done  in the
            #$Microtheory MT.  For instance, (#$mtInferenceFunction
            #$EverythingPSC ALL-MTS-INFERENCE).</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#SubLSymbol"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="mtTime">
        <rdfs:label xml:lang="en">mt time</rdfs:label>
        <rdfs:comment>A #$MicrotheoryPredicate that is used to indicate
            a period of time throughout which the assertions in a given
            microtheory hold true. (#$mtTime MT TEMP-THING) means that
            the assertions in the #$Microtheory MT hold true throughout
            (the existence, persistence or duration of) TEMP-THING.
            Since TEMP-THING is restricted only to instances of
            #$TemporalThing, it covers a wide range of entities -- for
            e.g. instances of #$Person, #$Event, #$Artifact or (of
            course) #$TimeInterval. See also #$MtTimeFn and #$assertionTimeOfMicrotheory.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#holdsInTime-Sometime"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myCreationDate">
        <rdfs:label xml:lang="en">my creation date</rdfs:label>
        <rdfs:comment>(#$myCreationDate CONSTANT DATE) means that the
            #$CycLConstant CONSTANT was created at DATE, an instance of
            #$Date.  Depending on the precision of the bookkeeping
            information stored for CONSTANT, DATE may be accurate to the
            day, or to the second.  #$myCreationDate combines
            information from #$myCreationTime and #$myCreationSecond (if
            extant) to yield a CycL date.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myCreationPurpose">
        <rdfs:label xml:lang="en">my creation purpose</rdfs:label>
        <rdfs:comment>Internal bookkeeping predicate used for keeping
            track of the category  of the task that the creator of a Cyc
            constant was performing at the  time that constant was
            created.  The categories that this predicate  takes in the
            second argument exist for the purpose of internal record
            keeping; do not confuse them with the official Cycorp
            billing  categories.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#PurposefulAction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myCreationSecond">
        <rdfs:label xml:lang="en">my creation second</rdfs:label>
        <rdfs:comment>(#$myCreationSecond CONSTANT SECOND) means that
            the #$CycLConstant CONSTANT was created at the
            #$CycUniversalSecond SECOND on the day CONSTANT was created
            (the related predicate #$myCreationTime (q.v.) relates a
            #$CycLConstant to the day it was created).  The format of
            SECOND is HHMMSS; that is, the first two digits give the
            hour of the day on which the constant was created, the
            second two digits give the minute of the hour at which the
            constant was created, and the last two digits give the
            second of the minute at which the constant was created.  For
            example, midnight is 000000 (or simply 0), noon is 120000,
            3:42:59 pm is 154259, and 11:59:59 pm is 235959.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#CycUniversalSecond"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myCreationTime">
        <rdfs:label xml:lang="en">my creation time</rdfs:label>
        <rdfs:comment>(#$myCreationTime CONSTANT TIME) means that the
            #$CycLConstant CONSTANT was created at TIME, an instance of
            #$CycUniversalDate.  The format of TIME is YYYYMMDD; that
            is, the first four digits give the year in which the
            constant was created, the next two digits give the month in
            which it was created, and the final two digits give the day
            of the month on which it was created. For example, 19910309
            is March 9, 1991.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#CycUniversalDate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myCreator">
        <rdfs:label xml:lang="en">my creator</rdfs:label>
        <rdfs:comment>(#$myCreator X Y) means that Y is the constant
            representing the person who introduced the constant X into
            the Cyc vocabulary. In general, the editing interfaces to
            the Cyc KB only allow the KB to be modified when an instance
            of #$Cyclist is designated as the author of the changes.
            See also #$sourceOfTerm-Person.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#Cyclist"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="myReviewer">
        <rdfs:label xml:lang="en">my reviewer</rdfs:label>
        <rdfs:comment>(#$myReviewer TERM CYCLIST) means that TERM has
            been reviewed by CYCLIST and is deemed ``okay&apos;&apos;.
            In other words, all assertions on CONSTANT that were made
            prior to the time prior to when #$myReviewer was asserted
            (see #$assertionAssertTime and #$assertionAssertSecond) have
            been checked over by CYCLIST.  Note, if CONSTANT has had
            assertions made on it since #$myReviewer was asserted, then,
            technically speaking the constant has not been completely
            reviewed and should be re-reviewed.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#Cyclist"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nameSpelling">
        <rdfs:label xml:lang="en">name spelling</rdfs:label>
        <rdfs:comment>(#$nameSpelling NAME SPELLING) means that the
            #$ProperNameString SPELLING is a correct spelling of the
            #$Name NAME. For example, (#$nameSpelling #$Esteban-TheName
            Esteban ).</rdfs:comment>
        <rdfs:domain rdf:resource="#Name"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nameString">
        <rdfs:label xml:lang="en">name-string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$nameString TERM STRING) means that the #$ProperNameString
            STRING names the thing denoted by the
            #$CycLReifiableDenotationalTerm TERM. Normally, STRING
            corresponds to a proper name. For a term that has more than
            one name associated with it, use #$preferredNameString for
            the name that is to be used in natural language paraphrase.
            Note that two name strings for a given thing need not have
            the same sense or intension; thus, for instance,
            (#$nameString #$MarkTwain  SamuelClemens ) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#properNameStrings"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nameSuffix">
        <rdfs:label xml:lang="en">suffix</rdfs:label>
        <rdfs:comment>Predicate indicating the different suffixes that
            may go on a person&apos;s name; e.g., jr., III, esq., Ph.D.,
            Ed.D., M.A., etc.</rdfs:comment>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="natArgumentsEqual">
        <rdfs:label xml:lang="en">nat arguments equal</rdfs:label>
        <rdfs:comment>(#$natArgumentsEqual NAT1 NAT2) means that the
            arguments of NAT1 and NAT2 unify.  For example,
            (#$natArgumentsEqual (#$FemaleFn #$Dog) (#$MaleFn #$Dog).
            More precisely, (#$and (#$termOfUnit NAT1 (FUNCTION1 .
            ARGS)) (#$termOfUnit NAT2 (FUNCTION2 . ARGS))) implies
            (#$natArgumentsEqual NAT1 NAT2).</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:range rdf:resource="#CycLReifiableNonAtomicTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="natFunction">
        <rdfs:label xml:lang="en">nat function</rdfs:label>
        <rdfs:comment>(#$natFunction NAT FUNCTION) states that FUNCTION
            is the function used in the non-atomic term NAT.  For
            example,  (#$natFunction (#$JuvenileFn #$Dog) #$JuvenileFn).
            More precisely, (#$termOfUnit NAT (FUNCTION ...)) implies
            (#$natFunction NAT FUNCTION).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termDependsOn"/>
        <rdfs:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:range rdf:resource="#ReifiableFunction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nationalLanguage">
        <rdfs:label xml:lang="en">national language</rdfs:label>
        <rdfs:comment>(#$nationalLanguage REGION LANG) means that LANG
            is officially recognized by the political region REGION as a
            national language. Note that a region may have more than one #$nationalLanguage.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#languagesSpokenHere"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#LivingLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nativeLanguage">
        <rdfs:label xml:lang="en">native language</rdfs:label>
        <rdfs:comment>(#$nativeLanguage PERSON LANG) means that the
            #$Person PERSON is fluent in the #$NaturalLanguage LANG, and
            that LANG was (one of the) first language(s) spoken by
            PERSON.  The #$arg2Format for this predicate is
            #$SetTheFormat, to cover cases in which a person has two or
            more first languages (as might be the case when a child is
            raised in a bilingual household).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#languageSpoken"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#NaturalLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="near">
        <rdfs:label xml:lang="en">nearby object (CycL predicate)</rdfs:label>
        <rdfs:comment>This intentionally-vague predicate relates spatial
            things that are relatively near each other.  (#$near THIS
            THAT) means that the distance between THIS and THAT is such
            that -- given the situation at hand and the sorts of things
            that THIS and THAT are -- they would be considered near each
            other by most observers.  Note that an object is #$near
            itself, anything it touches, and any part of itself.  When
            appropriate, use a more precisely-defined predicate such as
            #$nearToDegree, #$nearRelativeTo, #$nearForRolesInEventType,
            #$nearnessForRolesInEventType, #$touchesDirectly, or #$physicalParts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#notFarFrom"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestGenlAttributes">
        <rdfs:label xml:lang="en">nearest genl attributes</rdfs:label>
        <rdfs:comment>(#$nearestGenlAttributes ATT NEAR-ATT) relates any
            attribute value ATT to the nearest unsubsumed attribute
            value NEAR-ATT of which it is a spec attribute.  This
            predicate is #$notAssertible, since it must always be
            recomputed from the current state of the #$genlAttributes hierarchy.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlAttributes"/>
        <rdfs:domain rdf:resource="#AttributeValue"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestGenlMt">
        <rdfs:label xml:lang="en">nearest genl mt</rdfs:label>
        <rdfs:comment>A specialization of #$genlMt.  (#$nearestGenlMt MT
            NEAR-MT) means that NEAR-MT is a  nearest  microtheory of
            which MT is a specialization.  That is, (#$genlMt MT
            NEAR-MT) holds, MT is not identical to NEAR-MT, and there is
            no reified #$Microtheory NEARER-MT distinct from MT and
            NEAR-MT such that both (#$genlMt MT NEARER-MT) and (#$genlMt
            NEARER-MT NEAR-MT) hold.  Note that #$nearestGenlMt is
            non-assertible (see #$notAssertible), since its extension at
            any given time depends upon (and so must be recomputed from)
            the current state of the #$genlMt hierarchy in the Cyc
            Knowledge Base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlMt"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestGenlPreds">
        <rdfs:label xml:lang="en">nearest genl preds</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForPredicates and a
            specialization of #$genlPreds (q.v.).  (#$nearestGenlPreds
            PRED NEAR-PRED) means that NEAR-PRED  is a  nearest
            generalization of PRED.  That is, (#$genlPreds PRED
            NEAR-PRED)  holds, PRED is not identical to NEAR-PRED, and
            there is no reified #$Predicate  OTHER-PRED distinct from
            PRED and NEAR-PRED such that both  (#$genlPreds PRED
            OTHER-PRED) and (#$genlPreds OTHER-PRED NEAR-PRED) hold.
            Note   that #$nearestGenlPreds is non-assertible (see
            #$notAssertible), since its  extension at any given time
            depends upon (and so must be recomputed from) the  current
            state of the #$genlPreds hierarchy in the Cyc Knowledge Base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlPreds"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestGenls">
        <rdfs:label xml:lang="en">nearest genls</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections and a
            specialization of #$genls (q.v.). (#$nearestGenls COL
            NEAR-COL) means that NEAR-COL is a  nearest  generalization
            of COL. That is, (#$genls COL NEAR-COL) holds, COL is not
            identical to NEAR-COL, and there is no reified #$Collection
            NEARER-COL distinct from COL and NEAR-COL such that both
            (#$genls COL NEARER-COL) and (#$genls NEARER-COL NEAR-COL)
            hold. Note that #$nearestGenls is non-assertible (see
            #$notAssertible), since its extension at any given time
            depends upon (and so must be recomputed from) the current
            state of the #$genls hierarchy in the Cyc Knowledge Base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genls"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestIsa">
        <rdfs:label xml:lang="en">nearest isa</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForAnyThing, and a specialization
            of #$isa (q.v.).  (#$nearestIsa OBJ COL) means that COL is a
            nearest  collection of which OBJ is an instance.  That is,
            (#$isa OBJ COL) holds, OBJ is not identical to COL, and
            there is no reified #$Collection NEARER-COL distinct from
            OBJ and COL such that both (#$isa OBJ NEARER-COL) and
            (#$genls NEARER-COL COL) hold.  Note that #$nearestIsa is
            non-assertible (see #$notAssertible), since its extension at
            any given time depends upon (and so must be recomputed from)
            the current state of the #$isa and #$genls hierarchy in the
            Cyc Knowledge Base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestSpecAttributes">
        <rdfs:label xml:lang="en">nearest spec attributes</rdfs:label>
        <rdfs:comment>(#$nearestSpecAttributes ATT NEAR-ATT) relates any
            attribute value ATT to the nearest unsubsumed attribute
            NEAR-ATT which are spec attributes of ATT.
            #$nearestSpecAttributes is #$notAssertible, since it must
            always be recomputed from the current state of the
            #$genlAttributes hierarchy. Moreover, it is merely the
            #$elInverse of #$nearestGenlAttributes.</rdfs:comment>
        <rdfs:domain rdf:resource="#AttributeValue"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestSpecPreds">
        <rdfs:label xml:lang="en">nearest spec preds</rdfs:label>
        <rdfs:comment>(#$nearestSpecPreds PRED NEAR-PRED) relates any
            predicate PRED to the nearest unsubsumed predicates
            NEAR-PRED which are spec predicates of PRED.
            #$nearestSpecPreds is #$notAssertible, since it must always
            be recomputed from the current state of the #$genlPreds
            hierarchy. Moreover, it is merely the #$elInverse of #$nearestGenlPreds.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nearestSpecs">
        <rdfs:label xml:lang="en">nearest specs</rdfs:label>
        <rdfs:comment>(#$nearestSpecs COL NEAR-SPEC) relates any
            collection COL to the nearest unsubsumed collections
            NEAR-SPEC which are subsets of COL. This predicate is
            #$notAssertible, since it  must always be recomputed from
            the current state of the #$genls hierarchy.  Moreover, it is
            merely the #$elInverse of #$nearestGenls.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="negationAttribute">
        <rdfs:label xml:lang="en">negation attribute</rdfs:label>
        <rdfs:comment>This predicate relates attributes that are
            mutually incompatible.  (#$negationAttribute ATT1 ATT2)
            means nothing has, or could have, both ATT1 and ATT2 as
            attributes at the same time.  This implies  more than mere
            material non-coincidence (e.g. being a 5-star restaurant and
            being colored hot-pink are _not_ negation-attributes, even
            if there happen to be no hot-pink 5-star restaurants in
            existence); but #$negationAttribute does subsume both
            physical  and  logical  (or  conceptual ) incompatibility
            between attributes.  Note that it is presupposed that ATT1
            and ATT2 are distinct. (Otherwise, any self-contradictory or
            impossible-to-have  attribute would trivially qualify as a
            negation-attribute of itself, and #$negationAttribute could
            not be considered an #$IrreflexiveBinaryPredicate.)</rdfs:comment>
        <rdfs:domain rdf:resource="#AttributeValue"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="negationInverse">
        <rdfs:label xml:lang="en">negation inverse</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that each of   two
            binary predicates is a logical  contrary  of the
            other&apos;s inverse.  (#$negationInverse BINPRED1 BINPRED2)
            means that if BINPRED1 holds between  a pair &lt;THING1,
            THING2&gt;, then BINPRED2 does _not_ hold between the
            inverse  pair &lt;THING2, THING1&gt; (and vice versa).  In
            other words,   (#$negationInverse BINPRED1 BINPRED2) is
            equivalent to   (#$not (#$and (BINPRED1 ARG1 ARG2) (BINPRED2
            ARG2 ARG1))).  Note that any   #$AsymmetricBinaryPredicate
            is related to itself by #$negationInverse.  For example,
            (#$negationInverse #$subordinates #$subordinates) holds,
            since if one person is a subordinate of another, the latter
            person cannot at the same time   also be a subordinate of
            the former.  See also #$negationPreds and #$genlInverse.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="negationMt">
        <rdfs:label xml:lang="en">negation mt</rdfs:label>
        <rdfs:comment>(#$negationMt MT-1 MT-2) means that the domain
            assumptions of the #$Microtheory MT-1 are inconsistent with
            those of the #$Microtheory MT-2, and no lifting can occur
            between MT-1 and MT-2 (i.e. assertions made in one
            microtheory should not be made visible to the other
            microtheory). For cases where two microtheories differ not
            in domain assumptions but purely in content (assertions made
            within those microtheories), see the less specialized #$contradictoryMt.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#contradictoryMt"/>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#Microtheory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="negationPreds">
        <rdfs:label xml:lang="en">mutually-negating predicate (CycL predicate)</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that two predicates
            are logical  contraries  of one another.  (#$negationPreds
            PRED1 PRED2) means that if PRED1 holds among a given
            sequence of things, then PRED2 does _not_ hold  among that
            sequence (and vice versa).  In other words, (#$negationPreds
            PRED1 PRED2) is equivalent to (#$not (#$and (PRED1 . ARGS)
            (PRED2 . ARGS))). For example, (#$negationPreds #$owns
            #$rents) holds, as one cannot both own and rent a given
            thing at the same time.  Note that PRED1 and PRED2 are
            constrained (see e.g. #$interArgIsa) either to both having
            the same fixed-arity (see #$FixedArityRelation) or to both
            having variable-arity (see #$VariableArityRelations).  See
            also #$genlPreds and #$negationInverse.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="negativeVestedInterest">
        <rdfs:label xml:lang="en">negative vested interest</rdfs:label>
        <rdfs:comment>(#$negativeVestedInterest  AGT OBJ) means #$Agent
            AGT has a negative interest in the object OBJ or in the good
            fortune of OBJ, and a positive interest in its misfortune.
            Generally, AGT will be helped or pleased by the destruction,
            diminution, weakening, or retarding of OBJ, and will be hurt
            or displeased if OBJ is preserved or enhanced.  See #$positiveVestedInterest.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nicknames">
        <rdfs:label xml:lang="en">nicknames</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="no-GenQuant">
        <rdfs:label xml:lang="en">no - gen quant</rdfs:label>
        <rdfs:comment>This predicate relates sets or collections (see
            #$SetOrCollection) that have no elements in common.
            (#$no-GenQuant SETORCOL1 SETORCOL2) means that SETORCOL1 is
            disjoint with SETORCOL2: nothing is an element of both.
            That is, there is no THING such that (#$elementOf THING
            SETORCOL1) and (#$elementOf THING SETORCOL2).  Note that
            this predicate is _not_ irreflexive: it is trivially
            possible for a #$SetOrCollection to be disjoint with itself,
            but only if it is empty (i.e. has no elements).  Thus, for
            example, (#$no-GenQuant #$TheEmptySet #$TheEmptySet) holds.
            Also, note that #$no-GenQuant is a more general relation
            than #$disjointWith (q.v.).</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nodeInLAN">
        <rdfs:label xml:lang="en">node in l a n</rdfs:label>
        <rdfs:comment>A specialization of #$nodeInSystem; a binary
            predicate that relates instances of #$Computer to instances
            of #$LocalAreaNetwork.  (#$nodeInLAN NODE LAN) means that
            NODE is a computer on the local area network, LAN.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#nodeInSystem"/>
        <rdfs:domain rdf:resource="#Computer"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nodeInSystem">
        <rdfs:label xml:lang="en">node in system</rdfs:label>
        <rdfs:comment>A specialization of #$pointInSystem (q.v.) that
            relates #$PathSystems (q.v.) to their  nodes .
            (#$nodeInSystem NODE SYSTEM) means that NODE is a node in
            SYSTEM.  The nodes of SYSTEM are distinguished from its
            other points as follows.  (i) Every node in SYSTEM is a
            point in SYSTEM, but only nodes can be either end points of
            links (see #$linkBetweenInSystem),  deadend  points (see
            #$deadEndInSystem) or  isolated  points (i.e. points that
            are not on any link or loop; see #$isolatedNodeInSystem).
            (ii) Each point that is not a node must be somewhere on a
            single link.  That is, for each point POINT in SYSTEM,
            either (#$pointOnPath POINT LINK) holds for unique link LINK
            in SYSTEM, or POINT is a node.  Thus every  intersection
            point (see #$junctionInSystem) in SYSTEM is a node.  See
            also #$NodesInSystemFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pointInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nonDeliberateActors">
        <rdfs:label xml:lang="en">non-deliberate acter (pred)</rdfs:label>
        <rdfs:comment>(#$nonDeliberateActors ACT ACTOR) means that ACTOR
            plays some role in the #$Event ACT, but is not acting
            deliberately.  For example, #$JohnKennedy was a
            #$nonDeliberateActors in his assassination, a person is a
            #$nonDeliberateActors in his/her own autonomic bodily
            functioning, and Mount #$Vesuvius-Volcano was a
            #$nonDeliberateActors in the event of its eruption that
            destroyed Pompeii.  #$nonDeliberateActors is a negative
            specification of the role an actor has in an event; the role
            of particular #$nonDeliberateActors might be further
            specified positively, for example, with #$bodilyActedOn or #$bodilyDoer.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nonGradableAdjectiveForm">
        <rdfs:label xml:lang="en">non gradable adjective form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nonPlural-Generic">
        <rdfs:label xml:lang="en">non-plural form (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates that do not express plural number:
            specifically, the spec-preds of #$singular-Generic and
            #$massNumber-Generic (q.v.).  This predicate is
            #$notAssertible, since it will always cash out as an
            assertion on a more specialized predicate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nounStrings"/>
        <rdfs:subPropertyOf rdf:resource="#prenominalModifier"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nonSingular-Generic">
        <rdfs:label xml:lang="en">non singular - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates that do not express singular number:
            the spec-preds of #$plural-Generic and #$massNumber-Generic
            (q.v.).  This predicate is #$notAssertible, since it will
            always cash out as an assertion on a more specialized predicate</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nounStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nonThirdSg-Present">
        <rdfs:label xml:lang="en">non third sg - present</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates for present tense active-voice verbs
            that are not third-person. For the vast majority of English
            verbs, this is morphologically identical to the #$infinitive form.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentTense-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="northOf">
        <rdfs:label xml:lang="en">north of</rdfs:label>
        <rdfs:comment>(#$northOf NORTH SOUTH) means that the
            #$SpatialThing-Localized NORTH is situated to the north of
            the #$SpatialThing-Localized SOUTH, when viewed in a
            planetary frame of reference, typically the terrestrial
            frame of reference.  To relate the positions of fixed
            instances of #$GeographicalThing, use the more specific, #$permanentlyNorthOf.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#fartherNorthThan"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="notFarFrom">
        <rdfs:label xml:lang="en">not far from</rdfs:label>
        <rdfs:comment>A vague spatial predicate. (#$notFarFrom THING-1
            THING-2) means that THING-1 is not #$farFrom THING-2.  The
            distance limit of what is  far  is vague, and corresponds,
            in a given context, to the limits of #$near.  (#$notFarFrom
            THING-1 THING-2) means that THING-1 is #$near, #$touches or
            #$spatiallyIntersects (including #$spatiallySubsumes and the
            reverse) THING-2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="notices">
        <rdfs:label xml:lang="en">notices</rdfs:label>
        <rdfs:comment>(#$notices AGT PROP) means that  AGT believes the
            proposition PROP because AGT has seen, heard,  smelled, etc.
            PROP via some instance of #$Perceiving.  Although
            (#$notices AGT PROP) implies (#$beliefs AGT PROP) {via the
            assertion  (#$genlPreds #$notices #$beliefs)}, exceptions
            occur if AGT believes  they have been hallucinating or
            drugged, for example.  The predicate  #$beliefs, unlike
            #$notices, can include propositions gathered through
            inferring, dreaming, intuiting.  The temporal extent of
            (#$notices AGT  PROP) is at least a &apos;short time&apos;
            following the perceiving of PROP.  The extent of this time
            is a function of the type of fact perceived or   noticed,
            when forgetting or other overriding information comes into  play.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#beliefs"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="nounStrings">
        <rdfs:label xml:lang="en">noun strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$nounStrings WORD STRING) states that STRING is one of the
            noun strings for the word unit WORD in some microtheory.  In
            other words, some nominal #$SpeechPartPredicate is used on
            WORD to relate it to STRING.  This predicate is
            #$notAssertible since it is concluded from the current state
            of the knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="numberOfInhabitants">
        <rdfs:label xml:lang="en">population (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$numberOfInhabitants is used to
            indicate the number of people living in a region.
            (#$numberOfInhabitants REGION NUMBER) means that the
            #$GeographicalRegion REGION has the #$NonNegativeInteger
            NUMBER of inhabitants.  Note that, for any particular
            country, NUMBER is not necessarily the same as the number of
            its citizens, since citizens may be living abroad, and
            aliens may be residing in the country.  Note also that
            assertions using #$numberOfInhabitants will generally need
            to be temporally qualified (e.g., by using #$holdsIn), since
            the number of people living in a region often changes over
            time.  Examples: (#$numberOfInhabitants #$CityOfRomeItaly
            2800000); (#$numberOfInhabitants #$CityOfTokyoJapan
            8300000).  See also #$populationDuring.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="numericallyEquals">
        <rdfs:label xml:lang="en">numerically equals</rdfs:label>
        <rdfs:comment>A #$NumericComparisonPredicate that is a
            generalization of the  mathematical equals ( = ) relation to
            #$ScalarIntervals (q.v.)  of all sorts, including
            quantitative intervals as well as point  values (see
            #$ScalarPointValue).  (#$numericallyEquals VALUE1 VALUE2)
            means that VALUE1 is equal to VALUE2 with respect to some
            scale  that they are both on.  More precisely, there is some
            #$TotallyOrderedScalarIntervalType SCALE that VALUE1 and
            VALUE2  are instances of and the minimum (see
            #$minQuantValue) of VALUE1  is equal to the minimum of
            VALUE2 and the maximum (see  #$maxQuantValue) of VALUE1 is
            equal to the maximum of VALUE2.   Note that
            #$numericallyEquals is _not_ a specialization of #$equals
            (q.v.), as numeric values of different sorts can be
            numerically  equivalent  without being considered identical
            (e.g. the #$Integer 1 and the #$RealNumber 1.0).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lessThanOrEqualTo"/>
        <rdfs:subPropertyOf rdf:resource="#greaterThanOrEqualTo"/>
        <rdfs:subPropertyOf rdf:resource="#quantitySubsumes"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectActedOn">
        <rdfs:label xml:lang="en">#$objectActedOn</rdfs:label>
        <rdfs:comment>The predicate #$objectActedOn is used to relate an
            event to an entity or entities significantly affected in
            that event.  The entity or entities in question must exist
            before the event, but may be either destroyed in the event
            (see the more specific predicate #$inputsDestroyed), or
            merely affected by it (for example, see the more specific
            predicates #$damages and #$objectOfStateChange).
            (#$objectActedOn EVENT OBJECT) means that OBJECT is altered
            or affected in EVENT, and the change that OBJECT undergoes
            is central or focal to understanding EVENT.  Thus, scissors
            are _not_ an #$objectActedOn in a #$HairCuttingEvent.  The
            focal change in a haircut is hair getting shorter; thus,
            hair is a legitimate #$objectActedOn in a
            #$HairCuttingEvent.  The almost microscopic dulling that
            scissors undergo in a single haircut is a comparatively
            insignificant change with respect to a single haircut,
            considered as a #$HairCuttingEvent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectControlled">
        <rdfs:label xml:lang="en">controlled object</rdfs:label>
        <rdfs:comment>This predicate is used to indicate that a
            particular object is being controlled in a particular event.
            (#$objectControlled EVENT OBJ) means that the object OBJ is
            being controlled in the #$Event EVENT. Note:
            #$objectControlled does not assume or require physical
            contact between controller and object controlled.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#ControllingSomething"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectEmitted">
        <rdfs:label xml:lang="en">object emitted (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate is used in connection with
            particular instances of #$EmittingAnObject, to identify the
            object which `comes out&apos; during the event.
            (#$objectEmitted EMIT OBJ) means that OBJ is emitted from
            the #$emitter during the emission event EMIT.  The
            #$objectEmitted is also an #$objectMoving in EMIT.  For
            example, in a particular human #$BirthEvent, some particular
            #$HumanInfant is an #$objectEmitted.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#primaryObjectMoving"/>
        <rdfs:domain rdf:resource="#EmittingAnObject"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectFoundInLocation">
        <rdfs:label xml:lang="en">#$objectFoundInLocation</rdfs:label>
        <rdfs:comment>(#$objectFoundInLocation OBJ LOC) means that OBJ
            has the location LOC. OBJ is not a part of LOC.  Examples:
            the #$ArcDeTriomphe is located in the #$CityOfParisFrance;
            the #$AlaskanPipeline is found in #$Alaska-State; the
            #$TownOfGettysburgPA is located in the Eastern region of
            Pennsylvania (note that the town&apos;s territory is part of
            Pennsylvania, but the town as a social organization is
            distinct).  See also the #$comment on #$inRegion.  Cf., for
            cases where OBJ is a spatial part of LOC,
            #$physicalDecompositions, #$geographicalSubRegions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#inRegion"/>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectHasColorTinge-Old">
        <rdfs:label xml:lang="en">object has color tinge - old</rdfs:label>
        <rdfs:comment>(#$objectHasColorTinge OBJECT COLOR-TINGE) means
            that some visible part of OBJECT is colored COLOR-TINGE.
            This is the most general of the color tinge predicates; for
            more specialized predicates see e.g.
            #$mainColorTingeOfObject and #$uniformColorTingeOfObject.
            Note that, unlike these latter two predicates,
            #$objectHasColorTinge is _not_ a specialization of
            #$hasAttributes.  This is because an object&apos;s having
            some part that&apos;s a certain color does not entail that
            the object itself, as a whole, is characterized by that
            color in the sense of having it as an attribute.  For a
            similar predicate that relates instances of #$Color (as
            opposed to instances of #$ColorTingeAttribute) to objects,
            please see #$objectHasColor.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#ColorTingeAttribute"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectHasVisualMarks">
        <rdfs:label xml:lang="en">object has visual marks</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate which relates instances of
            #$PartiallyTangible to instances of #$VisualMark.
            (#$objectHasVisualMarks OBJ VIS-MARK) means that the object
            OBJ has the marking VIS-MARK inscribed on it, which is
            visible to the naked eye under normal conditions. See also
            #$objectMarked (which relates a marked object to the event
            of marking it), #$marks (which relates a marked object to
            the agent who marks it) and #$markCreated.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#VisualMark"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectMarked">
        <rdfs:label xml:lang="en">object marked</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$MarkingOnASurface (a specialization of #$Event) to
            instances of #$PartiallyTangible. (#$objectMarked MARKING
            OBJECT) means that OBJECT is the thing whose surface is
            marked in the event MARKING. See also the predicates
            #$marks (which relates the agent doing the marking to the
            object marked), #$objectHasVisualMarks (which relates the
            mark itself to the object marked), and #$markCreated.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inputsCommitted"/>
        <rdfs:domain rdf:resource="#MarkingOnASurface"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectMoving">
        <rdfs:label xml:lang="en">moving object (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$objectMoving relates movement
            events to the object or objects moving in those events.
            (#$objectMoving MOVE OBJECT) means that OBJECT is in motion
            at some point during the #$MovementEvent MOVE and is either
            the primary object moving (see the predicate
            #$primaryObjectMoving) in MOVE or the primary object moving
            in some sub-event (see the predicate #$subEvents) of MOVE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#transferredThing"/>
        <rdfs:domain rdf:resource="#MovementEvent"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectOfMentalSituation">
        <rdfs:label xml:lang="en">object of mental situation</rdfs:label>
        <rdfs:comment>This predicate relates
            #$IntentionalMentalSituations (q.v.)  to their  intentional
            objects : the things they are  of  or    about .
            (#$objectOfMentalSituation SIT THING) means that SIT  is of,
            about, or directed toward THING.  SIT might be an  occurrent
            intentional mental act, such as a perceptual act of   seeing
            the Eiffel Tower, or a more long-term intentional mental
            state, such as a propositional attitude of believing that
            the   Eiffel Tower is located in Paris.  In both examples,
            an object   of SIT would be the Tower; the second example
            also has the city   of Paris (and arguably the located-in
            relation as well) as an  object.  Note that, although they
            are indirectly related (see e.g.
            #$PurposefulMentalActivity), the sense of  intentional
            described above is not to be confused with its other sense
            as   an antonym of  accidental .  See also
            #$subjectOfMentalSituation  and #$thinksAbout.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:domain rdf:resource="#IntentionalMentalSituation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectOfPossessionTransfer">
        <rdfs:label xml:lang="en">thing changing possession</rdfs:label>
        <rdfs:comment>#$objectOfPossessionTransfer relates an event
            (more specifically, an instance of #$ChangeInUserRights) to
            an object (an instance of #$SomethingExisting) the user
            rights to which are transferred during that event.
            (#$objectOfPossessionTransfer EVENT OBJECT) means that in
            EVENT, all or some rights to use OBJECT are transferred from
            one agent (the #$fromPossessor) to another (the
            #$toPossessor).  Since EVENT is an instance of
            #$ChangeInUserRights, it could be (among other things) a
            buying, renting, lending, or repossessing.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#transferredThing"/>
        <rdfs:domain rdf:resource="#ChangeInUserRights"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectOfStateChange">
        <rdfs:label xml:lang="en">object of state change (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$objectOfStateChange is used to
            identify an object undergoing a change of state in an
            instance of #$IntrinsicStateChangeEvent.
            (#$objectOfStateChange EVENT OBJECT) means that the
            #$PartiallyTangible OBJECT undergoes some kind of intrinsic
            change of state (such as a change in one of its physical
            properties) in the #$IntrinsicStateChangeEvent EVENT.
            OBJECT exists before EVENT, is directly involved in EVENT,
            and persists after EVENT (accordingly, this predicate has as
            #$genlPreds both #$preActors and #$postActors).  The change
            which OBJECT undergoes is internal or intrinsic; this
            predicate is not used for extrinsic changes, such as changes
            in location, orientation, ownership, or status.  Note that
            if OBJECT were destroyed by EVENT and went out of existence
            in the course of EVENT, then the right predicate to use
            would be #$inputsDestroyed, rather than #$objectOfStateChange.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectPaidFor">
        <rdfs:label xml:lang="en">thing paid for</rdfs:label>
        <rdfs:comment>(#$objectPaidFor EVENT OBJECT) means that in the
            #$MonetaryExchangeOfUserRights EVENT, the right to possess
            OBJECT is transferred from one #$Agent to another.  OBJ is
            not the #$objectTendered but the goods that are bought or rented.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectOfPossessionTransfer"/>
        <rdfs:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectRemaining">
        <rdfs:label xml:lang="en">thing remaining in the same place</rdfs:label>
        <rdfs:comment>&apos;(#$objectRemaining REMOVING OBJECT)&apos;
            means that OBJECT remains at its previous location in the
            #$RemovingSomething REMOVING.  OBJECT may be destroyed
            during REMOVING.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#RemovingSomething"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectRemoved">
        <rdfs:label xml:lang="en">object removed</rdfs:label>
        <rdfs:comment>(#$objectRemoved REMOVING OBJ) means OBJ is
            removed from its previous location in the removing event
            REMOVING.  OBJ may be destroyed during REMOVING.  REMOVING
            is #$performedBy some entity other than OBJ.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#RemovingSomething"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectRotating">
        <rdfs:label xml:lang="en">rotating object</rdfs:label>
        <rdfs:comment>The predicate #$objectRotating is used to refer to
            an object which is rotating in a particular
            #$Movement-Rotation event. (#$objectRotating MOVE OBJECT)
            means that OBJECT is turning during MOVE around an axis that
            spatially intersects OBJECT (or goes through a
            &apos;hole&apos; in it). The #$primaryObjectMoving in a
            #$Movement-Rotation is always an #$objectRotating.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectMoving"/>
        <rdfs:domain rdf:resource="#Movement-Rotation"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectSelected">
        <rdfs:label xml:lang="en">thing selected (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$objectSelected SEL OBJ) means that OBJ, an
            instance of #$SomethingExisting, is the object chosen in the
            event SEL, an instance of #$SelectingSomething.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:subPropertyOf rdf:resource="#choices"/>
        <rdfs:domain rdf:resource="#SelectingSomething"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectSought">
        <rdfs:label xml:lang="en">thing looked for</rdfs:label>
        <rdfs:comment>#$objectSought is a predicate that relates an
            instance of #$PurposefulAction in which something is being
            looked for to the thing sought. (#$objectSought ACTION
            OBJECT) means that one of the purposes of ACTION is to
            locate OBJECT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#highlyRelevantInEvent"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#LookingForSomething"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectTakenCareOf">
        <rdfs:label xml:lang="en">#$objectTakenCareOf</rdfs:label>
        <rdfs:comment>(#$objectTakenCareOf EV OBJ) means that OBJ is
            acted on in EV by some #$Agent in order to maintain,
            preserve, or promote the health  or good condition of OBJ.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#TakingCareOfSomething"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectTendered">
        <rdfs:label xml:lang="en">object tendered</rdfs:label>
        <rdfs:comment>&apos;A binary predicate which relates instances
            of #$ExchangeOfUserRights to instances of
            #$PartiallyTangible. &apos;(#$objectTendered EXCHANGE
            OBJECT)&apos; means that OBJECT is a #$PartiallyTangible
            offered in payment during the #$ExchangeOfUserRights
            EXCHANGE.  Just about any object may be offered in exchange
            for goods or services; for instance, a farmer offering a
            doctor a watermelon in exchange for medical treatment.  Of
            course, purely intangible objects cannot be exchanged; for
            instance, one cannot buy a car with the number pi or the
            Equator.  For a narrower interpretation of #$objectTendered
            in terms of conventional media of exchange, see #$FinancialTransactionMt.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectOfPossessionTransfer"/>
        <rdfs:domain rdf:resource="#ExchangeOfUserRights"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectTested">
        <rdfs:label xml:lang="en">thing tested</rdfs:label>
        <rdfs:comment>(#$objectTested EVAL OBJ) means that the
            #$PartiallyTangible OBJ is an object tested in the
            #$Evaluating EVAL.  For example, the portion of blood used
            to run a blood test fills the role of #$objectTested in that test.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:subPropertyOf rdf:resource="#evaluationInput"/>
        <rdfs:domain rdf:resource="#Evaluating"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="objectTypeUsed">
        <rdfs:label xml:lang="en">object type used</rdfs:label>
        <rdfs:comment>(#$objectTypeUsed EVT OBJTYPE) says that some
            instance(s) of OBJTYPE were used during EVT, where OBJTYPE
            is an instance of  #$ExistingObjectType.  This is a  sibling
            predicate of  #$stuffTypeUsed.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#instrumentType-Generic"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="obligatedAgent">
        <rdfs:label xml:lang="en">obligated agent</rdfs:label>
        <rdfs:comment>This predicate relates #$Obligations (q.v.) to the
            agents that are subject to them. (#$obligatedAgent
            OBLIGATION AGENT) means that AGENT is subject to the terms
            of the OBLIGATION. For instance, (#$obligatedAgent
            #$ChemicalWeaponsConvention #$UnitedStatesOfAmerica) means
            that the US is subject to the terms of the
            #$ChemicalWeaponsConvention, while (#$obligatedAgent
            #$TheFirstCommandment Joe) means that Joe is subject to the
            first commandment.  To be obligated in this sense requires,
            at a minumum, that an agent be an #$IntelligentAgent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:domain rdf:resource="#Obligation"/>
        <rdfs:range rdf:resource="#IntelligentAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="observers">
        <rdfs:label xml:lang="en">observer (pred)</rdfs:label>
        <rdfs:comment>(#$observers EVENT AGENT) means that the
            #$IntelligentAgent AGENT observes the #$Event EVENT in part
            or as a whole.  It is meaningful to say that a group or
            organization, such as a UN delegation, observes some event.
            The underlying mechanism of the observation is individual
            instances of perception, individual or collective, direct or
            mediated. Observation of the event may be mediated by
            artificial means, including spy satellites.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#IntelligentAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="officeInCountry">
        <rdfs:label xml:lang="en">office in country</rdfs:label>
        <rdfs:comment>The predicate #$officeInCountry identifies a
            country in which a particular organization has one of its
            offices. (#$officeInCountry ORG COUNTRY) means that the
            #$Organization ORG has one of its offices in the #$Country COUNTRY.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#presentInRegion"/>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Country"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="officiator">
        <rdfs:label xml:lang="en">#$officiator</rdfs:label>
        <rdfs:comment>The predicate #$officiator points to the agent who
            performs official functions at an event. For example, it is
            used to indicate the person who plays the role of a priest
            or justice of the peace at a wedding; also, a master of
            ceremonies, a judge, a referee.  An #$officiator is one of
            the performers at the social event where s/he officiates,
            usually not the only one.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#SocialOccurrence"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="offspringActors">
        <rdfs:label xml:lang="en">#$offspringActors</rdfs:label>
        <rdfs:comment>(#$offspringActors EVENT ORGANISM) means that
            ORGANISM is an offspring created in the
            #$BiologicalReproductionEvent EVENT .</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#BiologicalReproductionEvent"/>
        <rdfs:range rdf:resource="#BiologicalLivingObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="oldConstantName">
        <rdfs:label xml:lang="en">old constant name</rdfs:label>
        <rdfs:comment>This bookkeeping predicate relates a CycL constant
            to a former  name  of that constant.  More accurately,
            (#$oldConstantName CONSTANT STRING) means that the
            underlying data structure currently associated with the CycL
            expression CONSTANT was formerly associated instead with the
            SubL string STRING.  If CONSTANT has undergone multiple
            renames , STRING will   normally be its most recent former
            name .  While #$oldConstantName sentences   can be asserted
            and edited by hand, they are asserted automatically when a
            Rename is done in the Knowledge Base.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLConstant"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="on-Physical">
        <rdfs:label xml:lang="en">on - physical</rdfs:label>
        <rdfs:comment>(#$on-Physical OVER UNDER) means that the object
            OVER is above, supported by, and touching the object UNDER.
            OVER and UNDER may be at rest or in motion, or one may be in
            motion and the other at rest (relative to it).  Examples: a
            person on a bicycle; groceries on a checkout conveyor belt;
            a statue on a pedestal.  Note that only #$touches (and not
            #$touchesDirectly) is implied.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#above-Touching"/>
        <rdfs:subPropertyOf rdf:resource="#supportedBy"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="onLine">
        <rdfs:label xml:lang="en">on line</rdfs:label>
        <rdfs:comment>(#$onLine OBJ LINE) means that OBJ is an object or
            region (an instance of #$SpatialThing) with one or more
            dimensions much smaller than the length of the #$Line LINE,
            and OBJ #$spatiallyIntersects or touches LINE but does not
            include all of LINE.  One object can be on several different
            #$Lines.  See also #$onPath.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Line"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="onPath">
        <rdfs:label xml:lang="en">on path</rdfs:label>
        <rdfs:comment>(#$onPath THING PATH) means that THING is located
            along (on or adjacent to) the #$Path-Generic PATH.  THING
            could be a moving object, or it could be a stationary point
            (in the latter case, see the more specific predicate
            #$pointOnPath).  For example, Saint Louis, Missouri was
            #$onPath U.S. Route 66, as was Missouri, any car driving
            along Route 66, and any lamp-post alongside it.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Path-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="onSamePlanetSurfaceAs">
        <rdfs:label xml:lang="en">on same planet surface as</rdfs:label>
        <rdfs:comment>This is a very general predicate inter-relating
            all things on the surface of the same planet.
            (#$onSamePlanetSurfaceAs  THINGORPLACE1 THINGORPLACE2) means
            that the #$SpatialThing-Localized THINGORPLACE1 and the
            #$SpatialThing-Localized THINGORPLACE2 occur on or near the
            surface of the same planet.  Thus the country denoted by
            #$France and any instance of the collection #$Bicycle in the
            #$CityOfPerthAustralia are so related.The relation denoted
            by #$onSamePlanetSurfaceAs holds between airplanes flying
            over the earth, people hopping on the earth, and people deep
            in a mine on the earth, but this relation does not hold
            between any of the aformentioned entities and a spacecraft
            deep in outer space, or the Moon, or Andromeda.  Note that
            for thing T1 to be east of some other thing T2, or southwest
            of it, etc., it must be the case that T1 is on the same
            planet as T2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="onTraversal">
        <rdfs:label xml:lang="en">on traversal</rdfs:label>
        <rdfs:comment>(#$onTraversal ARG1 TRAV) means that ARG1 is
            located along the #$Traversal TRAV.  ARG1 could be a moving
            object or a stationary point (see the more specific
            predicate #$pointOnTraversal).  For example, if I drive from
            Austin to Dallas to LA and back to Dallas, and if the
            #$Traversal TRAV here is characterized by the #$PathChain
            &apos;Austin--Dallas--LA--Dallas, then all Austin, Dallas
            and LA are qualified to be the ARG1 in (#$onTraversal ARG1
            TRAV), and so are my car and me.  Let TRAV be (#$TraversalFn
            (#$TheList X(1) PATH(1) ... X(n) PATH(n) X(n+1))).  Then
            (#$onTraversal A TRAV) holds if and only if there is a k =
            1, ..., n such that (#$onPath A PATH(k)) holds.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Traversal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="opaqueArgument">
        <rdfs:label xml:lang="en">opaque argument</rdfs:label>
        <rdfs:comment>A #$MetaRelation predicate that can be used to
            state that a given argument-place of a given CycL
            relation-denoting expression is  denotationally opaque .
            (#$opaqueArgument REL N) means that if in a closed compound
            expression built from the CycL expression for REL -- i.e. a
            ground atomic formula (or  GAF ) if REL is a predicate or a
            closed non-atomic term (or  NAT ) if REL is a function --
            the term appearing in REL&apos;s Nth argument-place is
            replaced with another term having the same denotatum (or
            truth-value, if the term is a sentence), there is no
            guarantee that the resulting GAF (or NAT) will itself have
            the same truth-value (or denotatum) as the original.  Most
            argument-places of most relation-denoting expressions do
            allow such substitutions to be made freely, and are thus
            denotationally transparent .  For example, given that
            (#$equals #$Cicero #$Tully), the truth of (#$residesInRegion
            #$Cicero #$CityOfRomeItaly) entails the truth of
            (#$residesInRegion #$Tully #$CityOfRomeItaly).  This shows
            that #$residesInRegion&apos;s first argument-place is
            denotationally transparent.  On the other hand, if Caesar
            were seeking #$Cicero and found him then
            (#$objectFound-Definite CaesarsSearchForCicero Caesar
            #$Cicero) would be true;  but (#$objectFound-Definite
            CaesarsSearchForCicero Caesar #$Tully) might nevertheless be
            false, because Caesar might not know that #$Tully is
            #$Cicero  and thus might not realize that in finding
            #$Cicero he had found #$Tully.  Having such a realization is
            a necessary condition for #$objectFound-Definite&apos;s
            holding, which shows that this relation&apos;s third
            argument-place is denotationally opaque.  According to one
            well-known semantics for denotational opacity (viz.
            #$GottlobFrege&apos;s), a term appearing in an opaque
            context (in most cases) denotes (not its ordinary denotatum,
            but) what is ordinarily its  intensional meaning  or  sense
            (or  Sinn , in Frege&apos;s native German).
            #$quotedArgument (q.v.) is a specialization of
            #$opaqueArgument, and a term appearing in a  quoted  context
            is interpreted as denoting _itself_ (rather than its usual denotatum).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="openEntryFormatInArgs">
        <rdfs:label xml:lang="en">open entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.).  (#$openEntryFormatInArgs PRED N) means that, for
            any particular way of fixing the other arguments to PRED
            besides the Nth, there might be any number (including zero)
            of things such that, if taken as the Nth argument, PRED
            holds of those arguments.  For example,
            #$openEntryFormatInArgs holds of #$biologicalMother with
            respect to its first argument-place, since a given female
            animal might have any number of offspring.  Unlike the other
            reified instances of #$SpecificEntryFormatPredicate,
            #$openEntryFormatInArgs actually places no restriction at
            all on what PRED might or might not hold of with respect to
            the specified argument-place.  But one should not infer from
            this that #$openEntryFormatInArgs assertions are pointless;
            for they forestall duplication of effort by serving notice
            that the entry-format of a given argument-place has
            previously been considered and #$openEntryFormatInArgs was
            deemed appropriate.  #$openEntryFormatInArgs is the most
            commonly-encountered specific entry-format in the Cyc
            Knowledge Base.  Contrast with #$singleEntryFormatInArgs.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="operatesInRegion">
        <rdfs:label xml:lang="en">operates in region</rdfs:label>
        <rdfs:comment>(#$operatesInRegion AGENT REGION) means that AGENT
            performs (at least once) a task central to her/its job
            function or group mission in REGION.  Positive examples of
            this sort of  operating  in a region include a company
            buying assembly materials or selling goods in a region, a
            #$HumanitarianOrganization performing its mission in a
            region, and a #$TravelingSalesPerson working in a region.
            Negative examples include people who visit a region strictly
            for personal or hobby-related reasons.  Borderline cases
            include a #$HumanitarianOrganization which raises money in
            an area but which does not perform its primary function
            there, and a #$TerroristGroup which takes sanctuary in a
            region but which does not conduct terrorist operations
            there.  See also #$performsInsAtLocation and rules linking
            the two predicates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#hasBeenIn"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="operatorFormulas">
        <rdfs:label xml:lang="en">operator formulas</rdfs:label>
        <rdfs:comment>(#$operatorFormulas OPERATOR FORMULA) means that
            OPERATOR is the term in the arg0 position of the CycL
            formula FORMULA.  If FORMULA is an instance of
            #$CycLNonAtomicTerm, then OPERATOR is an instance of
            #$Function-Denotational; if FORMULA is an instance of
            #$CycLSentence, OPERATOR is an instance of #$TruthFunction.
            For example, (#$operatorFormulas #$ArmyFn (#$ArmyFn
            #$UnitedStatesOfAmerica)) holds, and so does
            (#$operatorFormulas #$genls (#$genls #$Dog #$Mammal)).</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#CycLFormula"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="opinions">
        <rdfs:label xml:lang="en">#$opinions</rdfs:label>
        <rdfs:comment>(#$opinions AGENT PROP) implies that (i) AGENT
            believes PROP is true, but (ii) the evidence AGENT has for
            PROP falls short of justifying his/her belief in PROP.
            Since (#$opinions AGENT PROP) implies that AGENT&apos;s
            belief in PROP is not fully justified, #$opinions is a
            #$negationPreds of #$knows (q.v.).  Note that (#$opinions
            AGENT PROP), unlike (#$knows AGENT PROP), does not imply
            that PROP is true, although it also does not imply that PROP
            is false (since an agent can have a true belief, even if the
            evidence available to that agent does not justify that belief).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#beliefs"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="oppositeAttributes">
        <rdfs:label xml:lang="en">opposite attributes</rdfs:label>
        <rdfs:comment>This specialization of #$negationAttribute (q.v.)
            relates incompatible attributes that are  direct opposites
            of each other. (#$oppositeAttributes ATTR1 ATTR2) means that
            ATTR1 is the directly opposite #$AttributeValue of ATTR2
            (and vice versa).  The sense of  opposite  intended here is
            intuitively familiar, but difficult to define precisely. In
            some cases, ATTR1 and ATTR2 will constitute the only two
            instances of a certain #$AttributeType ATTRTYPE, and there
            is a certain  natural  class of things ATTRTYPERANGE each
            member of which has ATTR1 if and only if it fails to have
            ATTR2; e.g. any  device that is operational and in the
            #$attributeRange of #$DeviceOn and #$DeviceOff will have one
            of these attributes iff it does not have the other.  In
            other cases, ATTR1 and ATTR2 will be instances of an
            ATTRTYPE that has other instances as well, but is structured
            such that ATTR1 and ATTR2 are  maximally different from  or
            diametrically opposed to  each other with respect to their
            positions in this structure; e.g with respect to the
            instances of #$GeographicalDirection-General,
            #$North-Generally and #$South-Generally are opposites.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#negationAttribute"/>
        <rdfs:domain rdf:resource="#AttributeValue"/>
        <rdfs:range rdf:resource="#AttributeValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="oppositeDirection-Interval">
        <rdfs:label xml:lang="en">opposite direction - interval</rdfs:label>
        <rdfs:comment>(#$oppositeDirection-Interval COMING GOING) means
            that the vector which points in the opposite direction to
            the vector COMING is the vector GOING.  More technically,
            COMING and GOING are both elements of #$UnitVectorInterval
            in Cyc&apos;s spatial representation, and the midpoint of
            the direction interval COMING is 180 degrees from the
            midpoint of the direction interval GOING.  Examples:
            (#$oppositeDirection-Interval #$North-Generally
            #$South-Generally), (#$oppositeDirection-Interval
            #$DorsalDirection #$VentralDirection).  If a precise
            opposite direction is needed, use #$oppositeDirection-Precise.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#disjointDirections"/>
        <rdfs:domain rdf:resource="#UnitVectorInterval"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="oppositeDirection-Precise">
        <rdfs:label xml:lang="en">opposite direction - precise</rdfs:label>
        <rdfs:comment>Predicate used mainly for reasoning about
            orientations within a given  frame of reference.
            (#$oppositeDirection-Precise DIR OPPDIR) means  that DIR is
            precisely the opposite direction to OPPDIR.  The predicate
            may be taken to imply that the vectors denoting the
            directions are  separated by 180 degrees.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#oppositeDirection-Interval"/>
        <rdfs:domain rdf:resource="#UnitVector-Precise"/>
        <rdfs:range rdf:resource="#UnitVector-Precise"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="orderingRelations">
        <rdfs:label xml:lang="en">ordering relations</rdfs:label>
        <rdfs:comment>(#$orderingRelations ORDER PRED) means that, in a
            #$MathematicalOrdering ORDER, there is an order-predicate
            PRED that forms an ordering relation on the #$baseSet of
            ORDER.  The predicate PRED, when restricted to the #$baseSet
            of the #$MathematicalOrdering ORDER, is transitive on the
            #$baseSet of ORDER.  Note that the predicate
            #$orderingRelations is not a functional predicate because we
            may have both (#$orderingRelations ORDER PRED1) and
            (#$orderingRelations ORDER PRED2).  (This is true even if,
            extensionally, the two predicates PRED1 and PRED2 denote
            only one set-theoretic binary relation associated with
            ORDER.)  Such an ordering relation is not necessarily a full
            order or even a partial order; it depends on the kind of #$MathematicalOrdering.</rdfs:comment>
        <rdfs:domain rdf:resource="#MathematicalOrdering"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="origin-RoundTrip">
        <rdfs:label xml:lang="en">origin</rdfs:label>
        <rdfs:comment>(#$origin-RoundTrip TRIP PLACE) means that the
            #$Translation-RoundTrip event TRIP leaves from and returns
            to the location PLACE.  PLACE is both the #$fromLocation and
            #$toLocation of the entire TRIP, considered as a whole.  For
            example, some commuters to Manhattan leave and return each
            day to #$Connecticut-State, which is their
            #$origin-RoundTrip.  See also #$destination-RoundTrip.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#fromLocation"/>
        <rdfs:subPropertyOf rdf:resource="#toLocation"/>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:domain rdf:resource="#Translation-RoundTrip"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="orthography">
        <rdfs:label xml:lang="en">orthography</rdfs:label>
        <rdfs:comment>(#$orthography LANG WRIT) means that the
            #$WritingSystem WRIT is the usual mode of writing used to
            encode the #$Language LANG; that is, WRIT is used by most of
            the people who customarily engage in writing LANG. For
            instance, (#$orthography #$RajasthaniLanguage #$DevanagariWriting).</rdfs:comment>
        <rdfs:domain rdf:resource="#Language"/>
        <rdfs:range rdf:resource="#WritingSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="outboundLegOfRoundTrip">
        <rdfs:label xml:lang="en">outbound leg of round trip</rdfs:label>
        <rdfs:comment>(#$outboundLegOfRoundTrip TRIP OUTBOUND) means
            that the translational movement OUTBOUND is the initial
            portion of the round-trip translation event TRIP.  During
            the OUTBOUND leg, the object moving in TRIP (see the
            predicate #$objectMoving) travels from the origin of TRIP
            (see the predicate #$origin-RoundTrip) to its destination
            (see the predicate #$destination-RoundTrip).  Note that the
            starting point for OUTBOUND (related to OUTBOUND by
            #$fromLocation) is the same as the starting point for TRIP,
            and the ending point for OUTBOUND (related to OUTBOUND by
            #$toLocation) is the same as the destination for TRIP
            (related to TRIP by #$destination-RoundTrip).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Translation-RoundTrip"/>
        <rdfs:range rdf:resource="#Translation-LocationChange"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="outputNewline">
        <rdfs:label xml:lang="en">output newline</rdfs:label>
        <rdfs:comment>(#$outputNewline PROGRAMMER FILE) means that the
            PROGRAMMER appends a newline to the end of FILE. This action
            predicate is necessary since in some programming languages
            newlines are important syntatically. For example, consider
            the  //  style comments in the C++ programming language.</rdfs:comment>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ComputerFile-Abstract"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="outputs">
        <rdfs:label xml:lang="en">#$outputs</rdfs:label>
        <rdfs:comment>This predicate relates a particular creation or
            destruction event to any of its  outputs .  (#$outputs EVENT
            OBJECT) means that OBJECT is an output of EVENT.  That is,
            OBJECT is either created/produced as a result of EVENT (see
            the specializations #$outputsCreated, #$products,
            #$byProducts) or something left after another thing was
            destroyed in EVENT  (see the specialization
            #$outputsRemaining). For example, silicon chips are both
            #$outputsCreated in and #$products of a chip manufacturing
            process, while a hunk of scrap metal is an
            #$outputsRemaining after a car is put through a crusher.
            When appropriate, instead of using #$outputs, use one of its
            specializations (of which those mentioned above are the nearest).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:domain rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="outputsCreated">
        <rdfs:label xml:lang="en">#$outputsCreated</rdfs:label>
        <rdfs:comment>An #$ActorSlot that relates #$CreationEvents to
            things -- tangible objects or other  enduring  things (see
            #$SomethingExisting) -- created by those events.
            (#$outputsCreated EVENT OBJECT) means that OBJECT
            doesn&apos;t exist before EVENT but comes into existence
            sometime during EVENT, as a result of EVENT.
            #$outputsCreated is a specialization of
            #$nonDeliberateActors, since it would in general be
            impossible for OBJECT to act deliberately in its own creation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#eventResults"/>
        <rdfs:subPropertyOf rdf:resource="#overlapsStart"/>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:subPropertyOf rdf:resource="#outputs"/>
        <rdfs:domain rdf:resource="#CreationEvent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="outputsRemaining">
        <rdfs:label xml:lang="en">output remaining afterwards</rdfs:label>
        <rdfs:comment>This predicate relates physical destruction events
            to surviving parts of the things destroyed in those events.
            (#$outputsRemaining EVENT OBJECT) means that OBJECT persists
            after EVENT, and that it existed before EVENT as an
            identifiable part of one of the things destroyed during
            EVENT (see #$inputsDestroyed).  Examples: (1) when a sheet
            of plywood is sawn through, the original board is destroyed
            and the remaining-outputs are the two smaller plywood
            pieces; (2) when a mixture undergoes a #$FiltrationProcess,
            the mixture itself is destroyed, while both the material
            that was in suspension (see #$suspendedPart) and the fluid
            it was suspended in (see #$suspendingFluid) are remaining-outputs.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:subPropertyOf rdf:resource="#outputs"/>
        <rdfs:domain rdf:resource="#PhysicalDestructionEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="overlapsStart">
        <rdfs:label xml:lang="en">overlaps start</rdfs:label>
        <rdfs:comment>(#$overlapsStart FIRST SECOND) means that the
            #$TemporalThing SECOND starts during the #$TemporalThing
            FIRST, and FIRST ends during SECOND.  Consequently, the
            #$startingPoint of FIRST is before the #$startingPoint of
            SECOND, the #$endingPoint of FIRST is after the
            #$startingPoint of SECOND, and the #$endingPoint of FIRST is
            before the #$endingPoint of SECOND.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsDuring"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="overrides">
        <rdfs:label xml:lang="en">overrides</rdfs:label>
        <rdfs:comment>The binary predicate #$overrides (which relates
            two instances of #$CycLAssertion) is used to tell Cyc which
            rule to prefer when it encounters two conflicting rules
            while reasoning with default assertions.  (#$overrides FIRST
            SECOND) means that if the assertions FIRST and SECOND both
            appear in conflicting arguments for and against some
            proposition, the argument that contains FIRST is to be preferred.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="owns">
        <rdfs:label xml:lang="en">#$owns</rdfs:label>
        <rdfs:comment>A predicate that relates #$Agents to things that
            they  own.  (#$owns AGENT OBJECT) means that AGENT has full
            ownership of OBJECT. Thus, AGENT enjoys #$FullUseRights
            (q.v.) over OBJECT.  OBJECT might be  a physical artifact, a
            parcel of land, an animal, a piece of  intellectual property
            , or anything else that can be owned.  Note that, although
            ownership often involves control, #$owns is _not_ a
            specialization of  #$controls, as there are many exceptions.
            For example, when the owner of  a building leases it to
            someone, the former gives up almost all control  over the
            buiding for the term of the lease.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasOwnershipIn"/>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parallel">
        <rdfs:label xml:lang="en">parallel</rdfs:label>
        <rdfs:comment>(#$parallel INDIV1 INDIV2) means that INDIV1 and
            INDIV2 are parallel.  INDIV1 or INDIV2 might be a vector, a
            (tangible or intangible) line, or a physical object with a
            lengthwise axis.  When both individuals are of the same
            type, consider using one of the more specialized  predicates
            #$parallelVectors, #$parallelLines, or #$parallelObjects.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parallelObjects">
        <rdfs:label xml:lang="en">parallel objects</rdfs:label>
        <rdfs:comment>(#$parallelObjects OBJ1 OBJ2) means that the
            lengthwise axes of OBJ1 and OBJ2 are parallel to each other.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parallel"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parallelVectors">
        <rdfs:label xml:lang="en">parallel vectors</rdfs:label>
        <rdfs:comment>A specialization of #$parallel that holds only
            between #$VectorIntervals.  (#$parallelVectors VECTOR1
            VECTOR2) means that  VECTOR1 is parallel to VECTOR2.  The
            vectors may either point in the same  direction (see
            #$sameDirection) or directly opposite directions (see
            #$oppositeDirection-Precise).  See also #$parallelObjects.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parallel"/>
        <rdfs:domain rdf:resource="#VectorInterval"/>
        <rdfs:range rdf:resource="#VectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="paraphraseCoercionAllowedFrom">
        <rdfs:label xml:lang="en">paraphrase coercion allowed from</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpeechPartPredicate"/>
        <rdfs:range rdf:resource="#SpeechPartPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parentActors">
        <rdfs:label xml:lang="en">parent</rdfs:label>
        <rdfs:comment>(#$parentActors EV P) means that organism P is one
            of the parents in the #$BiologicalReproductionEvent EV.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#BiologicalReproductionEvent"/>
        <rdfs:range rdf:resource="#BiologicalLivingObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parentCompany">
        <rdfs:label xml:lang="en">parent company</rdfs:label>
        <rdfs:comment>The predicate #$parentCompany relates a business
            to the business which is its parent company.
            (#$parentCompany ORG1 PARENT) means that #$Organization ORG1
            is a (partly or wholly owned) subsidiary of #$Business
            PARENT.  PARENT is the parent company that owns and
            substantially controls ORG1.  E.g., (#$parentCompany
            TheLAWeekly TheVillageVoice).</rdfs:comment>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Business"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="partOfIBT">
        <rdfs:label xml:lang="en">part of i b t</rdfs:label>
        <rdfs:comment>(#$partOfIBT WHOLE PART) means that the
            #$InformationBearingThing PART is an information-containing
            part of the #$InformationBearingThing WHOLE.  If WHOLE is an
            instance of  #$PartiallyTangible, PART will be one of the
            #$physicalParts of WHOLE.  If WHOLE is an #$Event (e.g. an
            instance of #$InformationBearingWavePropagation), PART will
            be one of the #$subEvents of WHOLE.  In any case, the
            information contained in PART will be #$subInformation of
            the information contained in WHOLE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#InformationBearingThing"/>
        <rdfs:range rdf:resource="#InformationBearingThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="partTypes">
        <rdfs:label xml:lang="en">part types</rdfs:label>
        <rdfs:comment>This predicate relates types of individual to the
            types of parts they have.  (#$partTypes WHOLETYPE PARTTYPE)
            means that for every instance WHOLEINST of WHOLETYPE there
            exists at least one instance PARTINST of PARTTYPE such that
            (#$parts WHOLEINST PARTINST) holds.  Important
            specializations of this predicate include
            #$physicalPartTypes and #$subEventTypes.  Compare this
            type-level predicate to the instance-level predicate #$parts.</rdfs:comment>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="partitionedInto">
        <rdfs:label xml:lang="en">partitioned into</rdfs:label>
        <rdfs:comment>(#$partitionedInto SETORCOL PART) means that the
            mathematical set or collection PART is a partition of the
            mathematical set or collection SETORCOL; that is, the
            elements of PART are themselves mathematical sets or
            collections, and every element of SETORCOL is an element of
            exactly one element of PART, and every element of PART is a
            subset of SETORCOL.  In other words, PART is a set or
            collection of pairwise disjoint sets or collections whose
            union is co-extensional with SETORCOL.  Typically, the
            #$DisjointSetOrCollectionType that plays the role of PART in
            an assertion about partitioning will be a set specified by
            enumerating its elements, using the function #$ThePartition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covering"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#DisjointSetOrCollectionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="parts">
        <rdfs:label xml:lang="en">#$parts</rdfs:label>
        <rdfs:comment>This predicate relates individuals to their
            (individual)  parts , where this is understood in a very
            broad sense that includes spatial parts, temporal parts,
            conceptual  parts, members of groups, and so forth.
            (#$parts WHOLE PART) means that PART is in some sense a part
            of WHOLE.  Note that PART need not be a _proper_ part of
            WHOLE: #$parts is reflexive (see
            #$ReflexiveBinaryPredicate).  Important specializations of
            #$parts include the predicates #$physicalParts, #$subEvents,
            #$timeSlices, #$subInformation, and #$groupMembers.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="partsEntryFormatInArgs">
        <rdfs:label xml:lang="en">parts entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.) that is used only with argument-places that are
            constrained to instances (see #$argIsa) of
            #$PartiallyTangible (q.v.) or some specialization thereof.
            (#$partsEntryFormatInArgs PRED N) means that, for any
            particular way of fixing the other arguments to PRED besides
            the Nth, for any two objects such that if either one is
            taken as the Nth argument PRED holds of those arguments,
            those objects must both be  parts  (see
            #$physicalDecompositions) of the same object.  That is, if
            the sequences &lt;... ARGN ...&gt; and &lt;... ARGN-PRIME
            ...&gt; differ at most in their Nth items and both (PRED ...
            ARGN ...) and (PRED ... ARGN-PRIME ...) hold, then there
            must be some WHOLE such that both (#$physicalDecompositions
            WHOLE ARGN) and  (#$physicalDecompositions WHOLE ARGN-PRIME)
            hold.  For example,  #$partsEntryFormatInArgs holds of
            #$physicalParts (q.v.) with respect to its second
            argument-place, reflecting the fact that if a given human
            thumb (e.g.) is a part both of some human hand and some
            human arm, then both the hand and the arm must be parts of
            the same human body.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="passengers">
        <rdfs:label xml:lang="en">passenger (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$passengers MOVE PERSON) means that the instance
            of #$Person PERSON is a passenger in the instance of
            #$TransportationEvent MOVE.  (#$passengers MOVE PERSON)
            implies (i) that PERSON is transported in MOVE, so that
            (#$transportees MOVE PERSON) also holds, and (ii) PERSON
            does not control the transporter in MOVE, or in any
            sub-event (see the predicate #$subEvents) of MOVE, so that
            (#$not (#$driverActor SUB-MOVE PERSON)) holds for any
            sub-event SUB-MOVE of MOVE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#transportees"/>
        <rdfs:domain rdf:resource="#TransportationEvent"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="passiveParticiple">
        <rdfs:label xml:lang="en">passive participle</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$passiveParticiple WORD STRING) means that STRING is the
            passive participle form of WORD. The regular passive
            participle in English is generally identical to the
            #$perfect form. Verbs in the Cyc lexicon will have a
            #$passiveParticiple entry only if they are irregular.
            Regular forms are generated by the morphology component.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#untensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pastTense-Generic">
        <rdfs:label xml:lang="en">past tense - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pastTense-Universal">
        <rdfs:label xml:lang="en">past tense - universal</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$pastTense-Universal WORD STRING) means that STRING is the
            past tense verb form of WORD. The regular past tense form is
            formed from the infinitive verb form with an `-ed&apos;
            suffix.  Since regular forms are generated by the morphology
            component, verbs in the Cyc lexicon should have a
            #$pastTense-Universal entry only if they are irregular.
            Regular example: `helped&apos;. Irregular example: `ate&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#perfective-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#thirdPersonSg-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#pluralVerb-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#pastTense-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pathConcatenationOf-Cycle">
        <rdfs:label xml:lang="en">path concatenation of - cycle</rdfs:label>
        <rdfs:comment>(pathConcatenationOf-Simple CHAIN PATH) means that
            PATH is the #$Path-Cyclic obtained by
            &apos;path-concatenating&apos; all of the links in CHAIN.
            See also #$JoinPathsIntoCycleFn .</rdfs:comment>
        <rdfs:domain rdf:resource="#PathChain"/>
        <rdfs:range rdf:resource="#Path-Cyclic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pathConcatenationOf-Simple">
        <rdfs:label xml:lang="en">path concatenation of - simple</rdfs:label>
        <rdfs:comment>(pathConcatenationOf-Simple CHAIN PATH) means that
            PATH is the #$Path-Simple obtained by
            &apos;path-concatenating&apos; all of the links in CHAIN.
            See also #$JoinPathsFn .</rdfs:comment>
        <rdfs:domain rdf:resource="#PathChain"/>
        <rdfs:range rdf:resource="#Path-Simple"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pathInSystem">
        <rdfs:label xml:lang="en">path in system</rdfs:label>
        <rdfs:comment>A #$PathSystemCycLConstant predicate that  relates
            a given path system to each of the simple paths in it.
            (#$pathInSystem PATH SYS) means that PATH is a path in the
            system SYS. What constitutes a path in SYS is defined as
            follows.  (i) Every link  in SYS (see #$linkInSystem) is a
            path in SYS.  (ii) Every subpath  between points (see
            #$SubPathBetweenFn and #$pointInSystem) on a  link in SYS is
            a path in SYS.  (iii) The concatenation of paths PATH1  and
            PATH2 in SYS (see #$JoinPathsFn) is a path in SYS, provided
            there  is only one point shared by both paths.  Every path
            in the system is  constructible by applying (i), (ii),
            and/or (iii) finitely many times.   So for example a path in
            SYS might  start  somewhere along a link,   go through
            several other links and nodes (see #$nodeInSystem),   and
            end  somewhere along a link.  Or the path might simply go
            from  one node to another.  See also #$pathBetweenInSystem
            and  #$linkBetweenInSystem.</rdfs:comment>
        <rdfs:domain rdf:resource="#Path-Simple"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pathTerminus">
        <rdfs:label xml:lang="en">#$pathTerminus</rdfs:label>
        <rdfs:comment>A predicate that relates a given simple customary
            path (see #$Path-Simple and #$Path-Customary) to its
            terminating ends. (#$pathTerminus PATH END) means that END
            is a terminating end of PATH, and that there are no further
            paths of the same type issuing from END that are spatially
            disjoint from PATH itself. A terminal end of any simple
            customary path may be a  dead-end  (i.e. a closed-off path
            end) or it may be open; it cannot be a #$JunctionOfPaths
            with more paths of the same basic type issuing beyond it.
            Contrast this with the predicate #$deadEndInSystem, which
            indicates a terminus with respect to a specified
            #$PathSystem only.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsOfPathSegment"/>
        <rdfs:domain rdf:resource="#Path-Simple"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perceivedThings">
        <rdfs:label xml:lang="en">percieved thing</rdfs:label>
        <rdfs:comment>(#$perceivedThings PERCEPTION TANGIBLE) means that
            the perceiver in a #$Perceiving event PERCEPTION has some
            perception of (awareness of, gaining information about) some
            sensorially detectable event or object TANGIBLE. E.g., if
            you are on the sidewalk and witness a car crash, the
            impacting event itself is almost sure to be a
            #$perceivedThings, as is the car.  Whereas the blinking of
            one car&apos;s right turn signal, the crossing of one
            drivers&apos; arms in front of their face, the right foot of
            the driver of the car, etc. might very well not be
            #$perceivedThings by the doer of PERCEPTION.  Note: we would
            not use this predicate to refer to `Cameron perceived the
            apprehension in the air when he walked in the door&apos;, as
            apprehension is not even partially tangible or readily
            available to our basic senses.  Some #$perceivedThings, e.g.
            the red spot on jupiter seen while glancing in a telescope,
            might last longer than their perception events.  Other
            #$perceivedThings, e.g. the flash of an explosion seen while
            watching a movie might last shorter than the entire
            perception event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectOfMentalSituation"/>
        <rdfs:domain rdf:resource="#Perceiving"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perceives">
        <rdfs:label xml:lang="en">will perceive</rdfs:label>
        <rdfs:comment>(#$perceives AGENT OBJECT) means that AGENT is
            perceiving OBJECT.  That is, AGENT is consciously aware of
            the presence of OBJECT via the functioning of at least one
            of her/his/its senses (e.g. sight, hearing, smell, etc).
            Precisely which tangible features of OBJECT AGENT apprehends
            depends in part on the sensory modality used (see the
            specializations of #$perceives).  For example, if (#$sees
            AGENT OBJECT) then AGENT is aware of certain visible
            features of OBJECT (such as color or shape), whereas if
            (#$smells AGENT OBJECT) then AGENT apprehends certain
            aromatic features of OBJECT (such as its wearing L&apos;air
            Du Temps perfume).  Only tangible objects and situations
            involving such objects (see #$constituentInSituation) --
            #$PartiallyTangibles, #$PhysicalEvents, and #$Configurations
            (which are #$StaticSituations involving partially tangibles)
            -- can be perceived.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:subPropertyOf rdf:resource="#thinksAbout"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perfect">
        <rdfs:label xml:lang="en">perfect</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$perfect WORD STRING) means that STRING is the perfect
            verb form (also known as the past participle) of WORD.  The
            regular perfect verb form is often the same as the past
            tense verb form. Verbs in the Cyc lexicon should have a
            #$perfect entry only if they are irregular, since regular
            forms are generated by the morphology component. Regular
            example: `helped&apos;. Irregular example: `eaten&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#untensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perfective-Generic">
        <rdfs:label xml:lang="en">perfective - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates for past tense and past participle
            forms of verbs, for the vast majority of English verbs, are
            identical to each other. This predicate is #$notAssertible,
            since it will always cash out as an assertion on one of its spec-preds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="performanceOfWork">
        <rdfs:label xml:lang="en">performance of work</rdfs:label>
        <rdfs:comment>(#$performanceOfWork ACT WORK) means that ACT is a
            performance of the #$DevisedPracticeOrWork, WORK.  For
            example: (#$performanceOfWork
            DaisyDaisySungByHAL-EventRecordedFor2001Movie  #$DaisyDaisy)</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#DevisedPracticeOrWork"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="performedBy">
        <rdfs:label xml:lang="en">#$performedBy</rdfs:label>
        <rdfs:comment>An #$AgentiveRole (q.v.) predicate that relates an
            action (see #$Action) to an agent (see #$Agent) who performs
            it deliberately, i.e. intentionally and volitionally.
            (#$performedBy ACT DOER) means that DOER deliberately does
            ACT.  For example, (#$performedBy
            #$AssassinationOfPresidentLincoln #$JohnWilkesBooth) holds.
            Note that an action can have multiple deliberate performers.
            See also the generalizations #$deliberateActors and #$doneBy.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#doneBy"/>
        <rdfs:subPropertyOf rdf:resource="#deliberateActors"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="performedByPart">
        <rdfs:label xml:lang="en">performed by part</rdfs:label>
        <rdfs:comment>(#$performedByPart ACT ORG) means that the
            #$Organization ORG is considered to be the performer of the
            #$Action ACT, though in fact only some subordinate part of
            ORG (i.e., a member or a sub-organization), rather than all
            of the organization, is directly involved in ACT.  For
            example, (#$performedByPart OperationDesertStorm USArmy)
            since only certain divisions of the US Army participated in
            Operation Desert Storm.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="permanentLocationOfObject">
        <rdfs:label xml:lang="en">permanent location of object</rdfs:label>
        <rdfs:comment>This predicate relates some instance of
            #$SpatialThing-Localized with  where that object is most
            commonly or permanently found. (#$permanentLocationOfObject
            OBJ PLACE), unlike (#$objectFoundInLocation OBJ PLACE) does
            not entail that OBJ is physically in PLACE at any particular
            time, as OBJ may be taken from its location for use. Attempt
            to use other predicates, however, for people or
            organizations.  Try its spec-preds #$physicalQuarters,
            #$residesInRegion, and #$residesInDwelling or their spec-preds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasBeenIn"/>
        <rdfs:domain rdf:resource="#SpatialThing-Localized"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perpendicularObjects">
        <rdfs:label xml:lang="en">perpendicular objects</rdfs:label>
        <rdfs:comment>(#$perpendicularObjects OBJ1 OBJ2) means that the
            longest axis of OBJ1 is perpendicular to the longest axis of OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perpendicularVectors">
        <rdfs:label xml:lang="en">perpendicular vectors</rdfs:label>
        <rdfs:comment>A specialization of #$disjointDirections.
            (#$perpendicularVectors VECTOR1 VECTOR2) means that VECTOR1
            is perpendicular  (i.e. at a 90-degree angle) to VECTOR2.
            For example,  (#$perpendicularVectors #$East-Directly
            #$North-Directly) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#disjointDirections"/>
        <rdfs:domain rdf:resource="#VectorInterval"/>
        <rdfs:range rdf:resource="#VectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="perpetrator">
        <rdfs:label xml:lang="en">perpetrator (pred)</rdfs:label>
        <rdfs:comment>An #$AgentiveRole and a specialization of
            #$performedBy. (#$perpetrator ACTION PERP) means that the
            #$SocialBeing PERP  is a perpetrator of the arguably
            criminal ACTION.  More  precisely: PERP performs ACTION,
            where ACTION is likely to  be considered criminal by some
            observers (or at least would  be so considered in some
            contexts).  Note that the first  argument of #$perpetrator
            is not constrained (see #$argIsa)  to #$CriminalActs, since
            an act that counts as criminal in one context might not
            count as criminal in another context,  and yet we might
            still want to talk about the  perpetrator   of that act in
            the latter context.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="phoneNumberText">
        <rdfs:label xml:lang="en">phone number (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$phoneNumberText is used to relate
            a telephone number to a contact location.
            (#$phoneNumberText LOC NUM) means NUM is a string denoting
            (one of) the phone number(s) of the #$ContactLocation LOC.</rdfs:comment>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#PhoneNumber"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="phraseTemplateArg">
        <rdfs:label xml:lang="en">phrase template arg</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLTemplateGenerationPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalDecompositions">
        <rdfs:label xml:lang="en">physical decompositions</rdfs:label>
        <rdfs:comment>(#$physicalDecompositions WHOLE PART) means that
            PART is a spatial part or component of WHOLE, in a very
            broad sense of `part&apos; whereby PART might or might not
            be spatially continuous or discrete.  Thus PART might be
            discontinuous, or even diffused throughout WHOLE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#movesWith"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:subPropertyOf rdf:resource="#physicallyOverlaps"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalExtent">
        <rdfs:label xml:lang="en">physical extent</rdfs:label>
        <rdfs:comment>A #$PhysicalPartPredicate and specialization of
            #$physicalParts that relates an object with tangible and
            intangible parts (see
            #$CompositeTangibleAndIntangibleObject) to its greatest
            tangible  part.  (#$physicalExtent WHOLE PART) means that
            PART is the complete part of WHOLE that is
            #$PartiallyTangible and not itself a
            #$CompositeTangibleAndIntangibleObject (and thus does not
            include  any intangible part of WHOLE).  For example, the
            #$physicalExtent  of a given copy of  Moby Dick  includes
            the cover, the pages, and  their markings; it excludes the
            #$AbstractInformationalThing and  the #$ConceptualWork that
            are also in some sense present in that  copy of  Moby Dick .</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalMemorySize">
        <rdfs:label xml:lang="en">physical memory size</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate which relates instances of
            #$ElectronicDevice to instances of #$ComputerMemoryCapacity.
            (#$physicalMemorySize COMP SIZE) means that COMP has SIZE as
            the sum of its RAM and ROM. See also the more specific
            #$rAMSize and #$rOMSize. For virtual memory, see #$virtualMemorySize.</rdfs:comment>
        <rdfs:domain rdf:resource="#ElectronicDevice"/>
        <rdfs:range rdf:resource="#ComputerMemoryCapacity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalPartTypes">
        <rdfs:label xml:lang="en">physical part types</rdfs:label>
        <rdfs:comment>(#$physicalPartTypes OBJ-TYPE PART-TYPE) means
            that every instance of the collection OBJ-TYPE has at least
            one instance of the collection PART-TYPE as a physical part
            (see the predicate #$physicalParts).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#partTypes"/>
        <rdfs:domain rdf:resource="#TemporalStuffType"/>
        <rdfs:range rdf:resource="#TemporalStuffType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalParts">
        <rdfs:label xml:lang="en">physical part (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$physicalParts WHOLE PART) means that WHOLE is
            an at least partially tangible object and PART is one of its
            distinct, non-diffuse, identifiable, partially tangible
            parts.  This predicate can be used, for example, to relate a
            dog to its tail, or an automobile to its wheels. Note that
            any partially tangible object is considered to be a
            distinct, non-diffuse, identifiable part of itself;
            consequently, #$physicalParts is an instance of #$ReflexiveBinaryPredicate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalParts-disjoint">
        <rdfs:label xml:lang="en">physical parts -disjoint</rdfs:label>
        <rdfs:comment>(#$physicalParts-disjoint WHOLE PART) means that
            PART is a detached part of the physical object
            [#$PartiallyTangible] WHOLE which does not touch any part of
            WHOLE other than (parts of) itself.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalPortions">
        <rdfs:label xml:lang="en">physical portions</rdfs:label>
        <rdfs:comment>(#$physicalPortions WHOLE PART) means that PART is
            a representative physical part of WHOLE, in the sense that
            the intrinsic physical properties of WHOLE are also
            properties of PART.  Physical parts of WHOLE which are not
            representative in this sense should not be related to WHOLE
            by #$physicalPortions, but rather by #$physicalParts or
            #$physicalDecompositions (qq.v.).  For example, the
            SpaghettiSauce001 which is part of SpaghettiDinner001 would
            not be related to SpaghettiDinner001 by #$physicalPortions,
            since SpaghettiSauce001 differs from SpaghettiDinner001 in
            its composition (the latter has constituents -- noodles,
            parmesan cheese, and so on -- that the former does not
            have).  On the other hand, a #$physicalPortions of the
            dinner would include parts of all the constituents of the dinner.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicalQuarters">
        <rdfs:label xml:lang="en">#$physicalQuarters</rdfs:label>
        <rdfs:comment>A #$PartPredicate (q.v.) that relates an
            organization to the building(s) or other
            #$ConstructionArtifact(s) it occupies. (#$physicalQuarters
            ORG QUARTERS) means that the ORG is (wholly or partly)
            located in QUARTERS, which may consist of one or more
            buildings, rooms,  offices, etc.  A given organization will
            have more than one physical quarters  if it has multiple
            divisions, branches, plants, local offices, or the like in
            various locations.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#ableToControl"/>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#ConstructionArtifact"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicallyContains">
        <rdfs:label xml:lang="en">physical container</rdfs:label>
        <rdfs:comment>(#$physicallyContains CONT OBJ) means that CONT
            physically contains (i.e., includes or at least partially
            surrounds) the object OBJ.  #$physicallyContains is agnostic
            as to whether or not OBJ is a part of CONT and as to whether
            OBJ is fully inside of CONT.  (#$physicallyContains CONT
            OBJ) it is true that whenever CONT moves, OBJ moves. (A
            container-predicate whose GAFs do not imply co-movement is
            #$spatiallyContains (q.v.).)  Note that a more specific
            predicate than #$physicallyContains is almost always
            applicable -- e.g., #$physicalDecompositions (q.v.) or a
            more restrictive predicate should be used if OBJ is
            definitely part of CONT, and #$surrounds-3D (q.v.) or a more
            restrictive predicate should be used when partonomy is to be
            ruled out.      For example, although #$physicallyContains
            expresses the relationship between an instance of #$Brain
            and the head that it is in, #$internalParts (q.v.) is more
            precise.  #$in-ContClosed (q.v.) is more appropriate to
            specify the relationship of a #$Brain in a #$Skull.  The
            body of a pregnant woman #$physicallyContains a #$Placenta.
            Since a portion of the placenta is a part of the
            woman&apos;s body, while other portions of it are part of
            the #$Fetus&apos;s body, no more restrictive predicate applies.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyContains"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physicallyOverlaps">
        <rdfs:label xml:lang="en">physically overlaps</rdfs:label>
        <rdfs:comment>The predicate #$physicallyOverlaps relates two
            partially tangible objects. (#$physicallyOverlaps PT-1 PT-2)
            means that PT-1 and PT-2 share a common physical part PT-3
            (that is, both (#$physicalParts PT-1 PT-3) and
            (#$physicalParts PT-2 PT-3) hold) .</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="physiologicalConditionAffects">
        <rdfs:label xml:lang="en">physiological condition affects</rdfs:label>
        <rdfs:comment>(#$physiologicalConditionAffects CONDITION
            ORGANISM) means that ORGANISM has the physiological
            condition CONDITION.  See also #$hasPhysiologicalConditionType.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#constituentInSituation"/>
        <rdfs:domain rdf:resource="#PhysiologicalCondition"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pipeEndsAtCavity">
        <rdfs:label xml:lang="en">pipe ends at cavity</rdfs:label>
        <rdfs:comment>(#$pipeEndsAtCavity PIPE CAV) means that PIPE is
            an instance of #$Pipe-GenericConduit that joins the instance
            of #$CavityOrContainer CAV at some instance of
            #$PipeEndToCavityJunction (q.v.), allowing flow or access
            between PIPE and CAV.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesAtEnd"/>
        <rdfs:subPropertyOf rdf:resource="#pathTerminus"/>
        <rdfs:domain rdf:resource="#Pipe-GenericConduit"/>
        <rdfs:range rdf:resource="#CavityOrContainer"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pipesDirectlyConnected">
        <rdfs:label xml:lang="en">pipes directly connected</rdfs:label>
        <rdfs:comment>(pipesDirectlyConnected PIPE1 PIPE2) means that
            there is a #$JunctionOfPipes connecting two
            #$Pipe-GenericConduits, PIPE1 to PIPE2, (or else they are
            #$endToEndConnected) allowing flow of #$FluidTangibleThings
            between them.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedAtContact"/>
        <rdfs:domain rdf:resource="#Pipe-GenericConduit"/>
        <rdfs:range rdf:resource="#Pipe-GenericConduit"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="placeName-LocalLongForm">
        <rdfs:label xml:lang="en">place name - local long form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (placeName-LongForm PLACE NAME) means that NAME is a
            long-form name of the #$GeographicalThing PLACE used by
            people who live in or near PLACE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#GeographicalThing"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="placeName-LocalShortForm">
        <rdfs:label xml:lang="en">place name - local short form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (placeName-ShortForm PLACE NAME) means that NAME is a
            short-form name of the #$GeographicalThing PLACE used by
            people who live in or near PLACE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#GeographicalThing"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="placeName-LongForm">
        <rdfs:label xml:lang="en">place name - long form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$placeName-LongForm PLACE NAME) means that NAME is the
            official long-form name of PLACE. This is typically the name
            used in official English. See also #$placeName-LocalLongForm.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#GeographicalThing"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="placeName-ShortForm">
        <rdfs:label xml:lang="en">place name - short form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$placeName-ShortForm PLACE NAME) means that NAME is a
            common short-form name of PLACE that is used in English. See
            also #$placeName-LocalShortForm.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#GeographicalThing"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plaintiffs">
        <rdfs:label xml:lang="en">plaintiff (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$plaintiffs ARG1 ARG2) means that the agent ARG2
            is the complaining party (the party bringing an accusation
            of wrong-doing) in the lawsuit ARG1.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#litigants"/>
        <rdfs:domain rdf:resource="#Trial"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="planForTask">
        <rdfs:label xml:lang="en">plan for task</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plural">
        <rdfs:label xml:lang="en">plural</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$plural WORD STRING) means that the #$CharacterString
            STRING is the plural noun form of the #$LexicalWord WORD.
            For example, the #$plural form of #$Hit-TheWord is
            `hits&apos;, and the plural form of #$Goose-TheWord is
            `geese&apos;.  Note that this is the plural form
            corresponding to the #$CountNoun part of speech. See also
            #$pnPlural for #$ProperCountNoun forms, and #$agentive-Pl
            for #$AgentiveNoun forms.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#simpleNounStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plural-Feminine">
        <rdfs:label xml:lang="en">plural - feminine</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plural-Generic">
        <rdfs:label xml:lang="en">plural - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates that express plural number.
            (#$plural-Generic WORD STRING) means that the #$EnglishWord
            WORD has STRING as a plural form: either #$plural (the
            plural form corresponding to the #$CountNoun part of
            speech), #$pnPlural (for #$ProperCountNoun forms), or
            #$agentive-Pl (for #$AgentiveNoun forms).  This predicate is
            #$notAssertible, since it will always cash out as an
            assertion on one of its spec-preds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonSingular-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plural-Masculine">
        <rdfs:label xml:lang="en">plural - masculine</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="plural-Neuter">
        <rdfs:label xml:lang="en">plural - neuter</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pluralVerb-Generic">
        <rdfs:label xml:lang="en">plural verb - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:subPropertyOf rdf:resource="#tensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pluralVerb-Present">
        <rdfs:label xml:lang="en">plural verb - present</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its present-tense
            plural verb form.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonThirdSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#pluralVerb-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pnMassNumber">
        <rdfs:label xml:lang="en">pn mass number</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its mass proper
            noun form.  Proper nouns often are names of individuals or
            organizations;they may also be product brand names.  Mass
            forms denote non-countable quantities.  Syntactically
            singular in form and agreement properties. Example: &apos;Coke&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pnNonPlural-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#massNumber-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pnNonPlural-Generic">
        <rdfs:label xml:lang="en">pn non plural - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonPlural-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pnPlural">
        <rdfs:label xml:lang="en">pn plural</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its plural proper
            noun form. Proper nouns often are names of individuals or
            organizations. The regular form of the plural can usually be
            made by adding &apos;s&apos; to the singular form. Plural
            forms denote more than one. Example: &apos;Czechs&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#plural-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pnSingular">
        <rdfs:label xml:lang="en">pn singular</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its singular
            proper noun form.  Proper nouns often are names of
            individuals or organizations. Singular forms denote one
            instance of the proper noun.  Example: &apos;Mary&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pnNonPlural-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#singular-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointClosedSubSystems">
        <rdfs:label xml:lang="en">point closed sub systems</rdfs:label>
        <rdfs:comment>(#$pointClosedSubSystems SYS SUBSYS) means that
            the path system SUBSYS is a subsystem of the path system SYS
            (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS
            &apos;preserves&apos; all points in SYS that are on links in
            SUBSYS, i.e., if LINK is a link in SUBSYS (and hence is a
            link in SYS) and X is a point in SYS and is on LINK, then X
            must be a point in SUBSYS.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subPathSystems"/>
        <rdfs:domain rdf:resource="#PathSystem"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointInSystem">
        <rdfs:label xml:lang="en">point in system</rdfs:label>
        <rdfs:comment>A binary predicate that relates #$PathSystems
            (q.v.) to the  points  in those systems.  (#$pointInSystem
            POINT SYSTEM) means that POINT is either a  point  on a path
            in, or a  node  in SYSTEM.  Each path system has at least
            one point.  Note that virtually any type of #$Thing can in
            principle serve as a point in some path-system (which is why
            the first argument-place of #$pointInSystem is not
            constrained to, e.g., instances of #$Individual).  The set
            of all _nodes_ in a given path-system is an important subset
            of the set of all _points_ in that system; see
            #$nodeInSystem for the difference between nodes and other
            (i.e. non-node) points. See also #$PointsInSystemFn.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointOnCycle">
        <rdfs:label xml:lang="en">point on cycle</rdfs:label>
        <rdfs:comment>(#$pointOnCycle POINT CYCLE) means that the
            #$Thing POINT is a stationary point (or place) on a
            #$Path-Cyclic CYCLE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pointOnPath-Generic"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Path-Cyclic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointOnPath">
        <rdfs:label xml:lang="en">point on simple path</rdfs:label>
        <rdfs:comment>A specialization of the predicate #$onPath  that
            relates a simple path (see #$Path-Simple) to any point on
            that  path.  (#$pointOnPath POINT PATH) means that POINT is
            a point along  PATH.  That is, POINT is on PATH but cannot
            move along PATH (even if  it could move in some other
            sense).  It might or might not be the case  that POINT, or
            some part of it, is a part of PATH.  POINT is not a  subpath
            (see #$subPaths) of PATH; it is not something that is on
            PATH  only occasionally (such as something moving along or
            stopped on PATH); and it is does not have PATH as a part
            (e.g. Washington DC is not a  point on its own Pennsylvania
            Avenue).  Note that the relative positions  of points on a
            path do not in general form a linear order (see
            #$TotalOrdering) unless the points and the path are part of
            a  particular #$PathSystem.  For example, if no path system
            is specified,  both Austin and Texas can be veiwed as points
            on Interstate 35.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#pointOnPath-Generic"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Path-Simple"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointOnPath-Generic">
        <rdfs:label xml:lang="en">point on path</rdfs:label>
        <rdfs:comment>(#$pointOnPath-Generic POINT PATH-GENERIC) holds
            just in case either (#$pointOnPath POINT PATH-GENERIC) or
            (#$pointOnCycle POINT PATH-GENERIC) holds.  Note that
            (#$pointOnPath POINT PATH-GENERIC) and (#$pointOnCycle POINT
            PATH-GENERIC) cannot both hold, and hence
            (#$pointOnPath-Generic POINT PATH-GENERIC) amounts to (#$xor
            (#$pointOnPath POINT PATH-GENERIC) (#$pointOnCycle POINT PATH-GENERIC)).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#onPath"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Path-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointOnTraversal">
        <rdfs:label xml:lang="en">point on traversal</rdfs:label>
        <rdfs:comment>(#$pointOnTraversal A TRAV) means that A is a
            point along a #$Traversal TRAV of some path or paths.  Let
            TRAV be (#$TraversalFn (#$TheList X(1) PATH(1) ... X(n)
            PATH(n) X(n+1))), using a #$PathChain to describe the
            traversal.  Then (#$pointOnTraversal A TRAV) holds if and
            only if there is a k = 1, ..., n such that
            (#$pointOnPath-Generic A PATH(k)).  Note that each PATH(k)
            is an instance of #$Path-Generic. See also #$Traversal and #$TraversalFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#onTraversal"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#Traversal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointQuantValue">
        <rdfs:label xml:lang="en">point quant value</rdfs:label>
        <rdfs:comment>(#$pointQuantValue SCALAR VALUE) means that the
            reified point quantity SCALAR is equivalent to VALUE. SCALAR
            is an instance of #$ScalarPointValue.  This is  used to
            state the equivalence of reified quantities such as #$One
            and &apos;SpeedOfLight&apos; or &apos;AvagadrosNumber&apos;.
            For example, (#$pointQuantValue #$One 1).</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ScalarPointValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointingToward">
        <rdfs:label xml:lang="en">pointing toward</rdfs:label>
        <rdfs:comment>(#$pointingToward OBJ1 OBJ2) means that OBJ1 has a
            pointing axis and that its axis points toward OBJ2.  A
            pointing axis is ascribed to objects that have
            directionality (e.g., a gun, a projectile, an arrow, an
            extended finger).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pointsOfContact">
        <rdfs:label xml:lang="en">points of contact</rdfs:label>
        <rdfs:comment>The predicate #$pointsOfContact indicates the
            places at which a particular agent can be reached.
            (#$pointsOfContact AGENT LOC) means that the #$Agent AGENT
            can be contacted at the #$ContactLocation LOC.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#ContactLocation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="politenessOfWS-New">
        <rdfs:label xml:lang="en">politeness of w s - new</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$politenessOfWS-New ASRTN POL) means that the word or
            phrase whose meaning is given by the
            #$CycLNLSemanticAssertion ASRTN is typically used in a
            register that has politeness level POL.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLNLAssertion"/>
        <rdfs:range rdf:resource="#PolitenessOfSpeech"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="politicalPartyMembers">
        <rdfs:label xml:lang="en">political party members</rdfs:label>
        <rdfs:comment>(#$politicalPartyMembers PARTY PERSON)    means
            that PERSON is a registered member of PARTY.  For example,
            (#$politicalPartyMembers #$DemocraticParty #$BillClinton) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasMembers"/>
        <rdfs:domain rdf:resource="#PoliticalParty"/>
        <rdfs:range rdf:resource="#HumanAdult"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="portalHasCovering">
        <rdfs:label xml:lang="en">portal has covering</rdfs:label>
        <rdfs:comment>A general predicate that relates portals to their
            coverings.  (#$portalHasCovering PORTAL COVERING) means that
            the #$PortalCovering COVERING covers the #$Portal PORTAL.
            Cf. the more specialized predicates, #$doorwayHasCovering
            and #$windowHasCovering.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PortalCovering"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="posBaseForms">
        <rdfs:label xml:lang="en">pos base forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#posForms"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="posForms">
        <rdfs:label xml:lang="en">pos forms</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            predicate #$posForms is used to indicate the different parts
            of speech that a particular English word has associated with
            it.  (#$posForms WORD POS) means that the #$EnglishWord WORD
            has a form that can serve as the #$SpeechPart POS.  For
            example, #$Dot-TheWord has forms for both #$SimpleNoun and
            #$Verb.  Forms of a word used for different parts of speech
            may or may not differ from each other in sound and/or
            spelling.  To find out, or to specify, the string that
            represents a particular POS form of a specific word, use #$partOfSpeech.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="posOfPhrase">
        <rdfs:label xml:lang="en">pos of phrase</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$posOfPhrase PHRASE POS) indicates that the syntactic
            category of PHRASE is POS. For example, for any #$NounPhrase
            NP, it is true that (#$posOfPhrase NP #$Noun).</rdfs:comment>
        <rdfs:domain rdf:resource="#SententialConstituent"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="posOfPhraseType">
        <rdfs:label xml:lang="en">pos of phrase type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LinguisticObjectType"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="posPredOfConstituent">
        <rdfs:label xml:lang="en">pos pred of constituent</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SententialConstituent"/>
        <rdfs:range rdf:resource="#SpeechPartPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="positiveInterest-Prop">
        <rdfs:label xml:lang="en">positive interest - prop</rdfs:label>
        <rdfs:comment>(#$positiveInterest-Prop AGT PROP) means that AGT
            has a pro-attitude towards PROP -- i.e., AGT has a positive
            interest in PROP being or becoming true.
            #$positiveInterest-Prop is a generalization of more specific
            pro-attitude predicates such as #$desires, #$intends, and
            #$goals.  In contrast with #$desires and #$goals,
            #$positiveInterest-Prop is not strictly future-directed.  An
            agent may have a positive interest in a proposition which
            already holds.  Also, (#$positiveInterest-Prop AGT PROP)
            does not   entail that AGT intrinsically values PROP.  AGT
            may only prefer PROP to the available alternatives.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#interests-Prop"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="positiveVestedInterest">
        <rdfs:label xml:lang="en">positive vested interest</rdfs:label>
        <rdfs:comment>(#$positiveVestedInterest AGENT THING) means that
            the #$Agent AGENT has a positive interest in the
            #$TemporalThing THING.  If THING is an instance of
            #$SomethingExisting, then (#$positiveVestedInterest AGENT
            THING) will generally imply that AGENT has a positive
            interest in the preservation or flourishing of THING, and
            that AGENT will be adversely affected if THING is not
            preserved, or does not flourish.  If THING is an instance of
            #$Event, then (#$positiveVestedInterest AGENT THING) will
            generally imply that AGENT stands to benefit from the
            outcome of THING.  Note that the restriction of THING to
            #$TemporalThing means that it would be incorrect to use this
            predicate to say (e.g.) that Douglas Adams has a
            #$positiveVestedInterest in the number 42.  Rather, what he
            has a vested interest in is public popularity and faddism
            focusing on that number.  A fad is a #$TemporalThing, but
            the number 42 isn&apos;t.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="possesses">
        <rdfs:label xml:lang="en">possesses</rdfs:label>
        <rdfs:comment>(#$possesses AGENT OBJECT) means that OBJECT is in
            the physical possession of AGENT.  Compare with #$owns.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#resourceAvailable"/>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="possiblePOSOfWordIBT">
        <rdfs:label xml:lang="en">possible p o s of word i b t</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLWord-IBT"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="postActors">
        <rdfs:label xml:lang="en">actor remaining afterwards (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$postActors is used to indicate
            that a participant in an event continues to exist after that
            event is over.  (#$postActors EVENT OBJECT) means that
            OBJECT is a participant in EVENT (so that (#$actors EVENT
            OBJECT) also holds), and that OBJECT exists after EVENT
            ends.  #$postActors is a very general instance of
            #$ActorSlot; it subsumes #$outputsCreated,
            #$transferredThing, and many others.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="postEvents">
        <rdfs:label xml:lang="en">post events</rdfs:label>
        <rdfs:comment>A #$BinaryRolePredicate (q.v.) that relates one
            event to another that follows  it.  (#$postEvents BEFORE
            AFTER) implies two things:   (1) BEFORE occurs strictly
            before AFTER: AFTER starts after BEFORE has ended (see
            #$startsAfterEndingOf).   (2) BEFORE and AFTER are
            significantly relevant to each other.  This required
            relevance  of the two arguments to each other is difficult
            to formalize but  often intuitively clearcut.  Sometimes
            AFTER is caused by BEFORE.  For  example, we might say
            (#$postEvents TakingAShower001 ExitingShower001), but  would
            not say (#$postEvents BolshevikRelvolution
            DeathOfJohnLennon) since these two events are not at all
            relevant to each other.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#eventOutcomes"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="postSituation">
        <rdfs:label xml:lang="en">post situation</rdfs:label>
        <rdfs:comment>(#$postSituation EVENT SIT) means that SIT is a
            #$StaticSituation that begins after the #$Event EVENT ends,
            and that SIT is directly (usually causally) related to
            EVENT.  See #$postEvents and #$preSituation for related predicates.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#eventOutcomes"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#StaticSituation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="postalCodeOfAddress">
        <rdfs:label xml:lang="en">postal code of address</rdfs:label>
        <rdfs:comment>The predicate #$postalCodeOfAddress relates an
            instance of #$ContactLocation to an instance of
            #$PostalCode.  (#$postalCodeOfAddress LOC PC) means that the
            location LOC has the #$PostalCode PC.  For example, if LOC
            had the address: P.O. Box 1677-B, New York, NY, 10014, PC
            would be the string `10014&apos;.  See also #$ContactLocation.</rdfs:comment>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#PostalCode"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pragmaticRequirement">
        <rdfs:label xml:lang="en">pragmatic requirement</rdfs:label>
        <rdfs:comment>A #$MetaKnowledgePredicate that is used to place a
            certain kind of pragmatic  precondition on the use of a
            given asserted rule (see #$CycLRuleAssertion).
            (#$pragmaticRequirement SENTENCE RULE) means that SENTENCE
            expresses a  necessary condition on RULE&apos;s being used
            in any proof carried out by the  Cyc inference engine.  The
            effect of asserting this is virtually the same as that of
            asserting (#$exceptWhen (#$unknownSentence SENTENCE) RULE):
            it  blocks the use of RULE when SENTENCE is not currently
            known  by the Cyc  system to be true.  Upon assertion to the
            knowledge base, a  #$pragmaticRequirement sentence is
            transformed by the canonicalizer into a rule involving
            #$pragmaticallyNormal (q.v.).</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#CycLRuleAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pragmaticallyNormal">
        <rdfs:label xml:lang="en">pragmatically normal</rdfs:label>
        <rdfs:comment>A #$MetaKnowledgePredicate that is used to express
            that certain pragmatic  preconditions on a given rule are
            satisfied.  The predicate takes as arguments  a list of CycL
            variables and an asserted rule (see #$CycLRuleAssertion) in
            which those variables occur  free .  At the EL (
            epistemological level ),  #$pragmaticallyNormal sentences
            are not asserted as GAFs, but appear instead  as the
            antecedents of system-generated #$implies rules.  For a
            given sequence  of values for the respective variables VAR1,
            ..., VARn,    (#$pragmaticallyNormal (#$TheList VAR1 ...
            VARn) RULE) means that any  pragmatic preconditions placed
            on RULE&apos;s being used by the Cyc inference  engine (see
            #$pragmaticRequirement) are satisfied with respect to those
            values.  Let&apos;s make this more precise and explicit.  A
            pragmatic precondition for a  rule is written like so:
            (#$pragmaticRequirement CONDITION RULE)  and gets
            canonicalized into a rule involving #$pragmaticallyNormal
            like so:    (#$implies     (#$pragmaticallyNormal (#$TheList
            VAR1 ... VARn) RULE)     CONDITION),  where VAR1, ..., VARn
            are all and only the variables that occur free in  RULE and
            thus include all (and possibly only) the variables that
            occur free  in CONDITION (i.e. as RULE and CONDITION
            explicitly appear in the KB browser,  without consideration
            of their having  implicit  initial universal  quantifiers).
            The above #$pragmaticallyNormal rule is used in inference as
            though it were  a #$constraint rule.  If CONDITION does not
            hold for a given sequence of  values &lt;VAL1, ..., VALn&gt;
            for its variables &lt;VAR1, ..., VARn&gt;, then those
            values are not  pragmatically normal  for RULE; and hence
            inference will  not proceed using &lt;VAL1, ..., VALn&gt;
            with RULE.  The effect of the foregoing is that any asserted
            rule RULE is implicitly  treated by the Cyc inference engine
            as if it had the form    (#$implies
            (#$pragmaticallyNormal (#$TheList VAR1 ... VARn) RULE)
            RULE)  (with VAR1, ..., VARn as described above).  This
            convention allows the logical content of a rule to be
            expressed  independently of any pragmatic preconditions for
            its being used in  inference.  Also see #$abnormal, which is
            syntactically similar and has a related  interpretation that
            makes it roughly the complement of  #$pragmaticallyNormal.</rdfs:comment>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preActors">
        <rdfs:label xml:lang="en">pre-existing actor (CycL predicate)</rdfs:label>
        <rdfs:comment>An #$ActorSlot (q.v.) that relates an event to
            those of its participants that pre-exist it. (#$preActors
            EVENT OBJECT)   means that OBJECT is a participant (see
            #$actors) in EVENT and that OBJECT   exists before EVENT
            begins.  Note that OBJECT also exists during at least part
            of EVENT (as #$actors generalizes to
            #$temporallyIntersects).  #$preActors is a very general
            actor-slot, subsuming #$doneBy, #$objectActedOn,
            #$objectMoving,   and many others.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preSituation">
        <rdfs:label xml:lang="en">pre situation</rdfs:label>
        <rdfs:comment>(#$preSituation EVENT SIT) means that the
            #$StaticSituation SIT holds just prior to the start of the
            #$Event EVENT, and SIT is directly related to EVENT in some
            salient way.  The required `salience&apos; of the two
            arguments to each other is difficult to formalize but
            usually intuitively clearcut.  Commonly, SIT and EVENT share
            many of the same objects involved in various roles, and
            there is often a causal connection as well.   For instance,
            if SIT is an instance of #$Configuration (q.v.), then SIT
            might be somehow `taken apart&apos; by EVENT or might
            `trigger&apos; EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#StaticSituation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preconditionFor-Props">
        <rdfs:label xml:lang="en">condition (CycL predicate)</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$ELSentence-Assertible to instances of
            #$ELSentence-Assertible.  #$preconditionFor-Props is used to
            state that one formula expresses a necessary precondition
            for the truth of another. (#$preconditionFor-Props COND
            PROP) means that PROP isn&apos;t true unless COND is true.
            Preconditions of various types are distinguished by the more
            specialized predicates #$legalPreconditionFor and
            #$causalPreconditionFor. See also #$sufficientFor-Props.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preconditionForMethod">
        <rdfs:label xml:lang="en">precondition for method</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$ELTemplate to instances of #$ELTemplate.
            #$preconditionForMethod is used to state that one formula
            expresses a necessary precondition for the truth of another
            sentence that expresses a way to do something.
            (#$preconditionForMethod COND METHOD) means that METHOD does
            not express a suitable decomposition for an action unless
            COND is true.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preconditionFor-Props"/>
        <rdfs:domain rdf:resource="#ELTemplate"/>
        <rdfs:range rdf:resource="#ELTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preferredDirectObjectRole">
        <rdfs:label xml:lang="en">preferred direct object role</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#directObjectRoles"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#ActorSlot"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preferredEMailAddressText">
        <rdfs:label xml:lang="en">preferred e mail address text</rdfs:label>
        <rdfs:comment>(#$preferredEMailAddressText OBJ ADDR) means that
            #$EMailAddress ADDR is the primary e-mail address for
            #$PartiallyTangible OBJ.  Agents and organizations often
            have more than one e-mail address -- use #$eMailAddressText
            to specify e-mail addresses that are not primary.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#eMailAddressText"/>
        <rdfs:domain rdf:resource="#PartiallyIntangible"/>
        <rdfs:range rdf:resource="#EMailAddress"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preferredNameString">
        <rdfs:label xml:lang="en">preferred name string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$preferredNameString THING STRING) means that the string
            STRING is a preferred name for #$Cyc to use when referring
            to THING. #$Cyc will always prefer a preferred name over any
            other kind of name, all other things being equal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preferredSubjectRole">
        <rdfs:label xml:lang="en">preferred subject role</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subjectRoles"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#ActorSlot"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preferredTermStrings">
        <rdfs:label xml:lang="en">preferred term strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="prefixString">
        <rdfs:label xml:lang="en">prefix string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#affixString"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="prenominalModifier">
        <rdfs:label xml:lang="en">prenominal modifier</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="prepositionStrings">
        <rdfs:label xml:lang="en">preposition strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$prepositionStrings WORD STRING) states that STRING is the
            preposition form for the word unit WORD in some microtheory.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentInRegion">
        <rdfs:label xml:lang="en">present in region</rdfs:label>
        <rdfs:comment>(#$presentInRegion ORG REGION) means that the
            #$Organization ORG has a presence in the geographical region
            REGION.  Minimally, (#$presentInRegion ORG REGION) implies
            that at least some of ORG&apos;s members (see the predicate
            #$hasMembers) are in REGION.  Note that (#$presentInRegion
            ORG REGION) doesn&apos;t necessarily imply that ORG has any
            physical quarters (see the predicate #$physicalQuarters) in REGION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#vestedInterest"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#GeographicalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative">
        <rdfs:label xml:lang="en">present indicative</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative1stPlural">
        <rdfs:label xml:lang="en">present indicative 1st plural</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative1stSingular">
        <rdfs:label xml:lang="en">present indicative 1st singular</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative2ndPlural">
        <rdfs:label xml:lang="en">present indicative 2nd plural</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative2ndSingular">
        <rdfs:label xml:lang="en">present indicative 2nd singular</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative3rdPlural">
        <rdfs:label xml:lang="en">present indicative 3rd plural</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentIndicative3rdSingular">
        <rdfs:label xml:lang="en">present indicative 3rd singular</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#presentIndicative"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentParticiple">
        <rdfs:label xml:lang="en">present participle</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$presentParticiple WORD STRING) means that STRING is the
            present participle, or progressive form of WORD. The regular
            present participle is formed from the infinitive verb form
            with an `-ing&apos; suffix. Verbs in the Cyc lexicon will
            have a #$presentParticiple entry only if they are irregular.
            Regular forms are generated by the morphology component.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#untensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentTense-Generic">
        <rdfs:label xml:lang="en">present tense form (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#tensed"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presentTense-Universal">
        <rdfs:label xml:lang="en">present tense - universal</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#secondPersonSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#firstPersonSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#thirdPersonSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#pluralVerb-Present"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presenter">
        <rdfs:label xml:lang="en">presenter (pred)</rdfs:label>
        <rdfs:comment>(#$presenter GATHERING PERSON) means that PERSON
            speaks to a group of audience members who have a role in GATHERING.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#SocialGathering"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="preservesGenlsInArg">
        <rdfs:label xml:lang="en">preserves genls in arg</rdfs:label>
        <rdfs:comment>(#$preservesGenlsInArg FUNCTION N) means that the
            #$CollectionDenotingFunction FUNCTION has the following
            property: argument place N of FUNCTION is constrained to
            instances of #$Collection, and if COLLECTION1 and
            COLLECTION2 can both serve as the Nth argument of FUNCTION,
            and COLLECTION2 is a specialization of COLLECTION1 (so that
            (#$genls COLLECTION2 COLLECTION1) holds), then the result of
            FUNCTION with COLLECTION2 as the Nth argument will be a
            specialization of the result of FUNCTION with COLLECTION1 as
            the Nth argument.  For example, (#$preservesGenlsInArg
            #$GroupFn 1) holds because (#$genls COL-2 COL-1) implies
            (#$genls (#$GroupFn COL-2) (#$GroupFn COL-1)), for all
            collections COL-1 and COL-2 that satisfy the argument
            constraints for #$GroupFn.</rdfs:comment>
        <rdfs:domain rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="presidentOfCountry">
        <rdfs:label xml:lang="en">president of country</rdfs:label>
        <rdfs:comment>(#$presidentOfCountry COUNTRY PERSON) means that
            the #$LegalAgent PERSON is a president (see
            #$President-HeadOfGovernmentOrHeadOfState) of the
            #$GeopoliticalEntity COUNTRY.  National presidents may be
            elected by the people, appointed by the legislature or other
            ruling group, or they may be be self-declared.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#citizens"/>
        <rdfs:subPropertyOf rdf:resource="#seniorExecutives"/>
        <rdfs:domain rdf:resource="#GeopoliticalEntity"/>
        <rdfs:range rdf:resource="#HumanAdult"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="prettyName">
        <rdfs:label xml:lang="en">pretty name</rdfs:label>
        <rdfs:comment>(#$prettyName TERM STRING) means that STRING is
            the English word or           expression (sequence of words)
            commonly used to refer to the #$Cyc           term TERM.
            The predicate #$prettyName is used by the code which
            generates CycL to English paraphrases, but its applicability
            is not           restricted to this use.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="primaryObjectMoving">
        <rdfs:label xml:lang="en">primary moving object (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$primaryObjectMoving is used to
            refer to a focal object which is moving in a particular
            #$MovementEvent. (#$primaryObjectMoving MOVE OBJECT) means
            that OBJECT is in motion at some point during the
            #$MovementEvent MOVE and this movement is focal in MOVE.
            OBJECT moves from the #$fromLocation to the #$toLocation.
            OBJECT&apos;s motion in MOVE may be translational,
            rotational, or some combination of these. OBJECT may be a
            solid -- such as an animal, an automobile, or a tennis ball
            -- or a fluid, such as lava flowing or a warm air mass
            rising -- but must be #$PartiallyTangible. If a #$Group of
            objects is moving along the same trajectory, that #$Group,
            each #$subGroups, and each member of that GROUP is a
            #$primaryObjectMoving in the movement.  An individual part
            of a #$primaryObjectMoving may be but is not necessarily an
            #$objectMoving in MOVE.  An object contained by a
            #$primaryObjectMoving is generally, but not always, also a
            #$primaryObjectMoving in the same event.  Other objects
            moving in the #$MovementEvent are referred to by the more
            general predicate, #$objectMoving.  A #$transporter which
            follows a separate #$Trajectory, e.g. a #$Ladle, or a
            conveyor which engages in a different form of motion, e.g. a
            rotating #$ConveyorBelt that translates a load, is not a
            #$primaryObjectMoving in the conveying event.  Any
            #$objectMoving in a particular event is a
            #$primaryObjectMoving in one or more #$subEvents.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectMoving"/>
        <rdfs:domain rdf:resource="#MovementEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="priorProbability">
        <rdfs:label xml:lang="en">prior probability</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$priorProbability PROPOSITION PROBNO) means that the a
            priori probability of the truth of the formula PROPOSITION,
            in the applicable #$Microtheory, is PROBNO (a real number
            between zero and one, where zero means certainly false and
            one means certainly true).  In most microtheories,
            generally, this refers to the probability that PROPOSITION,
            by itself, would be true if there were no further evidence
            in the #$Microtheory for or against it, nor knowledge of the
            truth of anything else other than the #$domainAssumptions of
            the #$Microtheory.  Contrast this with #$derivedProbability
            and with #$priorProbability-Range.  See also the function
            version of this predicate: #$PriorProbabilityFn.  A
            #$priorProbability may represent an absolute objective
            probability, a subjective assigned probability, a quantum
            probability, or an assigned probability based on some
            internal characteristic of PROPOSITION (including possibly a
            statement in it of the occurrence of a number of outcomes
            within a large number of trials).  This definition makes no
            presumption as to determinism versus nondeterminism, nor as
            to whether probability is only in the mind of some beholder.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#priorProbability-Range"/>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ScalarPointValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="priorProbability-Range">
        <rdfs:label xml:lang="en">prior probability - range</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$priorProbability-Range PROPOSITION PROBRANGE) means that
            the a priori probability of the truth of the formula
            PROPOSITION, in the applicable #$Microtheory, is somewhere
            in range PROBRANGE (either a real number between zero and
            one, where zero means certainly false and one means
            certainly true, or an interval between two such numbers).
            In most microtheories, generally, this refers to the range
            of probability that PROPOSITION, by itself, would be true if
            there were no further evidence in the #$Microtheory for or
            against it, nor knowledge of the truth of anything else
            other than the #$domainAssumptions of the #$Microtheory.
            Contrast this with #$derivedProbability and
            #$priorProbability.  A #$priorProbability-Range may
            represent an absolute objective probability range, a
            subjective assigned probability range, a quantum probability
            range, or an assigned probability range based on some
            internal characteristic of PROPOSITION (including possibly a
            statement in it of the occurrence of a number of outcomes
            within a large number of trials).  This definition makes no
            presumption as to determinism versus nondeterminism, nor as
            to whether probability is only in the mind of some beholder.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="probabilityOfSentence">
        <rdfs:label xml:lang="en">probability of sentence</rdfs:label>
        <rdfs:comment>A predicate used for probability statements.
            (#$probabilityOfSentence PROPOSITION PROBNO) means that, in
            the applicable #$Microtheory, the probability of the truth
            of the formula PROPOSITION is PROBNO (a real number between
            zero and one, where zero means certainly false and one means
            certainly true).  This does not involve reference to the
            probabilities of the other assertions and
            #$domainAssumptions of the #$Microtheory (use
            #$priorProbability or #$derivedProbability,as appropriate,
            to make an assertion that does make reference to the
            probabilities of such other assertions).   Contrast this
            with other probability-related predicates such as
            #$priorProbability, #$derivedProbability and
            #$derivedProbability-Range. See also
            #$conditionalProbability.  This definition makes no
            presumption as to determinism versus nondeterminism, nor as
            to whether probability is only in the mind of some beholder.
            The definition allows for any of several different systems
            of deriving the probability of one assertion from the
            probabilities of, or conditional probabilities relating,
            other assertions.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#Probability"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="productTypeSoldAt">
        <rdfs:label xml:lang="en">product type sold at</rdfs:label>
        <rdfs:comment>(#$productTypeSoldAt PRODTYPE LOCATION) the
            #$ProductType PRODTYPE can be obtained at LOCATION. LOCATION
            can be any instance of partially tangible, including a
            particular supermarket, vending machine, or trunk of
            someone&apos;s car.  The implication is that PRODTYPE can
            typically be purchased at LOCATION,  not just as a one-time sale.</rdfs:comment>
        <rdfs:domain rdf:resource="#ProductType"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="products">
        <rdfs:label xml:lang="en">product (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$products EV OBJ) means that OBJ is one of the
            intended outputs of event EV.  For unintended outputs, see
            #$byProducts.  For a particular EV and OBJ, it will not be
            true that both (#$products EV OBJ) and (#$byProducts EV OBJ).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#outputs"/>
        <rdfs:domain rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programComment">
        <rdfs:label xml:lang="en">program comment</rdfs:label>
        <rdfs:comment>A binary predicate. (#$programComment THING
            STRING) means that any instance of #$ComputerCode-Source
            defining THING should also include STRING as partial documentation.</rdfs:comment>
        <rdfs:domain rdf:resource="#AbstractInformationalThing"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programCopyFoundOnComputer">
        <rdfs:label xml:lang="en">program copy found on computer</rdfs:label>
        <rdfs:comment>This predicate relates computer program copies to
            computational systems.  (#$programCopyFoundOnComputer COPY
            COMPUTER) means that COPY is stored on COMPUTER (e.g., on
            disk or in memory). Compare this predicate to #$programFoundOnComputer.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#ComputationalSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programFoundOnComputer">
        <rdfs:label xml:lang="en">program found on computer</rdfs:label>
        <rdfs:comment>This predicate relates computer programs to
            computational systems.  (#$programFoundOnComputer PROG COMP)
            means that a copy of PROG (see #$ComputerProgramCopy) is
            stored on COMP.  This predicate allows one to state that a
            copy of a program is on a computer without actually
            referring to the copy.  See also
            #$programCopyFoundOnComputer, which does require reference
            to a program copy.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerProgram-CW"/>
        <rdfs:range rdf:resource="#ComputationalSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programFunctionArity">
        <rdfs:label xml:lang="en">program function arity</rdfs:label>
        <rdfs:comment>(#$programFunctionArity FOO N) means that the
            function FOO takes N parameters or arguments.</rdfs:comment>
        <rdfs:domain rdf:resource="#ProgramFunction"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programFunctionBody">
        <rdfs:label xml:lang="en">program function body</rdfs:label>
        <rdfs:comment>(#$programFunctionBody FOO BODY) means that the
            calls of the function FOO, will mean the program step(s) of
            BODY will be executed. Normally the function body is a
            sequence of steps rather than a single step.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#ProgramFunction"/>
        <rdfs:range rdf:resource="#ProgramStepSequence"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programFunctionIdentifier">
        <rdfs:label xml:lang="en">program function identifier</rdfs:label>
        <rdfs:comment>(#$programFunctionIdentifier FOO  foo ) means that
            the name of the function FOO is  foo  in the current context.</rdfs:comment>
        <rdfs:domain rdf:resource="#ProgramFunction"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programFunctionOperator">
        <rdfs:label xml:lang="en">program function operator</rdfs:label>
        <rdfs:comment>A binary predicate. (#$programFunctionOperator
            RELATION OPERATOR) means that the semantics of RELATION are
            instantiated in the programming language operator OPERATOR.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#ProgramOperator"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programObjectRepresentsValue">
        <rdfs:label xml:lang="en">program object represents value</rdfs:label>
        <rdfs:comment>(#$programObjectRepresentsValue STRUCT VALUE)
            means that the program object STRUCT is a structure
            representing VALUE in some programming environment.</rdfs:comment>
        <rdfs:domain rdf:resource="#ProgramObject"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programObjectTypeRepresents">
        <rdfs:label xml:lang="en">program object type represents</rdfs:label>
        <rdfs:comment>(#$programObjectTypeRepresents TYPE COL) means
            that the data type TYPE is used in some programming
            environment to represent instances of the collection COL.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComputerDataType"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programRunningOn">
        <rdfs:label xml:lang="en">program running on</rdfs:label>
        <rdfs:comment>(#$programRunningOn PROGRAM SYSTEM) means that an
            instantiation of the instance of #$ComputerProgram-CW,
            PROGRAM, is running on the instance of
            #$ComputationalSystem, SYSTEM.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#programFoundOnComputer"/>
        <rdfs:domain rdf:resource="#ComputerProgram-CW"/>
        <rdfs:range rdf:resource="#ComputationalSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programStrings">
        <rdfs:label xml:lang="en">program strings</rdfs:label>
        <rdfs:comment>(#$programStrings OBJECT STRING) means that when
            OBJECT is referenced via STRING in a computer program in the
            current context. For example,  (#$programStrings
            #$AlgorithmInput1  x ) means that we call the first input
            parameter  x  in the current computational context.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programTypeStrings">
        <rdfs:label xml:lang="en">program type strings</rdfs:label>
        <rdfs:comment>A binary predicate. (#$programTypeStrings
            OBJECT-TYPE STRING) means that when OBJECT-TYPE is
            referenced via STRING in a computer program in the  current
            context. For example, in #$CSyntaxProgrammingLanguageMt
            (#$programTypeStrings #$CharacterObject  char ) means that
            the character data type is referenced by  char  in C-like
            programming languages.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#programStrings"/>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#ComputerDataType"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programUsed">
        <rdfs:label xml:lang="en">program used</rdfs:label>
        <rdfs:comment>This predicate is an instance of #$ActorSlot
            (q.v.) that relates computer programs to the computer
            activities in which their copies are used.  (#$programUsed
            ACT PROG) means that a copy of PROG is used in the activity
            ACT.  For example, (#$programUsed MyEMailSendingThisMorning
            #$Eudora-TheProgram) means that in MyEMailSendingThisMorning
            a program I used was #$Eudora-TheProgram.  Note that more
            that one program may be used in a single computer activity
            -- the #$arg2Format of #$programUsed is #$SetTheFormat. For
            example, when I browse the CycKB, I typically use
            #$NetscapeNavigator, #$Emacs-TheProgram,
            #$AllegroCommonLisp, and of course #$CycProgram.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#programUsed-Generic"/>
        <rdfs:domain rdf:resource="#ComputerActivity"/>
        <rdfs:range rdf:resource="#ComputerProgram-CW"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programUsed-Generic">
        <rdfs:label xml:lang="en">program used - generic</rdfs:label>
        <rdfs:comment>This predicate is an #$ActorSlot (q.v.) that
            relates computer programs to events in which their copies
            are used. (#$programUsed-Generic EVENT PROG) means that a
            copy of PROG is used in EVENT. Compare this predicate to the
            more specialized #$programUsed (q.v.) -- when EVENT is an
            instance of #$ComputerActivity (q.v.), use #$programUsed,
            otherwise use #$programUsed-Generic.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationUsed"/>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#ComputerProgram-CW"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programUsedInElectronicAttack">
        <rdfs:label xml:lang="en">program used in electronic attack</rdfs:label>
        <rdfs:comment>A binary predicate that relates an instance of
            #$AttackByComputerOperation to an instance of
            #$ComputerProgram-CW.  (#$programUsedInElectronicAttack
            ATTACK PROGRAM) means that PROGRAM is used to execute
            ATTACK.  Compare this predicate to
            #$programTargetedInElectronicAttack --
            #$programUsedInElectronicAttack relates an attack to a
            program used to facilitate an electronic attack, in the way
            a mass email progrma can be used to overwhelm a
            system&apos;s resourses, whereas
            #$programTargetedInElectronicAttack is used to specify a
            program whose fault or configuration is exploited to an
            attacker&apos;s advantage. Also compare this predicate to #$programCopyUsedInElectronicAttack.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#programUsed"/>
        <rdfs:domain rdf:resource="#AttackByComputerOperation"/>
        <rdfs:range rdf:resource="#ComputerProgram-CW"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="programsIn">
        <rdfs:label xml:lang="en">programs in</rdfs:label>
        <rdfs:comment>A binary predicate relating instances of
            #$ComputerProgrammer to instances of #$ComputerLanguage.
            (#$programsIn PROG LANG) means that #$ComputerLanguage LANG
            is a programming language understood and used by
            #$ComputerProgrammer PROG. PROG is typically an instance of
            #$Person but need not be (see the comment on #$ComputerUser,
            which #$ComputerProgrammer is a specialization of).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#ComputerProgrammer"/>
        <rdfs:range rdf:resource="#ComputerLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="properNameStrings">
        <rdfs:label xml:lang="en">proper name strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="propositionalInfoAbout">
        <rdfs:label xml:lang="en">propositional info about</rdfs:label>
        <rdfs:comment>(#$propositionalInfoAbout AIT THING)   means that
            the #$AbstractInformationalThing AIT is or contains
            propositional   information about THING.  For instance, AIT
            might be a #$Microtheory with   assertions concerning THING
            or a #$TextualPCW containing information about   THING.
            This relation constitutes a kind of  intentionality  in the
            philosophers&apos; sense (see e.g.
            #$IntentionalMentalSituation), though some   would argue
            that it is only an indirect or derived sort of
            intentionality   in that it always presupposes an underlying
            intention on the part of some agent(s).  Although the notion
            of a written text or other sort of conceptual work being
            (propositionally)  about  something is a completely familiar
            one -- it is regularly appealed to in everyday discourse as
            well as in academic studies   pertaining to meaning or
            interpretation -- giving a precise analysis of the   notion
            (in the form of necessary and sufficient conditions, e.g.)
            is a   notoriously difficult task, shot-through with
            controversy.  Still, a couple   of non-contentious points
            can be made in this direction.  First, it is clear   that
            the information in question must be sufficiently specific to
            the thing   it is  about .  That is, in order for AIT to
            contain propositional   information about  THING it is _not_
            sufficient that AIT merely involve   general information
            about the elements of some collection (or set or class)   to
            which THING belongs, but must involve some way of
            singling-out THING, e.g.   by mentioning THING by name or
            containing a description that uniquely applies   to THING.
            For example, the sentence `Dogs are carnivores&apos; is too
            general to   be  about  Lassie (though it _is_ arguably
            about the collections #$Dog and   #$Carnivore);
            `Television&apos;s best-loved canine was a collie&apos;, on
            the other hand,   is certainly about her.  Second, since the
            information must be _propositional_   (see e.g.
            #$Proposition), it is also _not_ sufficient that AIT merely
            contain   a term or symbol that specifies or denotes or
            represents THING; AIT must    say something about  THING.
            Thus, a mere unannotated list of the names   of famous
            show-biz animals would _not_ be propositionally about
            Lassie, even   though her name would undoubtedly appear on
            it.  Finally, note that  #$propositionalInfoAbout does _not_
            insist that THING is what AIT is   _mainly_ or _focally_
            about; thus the selfsame AIT might easily be  about several
            (even many) different things at the same time.</rdfs:comment>
        <rdfs:domain rdf:resource="#AbstractInformationalThing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="propositionsPerceived">
        <rdfs:label xml:lang="en">propositions perceived</rdfs:label>
        <rdfs:comment>(#$propositionsPerceived PERCEIVING PROP) means
            that in the #$Perceiving event PERCEIVING, the perceiver
            mentally grasps the proposition(s) PROP.  E.g., ten people
            witness a particular car crash, and yet each one gets their
            own particular set of propositions which they later can
            relate to the police; there are ten separate #$Perceivings
            in this case, and each one has its own unique set of #$propositionsPerceived.</rdfs:comment>
        <rdfs:domain rdf:resource="#Perceiving"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="prototypicalActivityTypeOfPersonType">
        <rdfs:label xml:lang="en">prototypical activity type of person type</rdfs:label>
        <rdfs:comment>(#$prototypicalActivityTypeOfPersonType EVENT_TYPE
            PERSON_TYPE) means that EVENT_TYPE is the unique defining
            type of activity that every instance of PERSON_TYPE engages
            in that makes that person an instance of PERSON_TYPE.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#PersonTypeByActivity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="providerOfMotiveForce">
        <rdfs:label xml:lang="en">provider of physical force</rdfs:label>
        <rdfs:comment>(#$providerOfMotiveForce MOVE OBJ) means that the
            #$PartiallyTangible OBJ provides, through its expenditure of
            energy, a significant fraction of the physical force
            required to make the #$MovementEvent MOVE happen. For
            example, if MOVE is an instance of #$PedalingABicycle , OBJ
            will be the person who is operating the bike. Another
            example: if MOVE is a use of a belt sanding tool, then
            #$providerOfMotiveForce will relate MOVE to both the
            electric sander and the person operating the sander, since
            both the sander and the operator supply a significant
            fraction of the force required to make MOVE happen.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#MovementEvent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="providerOfService">
        <rdfs:label xml:lang="en">#$providerOfService</rdfs:label>
        <rdfs:comment>The predicate #$providerOfService is used to
            relate a service event to the agent that provides it.
            (#$providerOfService SERVICE AGENT) means that the
            #$ServiceEvent SERVICE is performed or provided by the
            #$Agent AGENT.  Typically, AGENT acts in order to serve the
            #$recipientOfService (q.v.) in SERVICE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#ServiceEvent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="pseudonym">
        <rdfs:label xml:lang="en">pseudonym</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="publicationTimeOfMTAssertions">
        <rdfs:label xml:lang="en">publication time of m t assertions</rdfs:label>
        <rdfs:comment>(#$publicationTimeOfMTAssertions MICROTHEORY
            TIME-INTERVAL) means that the assertions in the
            #$Microtheory MICROTHEORY were published (or at least
            publically made) during the #$TimeInterval TIME-INTERVAL.
            For example, the &apos;publication time&apos; of the
            #$CIAWorldFactbook1997Mt is the year 1997.    Note that the
            time interval in question is not necessarily that referenced
            in assertions within MICROTHEORY; for example, the
            #$CIAWorldFactbook1997Mt contains assertions about the 1996
            gross domestic product of various countries.  Nor should it
            be interpreted as the time-interval at which the assertions
            within MICROTHEORY are true; for an expression of that idea,
            see #$mtTime (and #$MtTimeFn).     Nor is it the date on
            which assertions in MICROTHEORY were entered in Cyc. Again,
            the #$CIAWorldFactbook1997Mt is a good example, since it was
            created in 1998.  Generally, when the source of the
            assertions in a microtheory is a publication, the
            &apos;publication time&apos; will be the date of
            publication.  (Specifically, the date of first publication,
            in the case of unrevised subsequent editions.  However, if
            the material in the source is made publically available
            prior to the formal publication date, the &apos;publication
            time&apos; will be the earlier date.)  Note that it will
            only make sense to assign an &apos;publication time&apos; to
            a microtheory when it represents a set of propositions that
            were all asserted (or hypothesized, or...etc.) by some
            specific source or agent -- many microtheories do not fall
            into this category.</rdfs:comment>
        <rdfs:domain rdf:resource="#Microtheory"/>
        <rdfs:range rdf:resource="#TimeInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="quantityIntersects">
        <rdfs:label xml:lang="en">quantity intersects</rdfs:label>
        <rdfs:comment>This predicate relates  scalar intervals that
            intersect or overlap.  (#$quantityIntersects INTERVAL1
            INTERVAL2) means that  INTERVAL1 and INTERVAL2 intersect.
            More precisely: there is  some scalar interval (which might
            even be as small as an  instance of #$ScalarPointValue) that
            is subsumed by (see  #$quantitySubsumes) both INTERVAL1 and
            INTERVAL2.  For  example, (#$Meter 2 5) intersects both
            (#$Meter 3 4) and  (#$Meter 3 7), but does not intersect
            (#$Meter 6 7).</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="quantitySubsumes">
        <rdfs:label xml:lang="en">quantity subsumes</rdfs:label>
        <rdfs:comment>This predicate relates   a scalar interval to
            scalar intervals that it subsumes   or that  fall completely
            inside  it.    (#$quantitySubsumes SUPER SUB) means that
            both (i) the   maximum of SUPER is #$greaterThanOrEqualTo
            the maximum of   SUB and (ii) the minimum of SUPER is
            #$lessThanOrEqualTo   the minimum of SUB.  For example,
            (#$Meter 2 5) subsumes   both (#$Meter 3 4) and (#$Meter 3
            5), but not (#$Meter 3 6).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#quantityIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#ScalarInterval"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="quotedArgument">
        <rdfs:label xml:lang="en">quoted argument</rdfs:label>
        <rdfs:comment>The main (longer) comment on this predicate was
            written to explain the role of #$quotedArgument in an
            earlier approach for referring to CycL expressions in the
            CycL language that is currently (April 2002) being phased
            out in favor of a new approach.  Whereas the earlier
            approach enabled self-reference only by means of a sort of
            implicit quotation , the new approach involves a mechanism
            for explicitly quoting CycL expressions (by putting them
            inside something analogous to quotation marks).
            #$quotedArgument,  unlike #$quotedCollection (q.v.), still
            has a role to play with respect to the new approach, and its
            main comment will soon revised to better explain that role.
            For an explanation of the new approach to quoting, see the
            shared #$NoteAboutQuotingInCycL and the constants that share
            that note.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#opaqueArgument"/>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="quotedIsa">
        <rdfs:label xml:lang="en">quoted isa</rdfs:label>
        <rdfs:comment>A predicate that relates #$CycLTerms to the
            #$CycLExpressionTypes of which they are instances.
            #$quotedIsa   is thus like a restricted version of #$isa
            (q.v.), with one   significant difference: the first
            argument-place of #$quotedIsa   is  implicitly quoted  (see
            #$quotedArgument).  A ground atomic   sentence (see
            #$CycLClosedAtomicSentence) of the form   (#$quotedIsa THING
            COL) means, not that THING itself is an   instance of COL,
            but that the particular CycL term TERM that   appears
            syntactically in the sentence&apos;s first argument-position
            -- and that (at least in non-quoted contexts) denotes THING
            --   is an instance of COL.  This is better illustrated with
            an   actual example.  Suppose we wish to state that the CycL
            constant  `#$IndianOcean&apos; is an instance of the CycL
            expression type   #$PublicConstant.  We cannot express this
            with the straightforward  #$isa sentence `(#$isa
            #$IndianOcean #$PublicConstant)&apos;, as that   states the
            falsehood that the IndianOcean itself -- which is not   a
            constant but a body of water -- is a public constant.  But
            we   can express what we want with the #$quotedIsa sentence
            `(#$quotedIsa #$IndianOcean #$PublicConstant)&apos;.  In
            fact, #$quotedIsa   is a #$MacroRelation (q.v.), and by its
            macro-expansion (see   #$expansion) the above #$quotedIsa
            sentence turns out to be equivalent   to an #$isa sentence
            with an _explicitly_ quoted (see #$Quote) first   argument:
            `(#$isa (#$Quote (#$EscapeQuote #$IndianOcean))
            #$PublicConstant)&apos;.  Note that the presence of
            `#$EscapeQuote&apos; (see #$EscapeQuote) in the expansion --
            although idle here since the term `#$IndianOcean&apos;
            contains no free   variables -- indicates that there is a
            bit more to be said about the   meaning of
            `#$quotedIsa&apos; when its first argument-position is
            filled   by a term that does contain free variables; i.e.
            that any free occurrences   of such variables within the
            term continue to function as genuine  variables within the
            wider context of the form (#$quotedArgument ... COL)
            surrounding the term.  Thus a quantified sentence like
            `(#$forAll ?X (#$implies (#$quotedIsa (#$MotherFn ?X)
            #$CycLExpression-Assertible) (#$isa ?X #$Animal))&apos; is a
            true   generalization that has as an instantiation (e.g.)
            `(#$implies (#$quotedIsa (#$MotherFn #$LizaMinnelli)
            #$CycLExpression-Assertible) (#$isa #$LizaMinnelli
            #$Animal))&apos;,  which means that if the term `(#$MotherFn
            #$LizaMinnelli)&apos; is a   semantically well-formed CycL
            expression then (the person) Liza Minnelli   is an animal.
            In contrast, if the first argument-place of #$quotedIsa were
            purely-and-simply quoted -- with no  escape  for free
            variables --   then the closest analogous instantiation of
            the #$forAll sentence would   be `(#$implies (#$quotedIsa
            (#$MotherFn ?X) #$CycLExpression-Assertible)   (#$isa
            #$LizaMinnelli #$Animal))&apos;; and that would mean  If the
            term  `(#$MotherFn ?X)&apos; is semantically well-formed
            then Liza Minnelli is an   animal , which is very different.
            Thus, a more accurate statement   about #$quotedIsa (than
            that given at the outset of this comment) would be to say
            (following philosopher/logician W. V. Quine) that its first
            argument-place is implicitly  quasi-quoted : a term
            occupying that place is to be interpreted as if it were
            quoted, except for the fact that any free occurrences of
            variables in the term are still to be interpreted as free
            variables.  See also the shared   #$NoteAboutQuotingInCycL.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#CycLExpressionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rAMSize">
        <rdfs:label xml:lang="en">r a m size</rdfs:label>
        <rdfs:comment>This predicate relates electronic devices to
            computer memory capacities.  (#$rAMSize DEV MEM-CAP) means
            that DEV has MEM-CAP amount of random-access memory (see #$RAM).</rdfs:comment>
        <rdfs:domain rdf:resource="#ElectronicDevice"/>
        <rdfs:range rdf:resource="#ComputerMemoryCapacity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rOMSize">
        <rdfs:label xml:lang="en">r o m size</rdfs:label>
        <rdfs:comment>This predicate relates electronic devices to
            memory capacities.  (#$rOMSize DEV MEM-CAP) means that DEV
            has MEM-CAP amount of read-only memory (see #$ROM).</rdfs:comment>
        <rdfs:domain rdf:resource="#ElectronicDevice"/>
        <rdfs:range rdf:resource="#ComputerMemoryCapacity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="radius">
        <rdfs:label xml:lang="en">radius (CycL predicate)</rdfs:label>
        <rdfs:comment>The radius of an object with a circular shape.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sizeParameterOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rateOfRotationOfObject">
        <rdfs:label xml:lang="en">rate of rotation of object</rdfs:label>
        <rdfs:comment>#$rateOfRotationOfObject relates an instance of
            #$PartiallyTangible to the rate of change of its physical
            component&apos;s angular separation from a reference vector
            as measured from a point of origin.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#RateOfRotation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="receivesServicesFrom">
        <rdfs:label xml:lang="en">receives services from</rdfs:label>
        <rdfs:comment>This predicate relates potential service
            recipients to service providers that are bound to provide
            services of some type to that agent.  The first argument
            place should be the potential recipient of service and the
            second argument place should contain the potential service
            provider.  The relationship holds while the agreement to
            provide the service is in place, not just while the service
            is being provided.  This agreement need not be a formal
            agreement but it should involve the service provider in a
            task for which he, she, it or the service provider&apos;s
            controller is paid, although not necessarily by the service
            recipient.  Hence, #$mother is not a specpred (#$specs) of
            this predicate but the relationship between a client and
            social worker or between parishioner and priest might be
            even if the client or parishioner does not pay for the
            service.  If a company, Company001, puts a lawyer,
            Lawyer001, on retainer, then it is true that
            (#$receivesServicesFrom Company001 Lawyer001) even before
            the lawyer has provided any services.  Usually it is
            preferable to use one of the specializations of this
            predicate. See, for instance, #$accountants, #$attorneys or
            #$hasWorkers. #$receivesServicesFrom is more general than
            #$hasWorkers as it can describe the relationship between a
            person and her dentist or priest and the relationship
            between an organization that may occassionally receive a
            service from an agent, e.g. a subcontractor.  If a business,
            Business001 has a certain accountancy firm,
            AccountantsRUs001, perform occasional bookkeeping work, it
            is not true throughout the year that (#$hasWorkers
            BusinessOO1 AccountsRUs001) but it may be true throughout
            the year that (#$receivesServicesFrom Business001 AccountantsRUs001).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyOverlaps"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="#Agent-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="recipientOfInfo">
        <rdfs:label xml:lang="en">perceiver (pred)</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$InformationTransferEvent to instances of #$Agent.
            (#$recipientOfInfo TRANSFER RECIP) means that the
            information transferred in the #$InformationTransferEvent
            TRANSFER is received by the #$Agent RECIP.  After TRANSFER,
            RECIP understands or conceives of the information
            transferred in TRANSFER; Cyc does NOT conclude that s/he
            #$knows the information or counts it among his/her
            #$beliefs, because RECIP might not believe it.  In receiving
            the information transferred, RECIP may be acting
            intentionally or unintentionally.  Note that if the
            communication event used in the first argument slot of this
            predicate is a #$CommunicationAct-Single and the recipient
            of the information was intended to receive the information
            by the originator of the communication event (see
            #$communicationTarget) then #$recipientOfInfo-Intended
            should probably be used instead of #$recipientOfInfo.  See
            also #$infoTransferred, and the slightly orthogonal
            #$intendedAudience (which relates instances of
            #$InformationBearingThing to instances of #$Agent).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationDestination"/>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="recipientOfService">
        <rdfs:label xml:lang="en">recipient of a service</rdfs:label>
        <rdfs:comment>(#$recipientOfService EVENT AGENT) means that
            AGENT is a recipient of the #$ServiceEvent EVENT.  Thus, the
            service in question is done for or performed on AGENT, and
            AGENT is correspondingly affected by it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#beneficiary"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#ServiceEvent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="reciprocalTransfers">
        <rdfs:label xml:lang="en">reciprocal transfers</rdfs:label>
        <rdfs:comment>(#$reciprocalTransfers T1 T2) means that T1 and T2
            are transfers of possession done in exchange for each other.
            They are part of some #$ExchangeOfUserRights.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#TransferringPossession"/>
        <rdfs:range rdf:resource="#TransferringPossession"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="referredServiceProvider">
        <rdfs:label xml:lang="en">referred service provider</rdfs:label>
        <rdfs:comment>(#$referredServiceProvider SERVICE PROVIDER) means
            that PROVIDER performs or provides SERVICE (see the
            predicate #$providerOfService), and that PROVIDER was
            referred to the agent benefitting from SERVICE (see the
            predicate #$recipientOfService) by another agent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#providerOfService"/>
        <rdfs:domain rdf:resource="#ServiceEvent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="reformulatorEquals">
        <rdfs:label xml:lang="en">reformulator equals</rdfs:label>
        <rdfs:comment>A #$CycLReformulationRulePredicate that relates
            two CycL denotational terms.  When asserted in a
            #$Microtheory MT, (#$reformulatorEquals TERM-1 TERM-2) means
            that the #$CycLDenotationalTerm TERM-1 may be reformulated
            into the #$CycLDenotationalTerm TERM-2, or vice-versa (based
            on meta-properties of this rule and what mode the
            reformulator is in), in any #$Microtheory SPEC-MT such that
            (#$genlMt SPEC-MT MT) holds.  Free variables in TERM-1 and
            TERM-2 are shared, and may bind with CycL terms which match
            the template.  Note that (#$reformulatorEquals TERM-1
            TERM-2) does _not_ necessarily imply (#$equals TERM-1
            TERM-2), although this implication would hold if the
            reformualtion is a #$TruthPreservingReformulation (q.v.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#reformulatorRule"/>
        <rdfs:domain rdf:resource="#ReformulatorTemplate"/>
        <rdfs:range rdf:resource="#ReformulatorTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="reformulatorEquiv">
        <rdfs:label xml:lang="en">reformulator equiv</rdfs:label>
        <rdfs:comment>A #$CycLReformulationRulePredicate that relates
            two CycL sentences.  When asserted in a #$Microtheory MT,
            (#$reformulatorEquiv SENTENCE-1 SENTENCE-2) means that the
            #$CycLSentence SENTENCE-1 may be reformulated into the
            #$CycLSentence SENTENCE-2, or vice versa (based on
            meta-properties of this rule and what mode the reformulator
            is in), in any #$Microtheory SPEC-MT such that (#$genlMt
            SPEC-MT MT) holds.  Free variables in SENTENCE-1 and
            SENTENCE-2 are shared, and may bind with CycL sentences
            which match the template.  Note that (#$reformulatorEquiv
            SENTENCE-1 SENTENCE-2) does _not_ necessarily imply (#$equiv
            SENTENCE-1 SENTENCE-2), although this implication would hold
            if the reformulation is a #$TruthPreservingReformulation (q.v.).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#reformulatorRule"/>
        <rdfs:domain rdf:resource="#ReformulatorTemplate"/>
        <rdfs:range rdf:resource="#ReformulatorTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="reformulatorRule">
        <rdfs:label xml:lang="en">reformulator rule</rdfs:label>
        <rdfs:comment>(#$reformulatorRule EXPR-1 EXPR-2), asserted in
            the  microtheory MT, means that EXPR-1 may be reformulated
            into EXPR-2 (or  vice versa, based on meta-properties of
            this rule and what mode the  reformulator is in) in MT  or a
            specMt thereof.  Free variables in EXPR-1 and EXPR-2 are
            shared,  and may bind with CycL expressions which match the
            template. Truth  and semantics are not necessarily preserved
            (see #$TruthPreservingReformulation).  Use the more specific
            predicates #$reformulatorEquiv and #$reformulatorEquals
            when applicable.</rdfs:comment>
        <rdfs:domain rdf:resource="#ReformulatorTemplate"/>
        <rdfs:range rdf:resource="#ReformulatorTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="reformulatorRuleProperties">
        <rdfs:label xml:lang="en">reformulator rule properties</rdfs:label>
        <rdfs:comment>(#$reformulatorRuleProperties PROP RULE) means
            that RULE has the property PROP.  Most reformulator
            directives express an assertion of the form &apos;The
            reformulator should do X&apos;, for some X.  In contrast,
            #$reformulatorRuleProperties assertions are stronger, in
            that they express intrinsic properties of reformulator
            rules, and it is a consequence that the reformulator should
            do X in order to be correct.  For example, a reformulator
            directive could say &apos;For this reformulator rule, if in
            tersification mode, the reformulator should reformulate the
            second argument into the first argument.&apos;, whereas a
            reformulator rule property could say &apos;This reformulator
            rule&apos;s first argument is more terse than its second
            argument.&apos;  The latter implies the former.</rdfs:comment>
        <rdfs:domain rdf:resource="#ReformulatorRuleProperty"/>
        <rdfs:range rdf:resource="#CycLReformulatorRule"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="regionProduces">
        <rdfs:label xml:lang="en">region produces</rdfs:label>
        <rdfs:comment>(#$regionProduces REGION PRODUCT-SPEC) means that
            PRODUCT-SPEC is a type of product produced in REGION.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeographicalRegion"/>
        <rdfs:range rdf:resource="#ProductType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="regularAdverb">
        <rdfs:label xml:lang="en">regular adverb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its regular
            adverbial form.  Example: &apos;strongly&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adverbStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="regularDegree">
        <rdfs:label xml:lang="en">regular degree</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its regular
            adjectival   form.  Example: &apos;strong&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="regularlyDerivedFrom">
        <rdfs:label xml:lang="en">regularly derived from</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#morphologicallyDerivedFrom"/>
        <rdfs:domain rdf:resource="#DerivedWord"/>
        <rdfs:range rdf:resource="#BaseWordForm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="relationAll">
        <rdfs:label xml:lang="en">relation all</rdfs:label>
        <rdfs:comment>(#$relationAll PRED COL) means that, for every
            instance INST of COL, (PRED INST) holds.  Thus
            (#$relationAll PRED COL) is equivalent to the more complex
            form (#$implies (isa ?INST COL) (PRED ?INST)).  A ground
            atomic formula (or  GAF ) built upon #$relationAll is in
            effect shorthand (i.e. a  macro ) for an equivalent rule
            with the more complex quantified form.  For example,
            (#$relationAll #$temporallyContinuous #$Date) means calendar
            dates are temporally continuous. See the shared #$NoteAboutUseOfRuleMacroPredicates.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnaryPredicate"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="relationExists">
        <rdfs:label xml:lang="en">relation exists</rdfs:label>
        <rdfs:comment>(#$relationExists PRED COL) means that for some
            instance INST of COL, (PRED INST) holds. Thus
            (#$relationExists PRED COL) is equivalent to the more
            complex form: (#$thereExists ?INST (#$isa ?INST COL) (PRED
            ?INST)).  A ground atomic formula (or  GAF ) built upon
            #$relationExists is in effect shorthand (i.e. a  macro ) for
            an equivalent assertion with the more complex quantified
            form.  See the shared #$NoteAboutUseOfRuleMacroPredicates.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnaryPredicate"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="relationExpansion">
        <rdfs:label xml:lang="en">relation expansion</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. ARG2
            is a CycL expression which indicates the meaning of
            expressions in which the relation ARG1 is the operator
            (i.e., in which ARG1 is in the 0th argument position).  In
            ARG2, the variables ?arg1, ?arg2, ?arg3, ?arg4, and ?arg5
            correspond to the objects in the argument positions 1, 2, 3,
            4, and 5, respectively, in expressions which have ARG1 as
            the operator.</rdfs:comment>
        <rdfs:domain rdf:resource="#RuleMacroPredicate"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="relatives">
        <rdfs:label xml:lang="en">#$relatives</rdfs:label>
        <rdfs:comment>(#$relatives ORGANISM1 ORGANISM2) means ORGANISM2
            is some biological relative of ORGANISM1.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#Organism-Whole"/>
        <rdfs:range rdf:resource="#Organism-Whole"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rents">
        <rdfs:label xml:lang="en">rents</rdfs:label>
        <rdfs:comment>The predicate #$rents relates an agent to
            something that the agent is renting.  (#$rents AGENT OBJ)
            means that the #$Agent AGENT is renting the
            #$PartiallyTangible OBJ from some other agent; that is,
            AGENT is paying the other agent for temporary use and
            enjoyment of OBJ.  See also #$TemporaryUserRightsAgreement,
            #$TemporaryChangeOfUserRights, #$Renting.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="requiredActorSlots">
        <rdfs:label xml:lang="en">required actor slots</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            typed-specialization (see #$typedGenlPreds) of
            #$rolesForEventType (q.v.), whose second argument-place is
            constrained to instances (see #$argIsa) of #$ActorSlot.
            (#$requiredActorSlots EVENTTYPE ACTORSLOT) means that for
            any instance EVENT of EVENTTYPE, there is some participant
            ACTOR that fills ACTORSLOT in EVENT (i.e. (ACTORSLOT EVENT
            ACTOR) holds).  For example, (#$requiredActorSlots
            #$CreationEvent #$outputsCreated) means that in any creation
            event some output is created.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#rolesForEventType"/>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#ActorSlot"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="requiredArg1Pred">
        <rdfs:label xml:lang="en">required arg 1 pred</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that every  instance
            of a given collection is related to some thing or things by
            a  given predicate.  (#$requiredArg1Pred COL PRED) means
            that for every  instance INST of COL, there exists some
            sequence &lt;X2, ..., Xn&gt; such that  (PRED INST X2 ...
            Xn) holds.  For example,  (#$requiredArg1Pred #$Organization
            #$hasMembers) means that every  organization has at least
            one member.  See also #$requiredArg2Pred.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="requiredArg2Pred">
        <rdfs:label xml:lang="en">required arg 2 pred</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for stating that every
            instance of a given collection is related (as the  arg2 ) to
            some   thing or things by a given predicate.
            (#$requiredArg2Pred COL PRED)   means that for every
            instance INST of COL, there exists some sequence   &lt;X1,
            X3, ..., Xn&gt; of such that (PRED X1 INST X3 ... Xn) holds.
            For   example, (#$requiredArg2Pred #$Side #$objectSides)
            means that every   side is the side of at least one object.
            See also #$requiredArg1Pred.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="residenceOfOrganization">
        <rdfs:label xml:lang="en">residence of organization</rdfs:label>
        <rdfs:comment>The predicate #$residenceOfOrganization indicates
            the geographical location of a particular
            organization&apos;s main offices.
            (#$residenceOfOrganization ORG GEOGAGENT) means that the
            #$Organization ORG has its chief office on the territory of
            GEOGAGENT.  GEOGAGENT is typically a #$City but may be a
            larger or smaller #$GeographicalAgent.  For example, the
            #$residenceOfOrganization of the
            #$UnitedStatesFederalGovernment is the #$CityOfWashingtonDC.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:subPropertyOf rdf:resource="#presentInRegion"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#GeographicalAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="residesInDwelling">
        <rdfs:label xml:lang="en">will reside</rdfs:label>
        <rdfs:comment>A #$CotemporalObjectsSlot and specialization of
            #$permanentLocationOfObject that relates a person or other
            sort of animal to a constructed shelter in which s/he/it
            lives or resides. (#$residesInDwelling RESIDENT SHELTER)
            means that RESIDENT resides in SHELTER.  That is, SHELTER is
            the place where RESIDENT usually sleeps, spends much of its
            time, lays its eggs; a place it cleans and maintains and
            repairs; a place it defends against intrusion; etc.  A
            person or animal might reside in more than one dwelling at a
            given time.  For example, a person might #$residesInDwelling
            some tent during a camping trip, and at the same time it
            would still be true that she #$residesInDwelling her
            apartment or house.  Note that the dwelling in which a
            person #$residesInDwelling is not necessarily her legal
            domicile, though of course it often will be.  Note also that
            #$residesInDwelling does not subsume parasitical or
            symbiotic relationships, in which one animal lives in or on
            another.  The more general predicate #$objectFoundInLocation
            would be the appropriate one, for example, for a case of a
            flea living on a dog. See also #$occupants and #$residesInRegion.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#ShelterConstruction"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="residesInRegion">
        <rdfs:label xml:lang="en">residence (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates a person or other sort of
            animal to a geographical region in which s/he/it resides.
            (#$residesInRegion RESIDENT REGION) means that RESIDENT
            lives or resides primarily in REGION.  This obviously does
            not entail that RESIDENT is physically in REGION at any
            particular time, since people are often away from their
            places of residence. Note that a given person/animal (even
            with respect to a particular time) is normally related by
            #$residesInRegion to many different regions, where each such
            region is a sub- or super-region of some of the others.  For
            example, Karen currently resides in Austin, in Texas, in the
            United States, in North America, and so on.  See also
            #$residesInDwelling, #$hasHabitat, and #$ethnicity.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#permanentLocationOfObject"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#hasBeenIn"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#GeographicalRegion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resistanceOfObject">
        <rdfs:label xml:lang="en">resistance (predicate)</rdfs:label>
        <rdfs:comment>(#$resistanceOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of
            #$ElectricalResistance.  A lower value of DEGREE indicates
            OBJ is a better conductor, i.e., one that conducts with less
            energy lost to heat.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#ElectricalResistance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resourceAvailable">
        <rdfs:label xml:lang="en">resource available</rdfs:label>
        <rdfs:comment>&apos;(#$resourceAvailable AGENT RESOURCE)&apos;
            means that AGENT has access to the object RESOURCE in such a
            way that AGENT could make some immediate use of RESOURCE in
            any type of action which required it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultGenl">
        <rdfs:label xml:lang="en">result genl</rdfs:label>
        <rdfs:comment>A #$MetaRelation that is used to specify that a
            given collection is a supercollection of any value returned
            by a given #$CollectionDenotingFunction.  (#$resultGenl
            COLFUNC COL) means that when COLFUNC is applied to any
            sequence of arguments &lt;ARG1, ..., ARGn&gt; for which it
            is defined, the resulting value will be a subcollection of
            COL.  That is, (#$genls (COLFUNC ARG1 ... ARGn) COL) holds.
            For example, (#$resultGenl #$UsingAFn #$Action) implies that
            the collection of acts done using any given type of object
            is a type of action, (#$resultGenl #$AttemptingFn
            #$PurposefulAction) implies that the attempts at a given
            type of action constitute a type of purposeful act, and
            (#$resultGenl #$JointTypeBetweenFn #$Joint-Physical) means
            that the collection of joints between two given types of
            things is a type of physical joint.  See also #$resultIsa.</rdfs:comment>
        <rdfs:domain rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultGenlArg">
        <rdfs:label xml:lang="en">result genl arg</rdfs:label>
        <rdfs:comment>(#$resultGenlArg FUNC N) means that FUNC always
            returns a subcollection of its own Nth-place argument.  That
            is, the value of FUNC for any appropriate sequence of
            arguments is a subcollection of the Nth item in that
            sequence.  Symbolically, (#$genls (FUNC ARG1..ARGN..) ARGN).
            For example, (#$resultGenlArg #$JuvenileFn 1) entails that
            (#$JuvenileFn #$Dog) is a subcollection of #$Dog.  See also
            #$resultIsaArg and #$resultGenl</rdfs:comment>
        <rdfs:domain rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultIsa">
        <rdfs:label xml:lang="en">result isa</rdfs:label>
        <rdfs:comment>A #$MetaRelation that holds between relations
            and collections.  #$resultIsa is primarily used to indicate
            that any   value returned by a given function is an instance
            of a given collection.   Where FUNC is a
            #$Function-Denotational, (#$resultIsa FUNC COL) means   that
            FUNC returns an instance of COL for any sequence of
            arguments for   which FUNC is defined.  That is, (#$isa
            (FUNC ARG1 ... ARGn) COL) holds   for any sequence &lt;ARG1,
            ..., ARGN&gt; for which FUNC has a value (see
            #$valueOfFunctionForArgs and #$relationDomain).  For
            example,   `(#$resultIsa #$PlusFn #$ScalarInterval)&apos;
            holds, and it entails (e.g.)   `(#$isa (#$PlusFn 2 2)
            #$ScalarInterval)&apos;.  #$resultIsa can also be used
            with a #$LogicalConnective or #$Quantifier to make a
            syntactic claim   about the type of expression (see
            #$CycLExpressionType) that can be   built from
            connective-denoting or quantifier-denoting expressions.
            Where CONN is a #$LogicalConnective, (#$resultIsa CONN
            EXPR-TYPE)   means that any semantically well-formed
            expression constructed by   combining a term that denotes
            CONN with the correct number and type   of other terms will
            itself be an instance of EXPR-TYPE.  For example,  the
            sentence `(#$resultIsa #$and #$ELSentence-Assertible)&apos;
            entails   that an expression consisting of `#$and&apos;
            followed by one or more   #$ELSentence-Assertibles (the
            required argument-types for #$and),   with the whole
            expression-sequence enclosed in parentheses, is itself   an
            #$ELSentence-Assertible.  (An analogous account can be given
            for   the case where #$resultIsa is applied to a
            #$Quantifier.)  See also   #$resultGenl.</rdfs:comment>
        <rdfs:domain rdf:resource="#Relation"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultIsaArg">
        <rdfs:label xml:lang="en">result isa arg</rdfs:label>
        <rdfs:comment>A #$MetaRelation predicate.  (#$resultIsaArg FUNC
            N)   means that the value returned by FUNC for any given
            sequence of arguments   is an instance of the Nth argument
            in that sequence.  That is, if   (FUNC ARG1..ARGN..) =
            VALUE, then (#$isa VALUE ARGN) holds.  Obviously, ARGN
            must be a collection; so FUNC&apos;s Nth argument-place is
            likely to be #$isa   constrained (see #$argIsa) to
            #$Collection or some specialization thereof.  For example,
            (#$resultIsaArg #$The 1) entails that (#$The #$Dog) is an
            instance of #$Dog.  See also #$resultGenlArg and #$resultIsa.</rdfs:comment>
        <rdfs:domain rdf:resource="#Function-Denotational"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultTypeGenl">
        <rdfs:label xml:lang="en">result type genl</rdfs:label>
        <rdfs:comment>(#$resultTypeGenl FUNCTION COLLECTION) means that
            the result of applying FUNCTION to a set of arguments is a
            collection each of whose elements is a spec of COLLECTION.
            So (#$resultTypeGenl FUNCTION COLLECTION) entails for any
            set of arguments, ARGS, (#$typeGenls (FUNCTION . ARGS)
            COLLECTION).  FUNCTION is permitted to be an indexical
            function with no arguments (e.g. EndangeredSpeciesFn) if
            such are created.</rdfs:comment>
        <rdfs:domain rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="resultantMentalObjects">
        <rdfs:label xml:lang="en">resultant mental objects</rdfs:label>
        <rdfs:comment>(#$resultantMentalObjects PEVT PERCEPT) means that
            during the #$Perceiving event PEVT, the perceiver acquires,
            or begins thinking about some piece of information or
            informational thing PERCEPT (i.e., feeling some emotion,
            deducing some conclusion, observing some facts, etc.)</rdfs:comment>
        <rdfs:domain rdf:resource="#Perceiving"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rewriteOf">
        <rdfs:label xml:lang="en">rewrite of</rdfs:label>
        <rdfs:comment>A #$CycLReformulatorConstant that relates pairs of
            #$CycLReifiableDenotationalTerms.  (#$rewriteOf SIMPLE-TERM
            COMPLEX-TERM) means that SIMPLE-TERM and COMPLEX-TERM are
            definitionally or intensionally equivalent, and SIMPLE-TERM
            is a simpler form of COMPLEX-TERM.  That is, SIMPLE-TERM
            contains fewer nested terms that denote
            #$Function-Denotationals than does COMPLEX-TERM.  Unlike
            #$equals, #$rewriteOf is strictly a conventional (i.e.
            #$HumanCyclist asserted) notion of equality.  If the
            #$CycLAssertion ORIGINAL-ASSERTION contains COMPLEX-TERM,
            this should automatically result in a second assertion being
            added to the Cyc Knowledge Base by the #$CycInferenceEngine.
            This second assertion is the result of substituting
            SIMPLE-TERM for COMPLEX-TERM wherever COMPLEX-TERM occurs in
            ORIGINAL-ASSERTION. Note that substitution does not happen
            in the opposite direction.  That is, assertions containing
            SIMPLE-TERM will not propagate to COMPLEX-TERM. Internally,
            Cyc will keep a link between the two forms of a term and
            allow the simplified form to unify with (possibly nonground)
            instances of the complex form.  For example: If (#$rewriteOf
            #$UnitedStatesNavy (#$NavyFn #$UnitedStatesOfAmerica)) is
            asserted then `#$UnitedStatesNavy&apos; will unify with
            `(#$NavyFn ?X)&apos; and yield ?X = #$UnitedStatesOfAmerica.
            A negative example (in English) of an appropriate
            #$rewriteOf assertion would be: `the collection of
            biologically male humans&apos; is a rewrite of `the
            collection of humans with one x and one y chromosone&apos;.
            That would be inappropriate because the two collections are
            only extensionally, and not intensionally, equivalent.
            Another negative example: (#$rewriteOf (#$JuvenileFn
            (#$MaleFn #$Person))(#$MaleFn (#$JuvenileFn #$Person))).
            This would be innappropriate in two ways.  First, neither
            one of the terms `(#$JuvenileFn (#$MaleFn #$Person))&apos;
            and `(#$MaleFn (#$JuvenileFn #$Person))&apos; is simpler
            than the other.  Second, if a pair of
            #$Function-Denotationals commute with each other (as do
            #$MaleFn and #$JuvenileFn; see #$functionCommutesWith) then
            the canonicalizer will select a canonical ordering for the
            functions.  Thus, if #$MaleFn were to come before
            #$JuvenileFn, then (#$MaleFn (#$JuvenileFn #$Person)) would
            be the canonical form of such a term. It would be impossible
            to reify (#$JuvenileFn (#$MaleFn #$Person)) since it would
            get canonicalized into (#$MaleFn (#$JuvenileFn #$Person));
            thus it would be impossible to assert (#$rewriteOf
            (#$JuvenileFn (#$MaleFn #$Person))(#$MaleFn (#$JuvenileFn #$Person))).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#equals"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#CycLReifiableDenotationalTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rolesForEventType">
        <rdfs:label xml:lang="en">roles for event type</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. A
            #$MetaPredicate and a typed-specialization (see
            #$typedGenlPreds) of #$requiredArg1Pred (q.v.).
            #$rolesForEventType&apos;s two argument-places are
            constrained to types of events and binary role predicates,
            respectively.  (#$rolesForEventType EVENTTYPE ROLE) means
            that for any instance EVENT of EVENTTYPE, there is some
            participant PLAYER that plays ROLE in EVENT.  That is, (ROLE
            EVENT PLAYER) holds.  For example, (#$rolesForEventType
            #$Perceiving #$perceivedThings) means that every perceiving
            involves something that is perceived.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#keStrongSuggestionPreds"/>
        <rdfs:subPropertyOf rdf:resource="#requiredArg1Pred"/>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#BinaryRolePredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="romanticInterest">
        <rdfs:label xml:lang="en">romantic interest</rdfs:label>
        <rdfs:comment>(#$romanticInterest PERS1 PERS2) indicates that
            PERS1 is interested, in a romantic way, in PERS2.  The two
            might actually be in a relationship, in which case a more
            specific predicate such as #$boyfriend, #$girlfriend,
            #$mate, etc. should probably be used.  However, it is
            possible for one person to have another as a
            #$romanticInterest where the second person doesn&apos;t even
            know the first.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#acquaintedWith"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="rotationallyConnectedTo">
        <rdfs:label xml:lang="en">rotationally connected to</rdfs:label>
        <rdfs:comment>A #$ConnectionPredicate (q.v.) and thus a
            specialization of #$connectedTo.
            (#$rotationallyConnectedTo OBJ1 OBJ2) means that OBJ1 and
            OBJ2 are connected  in such a way that rotational motion,
            and only rotational motion, can happen  between them.  The
            range of rotational motion possible might be full or
            partial.  Non-rotational movement between two rotationally
            connected objects  can occur only if the connection is
            broken, deformed, or disassembled.  If  OBJ1 and OBJ2 do
            rotate relative to one another, then this may be due to
            sliding of their surfaces, articulation of some joint part,
            or deformation  of OBJ1 or OBJ2 (so long as that deformation
            only allows rotation between OBJ1  and OBJ2).  Positive
            examples: Femurs are rotationally connected to hips, doors
            are rotationally connected to door frames, doorknobs are
            rotationally connected  to doors, and propellers are
            rotationally connected to airplanes; in computer  trackballs
            the ball is rotationally connected to the housing.  Also a
            book  cover is rotationally connected to its binding (but
            #$flapHingedTo is even  more appropriate for describing such
            a connection because it is more specific).  Negative
            examples: a planet orbiting a star (they are not connected;
            cf.  #$MovingInACircle) and a toothpick stuck in a
            person&apos;s leg (although elastic  deformation of flesh
            allows there to be rotational motion between toothpick  and
            leg, it also may allow a  small amount of translational
            motion to occur  between them; #$in-Lodged is more
            appropriate for describing this case).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#connectedTo"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="ruleTemplateDirection">
        <rdfs:label xml:lang="en">rule template direction</rdfs:label>
        <rdfs:comment>A #$MetaKnowledgePredicate.
            (#$ruleTemplateDirection TEMPLATE DIRECTION) states that all
            assertions which are instantiations of TEMPLATE should  have
            a direction of DIRECTION.</rdfs:comment>
        <rdfs:domain rdf:resource="#RuleTemplate"/>
        <rdfs:range rdf:resource="#CycLAssertionDirection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="salientAssertions">
        <rdfs:label xml:lang="en">salient assertions</rdfs:label>
        <rdfs:comment>(#$salientAssertions TERM ASSERTION) means that
            ASSERTION has been deemed one of the assertions most useful
            to examine when one is trying to figure out the intended
            meaning of TERM.  Thus, ASSERTION will normally contain
            TERM, and should be something that has been asserted on its
            own in the KB as well.  Statements using #$salientAssertions
            are primarily intended for human consumption, and are not
            normally used by the Cyc inference engine.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#CycLAssertion"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="salutation">
        <rdfs:label xml:lang="en">salutation</rdfs:label>
        <rdfs:comment>(#$salutation PRSN TITLE) means the #$Person
            PRSN&apos;s name may have the #$CourtesyTitle TITLE attached
            to it, such as: Mr., Ms., Mrs., Miss, Dr., etc., when that
            person is addressed.</rdfs:comment>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#Title"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sameDirection">
        <rdfs:label xml:lang="en">same direction</rdfs:label>
        <rdfs:comment></rdfs:comment>
        <rdfs:domain rdf:resource="#UnitVectorInterval"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="satisfiesStandard">
        <rdfs:label xml:lang="en">satisfies standard</rdfs:label>
        <rdfs:comment>The predicate #$satisfiesStandard is used to
            identify a product standard that applies to a certain type
            of products.  (#$satisfiesStandard PRODTYPE STAND) means
            that every instance of the #$FormalProductType PRODTYPE
            satisfies the #$ProductStandard STAND.  STAND will contain a
            description of the desired physical form and/or function for
            the type of product (or service) denoted by PRODTYPE, and
            the instances of PRODTYPE fulfill those specifications.  See
            also #$ProductStandard.</rdfs:comment>
        <rdfs:domain rdf:resource="#FormalProductType"/>
        <rdfs:range rdf:resource="#ProductStandard"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="schoolSymbolName-Female">
        <rdfs:label xml:lang="en">school symbol name - female</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#EducationalOrganization"/>
        <rdfs:range rdf:resource="#HumanGivenNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="schoolSymbolName-Male">
        <rdfs:label xml:lang="en">school symbol name - male</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#EducationalOrganization"/>
        <rdfs:range rdf:resource="#HumanGivenNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="scientificName">
        <rdfs:label xml:lang="en">scientific name</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            Assertions using #$scientificName should be placed in a
            #$LexicalMicrotheory.  #$AnimalClassificationLexicalMt
            should be used for animals, #$PlantClassificationLexicalMt
            should be used for plants, #$OrganismClassificationLexicalMt
            should be used for other organisms (such as bacteria,
            viruses, etc.), #$AnimalAnatomyLexicalMt for English names
            for animal body parts, and #$Anatomy-LatinNameLexicalMt for
            Latin names of body parts. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nameString"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="scopingArg">
        <rdfs:label xml:lang="en">scoping arg</rdfs:label>
        <rdfs:comment>(#$scopingArg RELATION N) indicates the Nth
            argument of #$ScopingRelation RELATION denotes one or more
            scoped variables.</rdfs:comment>
        <rdfs:domain rdf:resource="#ScopingRelation"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="secondPersonSg-Present">
        <rdfs:label xml:lang="en">second person sg - present</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its second person
            singular verb form.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonThirdSg-Present"/>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="securedBy">
        <rdfs:label xml:lang="en">secured by</rdfs:label>
        <rdfs:comment>A generalization of #$supportedBy. (#$securedBy
            OBJECT HOLDER) means that HOLDER is at least partially
            responsible for holding OBJECT in its current position.  If
            HOLDER were to be removed, then (everything else being
            equal) either all or part of OBJECT would move in some
            direction or other  relative to its frame of reference.
            (Only _part_ of OBJECT would move if (say)  OBJECT is also
            #$securedBy a second HOLDER2, in which case OBJECT might
            simply  pivot around some point were only HOLDER removed.)
            If HOLDER were to be moved  (in concert with anything else
            that OBJECT might be directly #$securedBy), then (everything
            else being equal) OBJECT would move with it.  Examples: a
            golf ball is #$securedBy a tee on which it sits and a
            helium-filled balloon is #$securedBy a string attaching it
            to a child&apos;s wrist.  Note that OBJECT&apos;s being
            #$securedBy  HOLDER from moving in a particular direction
            does _not_ in itself preclude the possibility of
            OBJECT&apos;s moving (at least a little) in some other
            direction: a gust of wind might momentarily blow the secured
            balloon along an arc-like path  about the child&apos;s
            wrist.  If, like the golf tee, HOLDER provides crucial
            _vertical_ support to OBJECT, consider using #$supportedBy.
            If HOLDER merely _contributes_ to OBJECT&apos;s being
            secured without being essential to it, use #$securedBy-Contributing.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#securedBy-Contributing"/>
        <rdfs:subPropertyOf rdf:resource="#movesWith"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="securedBy-Contributing">
        <rdfs:label xml:lang="en">secured by contributing</rdfs:label>
        <rdfs:comment>A generalization of both #$securedBy and
            #$supportedBy-Contributing. (#$securedBy-Contributing OBJECT
            HOLDER) means that HOLDER at least contributes to
            OBJECT&apos;s maintaining its current position.  If HOLDER
            were to be removed, then (everything else being equal)
            OBJECT would at least be held less securely overall than
            before.  (OBJECT might even actually move, but this is not
            necessary.)  Examples: a building is
            #$securedBy-Contributing an individual pile underneath it
            and a hot air balloon might be #$securedBy-Contributing each
            one of several ropes holding it to the ground.  If, like the
            house pile, HOLDER contributes to the _vertical_ support of
            OBJECT, consider using #$supportedBy-Contributing.  If
            HOLDER is _crucial_ to OBJECT&apos;s being secured, consider
            using #$securedBy.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sees">
        <rdfs:label xml:lang="en">will see</rdfs:label>
        <rdfs:comment>(#$sees AGENT OBJECT) means that the
            #$PerceptualAgent AGENT perceives the
            #$SpatialThing-Localized OBJECT via the sense of sight.
            (#$sees AGENT OBJECT) implies that AGENT is sensuously aware
            of at least some of OBJECT&apos;s visible properties, such
            as its color, shape, or texture.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#perceives"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seller">
        <rdfs:label xml:lang="en">seller</rdfs:label>
        <rdfs:comment>The predicate #$seller relates an agent to an
            event in which some item is sold.  (#$seller EXCHANGE AGENT)
            means that the #$Agent AGENT sells something in the
            #$MonetaryExchangeOfUserRights EXCHANGE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:subPropertyOf rdf:resource="#exchangers"/>
        <rdfs:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sellingAgent">
        <rdfs:label xml:lang="en">seller</rdfs:label>
        <rdfs:comment>A selling agent acts on behalf of a would be
            seller to bring about a buying event involving his/her/its
            client as the seller. </rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sellingPerformer"/>
        <rdfs:subPropertyOf rdf:resource="#mediators"/>
        <rdfs:domain rdf:resource="#CommercialActivity"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sellingPerformer">
        <rdfs:label xml:lang="en">seller</rdfs:label>
        <rdfs:comment>(#$sellingPerformer COM AGENT) means that AGENT
            actively pursues making a sale in COM.  Note that AGENT may
            be either the seller of the goods in COM (see the predicate
            #$seller), or an agent representing the seller of the goods
            (see the predicate #$sellingAgent).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:subPropertyOf rdf:resource="#socialParticipants"/>
        <rdfs:domain rdf:resource="#CommercialActivity"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sellsProductType">
        <rdfs:label xml:lang="en">will sell</rdfs:label>
        <rdfs:comment>This predicate relates a given legal agent (see
            #$LegalAgent) to a specific  type of product s/he/it sells.
            (#$sellsProductType AGENT PRODTYPE) means that  AGENT sells
            PRODTYPE.  For example, McDonald&apos;s sells hamburgers.
            The  implication is AGENT typically and often sells products
            of PRODTYPE.  See  also #$ProductProviderFn-Seller.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#knowsAbout"/>
        <rdfs:domain rdf:resource="#LegalAgent"/>
        <rdfs:range rdf:resource="#ProductType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="semMapJargonForPerson">
        <rdfs:label xml:lang="en">sem map jargon for person</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLAssertion"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="semMapTime">
        <rdfs:label xml:lang="en">sem map time</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLNLAssertion"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="semTransArg">
        <rdfs:label xml:lang="en">sem trans arg</rdfs:label>
        <rdfs:comment>(#$semTransArg PRED N) means that the Nth argument
            to the #$NLSemanticPredicate PRED is the
            #$NLTemplateExpression in which the denoted Cyc term appears.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLSemanticPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="semTransPredForPOS">
        <rdfs:label xml:lang="en">sem trans pred for p o s</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpeechPart"/>
        <rdfs:range rdf:resource="#NLSemanticPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="senderOfInfo">
        <rdfs:label xml:lang="en">information sender</rdfs:label>
        <rdfs:comment>The predicate #$senderOfInfo is used to indicate
            the sending agent in a particular transfer of information.
            (#$senderOfInfo TRANSFER SENDER) means that SENDER is an
            agent who is the source of information transferred in the
            #$InformationTransferEvent TRANSFER.  At the time of
            TRANSFER (and typically for some period beforehand), SENDER
            conceives of the information transferred in TRANSFER.
            It&apos;s not the case that SENDER necessarily knows the
            `information&apos; or has it among his/her beliefs (see the
            predicates #$knows and #$beliefs), because TRANSFER could
            involve lying (e.g., #$GeorgeWashington&apos;s telling his
            father, `I didn&apos;t chop down the cherry tree&apos;).
            Note that (#$senderOfInfo TRANSFER SENDER) implies that
            SENDER performs TRANSFER intentionally, in the sense that
            there is some other agent (related to TRANSFER via
            #$communicationTarget) that SENDER is attempting to transfer
            information to via TRANSFER.  Of course, SENDER may or may
            not be successful in transferring that information to the
            other agent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#informationOrigin"/>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seniorExecutives">
        <rdfs:label xml:lang="en">senior executives</rdfs:label>
        <rdfs:comment>The predicate #$seniorExecutives is used to
            identify the upper-level managers in a particular
            organization.  (#$seniorExecutives ORG PERSON) means PERSON
            is an employee with a high executive position in the
            #$Organization ORG.  #$seniorExecutives relates an
            organization to the people who hold its principal corporate
            offices (CEO, President, etc.) and also positions like Chief
            of Staff, General, Admiral, Chief Corporate Counsel,
            Managing Partner, Chief Scientist, Chief Engineer, etc.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasMembers"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sentenceDesignationArgnum">
        <rdfs:label xml:lang="en">sentence designation argnum</rdfs:label>
        <rdfs:comment>Used to specify which argument of a given
            #$MicrotheoryDesignatingRelation  designates the CycL
            sentence to be interpreted in a specific microtheory.</rdfs:comment>
        <rdfs:domain rdf:resource="#MicrotheoryDesignatingRelation"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sentenceEquiv">
        <rdfs:label xml:lang="en">sentence equiv</rdfs:label>
        <rdfs:comment>(#$sentenceEquiv FORMULA-1 FORMULA-2) means that
            the #$ELSentence-Assertible FORMULA-1 is logically
            equivalent to the #$ELSentence-Assertible FORMULA-2.  This
            predicate is very similar to #$equiv, but #$equiv is an
            instance of #$LogicalConnective, while #$sentenceEquiv is an
            instance of #$Predicate.  #$sentenceEquiv is primarily
            intended to be used for rules that quantify over CycL formulas.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sentenceImplies"/>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sentenceImplies">
        <rdfs:label xml:lang="en">sentence implies</rdfs:label>
        <rdfs:comment>A binary predicate that represents logical
            entailment in CycL.  (#$sentenceImplies ANTECEDENT
            CONSEQUENT) means that CONSEQUENT can be derived from
            ANTECEDENT using purely logical transformations (such as
            those used by the #$CycCanonicalizer).  In other words, the
            sentence (#$sentenceImplies ANTECEDENT CONSEQUENT) is a
            tautology.  This predicate thus differs from #$implies
            (q.v.), which represents material implication in #$CycL.
            For example, whereas:   (#$implies     (#$isa #$Muffet
            #$Poodle)     (#$isa #$Muffet #$Dog))  is true,
            (#$sentenceImplies     (#$isa #$Muffet #$Poodle)     (#$isa
            #$Muffet #$Dog))  is not true, since the implication is not
            a tautology.  #$sentenceImplies also differs from #$implies
            in that whereas #$implies is a #$LogicalConnective (q.v.),
            #$sentenceImplies is merely a predicate that holds between
            sentences.  #$sentenceImplies is primarily intended to be
            used for rules that quantify over CycL sentences.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="serialNumber">
        <rdfs:label xml:lang="en">serial number (CycL predicate)</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            physical devices to serial numbers.  (#$serialNumber DEVICE
            STRING) means that the manufacturer of DEVICE has assigned
            the serial number STRING to DEVICE.</rdfs:comment>
        <rdfs:domain rdf:resource="#PhysicalDevice"/>
        <rdfs:range rdf:resource="#SerialNumber-String"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seriesLength">
        <rdfs:label xml:lang="en">series length</rdfs:label>
        <rdfs:comment>(#$seriesLength SER LEN) means that the series,
            SER, is LEN members long.  Note that some #$Series have an
            unknown or infinite number of members.</rdfs:comment>
        <rdfs:domain rdf:resource="#Series"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seriesMemberIsa">
        <rdfs:label xml:lang="en">series member isa</rdfs:label>
        <rdfs:comment>(#$seriesMemberIsa SERIES COL) means that each of
            the #$seriesMembers of SERIES SIT is an instances of the
            collection COL.</rdfs:comment>
        <rdfs:domain rdf:resource="#Series"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seriesOrderedBy">
        <rdfs:label xml:lang="en">series ordered by</rdfs:label>
        <rdfs:comment>This predicate relates series to relations that
            order them linearly.  (#$seriesOrderedBy SERIES PRED) means
            that PRED is a relation that imposes a linear, or total,
            ordering (see #$TotalOrdering) on the #$seriesMembers of
            SERIES.  PRED is both a #$TransitiveBinaryPredicate and an
            #$AntiSymmetricBinaryPredicate, and each member of SERIES
            stands in the relation PRED to all of the succeeding
            members.  For example, if SERIES is a line of cars driving
            north, it might be ordered by #$northOf (and perhaps also by
            ahead of ).</rdfs:comment>
        <rdfs:domain rdf:resource="#Series"/>
        <rdfs:range rdf:resource="#AntiSymmetricBinaryPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="seriesOrderedByInverse">
        <rdfs:label xml:lang="en">series ordered by inverse</rdfs:label>
        <rdfs:comment>(#$seriesOrderedByInverse SER PRED) means that
            PRED is the relation that imposes an order on the members of
            SER.  Each member of the series stands in the relation PRED
            to the series members that come before it.  For example, if
            SER is a line of cars driving south, the ordering relation
            might be #$northOf (or &apos;&apos;behind&apos;&apos;).  See
            also #$seriesOrderedBy.</rdfs:comment>
        <rdfs:domain rdf:resource="#Series"/>
        <rdfs:range rdf:resource="#AntiSymmetricBinaryPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="several-GenQuant">
        <rdfs:label xml:lang="en">several - gen quant</rdfs:label>
        <rdfs:comment>This constant represents the English determiner
            `several&apos; as a generalized quantifier. The meaning of
            `several&apos; is highly underspecified in English, as it
            indicates neither a proportion (like `most&apos;) nor an
            implicit comparison to contrastive class (like `many&apos;
            in its relational meaning). The best we can do is to
            interpret as `a plurality of&apos; -- which of course would
            itself mean different things in different contexts (and for
            different classes of things): (#$several-GenQuant COL1 COL2)
            iff there are at least 3 things that are in both COL1 and COL2.</rdfs:comment>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="shapeOfObject">
        <rdfs:label xml:lang="en">shape (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate is used to describe the predominant
            shape of an object. (#$shapeOfObject OBJECT SHAPE) means
            that the instance of #$SpatialThing OBJECT has the instance
            of #$ShapeType SHAPE as its predominant shape.  For example,
            (#$shapeOfObject OBJECT #$Square) means that OBJECT has the
            attribute of being square-shaped.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#ShapeType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sharedNotes">
        <rdfs:label xml:lang="en">shared notes</rdfs:label>
        <rdfs:comment>A predicate-denoting constant that is an instance
            of #$DocumentationPredicate.  It is sometimes useful to
            include the same piece of text in the documentation of two
            or more constants or other #$CycLIndexedTerms. Rather than
            actually duplicating text in the Knowledge Base, one can
            create a #$SharedNote (q.v.): a piece of text that is to
            serve as this shared documentation, and which is itself the
            comment (see #$comment) on the #$SharedNote&apos;s constant.
            (Thus the constants for shared-notes actually denote their
            own comments.)  (#$sharedNotes TERM NOTE) means that NOTE is
            a string of text (see #$TextString) serving as shared
            documentation partly about TERM.  Since #$SharedNotes are
            typically _shared_, there are likely to be one or more other
            indexed terms having NOTE as their shared-note as well.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#SharedNote"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="shareholders">
        <rdfs:label xml:lang="en">shareholders</rdfs:label>
        <rdfs:comment>The predicate #$shareholders identifies particular
            agents as owners of shares in a particular organization.
            (#$shareholders ORG AGENT) means AGENT owns one or more
            shares of #$Stock in the company ORG and hence is an owner
            of the company and may receive dividends from the company.
            #$shareholders indicates owners of a company&apos;s stock
            generically, whether they hold common or preferred shares.
            Voting shareholders may vote (one vote per share) for the
            Board of Directors.  Shareholders do not normally
            participate in the operation of a company, and they are not
            personally liable for the debts of the company.</rdfs:comment>
        <rdfs:domain rdf:resource="#LegalCorporation"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sheetSurfaceConnected">
        <rdfs:label xml:lang="en">sheet surface connected</rdfs:label>
        <rdfs:comment>(#$sheetSurfaceConnected SHEET OBJECT) means that
            SHEET is connected over most of one of its surfaces to a
            surface of OBJECT.  For example, #$sheetSurfaceConnected
            would hold between the two parts of a bi-layer membrane.
            The sheet(s) may be flexible, but the surface connection is
            firm (i.e., no sliding can occur without a separation,
            tearing, or breaking occurring).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#covers-Sheetlike"/>
        <rdfs:subPropertyOf rdf:resource="#connectedAlongSurface"/>
        <rdfs:domain rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sheetSurfaceTouches">
        <rdfs:label xml:lang="en">sheet surface touches</rdfs:label>
        <rdfs:comment>(#$sheetSurfaceTouches SHEET OBJ2) means that
            SHEET #$touches all over most of one surface to a surface of
            OBJ2.  For example, pairs of sheets in a stack would be
            #$sheetSurfaceTouches to each other.  This would also apply
            to a #$Napkin on a #$Table-PieceOfFurniture.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#alignedAlongSurface"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-Apartanomic"/>
        <rdfs:domain rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="shortTimeIntervalAfter">
        <rdfs:label xml:lang="en">short time interval after</rdfs:label>
        <rdfs:comment>(shortTimeIntervalAfter INTER TEMP-OBJ) means that
            the instance of #$TimeInterval INTER is the short time
            interval after the instance of #$TemporalThing TEMP-OBJ.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#contiguousAfter"/>
        <rdfs:domain rdf:resource="#TimeInterval"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="shortTimeIntervalBefore">
        <rdfs:label xml:lang="en">short time interval before</rdfs:label>
        <rdfs:comment>(shortTimeIntervalBefore INTER TEMP-OBJ) means
            that the instance of #$TimeInterval INTER is the short time
            interval before the instance of #$TemporalThing TEMP-OBJ.</rdfs:comment>
        <rdfs:domain rdf:resource="#TimeInterval"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="siblingDisjointExceptions">
        <rdfs:label xml:lang="en">sibling disjoint exceptions</rdfs:label>
        <rdfs:comment>The predicate #$siblingDisjointExceptions is used
            to state exceptions to constraints normally imposed by some
            instance of #$SiblingDisjointCollectionType.
            (#$siblingDisjointExceptions COL1 COL2) means that the
            relationship between the collections COL1 and COL2 is exempt
            from the disjointness constraint which would otherwise be
            imposed because COL1 and COL2 are both instances of some
            instance of #$SiblingDisjointCollectionType.  (See
            #$SiblingDisjointCollectionType for a full explanation of
            the constraints.)   For example, #$Reading and
            #$TouchPerception are both instances of
            #$DefaultDisjointScriptType, which in turn is an instance of
            #$SiblingDisjointCollectionType.  Consequently, since
            #$Reading is not a specialization of #$TouchPerception, and
            #$TouchPerception is not a specialization of #$Reading, the
            two collections have a default disjointness constraint
            placed between them. However, such a disjointness constraint
            should be blocked, since any instance of reading a Braille
            text is both an instance of #$Reading and an instance of
            #$TouchPerception.  By asserting
            (#$siblingDisjointExceptions #$Reading #$TouchPerception),
            we block the disjointness constraint between those two
            collections, without disturbing the constraints between each
            of those collections and all the other instances of their
            parent (disjoint) collection, #$DefaultDisjointScriptType.</rdfs:comment>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="siblingOrganizations">
        <rdfs:label xml:lang="en">sibling organizations</rdfs:label>
        <rdfs:comment>The predicate #$siblingOrganizations relates two
            organizations which are immediate #$subOrganizations of a
            common (unspecified) parent organization.
            (#$siblingOrganizations ORG1 ORG2) means that the
            #$Organizations ORG1 and ORG2 are sister organizations
            within some hierarchically structured organization; ORG1 and
            ORG2 are at the same `level&apos; from the top.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="siblings">
        <rdfs:label xml:lang="en">sibling (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$siblings ANIMAL-1 ANIMAL-2) means that the
            #$Animal ANIMAL-1 and the #$Animal ANIMAL-2 are siblings;
            that is, either they share one or more biological parents,
            or they are siblings by adoption, marriage, or some other
            social arrangement.  Human siblings are generally (but not
            always) reasonably close in age (within 15 years or so), and
            generally (but not always) have grown up together in the
            same family.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#relatives"/>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <rdfs:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <rdfs:domain rdf:resource="#Animal"/>
        <rdfs:range rdf:resource="#Animal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="signifies">
        <rdfs:label xml:lang="en">designated</rdfs:label>
        <rdfs:comment>A very general signification or representation
            predicate. (#$signifies SIGNIFIER SIGNIFIED) means that the
            #$Thing SIGNIFIED is signified by the #$Individual
            SIGNIFIER.  That is, SIGNIFIER somehow represents, refers
            to, denotes, or depicts SIGNIFIED.  As an instance of
            #$Thing, SIGNIFIED can be anything. SIGNIFIER can be almost
            anything, although it is most often a word, phrase,
            description, string, image or symbol.  Note that this
            predicate does not state to whom SIGNIFIER represents
            SIGNIFIED; that is some assumed &apos;interpreter&apos; or
            &apos;community of interpreters&apos; in the given context,
            and it is left implicit by this binary predicate.  In order
            to mention explicitly the interpreter or agent to whom
            SIGNIFIER means SIGNIFIED, use the ternary predicate
            (#$signifiesTo SIGNIFIER SIGNIFIED AGENT).    Often there is
            a convention (intersubjective understanding and agreement)
            by which one thing represents another, such as the word
            &apos;Dogs&apos; referring (in English) to dogs, or the
            abstract tetrahedron referring to the element Fire in
            #$Alchemy.  A pile of three rocks on a path can signify
            &apos;danger ahead&apos; and the number thirteen can signify
            bad luck (such signification is sometimes called  symbolic
            .)  But there need be no specific convention; deer tracks in
            the sand can signify the deer (such signification is
            sometimes called  indexical ), and a picture or photograph
            may signify whatever it is a picture of (such signification
            is sometimes called  iconic ), in both cases without any
            prior convention or agreement. An important specialization
            of this predicate is #$denotes, which restricts SIGNIFIER to
            instances of #$CycLExpression, and the relationship between
            SIGNIFIER and SIGNIFIED to that of denoting (i.e. directly
            referring to).</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="simpleNounStrings">
        <rdfs:label xml:lang="en">simple noun strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nounStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="simultaneousWith">
        <rdfs:label xml:lang="en">simultaneous with</rdfs:label>
        <rdfs:comment>(#$simultaneousWith T1 T2) means that #$TimePoints
            T1 and T2 occur at exactly the same time (and therefore T1
            #$equals T2). Note that individual #$TimePoints are seldom
            mentioned in axioms. Rather, an axiom is more likely to use
            some #$ComplexTemporalPredicate, such as #$cotemporal or
            #$temporalBoundsIdentical, which holds between two
            #$TemporalThings. These #$ComplexTemporalPredicates are
            themselves usually defined in terms of
            #$PrimitiveTemporalPredicates, such as #$after and
            #$simultaneousWith, which relate one #$TimePoint to another.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#startingPoint"/>
        <rdfs:subPropertyOf rdf:resource="#endingPoint"/>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:subPropertyOf rdf:resource="#cotemporal"/>
        <rdfs:subPropertyOf rdf:resource="#equals"/>
        <rdfs:domain rdf:resource="#TimePoint"/>
        <rdfs:range rdf:resource="#TimePoint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singleEntryFormatInArgs">
        <rdfs:label xml:lang="en">single entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.).  (#$singleEntryFormatInArgs PRED N) means that, for
            any particular way of fixing the other arguments to PRED
            besides the Nth, there is at most one thing such that, if
            taken as the Nth argument, PRED holds of those arguments.
            That is, if the sequences &lt;... ARGN ...&gt; and &lt;...
            ARGN-PRIME ...&gt; differ at most in their Nth items and
            both (PRED ... ARGN ...) and (PRED ... ARGN-PRIME ...) hold,
            then ARGN = ARGN-PRIME (see #$equals).  For example,
            #$singleEntryFormatInArgs holds of #$biologicalMother with
            respect to its second argument-place, since an animal can
            only have one biological mother.  A predicate with a
            single-entry format argument-place is thus a
            #$StrictlyFunctionalPredicate (q.v.) that is  functional
            with respect to that argument-place (see
            #$strictlyFunctionalInArgs).  Contrast with #$openEntryFormatInArgs.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#functionalInArgs"/>
        <rdfs:domain rdf:resource="#FunctionalPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singular">
        <rdfs:label xml:lang="en">singular</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$singular WORD STRING) means that STRING is the singular
            noun form of WORD.  For example, the #$singular form of
            #$Hit-TheWord is `hit&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#singular-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#simpleNounStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singular-Feminine">
        <rdfs:label xml:lang="en">singular - feminine</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#singular"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singular-Generic">
        <rdfs:label xml:lang="en">singular form (CycL predicate)</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate is a generalization over the
            #$SpeechPartPredicates that express singular number.
            (#$singular-Generic WORD STRING) means that the
            #$EnglishWord WORD has STRING as a singular form: either
            #$singular (the singular form corresponding to the
            #$CountNoun part of speech), #$pnSingular (for
            #$ProperCountNoun forms), or #$agentive-Sg (for
            #$AgentiveNoun forms).  This predicate is #$notAssertible,
            since it will always cash out as an assertion on one of its spec-preds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonPlural-Generic"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singular-Masculine">
        <rdfs:label xml:lang="en">singular - masculine</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#singular"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="singular-Neuter">
        <rdfs:label xml:lang="en">singular - neuter</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#singular"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sizeParameterOfObject">
        <rdfs:label xml:lang="en">size parameter of object</rdfs:label>
        <rdfs:comment>A #$QuantitySlot for indicating the size that a
            given #$SpatialThing has  in some parameter or dimension.
            (#$sizeParameterOfObject OBJECT SIZE) means  that OBJECT
            measures SIZE in some (unspecified) parameter, which might
            be length, area, volume, or whatever.  This is a general
            size predicate  for expressing (in a parameter-nonspecific
            way) all sorts of size  information about an object or other
            spatial thing.  For parameter-specific size predicates, see
            the various specializations of #$sizeParameterOfObject.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="smells">
        <rdfs:label xml:lang="en">will smell</rdfs:label>
        <rdfs:comment>(#$smells AGENT OBJECT) means that AGENT perceives
            the physical object or event OBJECT via the sense of smell.
            This implies that OBJECT releases (or involves the release
            of) a scent (see #$Odor) of which AGENT is sensuously aware.
            In the situation described by  Joe smells the coffee brewing
            , both of the following are true: (#$smells Joe Coffee01)
            and (#$smells Joe CoffeeBrewingEvent09).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#perceives"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="socialParticipants">
        <rdfs:label xml:lang="en">#$socialParticipants</rdfs:label>
        <rdfs:comment>(#$socialParticipants SO AGT) means that the
            #$Agent AGT participates --- in some social role --- in the
            #$SocialOccurrence SO.  In every culture there are many
            specializations of this #$ActorSlot; some
            #$SocialOccurrences have very elaborate role structures
            (e.g., a lawsuit in 1990&apos;s America), and some are
            fairly simple (e.g., rudely bumping into someone.)  See #$SocialOccurrence.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#deliberateActors"/>
        <rdfs:domain rdf:resource="#SocialOccurrence"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="socialSecurityNum">
        <rdfs:label xml:lang="en">social security num</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate that relates instances of
            #$Person to instances of #$SocialSecurityNumber.
            (#$socialSecurityNum PER NUM) means that PER&apos;s social
            security number is NUM.  Note that no person can have more
            than one social security number.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#taxIDNumber"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#SocialSecurityNumber"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="softwareAgentImplementedBy">
        <rdfs:label xml:lang="en">software agent implemented by</rdfs:label>
        <rdfs:comment>A binary predicate that relates an instance of
            #$SoftwareAgent to the instance of #$ComputerProgram-CW
            which implements its behavior.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#ComputerProgram-CW"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="softwareParameterDomain">
        <rdfs:label xml:lang="en">software parameter domain</rdfs:label>
        <rdfs:comment>(#$softwareParameterDomain SOFTWARE-PARAMETER COL)
            means that the value of SOFTWARE-PARAMETER [see
            #$softwareParameterValue] is restricted to being an instance
            of the #$Collection COL. Such restrictions may or may not
            coincide with a #$ComputerDataType in a language in which
            the #$SoftwareParameter is coded.</rdfs:comment>
        <rdfs:domain rdf:resource="#SoftwareParameter"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="softwareParameterHasType">
        <rdfs:label xml:lang="en">software parameter has type</rdfs:label>
        <rdfs:comment>(#$softwareParameterHasType ICT TYPE) means that
            in the current  context, ICT is an instantiation of TYPE
            data type.  For example, (#$softwareParameterHasType
            #$AlgorithmInput1 #$CharacterObject)  means that
            #$AlgorithmInput1 is understood to be typed  as a character
            variable. This information is useful for  software
            engineering purposes, even when the programming  language
            used itself does not have the syntatic constructs  for
            representing strong typing.</rdfs:comment>
        <rdfs:domain rdf:resource="#SoftwareParameter"/>
        <rdfs:range rdf:resource="#ComputerDataType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="softwareParameterProgramObject">
        <rdfs:label xml:lang="en">software parameter program object</rdfs:label>
        <rdfs:comment>(#$softwareParameterProgramObject PARAM STRUCT)
            means that #$SoftwareParameter PARAM, in the context of a
            #$ComputerProcessRunning, has as its current in-program
            representation the #$ProgramObject STRUCT.</rdfs:comment>
        <rdfs:domain rdf:resource="#SoftwareParameter"/>
        <rdfs:range rdf:resource="#ProgramObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="softwareParameterValue">
        <rdfs:label xml:lang="en">software parameter value</rdfs:label>
        <rdfs:comment>(#$softwareParameterValue SOFTWARE-PARAMETER
            VALUE) means that SOFTWARE-PARAMETER has the value VALUE in
            the current context.  See #$softwareParameterValueInProgram
            for a #$TernaryPredicate that specifies the
            #$ComputerProcessRunning that determines the context.</rdfs:comment>
        <rdfs:domain rdf:resource="#SoftwareParameter"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="solubleIn">
        <rdfs:label xml:lang="en">soluble in</rdfs:label>
        <rdfs:comment>(#$solubleIn SOLUTE SOLVENT) means that the piece
            of #$PartiallyTangible stuff SOLUTE will ordinarily dissolve
            if placed into the #$LiquidTangibleThing SOLVENT.  See also #$Solubility.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#LiquidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="solute">
        <rdfs:label xml:lang="en">solute</rdfs:label>
        <rdfs:comment>The predicate #$solute indicates a particular
            instance of #$PartiallyTangible in a #$Solution which is
            dissolved in the #$solvent of that #$Solution.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constituents"/>
        <rdfs:domain rdf:resource="#Solution"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="solvent">
        <rdfs:label xml:lang="en">solvent (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$solvent indicates a particular
            liquid in a #$Solution in which the #$solute is dissolved.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#mainConstituent"/>
        <rdfs:domain rdf:resource="#Solution"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spaceRegionPortals">
        <rdfs:label xml:lang="en">space region portals</rdfs:label>
        <rdfs:comment>(#$spaceRegionPortals REGION HOLE) means that HOLE
            is a #$Portal into the #$CavityInteriorRegion REGION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjacentTo"/>
        <rdfs:domain rdf:resource="#CavityInteriorRegion"/>
        <rdfs:range rdf:resource="#Portal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyContains">
        <rdfs:label xml:lang="en">spatially contains</rdfs:label>
        <rdfs:comment>(#$spatiallyContains CONT OBJ) means that
            #$SpatialThing OBJ is within the convex hull of some other
            #$SpatialThing CONT. #$spatiallyContains is agnostic as to
            whether OBJ is a part of CONT, fully inside of CONT (as
            opposed to sharing an outer surface with it), or moves with
            CONT (see #$movesWith).  #$spatiallyContains is a very
            general predicate, so a more specific predicate is almost
            always applicable. For example, if OBJ #$movesWith CONT, the
            slightly more specific predicate #$physicallyContains is applicable.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIncludes"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyDisjoint">
        <rdfs:label xml:lang="en">spatially disjoint</rdfs:label>
        <rdfs:comment>(#$spatiallyDisjoint REGION1 REGION2) means that
            REGION1 and REGION2 have no common spatial subregion that is
            part of both of them.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyIncludes">
        <rdfs:label xml:lang="en">spatially includes</rdfs:label>
        <rdfs:comment>This predicate is the common generalization of
            #$spatiallyContains and #$spatiallySubsumes, neither of
            which is a generalization of the other.
            (#$spatiallyIncludes SURROUND OBJ) means that #$SpatialThing
            OBJ is within the convex hull of #$SpatialThing SURROUND,
            which  surrounds or subsumes OBJ.  #$spatiallyIncludes is
            agnostic as to whether OBJ is a part of SURROUND,  fully
            inside of SURROUND (as opposed to sharing an outer surface),
            moves with SURROUND (see #$movesWith), or whether OBJ and
            SURROUND share a complete outer surface. #$spatiallyIncludes
            is a very general predicate, so a more specific predicate is
            almost always applicable.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyIntersects">
        <rdfs:label xml:lang="en">spatially intersects</rdfs:label>
        <rdfs:comment>(#$spatiallyIntersects THING1 THING2) means that
            the spatial extent of the #$SpatialThing THING1 overlaps the
            spatial extent of the #$SpatialThing THING2.  Note that
            spatial intersection doesn&apos;t imply that THING1 and
            THING2 have any physical parts (see the predicate
            #$physicalParts) in common. For example, an instance of
            #$IntangibleIndividual, such as a shadow, can spatially
            intersect an instance of #$PartiallyTangible, such as a
            wall; in such a case, the instance of #$IntangibleIndividual
            will obviously not share any physical part with the instance
            of #$PartiallyTangible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:subPropertyOf rdf:resource="#notFarFrom"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyIntrinsicArg">
        <rdfs:label xml:lang="en">spatially intrinsic arg</rdfs:label>
        <rdfs:comment>(#$spatiallyIntrinsicArg PRED N) means that the
            #$Predicate PRED expresses a property that is  spatially
            intrinsic  for its argument position N. In other words, if a
            sentence S using PRED is true for some object OBJ (in the
            Nth argument position), every sentence is true in which a
            term denoting any spatial part (via #$physicalPortions) of
            OBJ is substituted for OBJ in S. For    example, since
            (#$spatiallyIntrinsicArg #$temperatureOfObject 1) is true,
            if  it is true that (#$temperatureOfObject Coffee007
            (#$DegreeCelsius 90)), it is true that any spatial part of
            Coffee007  will also have that temperature.  An example of a
            property that is not spatially intrinsic is #$massOfObject;
            there are parts of any object that have less mass than the
            entire object.  Another example of a relation that is not
            spatially intrinsic, but might at first seem to be, is
            #$constituents.  In (#$constituents ChocolateMilk37 Milk36),
            it is not the case that every spatial part of
            ChocolateMilk37 has Milk36 among its #$constituents.
            #$constituents means, rather, that every part of its first
            argument has some part of the second argument among its components.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallyRelated">
        <rdfs:label xml:lang="en">spatially related</rdfs:label>
        <rdfs:comment>This is the most general spatial predicate.
            (#$spatiallyRelated THING-1 THING-2) means that the
            #$SpatialThing THING-1 and the #$SpatialThing THING-2 are
            somehow spatially related (they occur as spatial things
            within the same surrounding space), without specifying a
            more exact relationship.  Thus, for example, this relation
            holds between any two friends, any two parallel objects, and
            any spacecraft and its destination.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spatiallySubsumes">
        <rdfs:label xml:lang="en">spatially subsumes</rdfs:label>
        <rdfs:comment>(#$spatiallySubsumes SUPER SUB) means that the
            spatial extent of the #$SpatialThing SUB lies within the
            spatial extent of the #$SpatialThing SUPER.  For example, a
            model ship in a bottle is _not_ spatially subsumed by the
            bottle, but the lip of the bottle _is_ spatially subsumed by
            the bottle.  (The ship would be #$in-ContClosed the bottle.)
            If SUPER spatially subsumes SUB, this does not imply that
            SUB is a part of SUPER, since distinct things might
            spatially intersect without having any parts in common (for
            example, the shadow cast on a wall and the surface of the
            wall).  Facts about spatial subsumption do have implications
            concerning parts, however: if one thing spatially subsumes a
            second thing, then the first has a part which is #$cospatial
            with the second (a part, that is, with the same spatial
            extent as the second).  See also #$spatiallyIntersects,
            #$spatiallyContains, and #$cospatial.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyIncludes"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spectators">
        <rdfs:label xml:lang="en">#$spectators</rdfs:label>
        <rdfs:comment>(#$spectators E AGT) means that in the #$Event E,
            the #$Agent AGT is an onlooker of E but not actively acting
            in it in any other way.   AGT will observe all or part of E.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#observers"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event-Localized"/>
        <rdfs:range rdf:resource="#PerceptualAgent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="speechPartOfWordForm">
        <rdfs:label xml:lang="en">speech part of word form</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#NLWordForm"/>
        <rdfs:range rdf:resource="#SpeechPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="speechPartPreds">
        <rdfs:label xml:lang="en">speech part preds</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. This
            predicate expresses the relation between parts of speech and
            the corresponding syntactic predicates.  The first argument
            is a part of speech, i.e., a collection that is a
            specialization of #$SpeechPart. The second argument is a
            #$SpeechPartPredicate (q.v.).  For instance,
            (#$speechPartPreds #$CountNoun #$singular) means that the
            predicate #$singular only applies to words that have
            #$CountNoun forms.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpeechPart"/>
        <rdfs:range rdf:resource="#SpeechPartPredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="speedOfObject-Translation">
        <rdfs:label xml:lang="en">speed (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$speedOfObject-Translation is used
            to give the speed with which an object is moving in a
            particular translational motion.  Velocity has a speed and
            direction.  Speed is a scalar quantity, i.e., it has no
            direction, only magnitude.  Thus, `100 miles per hour
            straight up&apos; is a velocity, and `100 miles per
            hour&apos; is the corresponding speed.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Speed"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="spouse">
        <rdfs:label xml:lang="en">spouse (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$spouse PERSON1 PERSON2) means the two #$Persons
            PERSON1 and PERSON2 are married.   Note: in some contexts
            (cultures), a person is not restricted to having only one
            cotemporal spouse.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cohabitingFamilyMembers"/>
        <rdfs:subPropertyOf rdf:resource="#mate"/>
        <rdfs:subPropertyOf rdf:resource="#coreRelatives"/>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#Person"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="startingDate">
        <rdfs:label xml:lang="en">starting date</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate that is used to
            specify the date (see #$Date) on which a given temporal
            thing starts to  happen or begins to exist.  (#$startingDate
            TEMP-THING DATE) means that  TEMP-THING starts (if
            TEMP-THING is an event or other  #$Situation-Temporal) or
            begins to exist (if TEMP-THING is a physical object or other
            #$SomethingExisting) sometime during DATE.  That is,
            (#$temporallySubsumes DATE (#$StartFn TEMP-THING)) holds.
            Note that DATE, though defined in terms of a calendar, need
            not be a particular day or year (e.g. it might be a
            particular minute or month or decade).  See also
            #$startingPoint and  #$endingDate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#Date"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="startingPoint">
        <rdfs:label xml:lang="en">#$startingPoint</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            time point at which it starts or begins to exist.
            (#$startingPoint THING POINT) means that THING begins at
            POINT, which is the earliest moment of its temporal extent.
            See also #$endingPoint.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TimePoint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="startsAfterEndingOf">
        <rdfs:label xml:lang="en">starting after the end of</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalRelation (q.v.) that  relates
            any pair of temporal things such that the first starts after
            the   second ends.  (#$startsAfterEndingOf AFTER BEFORE)
            means that the time   point (see #$TimePoint) at which AFTER
            first starts to exist or occur   is temporally later than
            (see #$after) the time point at which BEFORE  finally ceases
            to exist or occur.  Thus it is equivalent to the form
            (#$after (#$StartFn AFTER) (#$EndFn BEFORE)).  That is, the
            #$startingPoint of AFTER is later than the #$endingPoint of BEFORE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyDisjoint"/>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:subPropertyOf rdf:resource="#endsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="startsAfterStartingOf">
        <rdfs:label xml:lang="en">starting after the start of</rdfs:label>
        <rdfs:comment>(#$startsAfterStartingOf LATER-START
            EARLIER-START) means that LATER-START begins to exists or
            occur after EARLIER-START begins to exist or occur.  That
            is, the #$startingPoint of LATER-START is later than the
            #$startingPoint of EARLIER-START or, equivalently, (#$after
            (#$StartFn LATER-START) (#$StartFn EARLIER-START)).  This
            implies nothing about whether, or by how much, LATER-START
            and EARLIER-START overlap, except that they can&apos;t be
            fully #$cotemporal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="startsDuring">
        <rdfs:label xml:lang="en">starts during</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate that is a
            specialization of both #$startsAfterStartingOf and
            #$temporalBoundsIntersect (qq.v.), and that relates a given
            temporal thing (see #$TemporalThing) to  another such that
            the first starts to exist or occur at some time between  the
            start and the end of the existence or occurrence of the
            second.   (#$startsDuring TEMPTHING1 TEMPTHING2) means that
            the start (see  #$startingPoint) of TEMPTHING1 is properly
            contained within the temporal  bounds (see
            #$temporalBoundsContain) of TEMPTHING2.  Note that this does
            _not_ entail that TEMPTHING1 and TEMPTHING2 _intersect_ in
            time (see  #$temporallyIntersects); but they will intersect
            if (e.g.) TEMPTHING2  is temporally continuous (see #$temporallyContinuous).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stateOfAddress">
        <rdfs:label xml:lang="en">state of address</rdfs:label>
        <rdfs:comment>(#$stateOfAddress LOC STATE) means that the
            #$ContactLocation LOC is found in the STATE, where STATE is
            either a   #$State-UnitedStates or another
            #$CountrySubsidiary. For example, as   #$CycorpHeadquarters
            is a #$ContactLocation for #$Cycorp, then
            (#$stateOfAddress #$CycorpHeadquarters #$Texas-State) means
            that the  Cycorp Headquarters building is located in Texas.
            Note that the arg-constraint  on the first argument should
            be an instance of #$ContactLocation which serves  as a
            #$pointsOfContact for an agent and not the agent itself.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#CountrySubsidiary"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stateOfMatter">
        <rdfs:label xml:lang="en">state of matter</rdfs:label>
        <rdfs:comment>The predicate #$stateOfMatter is used to indicate
            the physical state of a tangible thing.  (#$stateOfMatter
            THING STATE) means that the #$PartiallyTangible THING is in
            the physical state STATE, where STATE is an instance of #$MatterTypeByPhysicalState.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#MatterTypeByPhysicalState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sticksInto">
        <rdfs:label xml:lang="en">sticks into</rdfs:label>
        <rdfs:comment>(#$sticksInto INNER OUTER) means that INNER, has
            one end inside of OUTER, its other end is at the edge of or
            outside of OUTER.  The end of INNER inside of OUTER may be
            surrounded in either two dimensions (such as the
            #$IndianSubcontinent and the #$IndianOcean) or three
            dimensions (such as a #$Nail in a board
            [#$Board-PieceOfWood]).  More specific forms of #$sticksInto
            are #$protrudesInto for objects which are mostly outside,
            but have a portion sticking into another object;
            #$in-Embedded, for a solid object which is somewhat held in
            place and therefore also #$touches and is #$connectedTo
            another object; and #$sticksInto-2D, for cases of
            effectively two dimensional objects where INNER is not
            surrounded by OUTER in a perpendicular direction (as in the
            #$IndianOcean case mentioned above).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inRegion"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stockTickerSymbol">
        <rdfs:label xml:lang="en">stock ticker symbol</rdfs:label>
        <rdfs:comment>(stockTockerSymbol ?COMPANY ?SYMBOL) means that
            ?SYMBOL is the string used to identify ?COMPANY on some #$StockExchange.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#abbreviationString-PN"/>
        <rdfs:domain rdf:resource="#CommercialOrganization"/>
        <rdfs:range rdf:resource="#IDString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="streetAddressText">
        <rdfs:label xml:lang="en">address (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$streetAddressText maps from a
            particular place to a string representing its street
            address.  (#$streetAddressText LOC STREET) means that LOC is
            found at the number and street given in the string STREET.
            See also #$ContactLocation.</rdfs:comment>
        <rdfs:domain rdf:resource="#ContactLocation"/>
        <rdfs:range rdf:resource="#StreetAddress"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="strictlyFunctionalInArgs">
        <rdfs:label xml:lang="en">strictly functional in args</rdfs:label>
        <rdfs:comment>A #$MetaPredicate for specifying the
            argument-place(s) with respect to which a given
            #$FunctionalPredicate (q.v) is  functional  in a strict
            sense.  (#$strictlyFunctionalInArgs PRED N) means that PRED
            is strictly functional in its Nth argument-place.  That is,
            for any particular way of fixing all of PRED&apos;s other
            arguments, there will be at most one thing that, if taken as
            the Nth argument, would result in a true sentence.  For
            example, #$biologicalMother is functional in its second
            argument, as  nothing has more than one biological mother.
            In most cases, the entry-format (see #$argFormat) of a
            strictly functional argument-place should be
            #$singleEntryFormatInArgs (q.v.).  Obviously, the specified
            integer N must be less than or equal to the arity (see
            #$arity) of PRED.  Note that, for some  ways of fixing the
            other arguments, there might be _nothing_ that would yield
            a true sentence when put in PRED&apos;s functional
            argument-place.  For example, #$dictator is functional in
            its second argument because a given country can  have at
            most one dictator at a given time; but of course some
            countries have  no dictator.  For a more general predicate
            that encompasses a looser sense in which a predicate&apos;s
            argument-place might be called  functional , see #$functionalInArgs.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#functionalInArgs"/>
        <rdfs:domain rdf:resource="#FunctionalPredicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stuckTo">
        <rdfs:label xml:lang="en">stuck to</rdfs:label>
        <rdfs:comment>(#$stuckTo OBJ1 OBJ2) means that either OBJ1 or
            OBJ2 has a surface or surfaces covered with some adhesive
            material, and OBJ1 and OBJ2 are held together by that
            adhesive material.  Moreover, the adhesive force holding
            OBJ1 and OBJ2 together is at least strong enough to support
            the whole weight of (the lighter of) OBJ1 or OBJ2.  Note
            that if a third object (such as glue) supplies the adhesive
            force holding OBJ1 and OBJ2 together, or if OBJ1 or OBJ2
            were acted on non-trivially (e.g., by welding, not simply
            contact or pressure), then #$bondedTo (or one of its
            specializations), rather than #$stuckTo, would relate OBJ1
            and OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stuffTypeUsed">
        <rdfs:label xml:lang="en">stuff type used</rdfs:label>
        <rdfs:comment>(#$stuffTypeUsed EVT STUFFTYPE) says that some
            instance(s) of STUFFTYPE were used during EVT.  In other
            words, (#$relationInstanceExists   #$stuffUsed EVT STUFFTYPE).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#instrumentType-Generic"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#ExistingStuffType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="stuffUsed">
        <rdfs:label xml:lang="en">stuff used</rdfs:label>
        <rdfs:comment>The predicate #$stuffUsed relates an event to some
            tangible substance which facilitates that event.
            (#$stuffUsed EVENT STUFF) means that STUFF is a portion of
            an instance of #$ExistingStuffType which plays an
            instrumental role in EVENT.  STUFF may or may not be
            consumed in the course of EVENT.  Examples: portions of
            #$Water are #$stuffUsed in instances of #$WashingDishes,
            #$WashingHair, #$WashingClothesInAMachine, etc.; portions of
            #$EdibleOil are #$stuffUsed in some instances of #$Frying
            food and #$BakingBread.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#instrument-Generic"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subAbstractions">
        <rdfs:label xml:lang="en">sub abstractions</rdfs:label>
        <rdfs:comment>(#$subAbstractions WHOLE SUB) means SUB is a
            temporal part (one of the #$timeSlices) of WHOLE, where
            WHOLE and SUB are both instances of #$SomethingExisting.
            Both entities and subabstractions are subabstractions of
            themselves.  So the predicate #$subAbstractions is the
            restriction of the predicate #$timeSlices to the domain, and
            hence also range, #$SomethingExisting.
            `AlbertEinsteinWhileAtPrinceton&apos; is a #$subAbstractions
            of `AlbertEinsteinAsAnAdult&apos;, which in turn is a
            #$subAbstractions of &apos;AlbertEinstein&apos;, which in
            turn is a #$subAbstractions only of itself (hence
            &apos;AlbertEinstein&apos; is an instance of #$Entity (q.v.)).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#timeSlices"/>
        <rdfs:domain rdf:resource="#SomethingExisting"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subAgreements">
        <rdfs:label xml:lang="en">sub agreements</rdfs:label>
        <rdfs:comment>The predicate #$subAgreements relates particular
            agreements to subordinate agreements which comprise them.
            (#$subAgreements AGR SUB) means that both AGR and SUB are
            instances of #$Agreement, and AGR has SUB as a part. For
            instance: (#$subAgreements
            #$LawOfTheSea-UnitedNationsConvention #$MineralRightsClause-UNLawOfTheSea).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subInformation"/>
        <rdfs:domain rdf:resource="#Agreement"/>
        <rdfs:range rdf:resource="#Agreement"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subBeliefSystem">
        <rdfs:label xml:lang="en">sub belief system</rdfs:label>
        <rdfs:comment>This predicate relates belief systems to more
            specialized belief systems.  (#$subBeliefSystem BSYS SUB)
            indicates that SUB is a more specialized  branch  of belief
            system BSYS.  Thus the #$beliefStatements of SUB will be a
            superset of the #$beliefStatements of BSYS (sometimes with a
            few changes and deletions.)  Some examples of this are:
            (#$subBeliefSystem #$Islam #$ShiiteIslam), which means that
            Shiite Islam is a specialized belief system with respect to
            Islam; (#$subBeliefSystem #$ProtestantReligion
            #$PresbyterianReligion), which means that Presbyterianism is
            a specialized form of Protestantism;  and (#$subBeliefSystem
            #$MilesianSchoolBeliefs #$AnaximandersPhilosophy), which
            means that Anaximander&apos;s philosophical beliefs comprise
            one variety of Milesian School belief.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#BeliefSystem"/>
        <rdfs:range rdf:resource="#BeliefSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subEventTypes">
        <rdfs:label xml:lang="en">sub event types</rdfs:label>
        <rdfs:comment>(#$subEventTypes WHOLE-TYPE PART-TYPE) means that
            for every instance X of WHOLE-TYPE, there is an instance Y
            of PART-TYPE such that (#$subEvents X Y).  Example:
            (#$subEventTypes #$Pedaling #$LiftingALeg). See also the
            comments on #$subEvents, #$superEventType.  Note that
            (#$subEventTypes WHOLE-TYPE PART-TYPE) is not sufficient for
            (#$superEventType PART-TYPE WHOLE-TYPE).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#partTypes"/>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes-TypeType"/>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subEvents">
        <rdfs:label xml:lang="en">#$subEvents</rdfs:label>
        <rdfs:comment>The most general instance of #$SubEventPredicate,
            this predicate relates a given event to the events that are
            its parts.   (#$subEvents WHOLE PART) means that PART is a
            part, or subevent, of WHOLE. Events can be decomposed into
            subevents events temporally, spatially, and  in other ways;
            see the specializations of #$subEvents for more on this.
            For decomposing an event in a purely temporal way, see #$subProcesses.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subSituations"/>
        <rdfs:subPropertyOf rdf:resource="#eventOverlaps"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subEventsEntryFormatInArgs">
        <rdfs:label xml:lang="en">sub events entry format in args</rdfs:label>
        <rdfs:comment>An instance of #$SpecificEntryFormatPredicate
            (q.v.) that is used only with argument-places that are
            constrained to instances   (see #$argIsa) of #$Event (q.v.)
            or some specialization thereof.
            (#$subEventsEntryFormatInArgs PRED N) means that, for any
            particular way of fixing the other arguments to PRED besides
            the Nth, for any two events such that if either one is taken
            as the Nth argument PRED holds of those arguments, one of
            those events must be a subevent (see #$subEvents) of the
            other.  That is, if the sequences &lt;... ARGN ...&gt; and
            &lt;... ARGN-PRIME ...&gt; differ at most in their Nth items
            and both (PRED ... ARGN ...) and (PRED ... ARGN-PRIME ...)
            hold, then either (#$subEvents ARGN ARGN-PRIME) or
            (#$subEvents ARGN-PRIME ARGN) must hold.  For example,
            #$subEventsEntryFormatInArgs holds of #$finalSportsEvent
            with respect to its first argument-place.  Given that
            (#$relationAllExists #$finalSportsEvent #$TennisTournament
            #$TennisMatch), (#$relationAllExists #$finalSportsEvent
            #$TennisTournament #$TennisSet), and a couple of other
            simple facts about tennis, this allows us to infer that the
            final set of a given tennis tournament is a subevent of its
            final match.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subGoals">
        <rdfs:label xml:lang="en">sub goals</rdfs:label>
        <rdfs:comment>(#$subGoals G SUB) means that SUB is a subordinate
            goal of G.  In other words, SUB is an intermediate objective
            or milestone to be accomplished in the course of pursuing
            the overall #$Goal G.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subGroups">
        <rdfs:label xml:lang="en">subgroup (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates a group to its subgroups.
            (#$subGroups GROUP SUBGROUP) means that (1) all
            #$groupMembers of SUBGROUP are members of GROUP (2) if
            SUBGROUP is different from GROUP, then the members of
            SUBGROUP constitute a #$Group in their own right that is
            some sort of specialization within GROUP, and (3) if a new
            member were to join SUBGROUP, by doing so it would also
            become a member of GROUP.  Examples: the stars in
            #$BigDipper-Asterism constitute one of the #$subGroups of
            #$MilkyWay-Galaxy; the Democrats in the House of
            Representatives in a given year constitute a subgroup of the
            group of #$USRepresentatives for that year.  CounterExample:
            the groupe of Democrats in the House of Representatives and
            the group of people currently located in the territory of
            the #$DistrictOfColumbia -- even if every member of the
            first group is a member of the second, and it isn&apos;t
            totally happenstance, a member of SUBGROUP could cease
            membership in GROUP without ceasing membership in SUBGROUP.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#Group"/>
        <rdfs:range rdf:resource="#Group"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subInfoStructures">
        <rdfs:label xml:lang="en">sub info structures</rdfs:label>
        <rdfs:comment>This predicate that relates abstract information
            structures to one another.  (#$subInfoStructures AIS SUBAIS)
            means that whatever instantiates AIS also instantiates
            SUBAIS (see #$instantiationOfAIS). For example, whatever
            instantiates the #$TextString  The cat is on the mat  also
            instantiates the #$TextString  on the mat , so the former
            bears the relation #$subInfoStructures to the latter. If the
            AIS DIAGRAM is a wiring diagram, and SUBDIAGRAM is a smaller
            wiring diagram that is a part of DIAGRAM, then it would be
            true that (#$subInfoStructures DIAGRAM SUBDIAGRAM). NOte
            that the relation #$subInfoStructures does not always mirror
            one of spatial containment -- whatever instantiates a
            capital letter A also instantiates an uncased letter A, so
            (#$subInfoStructures #$LatinCapitalLetterA #$A-TheLetter) is
            true, even though we do not think of an uncased A as part of
            an upper case A, in any remotely spatial sense of  part .</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#AbstractInformationStructure"/>
        <rdfs:range rdf:resource="#AbstractInformationStructure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subInformation">
        <rdfs:label xml:lang="en">sub information</rdfs:label>
        <rdfs:comment>(#$subInformation INFO SUBINFO) means that the
            #$AbstractInformationalThing SUBINFO is somehow  contained
            within  the #$AbstractInformationalThing INFO.  The
            containment may be direct, as in the case where INFO is a
            concatenation of instances of #$AbstractInformationalThing,
            one of which is SUBINFO; or the containment may be indirect,
            as in the case where SUBINFO can be inferred from INFO. See
            also #$partOfIBT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#AbstractInformationalThing"/>
        <rdfs:range rdf:resource="#AbstractInformationalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subLists">
        <rdfs:label xml:lang="en">sub lists</rdfs:label>
        <rdfs:comment>(#$subLists LIST SUB) means that SUB is a sublist
            of LIST.  Formally, SUB is a sublist of LIST if and only if
            for some #$Lists X and Y, (#$JoinListsFn X SUB Y) = LIST.
            Note that by this definition (and that of #$JoinListsFn)
            every list is a sublist of itself and #$TheEmptyList is a
            sublist of every #$List.  As examples, the following are all
            sublists of (#$TheList A B C D A B): #$TheEmptyList,
            (#$TheList A), (#$TheList A B), (#$TheList A B C),
            (#$TheList B C), (#$TheList B C D A), and LIST itself. Note
            also that the sublist (#$TheList A B) of LIST above  occurs
            in LIST as a segment more than once: as an initial segment
            and also as a final segment.  See #$PositionsInListFn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subOrganizations">
        <rdfs:label xml:lang="en">sub organizations</rdfs:label>
        <rdfs:comment>The predicate #$subOrganizations relates a
            particular organization to one of its sub-organizations --
            i.e., a smaller organization which is part of or subsumed by
            the larger one. (#$subOrganizations ORG SUBORG) holds both
            when SUBORG is only one organizational level down from ORG,
            e.g., (#$subOrganizations #$NationalLeague-Baseball
            #$NationalLeagueEast-Baseball), and when it is several
            levels down the hierarchy, e.g., (#$subOrganizations
            #$NationalLeague-Baseball #$NewYorkMets).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subGroups"/>
        <rdfs:subPropertyOf rdf:resource="#compositeParts"/>
        <rdfs:subPropertyOf rdf:resource="#affiliatedWith"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subPathSystems">
        <rdfs:label xml:lang="en">sub path system</rdfs:label>
        <rdfs:comment>(#$subPathSystems SYS SUBSYS) means that the path
            system SUBSYS is a subsystem of the path system SYS.
            Technically, this means the following: (i) Every point in
            SUBSYS is a point in SYS, (ii) every node in SUBSYS is a
            node in SYS, (iii) every link in SUBSYS is a link in SYS,
            and (iv) every loop in SUBSYS is a loop in SYS.  Some
            consequences of these conditions are as follows.  (a) Every
            point in SUBSYS that is a node in SYS is a node in SUBSYS.
            (b) For any nodes X and Y in SUBSYS and each link LINK in
            SUBSYS, LINK is between X and Y in SYS iff it is between X
            and Y in SUBSYS.  (c) For each point X in SYS that is not a
            node in SYS, if X is on a link in SYS that is not in SUBSYS,
            X is not in SUBSYS.  (d) Isolated points and deadends in
            SUBSYS must be nodes in SYS.  (e) For each loop LOOP in
            SUBSYS, the only node in SYS on LOOP must be a node in
            SUBSYS.  (f) If SYS is a #$SimpleGraph-GraphTheoretic (or a
            #$Multigraph), all subsystems of SYS are
            #$SimpleGraph-GraphTheoretics (or #$Multigraphs).
            Predicates concerning particular kinds of subsystems of path
            systems, i.e., predicates that take #$subPathSystems as
            #$genlPreds, include #$linkClosedSubSystems,
            #$pointClosedSubSystems, and #$maximalConnectedSubSystems,
            etc.  Predicates whose #$genlInverse are #$subPathSystems
            includes #$underlyingGraph.</rdfs:comment>
        <rdfs:domain rdf:resource="#PathSystem"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subPaths">
        <rdfs:label xml:lang="en">sub paths</rdfs:label>
        <rdfs:comment>(#$subPaths PATH SUBPATH) means that any point
            (see #$pointOnPath) on the #$Path-Simple SUBPATH must also
            be on the #$Path-Simple PATH.</rdfs:comment>
        <rdfs:domain rdf:resource="#Path-Simple"/>
        <rdfs:range rdf:resource="#Path-Simple"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subProcesses">
        <rdfs:label xml:lang="en">sub processes</rdfs:label>
        <rdfs:comment> The common specialization of both #$timeSlices
            and #$subEvents. (#$subProcesses PROCESS SUBPROCESS) means
            SUBPROCESS is one of the #$timeSlices of PROCESS, where
            PROCESS and SUBPROCESS are #$Events.  SUBPROCESS consists of
            everything that is going on in PROCESS, during the
            #$TimeInterval that SUBPROCESS occupies.  However,
            #$timeSlices is more general because it applies to any
            #$TemporalThing, not just any #$Event.  The #$subProcesses
            of an #$Event are also #$subEvents of it.  However,
            #$subEvents is more general because it can also be used to
            decompose an event spatially as well as, or instead of,
            decomposing it temporally.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#timeSlices"/>
        <rdfs:subPropertyOf rdf:resource="#subEvents"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#Event"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subRegions">
        <rdfs:label xml:lang="en">sub regions</rdfs:label>
        <rdfs:comment>(#$subRegions SUPER SUB) means that SUPER and SUB
            are both (effectively) two-dimensional regions (see
            #$Surface-Generic) and that SUB lies wholly within SUPER
            (see #$inRegion). SUPER might or might not completely
            surround SUB.  To relate two instances of
            #$GeopoliticalEntity in this same way, use the predicate
            #$geopoliticalSubdivision (if it applies).  For other
            instances of #$GeographicalRegion, use #$geographicalSubRegions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#Surface-Generic"/>
        <rdfs:range rdf:resource="#Surface-Generic"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subSeries">
        <rdfs:label xml:lang="en">sub series</rdfs:label>
        <rdfs:comment>(#$subSeries SERIES SUBSERIES) means that
            SUBSERIES is a sub-series of SERIES.  This means that all
            the members of SUBSERIES are series-members (see the
            predicate #$seriesMembers) of SERIES, that SERIES and
            SUBSERIES share the same ordering principle, and that, if
            the first member of SUBSERIES is the Mth member of SERIES,
            the Nth member of SUBSERIES is the (N + M - 1)th member of SERIES.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#Series"/>
        <rdfs:range rdf:resource="#Series"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subSituations">
        <rdfs:label xml:lang="en">sub situations</rdfs:label>
        <rdfs:comment>This predicate relates situations to further
            situations which are their parts.  (#$subSituations SIT
            SUBSIT) means that the #$Situation-Temporal SUBSIT is a part
            of the #$Situation-Temporal SIT such that a complete
            description of SIT would have to involve a description of
            SUBSIT.  For example, a situation in which a car engine is
            non-functioning might have as a sub-situation the situation
            of a carburetor being misconfigured.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#intangibleParts"/>
        <rdfs:domain rdf:resource="#Situation-Temporal"/>
        <rdfs:range rdf:resource="#Situation-Temporal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subTraversals">
        <rdfs:label xml:lang="en">sub traversals</rdfs:label>
        <rdfs:comment>(#$subTraversals TRAV SUBTRAV) means that every
            point on the #$Traversal SUBTRAV (see the predicate
            #$pointOnTraversal) is also on the #$Traversal TRAV.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="#Traversal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subWork">
        <rdfs:label xml:lang="en">sub work</rdfs:label>
        <rdfs:comment>(#$subWork WORK SUBWORK) means that SUBWORK is a
            conceptual work that is somehow included in the  larger
            conceptual work, WORK.  Examples include a movement as a
            #$subWork of a symphony, a #$PeriodicalIssue as a #$subWork
            of a #$PeriodicalSeries, a #$Chapter-PCW as a #$subWork of a
            #$Novel-CW (see the more specialized predicate #$chapters),
            or an #$OperatingSystemKernel as a #$subWork of an
            #$OperatingSystem (see the more specialized predicate #$containsPrograms).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subInformation"/>
        <rdfs:domain rdf:resource="#ConceptualWork"/>
        <rdfs:range rdf:resource="#ConceptualWork"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subcatFrameArity">
        <rdfs:label xml:lang="en">subcat frame arity</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SubcategorizationFrame"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subcatFrameExample">
        <rdfs:label xml:lang="en">subcat frame example</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SubcategorizationFrame"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subcatFrameKeywords">
        <rdfs:label xml:lang="en">subcat frame keywords</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#SubcategorizationFrame"/>
        <rdfs:range rdf:resource="#SubLKeyword"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subcatFrameOfConstituent">
        <rdfs:label xml:lang="en">subcat frame of constituent</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$subcatFrameOfConstituent CONST FRAME) relates the
            #$SententialConstituent CONST to its unique
            #$SubcategorizationFrame FRAME.</rdfs:comment>
        <rdfs:domain rdf:resource="#SententialConstituent"/>
        <rdfs:range rdf:resource="#SubcategorizationFrame"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subjectOfEvaluation">
        <rdfs:label xml:lang="en">subject of evaluation</rdfs:label>
        <rdfs:comment>(#$subjectOfEvaluation EVAL OBJ) means that in the
            instance of #$Evaluating, EVAL, information about OBJ is
            derived.  The performer (#$performedBy) of the evaluation
            must be #$awareOf OBJ.  If the information input to EVAL is
            OBJ (see #$evaluationInput), use the more specific
            predicate, #$evaluee-Direct.  For example, if a sailor
            examines tonight&apos;s sky to determine tomorrow&apos;s
            weather, tomorrow&apos;s weather is the
            #$subjectOfEvaluation and tonight&apos;s sky is the #$evaluationInput.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#objectOfMentalSituation"/>
        <rdfs:domain rdf:resource="#Evaluating"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subjectRoles">
        <rdfs:label xml:lang="en">subject roles</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#rolesForEventType"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
        <rdfs:range rdf:resource="#BinaryRolePredicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subjectToCOC">
        <rdfs:label xml:lang="en">subject to c o c</rdfs:label>
        <rdfs:comment>This predicate is used to state that a given agent
            is subject to a given code of conduct, that is, that agent
            is obliged to abide by that code of conduct.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#SocialBeing"/>
        <rdfs:range rdf:resource="#CodeOfConduct"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subordinateOrganizations">
        <rdfs:label xml:lang="en">subordinate organizations</rdfs:label>
        <rdfs:comment>(#$subordinateOrganizations ORG SUBORG) means that
            (#$subOrganizations ORG SUBORG) and that SUBORG is
            ultimately subject to the control or authority of ORG (or
            its leadership).  This relationship is consistent with
            SUBORG having some degree of autonomy, and with the
            existence of conflicts between SUBORG and ORG&apos;s
            leadership.  It is not consistent with SUBORG being a
            #$controllingSuborganizations (cf.) of ORG.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subOrganizations"/>
        <rdfs:subPropertyOf rdf:resource="#hasAgents"/>
        <rdfs:domain rdf:resource="#Organization"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="subsetOf">
        <rdfs:label xml:lang="en">#$subsetOf</rdfs:label>
        <rdfs:comment>This predicate relates a set or collection SUB to
            a set or collection SUPER whenever the extent (see #$extent)
            of SUB is a   subset of the extent of SUPER.  That is,
            (#$subsetOf SUB SUPER) means that   every element of (see
            #$elementOf) SUB is an element of SUPER.  #$subsetOf is thus
            a generalization both of the subset relation in set theory
            and of #$genls (q.v.); and (unlike either of those other
            relations) #$subsetOf can hold between a set and a
            collection, or between a collection and a set.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#most-GenQuant"/>
        <rdfs:subPropertyOf rdf:resource="#generalizations"/>
        <rdfs:domain rdf:resource="#SetOrCollection"/>
        <rdfs:range rdf:resource="#SetOrCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="substring">
        <rdfs:label xml:lang="en">substring</rdfs:label>
        <rdfs:comment>A binary predicate that relates an instance of
            #$SubLString to another intance of #$SubLString.
            (#$substring SUBSTRING STRING) means that SUBSTRING is a
            substring of STRING.</rdfs:comment>
        <rdfs:domain rdf:resource="#SubLString"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="substring-CaseInsensitive">
        <rdfs:label xml:lang="en">substring - case insensitive</rdfs:label>
        <rdfs:comment>(#$substring-CaseInsensitive SUBSTRING STRING)
            means that the #$SubLString SUBSTRING is a substring of the
            #$SubLString STRING with case ignored in both SUBSTRING and
            STRING.  For case-sensitive tagging use the more specialized
            predicate, #$substring.</rdfs:comment>
        <rdfs:domain rdf:resource="#SubLString"/>
        <rdfs:range rdf:resource="#SubLString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="successfulForAgents">
        <rdfs:label xml:lang="en">successful for agents</rdfs:label>
        <rdfs:comment>The predicate #$successfulForAgents is used to
            indicate that a particular agent achieves its goal in a
            particular action.  (#$successfulForAgents ENDEAVOR AGT)
            means that the #$Agent AGT is successful in accomplishing
            the #$PurposefulAction ENDEAVOR.  This means that each of
            the purposes AGT had in doing ENDEAVOR has come true.  See
            also #$purposeInEvent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#performedBy"/>
        <rdfs:domain rdf:resource="#Action"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="successor">
        <rdfs:label xml:lang="en">successor</rdfs:label>
        <rdfs:comment>A binary functional predicate that corresponds to
            the function #$SuccessorFn (q.v.). (#$successor N M) means
            that #$Integer M is #$Integer N&apos;s successor.  In other
            words, (#$successor N M) means that M is the least integer
            greater than N.  Thus, (#$successor 42 43) holds, as does
            (#$successor -42 -41). </rdfs:comment>
        <rdfs:domain rdf:resource="#Integer"/>
        <rdfs:range rdf:resource="#Integer"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="sufficientFor-Props">
        <rdfs:label xml:lang="en">sufficient for - props</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$ELSentence-Assertible to instances of
            #$ELSentence-Assertible.  #$sufficientFor-Props is used to
            state that one formula expresses a sufficient condition for
            the truth of another. (#$sufficientFor-Props COND PROP)
            means that COND&apos;s being satisfied is sufficient for
            PROP&apos;s being satisfied. See also #$preconditionFor-Props.</rdfs:comment>
        <rdfs:domain rdf:resource="#ELSentence-Assertible"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="suffixString">
        <rdfs:label xml:lang="en">suffix string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#affixString"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="superEventType">
        <rdfs:label xml:lang="en">super event type</rdfs:label>
        <rdfs:comment>(#$superEventType PART-TYPE WHOLE-TYPE) means that
            for every instance X of PART-TYPE, there is an instance Y of
            WHOLE-TYPE such that (#$subEvents Y X).  Example:
            (#$superEventType #$Sentencing-Legal #$Trial-Criminal). See
            also the comments on #$subEvents, #$subEventTypes.  Note
            that (#$superEventType PART-TYPE WHOLE-TYPE) is not
            sufficient for (#$subEventTypes WHOLE-TYPE PART-TYPE).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#includedInIntervalType"/>
        <rdfs:domain rdf:resource="#TemporalObjectType"/>
        <rdfs:range rdf:resource="#TemporalObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="superTaxons">
        <rdfs:label xml:lang="en">super taxons</rdfs:label>
        <rdfs:comment>A specialization of #$genls used to relate
            instances of #$BiologicalTaxon.  (#$superTaxons TAXON
            SUPERTAXON) means that SUPERTAXON is above the more specific
            TAXON in the biological taxon hierarchy; i.e. the later
            taxon is more general and inclusive than the former.  Every
            instance of TAXON must therefore also be an instance of
            SUPERTAXON.  For example, (#$superTaxons #$DomesticCat
            #$FelisGenus) holds.  See also #$taxonMembers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genls"/>
        <rdfs:domain rdf:resource="#BiologicalTaxon"/>
        <rdfs:range rdf:resource="#BiologicalTaxon"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="superiors">
        <rdfs:label xml:lang="en">superiors</rdfs:label>
        <rdfs:comment>&apos;(#$superiors SUPERIOR SUBORDINATE)&apos;
            means that SUPERIOR has some type of socially superior
            position over SUBORDINATE which gives SUPERIOR power over
            SUBORDINATE.  As a result, SUPERIOR may be able to command
            and punish SUBORDINATE, and may be held responsible for
            SUBORDINATE&apos;s actions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ableToControl"/>
        <rdfs:subPropertyOf rdf:resource="#influencesAgent"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="superlativeAdverb">
        <rdfs:label xml:lang="en">superlative adverb</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its superlative
            adverbial form.  Example: &apos;best&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adverbStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="superlativeDegree">
        <rdfs:label xml:lang="en">superlative degree</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its superlative
            adjectival form. This is often formed by suffixing
            &apos;est&apos; to the regular form. Example: &apos;strongest&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#adjStrings"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="suppliers">
        <rdfs:label xml:lang="en">provider (pred)</rdfs:label>
        <rdfs:comment>The predicate relates two generic agents.
            (#$suppliers SUPPLIER SUPPLIEE) means that SUPPLIER supplies
            some goods or services to SUPPLIEE, usually on an ongoing
            basis. When payment is returned for the supplying, consider
            using the inverse specialization #$customers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#doesBusinessWith"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="supportedBy">
        <rdfs:label xml:lang="en">supported by</rdfs:label>
        <rdfs:comment>(#$supportedBy OBJECT SUPPORT) means that
            SUPPORT is at least partially responsible for holding OBJECT
            up and maintaining its vertical position.  If SUPPORT were
            to be removed, then (everything else being equal) either
            OBJECT would fall or at least part of  OBJECT would move
            downward.  See also #$supportedObject, #$supportingObject,
            and #$SupportingSomething.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#supportedBy-Contributing"/>
        <rdfs:subPropertyOf rdf:resource="#securedBy"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="supportedBy-Contributing">
        <rdfs:label xml:lang="en">supported by - contributing</rdfs:label>
        <rdfs:comment>A generalization of #$supportedBy.
            (#$supportedBy-Contributing OBJECT SUPPORT) means that
            SUPPORT contributes  to the total amount of support holding
            OBJECT up and maintaining its vertical position.  If SUPPORT
            were to be removed, then (everything else being equal)
            OBJECT would have less support against falling down than
            before. (OBJECT might even actually fall, but not
            necessarily.)  For example, a bridge is
            #$supportedBy-Contributing each individual pile underneath
            it, though it is unlikely to be crucially #$supportedBy any
            one of them.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#securedBy-Contributing"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="surfaceParts">
        <rdfs:label xml:lang="en">surface parts</rdfs:label>
        <rdfs:comment>(#$surfaceParts BIG LITTLE) means that LITTLE is
            an external physical part (see #$externalParts) of a surface
            of BIG, or that LITTLE is a physical part of BIG itself and
            a surface of LITTLE is part of a surface of BIG.  LITTLE is
            also something which &apos;does not go all the way
            through&apos; BIG.   In other words, there is no line
            segment spatially subsumed by LITTLE that goes from a point
            at the surface of one side of BIG to a point of the surface
            on the opposite side of BIG. Positive exemplars: the skin of
            an orange is a #$surfaceParts of the orange, a window of a
            house is a #$surfaceParts of that house.  Borderline
            positive exemplars: the inside surface of a coffee cup is
            one of the #$surfaceParts of the cup; the inside surface of
            a beer-can in some contexts is a #$surfaceParts of the can.
            Negative exemplars:  the brain is not a #$surfaceParts of a
            person.  A person&apos;s head is also a negative exemplar of
            a #$surfaceParts.  There is a line that can go, for example,
            from the front side to the back side of that person.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicallyContains"/>
        <rdfs:subPropertyOf rdf:resource="#externalParts"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="surrounds-2D">
        <rdfs:label xml:lang="en">will surround</rdfs:label>
        <rdfs:comment>This predicate describes situations in which one
            object surrounds another in (at least) two dimensions.  More
            formally, if (#$surrounds-2D SURROUNDER SURROUNDED), then
            there is an abstract plane that cross-sections SURROUNDER
            and SURROUNDED.  In this plane, the cross-section of
            SURROUNDER encircles the cross-section of SURROUNDED.  Thus,
            any ray drawn from SURROUNDED in that plane
            #$spatiallyIntersects SURROUNDER.  This is a generalization
            of #$surroundsHorizontally (q.v.), the special case in which
            the planar cross-section is defined by gravity.  Another
            specialization is #$surrounds-3D, where SURROUNDER
            &apos;covers&apos; SURROUNDED as well (e.g. a baseball cap
            on someone&apos;s head).  See also #$surroundsCompletely.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyDisjoint"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="surrounds-3D">
        <rdfs:label xml:lang="en">surrounds - 3 d</rdfs:label>
        <rdfs:comment>This predicate is used to assert that an object
            (or group of objects) that surrounds another object (or
            group of objects) in three-dimensional space.
            (#$surrounds-3D SURROUNDER SURROUNDED) means that
            #$SpatialThing SURROUNDED is within (see
            #$spatiallySubsumes) the space defined by the convex hull
            (see #$ConvexHullSpaceFn) of #$SpatialThing SURROUNDER.  The
            space occupied by SURROUNDED is not a part of the space
            occupied by SURROUNDER.  If this predicate is too strong,
            see also  #$surrounds-Ringlike and #$surrounds-2D.  If
            SURROUNDER is functioning as a container with respect to
            SURROUNDED, then #$in-ContGeneric is true as well as
            #$surrounds-3D. If any ray with an origin within SURROUNDED
            passes through (see #$spatiallyIntersects) SURROUNDER, then
            #$surroundsCompletely is the more precise predicate to use.
            If SURROUNDER is a #$Group of objects then #$in-Among is
            more precise. If SURROUNDER is a fluid
            (#$FluidTangibleThing) in the granularity of the current
            context, then #$in-ImmersedFully is almost always the more
            correct and precise relation (unless the fluid has a
            concavity, e.g. when a meteor has impacted a body of water
            and the meteor is partially submerged in the water yet
            within its convex hull in such a case #$in-ImmersedPartly
            would be the appropriate relation.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyContains"/>
        <rdfs:subPropertyOf rdf:resource="#surrounds-2D"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="surroundsCompletely">
        <rdfs:label xml:lang="en">will surround</rdfs:label>
        <rdfs:comment>(#$surroundsCompletely OUTSIDE INSIDE) means that
            OUTSIDE completely surrounds INSIDE. In other words, all
            rays with  origins at INSIDE pass through OUTSIDE by default
            (with some exceptions). OUTSIDE is not a part of INSIDE (or
            vice versa).  Holes in OUTSIDE are permitted. Examples: a
            candy bar inside its wrapper; the body of a pregnant
            mammalian female  containing a foetus; a fish in water.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#surroundsHorizontally"/>
        <rdfs:subPropertyOf rdf:resource="#surrounds-3D"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="surroundsHorizontally">
        <rdfs:label xml:lang="en">surrounds horizontally</rdfs:label>
        <rdfs:comment>(#$surroundsHorizontally OUTSIDE INSIDE) means
            that OUTSIDE surrounds a horizontal cross-section of INSIDE.
            That is, there is some horizontal cross-section of INSIDE
            such that all rays drawn horizontally from points in that
            cross-section pass through OUTSIDE, and along each of those
            rays there are points which are in OUTSIDE but not in
            INSIDE.  Note that (#$surroundsHorizontally OUTSIDE INSIDE)
            is _not_ true if INSIDE shares a boundary with OUTSIDE; for
            example, Texas is not surrounded by the USA.  Positive
            cases: water surrounds islands, and foothills may surround a
            mountain range.  See also #$surroundsCompletely.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#surrounds-2D"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="suspendedIn">
        <rdfs:label xml:lang="en">suspended in</rdfs:label>
        <rdfs:comment>(#$suspendedIn OBJ FLUID) means that OBJ is fully
            immersed in FLUID (see #$in-ImmersedFully), and FLUID
            provides (via fluid dynamics) a significant supporting or
            upward force on OBJ so that OBJ does not undergo rapid falling.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#in-ImmersedFully"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#FluidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="suspendedPart">
        <rdfs:label xml:lang="en">suspended part</rdfs:label>
        <rdfs:comment>The predicate #$suspendedPart indicates an
            instance of #$Particle which is suspended in a particular
            instance of #$Suspension.  Thus, (#$suspendedPart SUS PART)
            means that PART is a #$Particle suspended in the
            #$suspendingFluid of the #$Suspension SUS.  Examples: in an
            instance of #$CloudOfH2O, the (typical) #$suspendedPart is a
            #$Particle of water; in muddy water, the (typical)
            #$suspendedPart is a #$Particle of soil.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#constituents"/>
        <rdfs:domain rdf:resource="#Suspension"/>
        <rdfs:range rdf:resource="#Particle"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="suspendingFluid">
        <rdfs:label xml:lang="en">suspending fluid</rdfs:label>
        <rdfs:comment>The predicate #$suspendingFluid indicates the
            particular fluid in which particles are suspended in a
            particular instance of #$Suspension.  Thus,
            (#$suspendingFluid SUS FLU) means that FLU is among the
            #$constituents of the #$Suspension SUS, FLU is a fluid
            (i.e., liquid OR gas), and FLU is the fluid constituent
            which suspends the particles in SUS.  For example, in an
            instance of #$CloudlikeObject, the #$suspendingFluid is the
            portion of #$Air that is surrounding and supporting the
            droplets of water vapour in the cloud.  In muddy water, the
            #$suspendingFluid is that instance of #$Water which is
            supporting the particles of soil.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#mainConstituent"/>
        <rdfs:domain rdf:resource="#Suspension"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="symbolizes">
        <rdfs:label xml:lang="en">symbolizes</rdfs:label>
        <rdfs:comment>(#$symbolizes SYMBOL OBJ) means that the
            #$SymbolicObject SYMBOL represents the #$Thing OBJ to some
            interpreting agent.  For example, (#$symbolizes (#$AnthemFn
            #$Canada) #$Canada) holds, since the Canadian national
            anthem represents Canada to many interpreters (for example,
            most Canadian citizens). Note that a given instance of
            #$SymbolicObject may represent different things to agents in
            different cultures, so that assertions involving
            #$symbolizes can be highly context-dependent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:subPropertyOf rdf:resource="#signifies"/>
        <rdfs:domain rdf:resource="#SymbolicThing"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="symmetricPartTypes">
        <rdfs:label xml:lang="en">symmetric part types</rdfs:label>
        <rdfs:comment>(#$symmetricPartTypes BIG SMALL) means that every
            instance of BIG has exactly two, symmetrically positioned,
            instance of SMALL as parts.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalPartTypes"/>
        <rdfs:domain rdf:resource="#ExistingObjectType"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="target">
        <rdfs:label xml:lang="en">target (CycL predicate)</rdfs:label>
        <rdfs:comment>This predicate relates any sort of  transfer
            event to the  place  where the thing being transferred is
            intended, by the agent who performs or directs the transfer,
            to end up.  More precisely, (#$target TRANSFER TARGET) means
            that an agent playing either the  #$performedBy or
            #$directingAgent role in the #$GeneralizedTransfer TRANSFER
            intends that some tangible thing playing the
            #$transferredThing role in TRANSFER be at TARGET upon the
            completion of TRANSFER.  Obviously, this does not entail
            that the transferred thing actually end up at TARGET.  For
            example, if I throw a dart the target is likely to be a
            dartboard (or, if I&apos;m really good, the bullseye), and
            when I drive my car immediately after work the target is
            likely to be my house.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="tastes">
        <rdfs:label xml:lang="en">taste (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$tastes AGENT THING) means that AGENT perceives
            the  (partially) tangible object or physical event THING via
            the sense of taste. Perceptual agents can taste certain
            objects (such as lollipops) as well as, arguably, certain
            events (such as the  finish  of a wine).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#perceives"/>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-NotAsPart"/>
        <rdfs:domain rdf:resource="#PerceptualAgent"/>
        <rdfs:range rdf:resource="#SpatialThing-Localized"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="taxIDNumber">
        <rdfs:label xml:lang="en">tax i d number</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate that relates instances of
            #$Person to instances of #$IDString. (#$taxIDNumber PER NUM)
            means that PER&apos;s uniquely identifying number for tax
            purposes is NUM.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#identificationStrings"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#IDString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temperatureOfObject">
        <rdfs:label xml:lang="en">temperature of object</rdfs:label>
        <rdfs:comment>A #$PhysicalAttributeDescriptionSlot.
            (#$temperatureOfObject OBJECT TEMPERATURE) means that the
            #$PartiallyTangible individual OBJECT has the #$Temperature
            TEMPERATURE. Note that OBJECT need not be a discrete entity
            -- for example, it might be a particular spot in the ocean.
            A notable specialization of this predicate is
            #$bodyTemperature. See also #$ambientTemperature, #$UnitOfTemperature.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasAttributes"/>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Temperature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporalBoundsContain">
        <rdfs:label xml:lang="en">temporal bounds contain</rdfs:label>
        <rdfs:comment>(#$temporalBoundsContain LONGER SHORTER) means
            that the temporal boundaries of LONGER strictly contain
            those of SHORTER.  In other words, LONGER starts before
            SHORTER and ends after it -- the #$startingPoint of LONGER
            is some positive, non-zero amount of time earlier than the
            #$startingPoint of SHORTER, and the #$endingPoint of LONGER
            is some positive, non-zero amount of time later than the
            #$endingPoint of SHORTER. If LONGER is
            #$temporallyContinuous, then (#$temporalBoundsContain LONGER
            SHORTER) further implies (#$temporallySubsumes LONGER
            SHORTER). Note: This Cyc temporal relation is equivalent to
            what James Allen independently dubbed the CONTAINS relation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsSubsume"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporalBoundsIdentical">
        <rdfs:label xml:lang="en">temporal bounds identical</rdfs:label>
        <rdfs:comment>(#$temporalBoundsIdentical X Y) means that X and Y
            are both #$temporallyCooriginating and
            #$temporallyCoterminal.  That is, X and Y have the same
            #$startingPoint and the same #$endingPoint.  Note that if X
            and Y are both #$temporallyContinuous objects, such as a
            pair of ashtrays, then  it follows that they are completely #$cotemporal.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsSubsume"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporalBoundsIntersect">
        <rdfs:label xml:lang="en">neither temporally preceding nor following</rdfs:label>
        <rdfs:comment>(#$temporalBoundsIntersect TEMP1 TEMP2) means that
            the continuous time interval between the start and end of
            TEMP1 (inclusive) temporally intersects the continuous time
            interval between the start and end of TEMP2 (inclusive).
            Clearly, if TEMP1 and TEMP2 are themselves temporally
            continuous, then the above entails the stronger statement
            (#$temporallyIntersects TEMP1 TEMP2).  However, if either
            TEMP1 or TEMP2 is temporally discontinuous, it is possible
            for their bounds to intersect without their having any time
            point in common.  For example, the bounds of the
            discontinuous event of  Fred sleeping this week  might
            intersect the bounds of  Fred eating this week , even though
            the two events share no time points.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporalBoundsSubsume">
        <rdfs:label xml:lang="en">temporal bounds subsume</rdfs:label>
        <rdfs:comment>(#$temporalBoundsSubsume LONGER SHORTER) means
            that LONGER contains SHORTER.  SHORTER starts no sooner than
            the start of LONGER and ends no later than the end of
            LONGER.  Thus they can have one or two of the same
            endpoints.   That is, the #$startingPoint of LONGER is a
            finite amount of time earlier than the #$startingPoint of
            SHORTER, and the #$endingPoint of LONGER is a finite amount
            of time later than the #$endingPoint of SHORTER.
            Naturally, #$temporalBoundsContain is a stronger relation
            than #$temporalBoundsIntersect.  If LONGER is
            #$temporallyContinuous, then (#$temporalBoundsSubsume LONGER
            SHORTER) further implies (#$temporallySubsumes LONGER SHORTER).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyContains">
        <rdfs:label xml:lang="en">temporally contains</rdfs:label>
        <rdfs:comment>(#$temporallyContains LONG SHORT) means that SHORT
            #$startsDuring LONG, #$endsDuring LONG, and is temporally
            subsumed by LONG.   This is equivalent to James Allen&apos;s
            CONTAINS relation and the inverse of his DURING relation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsContain"/>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyCooriginating">
        <rdfs:label xml:lang="en">temporally cooriginating</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate (q.v.) that is a
            specialization of  #$temporallyIntersects.
            (#$temporallyCooriginating TEMP1 TEMP2) means  that the
            point of time at which TEMP1 starts to exist or occur (see
            #$startingPoint) is the same as the point of time at which
            TEMP2 starts  to exist or occur.  Equivalently,
            (#$simultaneousWith (#$StartFn TEMP1)  (#$StartFn TEMP2))
            holds.  (Note that #$simultaneousWith is a  specialization
            of #$equals.)  Sharing the same starting point as they  do,
            TEMP1 and TEMP2 thus intersect temporally.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyCoterminal">
        <rdfs:label xml:lang="en">temporally coterminal</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate that relates temporal
            things that terminate (i.e. cease to exist or end)  at the
            same time.  (#$temporallyCoterminal TEMP1 TEMP2) means that
            the time point at which TEMP1 ends (see #$endingPoint) is
            the same as that at which TEMP2 ends.  It thus entails that
            (#$simultaneousWith (#$EndFn TEMP1) (#$EndFn TEMP2)) holds.
            See also #$temporallyCooriginating.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyDisjoint">
        <rdfs:label xml:lang="en">temporally disjoint</rdfs:label>
        <rdfs:comment>(#$temporallyDisjoint OBJ1 OBJ2) means that OBJ1
            and OBJ2 do not temporally intersect, i.e., that there are
            no time points which are common to both.  If both OBJ1 and
            OBJ2 are #$temporallyContinuous, then it also follows that
            their temporal boundaries do not intersect  (cf.
            #$temporalBoundsIntersect).  Otherwise, their temporal
            boundaries may still overlap.  Consider the discontinuous
            events denoted by  Fred sleeping this week  and  Fred
            driving this week,  which are presumably
            #$temporallyDisjoint even though they are  interleaved
            during the same week.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyRelated"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyFinishedBy">
        <rdfs:label xml:lang="en">conclusion</rdfs:label>
        <rdfs:comment>(#$temporallyFinishedBy PERIOD FINISH) means that
            PERIOD (an instance of #$TemporalThing) and FINISH (another
            instance of #$TemporalThing) end simultaneously (see
            #$temporallyCoterminal), and that FINISH starts within the
            bounds of PERIOD.   That is, the #$endingPoint of PERIOD and
            FINISH are the same instance of #$TimePoint (q.v.), and the
            #$startingPoint of FINISH is later than the #$startingPoint
            of PERIOD.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyIntersects">
        <rdfs:label xml:lang="en">temporal intersection</rdfs:label>
        <rdfs:comment>This predicate relates temporal things  whose
            temporal extentions overlap, i.e. things that exist
            concurrently for at least part of their lifetimes.  More
            precisely: (#$temporallyIntersects OBJ1 OBJ2) means that
            there is some #$TimeInterval (possibly as small as a
            #$TimePoint) temporally subsumed by (see
            #$temporallySubsumes) both OBJ1 and OBJ2.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyIntrinsicArg">
        <rdfs:label xml:lang="en">temporally intrinsic arg</rdfs:label>
        <rdfs:comment>(#$temporallyIntrinsicArg PRED N) means that PRED
            expresses a property that is temporally intrinsic for its
            argument position N. That means, if a formula using PRED
            is true for some object OBJ (in the Nth argument position),
            we can assume the truth of every similar formula in which
            any temporal part of OBJ is substituted in for OBJ. For
            example, since (#$temporallyIntrinsicArg #$massOfObject 1)
            is true, if we know (#$massOfObject `Rock37&apos; (#$Gram
            37)), we can expect that any temporal part of `Rock37&apos;,
            such as        `Rock37Today&apos;, will also have a mass of
            37 grams. An example of a property which is not temporally
            intrinsic would be `average speed&apos;. The average speed
            of a car        on a drive from Austin to Dallas might be 50
            mph, but during particular sub-intervals of that drive the
            average speed could vary from 0 to 75 mph.  The collection
            #$CotemporalPredicate is a class of relations which
            are not temporally intrinsic but might at first seem to be,
            e.g., #$physicalParts. In (#$physicalParts `Joe&apos;
            `JoesHead&apos;), it is not the case        that every
            temporal part of `Joe&apos; (such as `JoeToday&apos;) has
            `JoesHead&apos; as a physical part.  Rather, `JoeToday&apos;
            would have `JoesHeadToday&apos; among its #$physicalParts.
            With #$physicalParts,        as with all other elements of
            #$CotemporalPredicate, every time-slice of the first
            argument is related to a cotemporal time-slice of the second
            argument, but that is not covered by
            #$temporallyIntrinsicArg and its associated axioms.</rdfs:comment>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#PositiveInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyOverlaps">
        <rdfs:label xml:lang="en">temporally overlaps</rdfs:label>
        <rdfs:comment>(#$temporallyOverlaps FIRST SECOND) means that
            SECOND #$startsAfterStartingOf FIRST, FIRST
            #$endsAfterStartingOf SECOND, and SECOND #$endsAfterEndingOf
            FIRST.  It does not require that all (or any!) #$TimePoints
            from the #$startingPoint of SECOND through the #$endingPoint
            of FIRST are in the temporal extent of both FIRST and
            SECOND.          Note: #$temporallyOverlaps is equivalent to
            what James Allen dubbed the OVERLAPS relation and is the
            inverse of what James Allen dubbed the OVERLAPPED-BY relation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyRelated">
        <rdfs:label xml:lang="en">temporally related</rdfs:label>
        <rdfs:comment>This is the most general temporal predicate.
            (#$temporallyRelated THING-1 THING-2) means that the
            #$TemporalThing THING-1 and the #$TemporalThing THING-2 are
            somehow temporally related, without specifying a more exact
            relationship.  THING-1 may be after, before, simultaneous
            with, temporally disjoint with, or temporally overlapping
            with THING-2.  Generally, (#$temporallyRelated THING-1
            THING-2) implies that some more substantial instance of
            #$TemporalPredicate (q.v.) holds between THING-1 and THING-2.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallyStartedBy">
        <rdfs:label xml:lang="en">temporally started by</rdfs:label>
        <rdfs:comment>A #$ComplexTemporalPredicate that is a
            specialization of both  #$temporallyCooriginating and
            #$endsAfterEndingOf (qq.v.).   (#$temporallyStartedBy
            TEMPTHING STARTER) means that TEMPTHING  and STARTER start
            to occur or exist at the same time point (see
            #$startingPoint) and that TEMPTHING ends or ceases to exist
            (see #$endingPoint) after STARTER ends or ceases to exist.
            For example, TEMPTHING might be a #$WeddingCeremony and
            STARTER might be the  bride&apos;s walk down the aisle.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <rdfs:subPropertyOf rdf:resource="#endsAfterEndingOf"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallySubsumedBy-InsType">
        <rdfs:label xml:lang="en">temporally subsumed by - ins type</rdfs:label>
        <rdfs:comment>(#$temporallySubsumedBy-InsType TEMPORAL-THING
            INTERVAL-TYPE) means that some instance of INTERVAL-TYPE
            #$temporallySubsumes (q.v.) TEMPORAL-THING.  For example,
            (#$temporallySubsumedBy-InsType FredsBirth #$Wednesday)
            means that Fred was born on a Wednesday.</rdfs:comment>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallySubsumes">
        <rdfs:label xml:lang="en">temporally subsumes</rdfs:label>
        <rdfs:comment>(#$temporallySubsumes LONG SHORT) means that all
            time points of SHORT are contained in LONG.   This implies
            that SHORT does not start before LONG, nor end after LONG.
            Moreover, if there is some time point or interval when LONG
            is not happening, then neither is SHORT.    Note that this
            relation is weaker than #$cotemporal, which can be thought
            of as requiring that LONG and SHORT #$temporallySubsumes
            each other.     Note also that this relation is a strictly
            temporal relationship between LONG and SHORT; it is weaker
            than the relation #$subEvents, which can be thought of as
            requiring that LONG not only #$temporallySubsumes SHORT but
            also contains SHORT as a `part&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:subPropertyOf rdf:resource="#temporalBoundsSubsume"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="temporallySubsumes-TypeType">
        <rdfs:label xml:lang="en">temporally subsumes - type type</rdfs:label>
        <rdfs:comment>(#$temporallySubsumes-TypeType SUBSUMING-TYPE
            SUBSUMED-TYPE) means that every instance of SUBSUMING-TYPE
            #$temporallySubsumes some instance of SUBSUMED-TYPE.  For
            example, it is true that (#$temporallySubsumes-TypeType
            #$CalendarQuarter #$CalendarMonth), which means that every
            calendar quarter subsumes at least one entire calendar month.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#intersectsIntervalType"/>
        <rdfs:domain rdf:resource="#FirstOrderCollection"/>
        <rdfs:range rdf:resource="#FirstOrderCollection"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="tensed">
        <rdfs:label xml:lang="en">tensed</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termDependsOn">
        <rdfs:label xml:lang="en">term depends on</rdfs:label>
        <rdfs:comment>(#$termDependsOn DEP-TERM INDEP-TERM) states that
            the reason for the existence of the term DEP-TERM in the Cyc
            knowledge base is completely dependent on the continued
            existence of the term INDEP-TERM.  Thus, if INDEP-TERM
            should ever be removed from the knowledge base, then
            DEP-TERM should also be immediately removed.  This
            relationship is automatically maintained between reified
            non-atomic terms (NATs) and the terms from which they are constructed.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#CycLReifiableDenotationalTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termFormulas">
        <rdfs:label xml:lang="en">term formulas</rdfs:label>
        <rdfs:comment>A predicate that relates CycL terms to CycL
            formulas in which they occur.  (#$termFormulas TERM FORMULA)
            means that TERM occurs in FORMULA.  More precisely, and
            assuming the  #$termFormulas sentence contains no free
            variables (and is thus a   ground atomic formula  or  GAF ):
            the CycL term TERM immediately  following the constant
            `#$termFormulas&apos; in the sentence occurs in  FORMULA.
            For example,  (#$termFormulas #$France (#$bordersOn #$France
            #$Germany)) holds.   Note that FORMULA need not be true or
            even semantically well-formed.   Note also that the first
            argument-place of the predicate expression
            `#$termFormulas&apos; is  quoted  (see #$quotedArgument),
            and so a term  occupying that place denotes _itself_
            (instead of its usual denotation,  if any).  See also #$assertedTermSentences.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLTerm"/>
        <rdfs:range rdf:resource="#CycLFormula"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termOfUnit">
        <rdfs:label xml:lang="en">term of unit</rdfs:label>
        <rdfs:comment>#$termOfUnit is an inference-related Cyc predicate
            which appears in system-generated assertions; #$termOfUnit
            maps unreified reifiable non-atomic terms ( NATs  -- see
            #$CycLUnreifiedReifiableNonAtomicTerm) to indexed data
            structures reified by the system.  Assertions with
            #$termOfUnit are added by the system when an unreified
            reifiable NAT first appears in a Cyc formula that is added
            to the knowledge base.  When such a NAT is first used in a
            formula, the Cyc system automatically creates an indexed
            data structure to reify the NAT.  A name is automatically
            assigned to the new data structure by the Cyc system.
            (Typically, it is a name which is identical to the unreified
            reifiable NAT, but one should not be misled by this identity
            into thinking that #$termOfUnit is a specialization of
            #$equals.) The predicate #$termOfUnit maps the
            system-generated data structure to the original NAT.
            (#$termOfUnit DATA-STRUCTURE NAT) means that the data
            structure DATA-STRUCTURE was created to reify the value of
            the non-atomic term NAT, and that NAT refers to
            DATA-STRUCTURE, which in turn denotes something in the range
            of the function in the 0th (or  arg 0 ) position of NAT.
            For example, if an assertion such as (#$isa (#$RepairingFn
            #$Automobile) #$ProductType) introduced the unreified
            reifiable NAT (#$RepairingFn #$Automobile) in the Cyc
            knowledge base, the system would create a data structure to
            reify the value of (#$RepairingFn #$Automobile).  The system
            would assign the name  (#$RepairingFn #$Automobile)  to the
            newly created data structure.  The system would also
            associate the newly reified data structure with the
            unreified refiable NAT by means of the #$termOfUnit
            assertion, (#$termOfUnit (#$RepairingFn #$Automobile)
            (#$RepairingFn #$Automobile)).    Note: #$termOfUnit
            assertions are entered in the #$BaseKB because the mapping
            between a NAT and the data structure reified for it holds
            universally.  One should view #$termOfUnit assertions as
            bits of bookkeeping knowledge which are very rarely, if
            ever, entered into the Cyc knowledge base by hand.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:range rdf:resource="#CycLUnreifiedReifiableNonAtomicTerm"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termStrings">
        <rdfs:label xml:lang="en">term strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$termStrings TERM STRING) means that TERM is a denotation
            of STRING.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termStrings-Guessed">
        <rdfs:label xml:lang="en">term strings - guessed</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$termStrings-Guessed TERM PHRASE) indicates that Cyc TERM
            can be referred to by PHRASE. This is a specialization of
            #$termStrings, for use when the phrase has been guessed
            based on properties of the term, such as it&apos;s name.
            Note that this is not intended for general KE.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="termStrings-GuessedFromName">
        <rdfs:label xml:lang="en">term strings - guessed from name</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$termStrings-GuessedFromName TERM PHRASE) indicates that
            PHRASE is inferred reference for TERM based on its name.
            This is a specialization of #$termStrings-Guessed intended
            for use mainly by a lexification utility.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings-Guessed"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="terminalOfTrans-Generic">
        <rdfs:label xml:lang="en">terminal of trans - generic</rdfs:label>
        <rdfs:comment>(#$terminalOfTrans-Generic TRANS THING) means that
            THING marks one of the             terminal points in the
            instance TRANS of #$GeneralizedTransfer, either its
            beginning or its end.  For example, consider a trip TRANS
            from Austin to             Omaha, NE.  In this case, it
            would correct to assert both
            (#$terminalOfTrans-Generic TRANS #$CityOfAustinTX) and
            (#$terminalOfTrans-Generic TRANS #$CityOfOmahaNB).  Compare
            this predicate to             #$to-Generic and
            #$from-Generic: #$terminalOfTrans-Generic is             a
            generalization of both of these predicates.  Note also that
            like #$to-Generic and #$from-Generic this predicate is very
            general.  Here are two more examples to illustrate its
            generality: (i) someone sends an e-mail in an instance
            EMailSending03 of #$EMailSending from the instance
            EMailAddress03 of #$EMailAddress to EMailAddress04.  In this
            case it would be correct to assert both
            (#$terminalOfTrans-Generic EMailSending03 EMailAddress03)
            and (#$terminalOfTrans-Generic EMailSending03
            EMailAddress04).  (Note that in this case it would be better
            to use the more specific predicate #$informationTerminal.)
            (ii) in the instance GAIN001 of #$GainingUserRights the
            instance AGT001 of #$Agent receives something from AGT002.
            In this case both (#$terminalOfTrans-Generic GAIN001 AGT001)
            and (#$terminalOfTrans-Generic GAIN001 AGT002) are correct.
            You may also want to look at #$transferRouter-Generic and #$transferRelay-Generic.</rdfs:comment>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="territoriesControlled">
        <rdfs:label xml:lang="en">territories controlled</rdfs:label>
        <rdfs:comment>(#$territoriesControlled AGENT TERRITORY) means
            the TERRITORY is a #$GeographicalThing under the political
            control of AGENT.   This refers to actual practical
            political control, not mere legal or unenforced territorial claims.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#ableToControl"/>
        <rdfs:subPropertyOf rdf:resource="#controls"/>
        <rdfs:subPropertyOf rdf:resource="#hasBeenIn"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#GeographicalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="thingsConsumed">
        <rdfs:label xml:lang="en">thing consumed</rdfs:label>
        <rdfs:comment>(#$thingsConsumed EVENT THING) means that the
            entirety of THING is consumed during EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#inputsDestroyed"/>
        <rdfs:domain rdf:resource="#ConsumingFoodOrDrink"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="thinksAbout">
        <rdfs:label xml:lang="en">thinks about</rdfs:label>
        <rdfs:comment>This rather generic cognitive awareness predicate
            relates an agent to a thing that s/he/it is currently
            thinking about, in a   quite broad sense that includes any
            sort of conscious awareness  of the thing.  (#$thinksAbout
            AGENT THING) means that AGENT  thinks about, perceives,
            recalls, or is otherwise consciously   aware of or attending
            to THING.  Even #$Dreaming about a given thing counts as
            being consciously aware of it, in the sense of  conscious
            relevant here.  Note that the above formula means that AGENT
            is thinking about THING _now_; it does not mean merely that
            AGENT has thought about THING at some time or other, nor
            does it imply that AGENT thinks about THING from time to
            time.  Note also that any #$Thing whatsoever can in
            principle be the object of somebody&apos;s thinking.  See
            also #$subjectOfMentalSituation,  #$objectOfMentalSituation,
            and #$IntentionalMentalEvent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:domain rdf:resource="#Agent-Generic"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="thinksProbable">
        <rdfs:label xml:lang="en">thinks probable</rdfs:label>
        <rdfs:comment>(#$thinksProbable AGENT PROP) means that AGENT
            thinks that it is likely that PROP is true.  This is a very
            general predicate.  If AGENT is unsure use the more
            specific, #$surmises.  If AGENT is sure, use #$beliefs or a
            specialization thereof.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#hasOpinionAsToTruthOf"/>
        <rdfs:domain rdf:resource="#IntelligentAgent"/>
        <rdfs:range rdf:resource="#ELSentence-Assertible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="thirdPersonSg-Generic">
        <rdfs:label xml:lang="en">third person sg - generic</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="thirdPersonSg-Present">
        <rdfs:label xml:lang="en">third person sg - present</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION. The
            relationship between an #$EnglishWord and its third person
            singular verb form. The regular third person singular for is
            generated from the infinitive verb form with an
            &apos;s&apos; suffix. Verbs in the Cyc lexicon will have a
            #$thirdPersonSg entry only if they are irregular. Regular
            forms are generated by the morphology component.  Regular
            example: &apos;runs&apos;. Irregular example: &apos;flies&apos;.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#thirdPersonSg-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#presentTense-Generic"/>
        <rdfs:domain rdf:resource="#EnglishWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="threeWayJunctionInSystem">
        <rdfs:label xml:lang="en">three way junction in system</rdfs:label>
        <rdfs:comment>(#$threeWayJunctionInSystem JUNCT SYS) means that
            JUNCT is a 3-way junction in the specified #$PathSystem SYS.
            Formally, a 3-way junction in SYS is any point (actually,
            any node) X in SYS such that either there are exactly 3
            links and no loops in SYS that X is on, or there are exactly
            1 link and 1 loop in SYS that X is on.  See
            #$junctionInSystem.  When the junction is is simply a
            customary junction not based on a specified #$PathSystem,
            use #$ThreeWayJunctionOfPaths.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#finitaryJunctionInSystem"/>
        <rdfs:subPropertyOf rdf:resource="#junctionInSystem"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="timeConstraintOfAction">
        <rdfs:label xml:lang="en">time constraint of action</rdfs:label>
        <rdfs:comment>(#$timeConstraintOfAction ACT DUR) means that in
            the planning context of the assertion, ACT should take no
            longer than the #$Time-Quantity DUR.</rdfs:comment>
        <rdfs:domain rdf:resource="#PurposefulAction"/>
        <rdfs:range rdf:resource="#Time-Quantity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="timeSlices">
        <rdfs:label xml:lang="en">time slices</rdfs:label>
        <rdfs:comment>(#$timeSlices WHOLE PART) means that the
            #$TemporalThing PART is one of the temporal parts of the
            #$TemporalThing WHOLE.  Since PART is a temporal part of
            WHOLE, the temporal extent of PART is included in the
            temporal extent of WHOLE (see #$temporallySubsumes).  Unlike
            #$subEvents, which can divide up an #$Event both in space
            and time, #$timeSlices divides up its first argument in time
            only.  So #$timeSlices is more specialized than #$subEvents.
            On the other hand, it has broader application; #$timeSlices
            makes sense for any #$TemporalThing, not just #$Events; for
            instance, one can talk about year-long #$timeSlices of a rock.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <rdfs:subPropertyOf rdf:resource="#parts"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="titleOfPerson-String">
        <rdfs:label xml:lang="en">title (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$titleOfPerson-String PERSON STRING) relates the
            #$Person PERSON to a #$CharacterString, STRING, which is a
            word for a title (such as ``Dr.&apos;&apos;) PERSON has.  A
            person may have more than one title, even cotemporally.</rdfs:comment>
        <rdfs:domain rdf:resource="#Person"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="to-Generic">
        <rdfs:label xml:lang="en">to - generic</rdfs:label>
        <rdfs:comment>(#$to-Generic GEN-TRANS THING) means that the
            #$GeneralizedTransfer GEN-TRANS has a destination or
            endpoint THING.  Because #$GeneralizedTransfer covers many
            kinds of transfer, both physical and abstract, this endpoint
            can be of many types.  In a #$Translocation it is a
            #$PartiallyTangible location (see #$toLocation), while in
            #$TransferringPossession it is an #$Agent (see
            #$toPossessor).  #$to-Generic encompasses all kinds of
            endpoints; as a rule, it is better to use more the specific
            predicates when possible.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#terminalOfTrans-Generic"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="toBeReviewedBy">
        <rdfs:label xml:lang="en">to be reviewed by</rdfs:label>
        <rdfs:comment>(#$toBeReviewedBy TERM REVIEWER) means that
            REVIEWER is the #$Cyclist responsible for reviewing the
            addition of the constant or assertion TERM into the Cyc KB.
            Generic #$Cyclists can be created for various projects as
            the reviewer of those projects.</rdfs:comment>
        <rdfs:domain rdf:resource="#CycLIndexedTerm"/>
        <rdfs:range rdf:resource="#Cyclist"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="toGroup">
        <rdfs:label xml:lang="en">to group</rdfs:label>
        <rdfs:comment>A specialization of #$to-Generic, #$toGroup can be
            used to indicate, in a more specific way, the instance of
            #$Group in which the #$transferredThing ends up in some
            instance of #$GroupTransfer. (#$toGroup TRANS GROUP) means
            that in the  instance TRANS of #$GroupTransfer, the
            #$transferredThing ends up in the instance GROUP of #$Group.
            See also #$GroupTransferIn and #$fromGroup.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#to-Generic"/>
        <rdfs:domain rdf:resource="#GroupTransfer"/>
        <rdfs:range rdf:resource="#Group"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="toLocation">
        <rdfs:label xml:lang="en">destination (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$toLocation is used to indicate the
            ending point of a particular movement.  (#$toLocation MOVE
            LOC) means that LOC is where the #$objectMoving in MOVE (a
            #$Movement-TranslationEvent) is found when the event MOVE
            ends; the final location of the #$objectMoving in that event
            is LOC.  The #$objectMoving may or may not be #$Stationary
            at LOC.  If MOVE is a single-pathway translation (see
            #$Translation-SingleTrajectory), then every #$objectMoving
            in it is found at LOC when MOVE ends.  If MOVE has multiple
            movers and multiple pathways (see
            #$Translation-MultiTrajectory), then at least some of the
            #$objectMoving(s) can be found at LOC at the end of MOVE.
            If MOVE is a fluid flow (see #$Translation-Flow), then at
            least some portion of the fluid #$objectMoving can be found
            at location LOC at the end of MOVE.  See also
            #$motionPathway-Complete, #$pathConnects.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#to-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:domain rdf:resource="#Translocation"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="toOrganization">
        <rdfs:label xml:lang="en">to organization</rdfs:label>
        <rdfs:comment>A specialization of #$to-Generic, #$toOrganization
            can  be used to indicate, in a more specific way,  the
            instance of #$Organization in which the  instance of
            #$IntelligentAgent  ends up in some instance of
            #$OrganizationalTransfer.  (#$toOrganization TRANS ORG)
            means that in the   instance TRANS of
            #$OrganizationalTransfer, the  #$transferredThing ends up in
            the instance  ORG of #$Organization.  See also
            #$OrganizationalTransferIn and  #$fromOrganization.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#toGroup"/>
        <rdfs:domain rdf:resource="#OrganizationalTransfer"/>
        <rdfs:range rdf:resource="#Organization"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="toPossessor">
        <rdfs:label xml:lang="en">#$toPossessor</rdfs:label>
        <rdfs:comment>This predicate relates an agent to an event in
            which that agent gains some right to use an object.
            (#$toPossessor GAIN AGENT) means that immediately after the
            instance of #$GainingUserRights GAIN, the #$Agent AGENT
            enjoys some #$UserRightsAttribute over an object whose
            possession is transferred in GAIN (the object is related to
            GAIN via the predicate #$objectOfPossessionTransfer), where
            the #$UserRightsAttribute in question is one which AGENT did
            not have (at least with respect to the object transferred)
            at the start of GAIN.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#to-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:domain rdf:resource="#GainingUserRights"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="topicOfIndividual">
        <rdfs:label xml:lang="en">topic of individual</rdfs:label>
        <rdfs:comment>This predicate relates individuals to things they
            are about, in a very general sense of  about .
            (#$topicOfIndividual IND THING) means that #$Thing THING is
            the topic of #$Individual IND. IND may be a #$FieldOfStudy,
            a token of a newspaper article, a particular conversation,
            or any other individual which may be said to have a topic.
            Thus (#$topicOfIndividual #$Etymology #$LexicalWord) means
            that the topic of etymology is words, and
            (#$topicOfIndividual #$WatergateScandal #$RichardNixon)
            means that the Watergate scandal is about Richard Nixon.
            Compare this predicate to #$topicOf, which relates instances
            of #$Collection to things they are about.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="topicOfInfoTransfer">
        <rdfs:label xml:lang="en">topic (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$topicOfInfoTransfer is used to
            indicate what a particular communication is about.
            (#$topicOfInfoTransfer TRANS TOPIC) means that TOPIC is a
            primary topic of the information communicated in the
            #$InformationTransferEvent TRANS.  For example, a result
            reported after an instance of #$BloodTest will contain
            information about the #$objectTested (viz., the blood
            sample); the patient&apos;s blood is thus a
            #$topicOfInfoTransfer of that report.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#topicOfIndividual"/>
        <rdfs:domain rdf:resource="#InformationTransferEvent"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="totalCharge">
        <rdfs:label xml:lang="en">price (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$totalCharge THING MONEY) means that the total
            charge for all goods, services, #$salesTax and other taxes,
            shipping and handling, delivery charges, discounts, etc., in
            order to buy the #$TemporalThing THING is the
            #$MonetaryValue MONEY. For the thing&apos;s price without
            such extra charges, see #$basicPrice. This predicate is not
            to be confused with #$totalCharge-Event, which is the total
            charge not for a (purchased) thing but for a given #$Buying
            event. See also #$cost.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#cost"/>
        <rdfs:domain rdf:resource="#TemporalThing"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="totalCharge-Event">
        <rdfs:label xml:lang="en">total charge - event</rdfs:label>
        <rdfs:comment>The predicate #$totalCharge-Event is used to
            relate a buying event (that is, an instance of #$Buying) to
            the total amount of money charged to the buyer in that
            event. (#$totalCharge BUYING MONEY) means that the sum total
            charge for all goods, services, #$salesTax and other taxes,
            shipping and handling, delivery charges, discounts, etc., in
            the #$Buying event BUYING is the #$MonetaryValue MONEY. This
            predicate is not to be confused with the predicate
            #$totalCharge which relates _a bought thing_ (i.e. an
            instance of #$TemporalThing) to the total amount paid for it.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#moneyTransferred"/>
        <rdfs:domain rdf:resource="#Buying"/>
        <rdfs:range rdf:resource="#MonetaryValue"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="totalDisplacement">
        <rdfs:label xml:lang="en">total displacement</rdfs:label>
        <rdfs:comment>The accumulated total displacement along the
            trajectory at any point in time during the duration of the
            moving process</rdfs:comment>
        <rdfs:domain rdf:resource="#MovementProcess"/>
        <rdfs:range rdf:resource="#Distance-Absolute"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="touches">
        <rdfs:label xml:lang="en">touches</rdfs:label>
        <rdfs:comment>(#$touches THIS THAT) means that THIS and THAT are
            in contact, either directly or indirectly.  Two spatial
            things are directly in contact just in case there is nothing
            between them; to indicate that such a situation obtains
            between two spatial things, use the predicate
            #$touchesDirectly, a specialization of #$touches.  Two
            spatial things touch indirectly if there is only a very thin
            object or substance between them.  `Very thin&apos; means
            that the distance between the surfaces of the two spatial
            things is very much less than the distance between their
            center points.  Some examples of #$touches include an
            airplane touches the air around it; my feet touch the floor
            (even though I am wearing shoes); a blanket touches the
            person sleeping under it (even if there is a sheet); a
            hovercraft touches the water (even though a cushion of air
            is between it and the water).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#near"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="touchesAtEnd">
        <rdfs:label xml:lang="en">touches at end</rdfs:label>
        <rdfs:comment>(#$touchesAtEnd OBJ1 OBJ2) means that an end of
            #$LongAndThin OBJ1 #$touches OBJ2.  If the two objects are
            #$connectedTo each other at this point, the more specific
            #$Predicate, #$connectedAtEnd applies.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="touchesDirectly">
        <rdfs:label xml:lang="en">touches directly</rdfs:label>
        <rdfs:comment>(#$touchesDirectly THIS THAT) means that THIS and
            THAT are in direct physical contact.  That is, there exists
            a region on THIS and a region on THAT such that the distance
            between the surfaces of those regions is zero.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="touchesDirectly-Apartanomic">
        <rdfs:label xml:lang="en">touches directly - apartanomic</rdfs:label>
        <rdfs:comment>(#$touchesDirectly-Apartanomic THIS THAT) means
            that THIS and THAT are in direct physical contact and they
            do not share a common part. That is, there exists a region
            on THIS and a region on THAT such that the distance between
            the surfaces of those regions is zero.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly-NotAsPart"/>
        <rdfs:subPropertyOf rdf:resource="#spatiallyDisjoint"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="touchesDirectly-NotAsPart">
        <rdfs:label xml:lang="en">touches directly - not as part</rdfs:label>
        <rdfs:comment>(#$touchesDirectly-NotAsPart THIS THAT) means that
            THIS and THAT are in direct physical contact for some reason
            other than one is part of the other.  That is, there exists
            a region on THIS and a region on THAT such that the distance
            between the surfaces of those regions is zero.
            (#$touchesDirectly-NotAsPart THIS THIS) means that THIS is a
            physical object that has been flexed such that two regions
            of the surface that would not be touching if the surface
            were flexed differently are touching, e.g. i can touch
            myself on the nose with my finger.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touchesDirectly"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="trajectory-Complete">
        <rdfs:label xml:lang="en">path of motion</rdfs:label>
        <rdfs:comment>(#$trajectory-Complete MOVE TRAJ) means that the
            #$Movement-TranslationEvent MOVE has the #$Trajectory TRAJ
            as its entire trajectory.  Suppose OBJ is the #$objectMoving
            in TRAJ.  TRAJ is a line or curve in space (technically a
            one-manifold) traced out by some reference point (probably
            the centroid) of OBJ.  See also #$trajectory-Partial.
            Contrast #$trajectory-Complete with #$motionPathway-Complete
            and with #$traverses-Complete.  The trajectory of the motion
            may cross itself, zig-zag back and forth along the same
            path, repeat several cycles, etc., and the trajectory need
            not be confined to any pre-existing #$Path-Generics or
            #$Traversals of paths.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#trajectory-Partial"/>
        <rdfs:subPropertyOf rdf:resource="#eventOccursAt"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Trajectory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="trajectory-Partial">
        <rdfs:label xml:lang="en">trajectory - partial</rdfs:label>
        <rdfs:comment>(#$trajectory-Partial MOVE TRAJ) means that the
            #$Movement-TranslationEvent MOVE has at least part of its
            entire trajectory, i.e., the line or curve in space traced
            out by the whole motion, in common with a sub-trajectory of
            the #$Trajectory TRAJ where the motion along the shared
            segment moves in the same direction as TRAJ goes.  See also
            #$trajectory-Complete.  Contrast #$trajectory-Partial with
            #$motionPathway-Partial and with #$traverses-Partial.  The
            trajectory of the motion may cross itself, zig-zag back and
            forth along the same path, repeat several cycles, etc.,
            (like a #$Traversal and unlike a #$Path-Generic), and the
            trajectory need not be confined to any pre-existing
            #$Path-Generics or #$Traversals of paths.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#actors"/>
        <rdfs:domain rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:range rdf:resource="#Trajectory"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="trajectoryPassesThrough">
        <rdfs:label xml:lang="en">thing passed through (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$trajectoryPassesThrough MOVE LOC) means that
            the #$trajectory-Complete of the
            #$Translation-SingleTrajectory MOVE passes through LOC,
            which is an instance of #$SpatialThing-Localized, and thus
            can be a location, a portal, a river, a path, the equator,
            etc.  More formally, the #$objectMoving which undergoes MOVE
            from the #$fromLocation to the #$toLocation passes through
            LOC.  Here `passes through LOC&apos; means that the
            #$objectMoving OBJ both arrives in and leaves LOC.  Thus,
            LOC can not be a super region of any #$fromLocation nor any
            #$toLocations of MOVE.  Otherwise it would be possible to
            state (#$trajectoryPassesThrough TripToTheStore01
            TheUniverse).  On the other hand, LOC can be a sub region of
            some #$toLocation or some #$fromLocation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <rdfs:domain rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transferInSubEvent">
        <rdfs:label xml:lang="en">transfer in sub event</rdfs:label>
        <rdfs:comment>The Cyc predicate #$transferInSubEvent indicates
            the final stage of a particular #$GeneralizedTransfer in
            which the #$transferredThing reaches the destination.  For
            example, (#$transferInSubEvent COMM LISTENING) means that
            LISTENING is the final stage (see #$lastSubEvents) of the
            #$CommunicationAct-Single COMM.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lastSubEvents"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#TransferIn"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transferOutSubEvent">
        <rdfs:label xml:lang="en">initial transfer-out subevent (CycL predicate)</rdfs:label>
        <rdfs:comment>The Cyc predicate #$transferOutSubEvent indicates
            the initial stage of a particular #$GeneralizedTransfer in
            which the #$transferredThing leaves the point of origin.
            For example, (#$transferOutSubEvent TRANSLOC EMISSION) means
            that EMISSION is the initial stage (see #$firstSubEvents) of
            the #$Translocation TRANSLOC.  (The #$emitter in EMISSION is
            a #$fromLocation of TRANSLOC.)</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#firstSubEvents"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#TransferOut"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transferredThing">
        <rdfs:label xml:lang="en">thing transferred (CycL predicate)</rdfs:label>
        <rdfs:comment>The predicate #$transferredThing is used to
            identify the object whose external relationships change in
            some event considered generically as a `transfer&apos;.
            (#$transferredThing TRANSFER OBJ) means that OBJ is being
            moved, transferred, or exchanged in the
            #$GeneralizedTransfer event TRANSFER.  Note that in general,
            and if possible, it is preferable to use a more specialized
            instance of #$ActorSlot than #$transferredThing (e.g.,
            #$objectMoving for physical transfer of an object, or
            #$objectOfPossessionTransfer for an object that changes
            possession but not necessarily location) in representing
            ground facts about transfers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#GeneralizedTransfer"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transformedInto">
        <rdfs:label xml:lang="en">transformed into</rdfs:label>
        <rdfs:comment>(#$transformedInto X Y) means that X stops
            existing at the instant that Y is created.  Furthermore, the
            material which made up X when it ceased to exist will
            generally make up Y when it is created, which in turn
            implies things about the location of Y at that moment, etc.
            See also #$PhysicalTransformationEvent.</rdfs:comment>
        <rdfs:domain rdf:resource="#Entity"/>
        <rdfs:range rdf:resource="#Entity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="translationAlong">
        <rdfs:label xml:lang="en">translation along</rdfs:label>
        <rdfs:comment>(#$translationAlong MOVE TRAV) means that the
            object OBJ in the Translation-SingleTrajectory MOVE moves
            along the #$Traversal TRAV.  This predicate is exactly like
            #$translationAlongWithinDistance, but with  distance
            unspecified.  It is used when the distance between OBJ and
            TRAV is unknown or ignored. Note that whenever
            (#$translationAlongWithinDistance MOVE TRAV DIST) holds, so
            does (#$translationAlong MOVE TRAV).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transportees">
        <rdfs:label xml:lang="en">#$transportees</rdfs:label>
        <rdfs:comment>The predicate #$transportees relates a
            translational motion event to the object(s) transported in
            that event. (#$transportees MOVE OBJ) means that some
            conveyance (see the predicate #$conveyor-Generic) transports
            OBJ in MOVE.  The conveyance in question can either move
            along with OBJ in MOVE or remain stationary during MOVE.
            The conveyance in question is separate from OBJ (that is,
            OBJ is not a part of the conveyance).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#primaryObjectMoving"/>
        <rdfs:subPropertyOf rdf:resource="#objectActedOn"/>
        <rdfs:domain rdf:resource="#Conveying-Generic"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="transporter">
        <rdfs:label xml:lang="en">transporter (pred)</rdfs:label>
        <rdfs:comment>This predicate relates objects to the
            transportation events in which they facilitate movement.
            (#$transporter MOVE OBJ) means that #$SolidTangibleThing OBJ
            enables or facilitates the conveyance of the #$transportees
            in the #$TransportationEvent MOVE.  OBJ is an #$objectMoving
            in MOVE that moves along with the #$transportees.  OBJ will
            generally hold, support, contain, pull, or push the
            #$transportees throughout the MOVE #$Event.  OBJ may or may
            not be the #$providerOfMotiveForce in the event MOVE.  If
            OBJ stays with each #$primaryObjectMoving from the
            #$fromLocation to the #$toLocation, moving along the same
            trajectory, then it is also a #$primaryObjectMoving.      If
            OBJ facilitates the motion of the #$primaryObjectMoving but
            does not itself engage in translational motion it is merely
            the conveyor of the action, and the role
            #$conveyor-Stationary should be asserted.  If it is unclear
            whether the conveyor is stationary or not, the role
            #$conveyor-Generic is used.  Specializations of the role
            #$transporter should be used when possible: although
            automobiles are #$transporters in many events, they should
            normally have the more specific role designation of
            #$vehicle because they are also instances of
            #$TransportationDevice-Vehicle.   When a car is being towed
            by a tow truck, the car is just a #$transporter of any of
            its contents while the tow truck is the #$vehicle of that
            event.  An additional role designation for some
            #$transporters -- those which are #$PhysicalDevices -- is
            #$deviceUsed; e.g., the use of crutches in hobbling or ice
            skates in skating.  See the #$comment on
            #$TransportationEvent.  Note that an organism may be a
            #$transportees in a #$Bicycle riding or #$Skating event as
            well as being the #$providerOfMotiveForce in such cases.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conveyor-Generic"/>
        <rdfs:subPropertyOf rdf:resource="#objectMoving"/>
        <rdfs:domain rdf:resource="#TransportationEvent"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalFrom">
        <rdfs:label xml:lang="en">traversal from</rdfs:label>
        <rdfs:comment>(#$traversalFrom TRAV POINT) means that POINT is a
            starting point of the #$Traversal TRAV along some paths.</rdfs:comment>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalInSystem">
        <rdfs:label xml:lang="en">traversal in system</rdfs:label>
        <rdfs:comment>(#$traversalInSystem TRAV SYS) means that TRAV is
            a #$Traversal of some paths in the #$PathSystem SYS.  Let
            TRAV be represented by (#$TraversalFn (#$TheList X(1)
            PATH(1) ... X(n) PATH(n) X(n+1))).  To say that TRAV is a
            #$Traversal in SYS we mean that (i) TRAV is a #$Traversal
            (and thus (#$TheList X(1) PATH(1) ... X(n) PATH(n) X(n+1))
            is a #$PathChain), and (ii) each X(k) is a point in SYS and
            each PATH(k) is either a link or a loop in SYS, or a subpath
            of a loop in SYS.  Our favorite description of a traversal
            in SYS is such a list that all X(k) are nodes in SYS except
            X(1) and X(n+1), and all PATH(k)s are links or loops in SYS
            except PATH(1) and PATH(n).</rdfs:comment>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalInSystem-OrderObserved">
        <rdfs:label xml:lang="en">traversal in system - order observed</rdfs:label>
        <rdfs:comment>(#$traversalInSystem-OrderObserved TRAV SYS) means
            that TRAV is a #$Traversal of some paths in the
            #$Semi-DirectedPathSystem SYS, and that TRAV observes the
            orders or directions of links (and paths) in SYS. To say
            that TRAV observes the orders or directions of links in SYS,
            we mean that for each link LINK in SYS between X and Y,
            (#$TraversalFn (#$TheList X LINK Y)) is a subtraversal of
            TRAV only if (#$linkFromToInSystem LINK X Y SYS) holds, and
            for each subpath SUB between A and B of a link LINK in SYS
            between X and Y, (#$TraversalFn (#$TheList A SUB B)) is a
            subtraversal of TRAV only if (#$linkFromToInSystem LINK X Y
            SYS) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#traversalInSystem"/>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="#Semi-DirectedPathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalOf">
        <rdfs:label xml:lang="en">traversal of</rdfs:label>
        <rdfs:comment>(#$traversalOf TRAV CHAIN) means that TRAV is the
            #$Traversal of the #$PathChain CHAIN.  See also #$TraversalFn.</rdfs:comment>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="#PathChain"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalPassesThrough">
        <rdfs:label xml:lang="en">traversal passes through</rdfs:label>
        <rdfs:comment>(#$traversalPassesThrough TRAV POINT) means that
            POINT is a point that the #$Traversal TRAV passes through.
            Note that when TRAV passes through POINT, POINT cannot be a
            mere endpoint of TRAV.  This means that a traversal does not
            pass through its starting point if it does not go back to
            the point and then leave it, nor does it pass through its
            ending point if it does not meet the point twice.</rdfs:comment>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traversalTo">
        <rdfs:label xml:lang="en">traversal to</rdfs:label>
        <rdfs:comment>(#$traversalTo TRAV POINT) means that POINT is an
            ending point of the #$Traversal TRAV along some paths.  Note
            that (#$traversalTo TRAV A) and (#$traversalTo TRAV B) may
            both be true even when A and B are different.  This can
            happen when, e.g., A is a part of B and a path goes to both.
            This is why we did not call POINT, in the context above, THE
            ending point of TRAV.</rdfs:comment>
        <rdfs:domain rdf:resource="#Traversal"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traverses-Complete">
        <rdfs:label xml:lang="en">traversed path</rdfs:label>
        <rdfs:comment>(#$traverses-Complete MOVE TRAVER) means that the
            #$Movement-TranslationEvent MOVE traverses a path or series
            of paths (#$Path-Generics forming the #$Traversal TRAVER)
            during its motion, and that TRAVER is the entire traversal
            from beginning to end of the movement.  The traversal may
            cross itself, go back and forth along the same path, or
            repeat cycles of paths (unlike the #$ActorSlot
            #$motionPathway-Complete, which can follow only one,
            non-self-crossing, pre-existing #$Path-Generic.)  See also
            #$traverses-Partial.  Contrast #$traverses-Complete with
            #$motionPathway-Complete, that relates to one existing
            #$Path-Generic, and with #$trajectory-Complete that relates
            to the pure #$Trajectory of the motion.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#translationAlong"/>
        <rdfs:subPropertyOf rdf:resource="#traverses-Partial"/>
        <rdfs:domain rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:range rdf:resource="#Traversal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="traverses-Partial">
        <rdfs:label xml:lang="en">partially traversed path</rdfs:label>
        <rdfs:comment>(#$traverses-Partial MOVE TRAV) means that the
            moving object OBJ in the #$Translation-SingleTrajectory MOVE
            (see #$objectMoving) is partially confined to the
            #$Traversal TRAV during MOVE.  To say that OBJ is partially
            confined to TRAV during MOVE, we mean that (1) there is a
            subevent SUBEVENT of MOVE such that
            (#$subTranslations-SingleTrajectory MOVE SUBEVENT) holds,
            and (2) there is a sub-Traversal SUBTRAV of TRAV (see
            #$subTraversals) such that SUBEVENT is confined to SUBTRAV,
            i.e., (#$traverses-Complete SUBEVENT SUBTRAV) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#Translation-SingleTrajectory"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="tributaries">
        <rdfs:label xml:lang="en">tributaries</rdfs:label>
        <rdfs:comment>A #$SpatialPredicate that is used to indicate the
            tributaries of a given  river.  (#$tributaries RIVER
            TRIBUTARY) means that RIVER has TRIBUTARY as  one of its
            tributaries.  That is, TRIBUTARY is a #$Stream (q.v.) that
            flows into RIVER.  For example, the #$MississippiRiver has
            the #$WisconsinRiver,  #$OhioRiver, #$ArkansasRiver,
            #$RedRiverOfTexas, and others as tributaries. In cases where
            TRIBUTARY is itself a #$River, consider whether the more
            specialized predicate #$fedByConfluenceOfRivers (q.v.) is applicable.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:domain rdf:resource="#River"/>
        <rdfs:range rdf:resource="#Stream"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="trueRule">
        <rdfs:label xml:lang="en">true rule</rdfs:label>
        <rdfs:comment>(#$trueRule TEMPLATE FORMULA) states that FORMULA
            is both true and an instantiation of the rule template TEMPLATE.</rdfs:comment>
        <rdfs:domain rdf:resource="#RuleTemplate"/>
        <rdfs:range rdf:resource="#ELSentenceTemplate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="tupleIndexSet">
        <rdfs:label xml:lang="en">tuple index set</rdfs:label>
        <rdfs:comment>A predicate that relates a given tuple (see
            #$Tuple) to its  index set .  (#$tupleIndexSet TUPLE
            INDEXSET) means that INDEXSET  indexes TUPLE (see
            #$tupleMembers).  That is, each member of TUPLE is
            associated, via an  indexing function  (see
            #$tupleMemberIndex), with at least one element of INDEXSET,
            and no element of INDEXSET is associated with more than one
            member  of TUPLE.  The elements of INDEXSET might be any
            sort of things whatsoever.   If INDEXSET is the set of all
            positive integers (or the set of members of  some initial
            segment thereof), then TUPLE is an _ordered_n-tuple_ -- i.e.
            an instance of #$List (q.v.).</rdfs:comment>
        <rdfs:domain rdf:resource="#Tuple"/>
        <rdfs:range rdf:resource="#Set-Mathematical"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="tupleMembers">
        <rdfs:label xml:lang="en">tuple members</rdfs:label>
        <rdfs:comment>A predicate that relates a given  tuple (see
            #$Tuple) to any of the items in that tuple.  (#$tupleMembers
            TUPLE MEMBER) means that MEMBER is a  member of TUPLE. If
            TUPLE is an instance of #$List, it will  also be related to
            MEMBER by the more specialized predicate  #$listMembers.
            See also #$tupleIndexSet and #$tupleMemberIndex.</rdfs:comment>
        <rdfs:domain rdf:resource="#Tuple"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="typeGenls">
        <rdfs:label xml:lang="en">type genls</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForCollections (q.v.) that can be
            used to relate a given collection to a
            collection-of-collections (see #$CollectionType) all of
            whose instances are specializations of the given collection.
            (#$typeGenls COLTYPE COL) means that every instance of
            COLTYPE has COL as a generalization (see #$genls).  For
            example,  (#$typeGenls #$CreditCardTypeByBrand #$CreditCard)
            means that each type of credit card is a subcollection of
            the collection of all credit cards.  Note that  (#$typeGenls
            COLTYPE COL) does _not_ imply that every subcollection of
            COL  is an instance of COLTYPE.</rdfs:comment>
        <rdfs:domain rdf:resource="#CollectionType"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="typedGenlInverse">
        <rdfs:label xml:lang="en">typed genl inverse</rdfs:label>
        <rdfs:comment>A #$MetaPredicate that is a specialization of
            #$genlInverse.  #$typedGenlInverse is to #$genlInverse what
            #$typedGenlPreds   is to #$genlPreds (qq.v.).
            (#$typedGenlInverse PRED TYPED-GENL-INV-PRED) means that
            TYPED-GENL-INV-PRED is a more general version of the inverse
            of PRED that allows for more general argument types.  More
            precisely: (i) TYPED-GENL-INV-PRED  is a generalization of
            the inverse of PRED (see #$genlInverse); (ii) the
            argument-type constraints (see #$ArgTypePredicate) on PRED
            are at least as   narrow as (and in most cases narrower
            than) the inversely-corresponding constraints on
            TYPED-GENL-INV-PRED, and (iii) for any pair of things
            &lt;THING1, THING2&gt; such that (TYPED-GENL-INV-PRED THING2
            THING1) holds and where THING1   and THING2 respectively
            satisfy the argument-type constraints on the first and
            second argument-places of PRED, (PRED THING1 THING2) holds.
            For example,   (#$typedGenlInverse #$pathInsideRegion
            #$spatiallySubsumes) implies that any  path that is
            spatially subsumed by a given geographical region is a path
            inside   that region.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlInverse"/>
        <rdfs:domain rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="typedGenlPreds">
        <rdfs:label xml:lang="en">typed genl preds</rdfs:label>
        <rdfs:comment>A #$TaxonomicSlotForPredicates that is a
            specialization of #$genlPreds.  (#$typedGenlPreds
            TYPED-SPEC-PRED GENL-PRED)  means that GENL-PRED is a more
            general version of TYPED-SPEC-PRED that allows for more
            general argument types.  More precisely: (i) GENL-PRED is a
            generalization of TYPED-SPEC-PRED (see #$genlPreds); (ii)
            the argument-type constraints (see #$ArgTypePredicate) on
            TYPED-SPEC-PRED are at least as narrow as (and in most cases
            narrower than) the corresponding constraints on GENL-PRED;
            and (iii) for any list of things &lt;THING1, THING2, ...
            THINGn&gt; such that (GENL-PRED THING1 THING2 ... THINGN)
            holds and where THING1 through THINGn respectively satisfy
            the argument-type constraints on the corresponding
            argument-places of TYPED-SPEC-PRED, (TYPED-SPEC-PRED THING1
            THING2 ... THINGn) holds.  For example, (#$typedGenlPreds
            #$sisters #$siblings) entails that if (#$siblings John Alex)
            holds and Alex is a #$FemaleAnimal (and thus satisfies the
            type constraint on the second argument of #$sisters), then
            (#$sisters John Alex) holds.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#genlPreds"/>
        <rdfs:domain rdf:resource="#Predicate"/>
        <rdfs:range rdf:resource="#Predicate"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlAssociation">
        <rdfs:label xml:lang="en">UML association</rdfs:label>
        <rdfs:comment>A predicate which relates objects from the #$UnifiedModelingLanguage.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlPartialAssociation"/>
        <rdfs:domain rdf:resource="#UMLSyntaxObject"/>
        <rdfs:range rdf:resource="#UMLSyntaxObject"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlBehavioralFeatureLink">
        <rdfs:label xml:lang="en">UML behavioral feature link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlBehavioralFeature links
            an instance #$UMLParameter with the instance of
            #$UMLBehavioralFeature for which it is a parameter.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLParameter"/>
        <rdfs:range rdf:resource="#UMLBehavioralFeature"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlBody">
        <rdfs:label xml:lang="en">uml body</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlLanguage links an
            instance #$UMLExpression with an instance of
            #$CharacterString which consists of programming language
            source statements which implement the expression.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlPartialAssociation"/>
        <rdfs:domain rdf:resource="#UMLModelElement-HasBody"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlBound">
        <rdfs:label xml:lang="en">UML SynchState bound</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlReferenceState links an
            instance of #$UMLSynchState with an instance of #$Integer
            which is the bound of the synch state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLSynchState"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlChangeExpression">
        <rdfs:label xml:lang="en">change expression</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlChangeExpression links an
            instance #$UMLChangeEvent with an instance of
            #$UMLBooleanExpression which is the boolean expression that
            when true, triggers the change event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLChangeEvent"/>
        <rdfs:range rdf:resource="#UMLBooleanExpression"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlContainer">
        <rdfs:label xml:lang="en">containing composite state</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlContainer links an
            instance #$UMLStateVertex with an instance of
            #$UMLCompositeState which is the composite state which
            contains the state vertex.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateVertex"/>
        <rdfs:range rdf:resource="#UMLCompositeState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlContext">
        <rdfs:label xml:lang="en">UML context</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlContext links an instance
            #$UMLStateMachine with an #$Individual which it is the
            context object for the state machine.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateMachine"/>
        <rdfs:range rdf:resource="#Individual"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlDefaultParameter">
        <rdfs:label xml:lang="en">default specification</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlDefaultParameter provides
            a default #$UMLExpression for the #$UMLParameter.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLParameter"/>
        <rdfs:range rdf:resource="#UMLExpression"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlDeferableEvent">
        <rdfs:label xml:lang="en">UML deferableEvent</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlDeferableEvent links an
            instance of #$UMLState with an instance of #$UMLEvent which
            is a deferable event in the state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLState"/>
        <rdfs:range rdf:resource="#UMLEvent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlDoActivity">
        <rdfs:label xml:lang="en">UML doActivity</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlDoActivity links an
            instance of #$UMLState with an instance of #$UMLProcedure
            which is the activity to be performed while the state is active.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLState"/>
        <rdfs:range rdf:resource="#UMLProcedure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlEffect">
        <rdfs:label xml:lang="en">UML effect</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlEffect links an instance
            #$UMLTransition with an instance of #$UMLOperation which is
            its effect.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTransition"/>
        <rdfs:range rdf:resource="#UMLProcedure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlEntry">
        <rdfs:label xml:lang="en">UML entry</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlEntry links an instance
            of #$UMLState with an instance of #$UMLProcedure which is
            the procedure to perform when entering the state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLState"/>
        <rdfs:range rdf:resource="#UMLProcedure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlExit">
        <rdfs:label xml:lang="en">UML exit</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlExit links an instance of
            #$UMLState with an instance of #$UMLProcedure which is the
            procedure to perform when exiting the state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLState"/>
        <rdfs:range rdf:resource="#UMLProcedure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlExpressionLink">
        <rdfs:label xml:lang="en">UML expression link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlExpressionLink links an
            instance #$UMLGuard with an instance of
            #$UMLBooleanExpression which is the guard expression for
            some #$UMLTransition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLGuard"/>
        <rdfs:range rdf:resource="#UMLBooleanExpression"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlGuardLink">
        <rdfs:label xml:lang="en">UML guard</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlGuardLink links an
            instance #$UMLTransition with an instance of #$UMLGuard
            which is its guard expression.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTransition"/>
        <rdfs:range rdf:resource="#UMLGuard"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlIncoming">
        <rdfs:label xml:lang="en">incoming transitions</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlIncoming links an
            instance  #$UMLStateVertex with instances of
            #$UMLTransitions which are the transitions coming into the
            state vertex.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateVertex"/>
        <rdfs:range rdf:resource="#UMLTransition"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlInternalTransition">
        <rdfs:label xml:lang="en">UML internalTransition</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlInternalTransition links
            an instance of #$UMLState with an instance of
            #$UMLTransition which is a transition whose both source and
            target states are the state instance.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLState"/>
        <rdfs:range rdf:resource="#UMLTransition"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlLanguage">
        <rdfs:label xml:lang="en">uml language</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlLanguage links an
            instance #$UMLExpression with an instance of
            #$CharacterString which names the programming language in
            which the body of the expression is written.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlPartialAssociation"/>
        <rdfs:domain rdf:resource="#UMLModelElement-HasLanguage"/>
        <rdfs:range rdf:resource="#AbstractProgrammingLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlMultiplicity">
        <rdfs:label xml:lang="en">UML multiplicity</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlMultiplicity links an
            instance of #$UMLPin with the number of values used by the
            UML Pin</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLPin"/>
        <rdfs:range rdf:resource="#NonNegativeInteger"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlName">
        <rdfs:label xml:lang="en">uml name</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlLanguage links an
            instance #$UMLModelElement with an instance of
            #$CharacterString which is its name in those cases where the
            constant&apos;s name is not appropriate.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlPartialAssociation"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlOperationLink">
        <rdfs:label xml:lang="en">UML operation link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlOperationLink links an
            instance #$UMLCallEvent with an instance of #$UMLOperation
            which is the operation that is called.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLCallEvent"/>
        <rdfs:range rdf:resource="#UMLOperation"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlOutgoing">
        <rdfs:label xml:lang="en">UML incoming</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlOutgoing links an
            instance  #$UMLStateVertex with instances of
            #$UMLTransitions which are the transitions going out of the
            state vertex.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateVertex"/>
        <rdfs:range rdf:resource="#UMLTransition"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlOwner">
        <rdfs:label xml:lang="en">UML name</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlOwner links an instance
            #$UMLFeature with an instance of #$UMLClassifier.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLFeature"/>
        <rdfs:range rdf:resource="#UMLClassifier"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlParameterLink">
        <rdfs:label xml:lang="en">UML parameter link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlParameter links an
            instance #$UMLBehavioralFeature or an instance of #$UMLEvent
            with an instance of #$UMLParameter which is a parameter for
            the first argument.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
        <rdfs:range rdf:resource="#UMLParameter"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlPartialAssociation">
        <rdfs:label xml:lang="en">UML partial association</rdfs:label>
        <rdfs:comment>A predicate which relates objects from the
            #$UnifiedModelingLanguage to some other thing.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <rdfs:domain rdf:resource="#UMLSyntaxObject"/>
        <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlProcedureLink">
        <rdfs:label xml:lang="en">UML procedure link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlProcedureLink links an
            instance #$UMLInputPin or an instance of #$UMLOutputPin with
            an instance of #$UMLProcedure which is the procedure that
            owns the pin.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLPin"/>
        <rdfs:range rdf:resource="#UMLProcedure"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlReferenceState">
        <rdfs:label xml:lang="en">UML referenceState</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlReferenceState links an
            instance of #$UMLStubState with an instance of #$UMLState
            which is the state to which this stub state refers.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStubState"/>
        <rdfs:range rdf:resource="#UMLState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlSignalLink">
        <rdfs:label xml:lang="en">state link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlSignalLink links an
            instance #$UMLSignalEvent with an instance of #$UMLSignal
            which is the signal that created the signal event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLSignalEvent"/>
        <rdfs:range rdf:resource="#UMLSignal"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlSource">
        <rdfs:label xml:lang="en">UML source</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlSource links an instance
            #$UMLTransition with an instance of #$UMLStateVertex which
            is the source of the transition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTransition"/>
        <rdfs:range rdf:resource="#UMLStateVertex"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlSpecification">
        <rdfs:label xml:lang="en">specification (pred)</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlSpecification provides a
            #$CharacterString specification for the #$UMLOperation.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLOperation"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlStateLink">
        <rdfs:label xml:lang="en">UML state link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlStateLink links an
            instance #$UMLCompletionEvent with an instance of #$UMLState
            which is the state whose completion created the completion event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLCompletionEvent"/>
        <rdfs:range rdf:resource="#UMLState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlStateMachineLink">
        <rdfs:label xml:lang="en">UML stateMachine</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlStateMachine either links
            an instance of #$UMLState with an instance of
            #$UMLStateMachine which is the state machine containing the
            state, or links an instance of #$UMLTransition with an
            instance of #$UMLStateMachine which is the state machine
            containing the transition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLModelElement-HasStateMachineLink"/>
        <rdfs:range rdf:resource="#UMLStateMachine"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlSubVertex">
        <rdfs:label xml:lang="en">UML subVertex</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlSubVertex links an
            instance of #$UMLCompositeState with an instance of
            #$UMLStateVertex which is a state vertex contained within
            the composite state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLCompositeState"/>
        <rdfs:range rdf:resource="#UMLStateVertex"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlSubmachineStateLink">
        <rdfs:label xml:lang="en">UML submachineState</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlStateMachineLink links an
            instance #$UMLStateMachine with an instance of
            #$UMLSubmachineState which is its submachine state.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateMachine"/>
        <rdfs:range rdf:resource="#UMLSubmachineState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlTarget">
        <rdfs:label xml:lang="en">UML target</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlSource links an instance
            #$UMLTransition with an instance of #$UMLStateVertex which
            is the target of the transition.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTransition"/>
        <rdfs:range rdf:resource="#UMLStateVertex"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlTop">
        <rdfs:label xml:lang="en">UML top</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlTop links an instance
            #$UMLStateMachine with its top #$UMLState which usually is a #$UMLCompositeState.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLStateMachine"/>
        <rdfs:range rdf:resource="#UMLState"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlTransitionLink">
        <rdfs:label xml:lang="en">UML transition link</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlTransitionLink either
            links an instance #$UMLGuard with an instance of
            #$UMLTransition for which it is the guard expression, or
            links an instance of #$UMLStateMachine with its transitions.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLModelElement-HasTransition"/>
        <rdfs:range rdf:resource="#UMLTransition"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlTrigger">
        <rdfs:label xml:lang="en">UML trigger</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlTrigger links an instance
            #$UMLTransition with an instance of #$UMLEvent which is its
            triggering event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTransition"/>
        <rdfs:range rdf:resource="#UMLEvent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlType">
        <rdfs:label xml:lang="en">UML type</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlType links an instance of
            #$UMLPin or an instance of #$UMLParameter with the instance
            of #$UMLClassifier that is its type.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlPartialAssociation"/>
        <rdfs:domain rdf:resource="#UMLModelElement-HasType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="umlWhen">
        <rdfs:label xml:lang="en">time when</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate umlWhen links an instance
            #$UMLTimeEvent with an instance of #$UMLTimeExpression which
            is the time expression that when becomming true, created the
            time event.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#umlAssociation"/>
        <rdfs:domain rdf:resource="#UMLTimeEvent"/>
        <rdfs:range rdf:resource="#UMLTimeExpression"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="unchangedActors">
        <rdfs:label xml:lang="en">unchanged actor (CycL predicate)</rdfs:label>
        <rdfs:comment>(#$unchangedActors EVENT OBJ) means that the
            object OBJ is an actor (see the predicate #$actors) in the
            event EVENT, and that OBJ remains virtually unchanged by its
            participation in the event EVENT. (#$unchangedActors EVENT
            OBJ) implies that OBJ does not appreciably move, nor does it
            undergo some internal change in its properties, nor is it
            created or destroyed, in the course of EVENT.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#postActors"/>
        <rdfs:subPropertyOf rdf:resource="#preActors"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="undergroundOf">
        <rdfs:label xml:lang="en">underground of</rdfs:label>
        <rdfs:comment>(#$undergroundOf OBJ GROUND) means that OBJ is
            beneath the surface of GROUND and has the #$locationState #$Underground.</rdfs:comment>
        <rdfs:domain rdf:resource="#Place"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="underlyingGraph">
        <rdfs:label xml:lang="en">underlying graph</rdfs:label>
        <rdfs:comment>(#$underlyingGraph RED SYS) means that (i) every
            node in SYS is a node in RED, (ii) every point in RED is a
            node in RED (and hence a node in SYS), and (iii)
            (#$linkClosedSubSystems SYS RED) holds. It is easy to see
            that when (#$underlyingGraph RED SYS) holds, RED must be an
            instance of #$Multigraph.  But RED is not only a
            multi-graph, it is THE multi-graph that underlies the path
            system SYS, i.e., the only difference between SYS and RED is
            that SYS is obtainable by adding to RED some points that are
            on a link in RED between the end-nodes.</rdfs:comment>
        <rdfs:domain rdf:resource="#Multigraph"/>
        <rdfs:range rdf:resource="#PathSystem"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="uniquePartTypes">
        <rdfs:label xml:lang="en">unique part types</rdfs:label>
        <rdfs:comment>The predicate #$uniquePartTypes relates two
            sub-collections of #$PartiallyTangible.  (#$uniquePartTypes
            BIG SMALL) means that every instance of BIG has exactly one
            instance of SMALL as a physical part (see the predicate #$physicalParts).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#physicalPartTypes"/>
        <rdfs:domain rdf:resource="#ExistingObjectType"/>
        <rdfs:range rdf:resource="#ExistingObjectType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="unitExpansions">
        <rdfs:label xml:lang="en">unit expansions</rdfs:label>
        <rdfs:comment>The predicate #$unitExpansions is used to express
            the relationship between a derived unit of measurement and
            the units from which it is derived, e.g., miles per second
            from miles and seconds.  (#$unitExpansions UNIT FACTOR-LIST)
            means that UNIT is derived from the factors on the list
            UNIT-FACTOR, where UNIT-FACTOR is an instance of #$SubLList.
            There are two kinds of items in the UNIT-FACTOR list: (1)
            all items except the last are themselves lists that consist
            of an instance of #$UnitOfMeasure followed by an exponent
            for that unit; (2) the last item is the constant multiplier.
            Some examples:       (#$unitExpansions #$MilesPerHour
            (((#$Mile 1)(#$HoursDuration -1)) 1),
            (#$unitExpansions #$SpeedOfLight (((#$Mile
            1)(#$SecondsDuration -1)) 186000)),       (#$unitExpansions
            #$MetersPerSecondPerSecond (((#$Meter 1)(#$SecondsDuration
            -2)) 1).  The first of these examples is included only
            because it makes a clear example; the definition of
            #$MilesPerHour in terms of #$Mile and #$HoursDuration should
            actually be done with the simpler #$multiplicationUnits
            (q.v.). In general, any relationship among units that can be
            expressed with #$multiplicationUnits should be, and
            #$unitExpansions should be reserved for those relationships
            that can&apos;t be expressed with the simpler vocabulary.</rdfs:comment>
        <rdfs:domain rdf:resource="#UnitOfMeasure"/>
        <rdfs:range rdf:resource="#SubLList"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="unitOfMeasurePrefixString">
        <rdfs:label xml:lang="en">unit of measure prefix string</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#MetricUnitPrefix"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="untensed">
        <rdfs:label xml:lang="en">untensed</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#verbStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="upAxisPoints">
        <rdfs:label xml:lang="en">up axis points</rdfs:label>
        <rdfs:comment>(#$upAxisPoints OBJ DIR) means OBJ&apos;s
            intrinsic up-axis points in the direction DIR.  An object
            has an intrinsic up-axis only if it has an intrisic top by
            virtue of its design or function.  People, rockets, cars,
            and cups are examples of objects with intrinsic tops.  A
            sphere has no intrinsic top, due to its symmetry.  If an
            object with an intrinsic up-axis, OBJ, is on its side, one
            asserts (#$upAxisPoints OBJ #$HorizontalDirection).  If OBJ
            is upside-down, one asserts (#$upAxisPoints OBJ
            #$Down-Directly) or (#$upAxisPoints OBJ #$Down-Generally),
            depending on how precise one wishes to be.</rdfs:comment>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#UnitVectorInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="urgeSatisfied">
        <rdfs:label xml:lang="en">urge satisfied</rdfs:label>
        <rdfs:comment>(#$urgeSatisfied EVT URGETYPE) means that the
            sensory event EVT satisfies an instance of a physical urge
            of type URGETYPE.   Use the predicate, #$urgeTypeSatisfied,
            to stateg rules about what sorts of actions relieve what
            sorts of urges.  E.g., scratching relieves an #$UrgeToScratch.</rdfs:comment>
        <rdfs:domain rdf:resource="#PhysicalEvent"/>
        <rdfs:range rdf:resource="#SensoryReactionType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="usesCommunicationConvention">
        <rdfs:label xml:lang="en">uses communication convention</rdfs:label>
        <rdfs:comment>A binary predicate which relates instances of
            #$InformationStore to instances of
            #$CommunicationConvention. (#$usesCommunicationConvention
            INFO_STRUCT CC) means that INFO_STRUCT uses CC to represent
            its information.  For example, the original
            [#$originalInfoStructureOfCW] Iliad uses the
            #$AncientGreekLanguage as a #$CommunicationConvention, while
            a modern translation into Tagalog uses the #$TagalogLanguage
            and, when written, uses the #$WesternEuropeanWriting
            #$orthography as another #$CommunicationConvention. See also
            the more specific #$languageWrittenIn.</rdfs:comment>
        <rdfs:domain rdf:resource="#InformationStore"/>
        <rdfs:range rdf:resource="#CommunicationConvention"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="usesObject">
        <rdfs:label xml:lang="en">user (pred)</rdfs:label>
        <rdfs:comment>If (#$usesObject A B) is true, then it follows
            that there exists some instance of performing an action with
            A as the performer and B as the tool or object.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyRelated"/>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#SomethingExisting"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="valueInRange">
        <rdfs:label xml:lang="en">value in range</rdfs:label>
        <rdfs:comment>(#$valueInRange VALUE RANGE) means that VALUE is
            an individual value in the specified range.  The range is
            not restricted to a range of numbers, but may include ranges
            such as (#$Meter 1 3).</rdfs:comment>
        <rdfs:domain rdf:resource="#ScalarPointValue"/>
        <rdfs:range rdf:resource="#ScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="variantOfPrefix">
        <rdfs:label xml:lang="en">variant of prefix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="variantOfSuffix">
        <rdfs:label xml:lang="en">variant of suffix</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#Individual"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="vehicle">
        <rdfs:label xml:lang="en">vehicle (CycL predicate)</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$TransportationEvent to instances of
            #$TransportationDevice-Vehicle.  (#$vehicle EVENT VEHICLE)
            means that VEHICLE is a #$TransportationDevice-Vehicle which
            is both the #$providerOfMotiveForce and the #$transporter in
            EVENT.  If an object is a #$TransportationDevice-Vehicle and
            plays the role of #$transporter in some moving event, then
            it generally  will play the role of #$vehicle in that event.
            Examples: a car plays the role of #$vehicle in driving.
            Note, however, that a bicycle does not play the role of
            #$vehicle in bike riding since it is not a provider of
            motive force.  A borderline non-example is someone sitting
            in a car while it&apos;s being pulled by a tow truck; the
            car is not playing the role of #$vehicle in that event
            (because it is not the provider of motive force - the tow
            truck is).</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#transporter"/>
        <rdfs:subPropertyOf rdf:resource="#deviceUsed"/>
        <rdfs:subPropertyOf rdf:resource="#providerOfMotiveForce"/>
        <rdfs:domain rdf:resource="#TransportationEvent"/>
        <rdfs:range rdf:resource="#TransportationDevice-Vehicle"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="verbStrings">
        <rdfs:label xml:lang="en">verb strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$verbStrings WORD STRING) states that STRING is one of the
            verb strings for the word unit WORD in some microtheory.  In
            other words, some verbal #$SpeechPartPredicate is used on
            WORD to relate it to STRING.  This predicate is
            #$notAssertible since it is concluded from the current state
            of the knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#wordStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="vestedInterest">
        <rdfs:label xml:lang="en">vested interest</rdfs:label>
        <rdfs:comment>(#$vestedInterest AGENT INTEREST) means that the
            #$Agent AGENT has some stake, positive or negative, tangible
            or intangible, in what befalls the thing INTEREST.  See also
            the specializations #$positiveVestedInterest, #$negativeVestedInterest.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#awareOf"/>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#TemporalThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="victim">
        <rdfs:label xml:lang="en">#$victim</rdfs:label>
        <rdfs:comment>The #$Agent(s) most directly harmed by this
            possibly criminal act.  In so-called victimless crimes, some
            would consider the state to be the victim, but we will not
            follow that convention here.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#maleficiary"/>
        <rdfs:subPropertyOf rdf:resource="#damages"/>
        <rdfs:domain rdf:resource="#Event"/>
        <rdfs:range rdf:resource="#SocialBeing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="virtualMemorySize">
        <rdfs:label xml:lang="en">virtual memory size</rdfs:label>
        <rdfs:comment>A #$BinaryPredicate that relates instances of
            #$Computer to instances of #$ComputerMemoryCapacity..
            (#$virtualMemorySize COMP SIZE) means that COMP has SIZE as
            the size of its virtual memory. See also #$physicalMemorySize.</rdfs:comment>
        <rdfs:domain rdf:resource="#ElectronicDevice"/>
        <rdfs:range rdf:resource="#ComputerMemoryCapacity"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="visuallyDepicts">
        <rdfs:label xml:lang="en">visually depicts</rdfs:label>
        <rdfs:comment>A binary predicate that relates instances of
            #$VisualInformationBearingThing to instances of
            #$SpatialThing. (#$visuallyDepicts IBT OBJ) means the object
            OBJ is depicted by the visual information source IBT. For
            example, Mount Everest is visually depicted by a photograph
            of it, and (#$visuallyDepicts #$PietaStatue-Michelangelo
            #$JesusOfNazareth) is true.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#containsInformationAbout"/>
        <rdfs:domain rdf:resource="#VisualInformationBearingThing"/>
        <rdfs:range rdf:resource="#SpatialThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="volumeContained">
        <rdfs:label xml:lang="en">volume contained</rdfs:label>
        <rdfs:comment>A predicate used to indicate the total volume
            enclosed by a given container.  (#$volumeContained CONT VOL)
            means that the total available volume of the
            #$PartiallyTangible CONT is VOL.</rdfs:comment>
        <rdfs:domain rdf:resource="#PartiallyTangible"/>
        <rdfs:range rdf:resource="#Volume"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="volumeOfObject">
        <rdfs:label xml:lang="en">#$volumeOfObject</rdfs:label>
        <rdfs:comment>(#$volumeOfObject OBJECT VOLUME) means that the
            #$SpatialThing OBJECT has the #$Volume VOLUME.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#sizeParameterOfObject"/>
        <rdfs:domain rdf:resource="#SpatialThing"/>
        <rdfs:range rdf:resource="#Volume"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wasteProducts">
        <rdfs:label xml:lang="en">waste product</rdfs:label>
        <rdfs:comment>(#$wasteProducts EV OBJ) means that OBJ is one of
            the by-products of EV which is disposed of, rather than used
            or sold.  See also #$unwantedMatter.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#byProducts"/>
        <rdfs:domain rdf:resource="#PurposefulAction"/>
        <rdfs:range rdf:resource="#PartiallyTangible"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wavelength">
        <rdfs:label xml:lang="en">wavelength</rdfs:label>
        <rdfs:comment>(#$wavelength WAVE LENGTH) means that the
            #$WavePropagation WAVE consists of waves having the length
            LENGTH.  LENGTH is a #$Distance measuring one complete wave
            in a #$WavePropagation event.</rdfs:comment>
        <rdfs:domain rdf:resource="#WavePropagation"/>
        <rdfs:range rdf:resource="#PositiveScalarInterval"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wearer">
        <rdfs:label xml:lang="en">wearer</rdfs:label>
        <rdfs:comment>This predicate indicates the individual (typically
            a person, but perhaps an animal or a mannequin) that wears
            some item of clothing (or some other wearable item) in a
            particular situation.  (#$wearer WEARING OBJ) means that OBJ
            is the wearer during WEARING.  To specify the item worn in a
            situation, use the predicate #$itemWorn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#WearingSomething"/>
        <rdfs:range rdf:resource="#SolidTangibleThing"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wearsClothing">
        <rdfs:label xml:lang="en">wears clothing</rdfs:label>
        <rdfs:comment>An instance of #$CotemporalObjectsSlot.
            #$wearsClothing is a binary predicate that relates instances
            of #$SolidTangibleThing to instances of #$SomethingToWear.
            (#$wearsClothing OBJ ITEM) means that OBJ wears ITEM. The
            first argument of #$wearsClothing is loosely constrained to
            be an instance of #$SolidTangibleThing, so that this
            predicate may be used to describe mannequins, animals, and
            other individuals (of whatever kinds) that might wear
            clothes, as well as humans. However, by default  an
            individual who #$wearsClothing is an instance of #$Person.
            See also #$wornOn, which relates the item worn to the body
            part on which it is worn, and see #$itemWorn, which relates
            a particular wearable item to the event in which it is worn.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#spatiallyDisjoint"/>
        <rdfs:domain rdf:resource="#SolidTangibleThing"/>
        <rdfs:range rdf:resource="#SomethingToWear"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="weather">
        <rdfs:label xml:lang="en">weather</rdfs:label>
        <rdfs:comment>The predicate #$weather is used to describe the
            weather at a particular outdoor location.  (#$weather LOC
            WEATHER) means that the #$OutdoorLocation LOC is an instance
            of the #$OutdoorLocationByWeatherType WEATHER.  For example,
            to say that it&apos;s snowy in Lake Tahoe, we would say:
            (#$weather #$LakeTahoe #$Snowy).  Note that multiple sorts
            of conditions can characterize the weather at a given region
            at a given time; thus the truth of (#$weather #$LakeTahoe
            #$Snowy) does not rule out the possiblity of (#$weather
            #$LakeTahoe #$Cloudy) also being true.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#isa"/>
        <rdfs:domain rdf:resource="#OutdoorLocation"/>
        <rdfs:range rdf:resource="#OutdoorLocationByWeatherType"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="webSearchableStrings">
        <rdfs:label xml:lang="en">web searchable strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#termStrings"/>
        <rdfs:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:range rdf:resource="#ProperNameString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="widthOfObject">
        <rdfs:label xml:lang="en">#$widthOfObject</rdfs:label>
        <rdfs:comment>(#$widthOfObject OBJECT WIDTH) means that the
            #$Distance across OBJECT from one side boundary to the
            opposite side boundary is WIDTH.  Side boundaries are
            roughly perpendicular to the top and bottom of the object.
            Note that some objects have widths by virtue of having one
            or more intrinsic default orientations (see
            #$BilateralObject and its specializations), while some
            objects have widths by virtue of having orientations
            determined only in relation to their environments.  In any
            case, having a width requires being  at least
            two-dimensional (see #$TwoOrHigherDimensionalThing).  See
            also #$lengthOfObject, #$heightOfObject, and #$depthOfObject.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#dimensionsOfObject"/>
        <rdfs:domain rdf:resource="#TwoOrHigherDimensionalThing"/>
        <rdfs:range rdf:resource="#Distance"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="windowHasCovering">
        <rdfs:label xml:lang="en">window has covering</rdfs:label>
        <rdfs:comment>A predicate that relates a window to a physical
            covering used to seal it.  (#$windowHasCovering WINDOWCOVER)
            means that the instance WINDOW of #$WindowPortal has as a
            physical covering the instance COVER of #$PortalCovering.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#portalHasCovering"/>
        <rdfs:domain rdf:resource="#WindowPortal"/>
        <rdfs:range rdf:resource="#PortalCovering"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wordHasConstituent">
        <rdfs:label xml:lang="en">word has constituent</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#ComplexWord"/>
        <rdfs:range rdf:resource="#WordConstituent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wordInLanguage">
        <rdfs:label xml:lang="en">word in language</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#subInformation"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#NaturalLanguage"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wordStrings">
        <rdfs:label xml:lang="en">word strings</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.
            (#$wordStrings WORD STRING) states that STRING is one of the
            strings for the word unit WORD in some microtheory.  In
            other words, some #$SpeechPartPredicate is used on WORD to
            relate it to STRING.  This predicate is  #$notAssertible
            since it is concluded from the current state of the
            knowledge base.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#lexicalItemStrings"/>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#CharacterString"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wordViolatesMorphologicalConstraint">
        <rdfs:label xml:lang="en">word violates morphological constraint</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#MorphologicalRuleConstraint"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wordViolatesMorphologicalRule">
        <rdfs:label xml:lang="en">word violates morphological rule</rdfs:label>
        <rdfs:comment>NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT
            STRICTLY PART OF                            CYC&apos;S
            COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC&apos;S
            NL SYSTEM,                               WHICH IS USED TO
            RELATE NATURAL LANGUAGE TO CYC&apos;S COMMON-SENSE
            KNOWLEDGE.                            SEE
            #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.</rdfs:comment>
        <rdfs:domain rdf:resource="#LexicalWord"/>
        <rdfs:range rdf:resource="#AffixRule"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="worksWith">
        <rdfs:label xml:lang="en">works with</rdfs:label>
        <rdfs:comment>This predicate relates two agents (people or
            organizations) who in some way work together.  (#$worksWith
            AG1 AG2) means that #$Agent AG1 and #$Agent AG2 work
            together or cooperate in some activity for mutual benefit.
            They may or may not work for the same employer.  Some types
            of relationships that provide a basis for assertions using
            #$worksWith include:  coworkers in a company, an employee
            and his boss, organizations affiliated in some endeavor, a
            professional and her client, professionals and their
            representatives, a research organization and its
            shareholding companies, a novelist and his or her publishing
            company, an entertainment or arts professional and his or
            her agent.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <rdfs:domain rdf:resource="#Agent"/>
        <rdfs:range rdf:resource="#Agent"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wornOn">
        <rdfs:label xml:lang="en">worn on</rdfs:label>
        <rdfs:comment>This predicate is used to describe on what part of
            an individual&apos;s body a particular device or garment is
            worn.  (#$wornOn ITEM BODYPART) means that ITEM is being
            worn on the body part BODYPART.  #$wornOn can apply to human
            or animal wearers, and the items worn can include clothing,
            jewelry, medical devices, harnesses, carrying devices,
            wigs--basically, anything which can be attached to or borne
            upon a body part without intentionally holding or carrying
            it.  Note that more than one item can be worn on a single
            body part at a single time -- one can simultaneously wear
            eyeglasses and a hat on one&apos;s head.  Also, a single
            item can be worn on multiple body parts at once -- overalls,
            e.g., are worn simultaneously on the shoulders, the torso
            and the legs.  See #$SomethingToWear for its specializations
            of things that can be worn.  See #$wearsClothing, which
            relates entire wearers, rather than body parts, to items
            worn. See #$wornOn-TypeType for a predicate used to relate
            types of items worn to the body parts types they are by
            default worn on.</rdfs:comment>
        <rdfs:subPropertyOf rdf:resource="#supportedBy"/>
        <rdfs:subPropertyOf rdf:resource="#touches"/>
        <rdfs:domain rdf:resource="#SomethingToWear"/>
        <rdfs:range rdf:resource="#AnimalBodyPart"/>
    </owl:ObjectProperty>
    <owl:ObjectProperty rdf:ID="wornOn-TypeType">
        <rdfs:label xml:lang="en">worn on - type type</rdfs:label>
        <rdfs:comment>A binary predicate that relates specializations of
            #$SomethingToWear to specializations of #$AnimalBodyPart.
            (#$wornOn-TypeType ITEM-TYPE BODY-PART-TYPE)  means that by
            default instances of ITEM-TYPE are worn on instances of BODY-PART-TYPE.</rdfs:comment>
        <rdfs:domain rdf:resource="#ExistingObjectType"/>
        <rdfs:range rdf:resource="#AnimalBodyPartType"/>
    </owl:ObjectProperty>
    <owl:DatatypeProperty rdf:ID="stringValue">
        <rdfs:domain rdf:resource="#CharacterString"/>
        <rdfs:range rdf:resource="&xsd;#string"/>
    </owl:DatatypeProperty>
    <owl:DatatypeProperty rdf:ID="dateValue">
        <rdfs:domain rdf:resource="#Date"/>
        <rdfs:range rdf:resource="&xsd;#date"/>
    </owl:DatatypeProperty>
</rdf:RDF>

