<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:9cb02e85-c1f5-4494-98f6-b01008fdb4dc" author="Marco Roos (AID)" title="DiscoveredOMIMDiseaseToRDF">Think especially carefully about the iteration strategies. If the inputs for 'CreateDiscoveredRDF' should be seen as pairs (equal amounts of values that can be viewed as rows in a table) use a dot product. If the diseases come as a list, while other parameters such as ontology URIs are singular you may need to group the singular values together in a dot product, and the whole as a cross product.</s:workflowdescription>
  <s:processor name="OMIM_regexp" boring="true">
    <s:stringconstant>[%#](\d+) (.+)&lt;.*</s:stringconstant>
  </s:processor>
  <s:processor name="ExtractOMIM_id">
    <s:defaults>
      <s:default name="group">1</s:default>
    </s:defaults>
    <s:local>org.embl.ebi.escience.scuflworkers.java.RegularExpressionStringList</s:local>
  </s:processor>
  <s:processor name="OMIM_id">
    <s:defaults>
      <s:default name="string1">OMIM_</s:default>
    </s:defaults>
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringConcat</s:local>
  </s:processor>
  <s:processor name="ExtractOMIM_name">
    <s:defaults>
      <s:default name="group">2</s:default>
    </s:defaults>
    <s:local>org.embl.ebi.escience.scuflworkers.java.RegularExpressionStringList</s:local>
  </s:processor>
  <s:processor name="getUniprotID">
    <s:arbitrarywsdl>
      <s:wsdl>http://bubbles.biosemantics.org:8180/axis/services/SynsetServer/SynsetServer.jws?wsdl</s:wsdl>
      <s:operation>getUniprotID</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="empty_alternative">
    <s:beanshell>
      <s:scriptvalue>alt_empty = "";</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">OMIM_disease</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">alt_empty</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="DefineShortname">
    <s:beanshell>
      <s:scriptvalue>import java.util.regex.*;
String shortname = "";
Pattern p = Pattern.compile("([%#]\\d+) (.+[,;]) (.+)&lt;.*");
Matcher m = p.matcher(OMIMdisease);
if (m.find()) { 
  shortname = m.group(3);
} else {
  p = Pattern.compile("([%#]\\d+) (.*)&lt;.*");
  m = p.matcher(OMIMdisease);
  if (m.find()) shortname = m.group(2);
};</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">OMIMdisease</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">shortname</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="DefineAbbreviation">
    <s:beanshell>
      <s:scriptvalue>import java.util.regex.*;
String abbreviation = "";
Pattern p = Pattern.compile("([%#]\\d+) (.+[,;]) (.+)&lt;.*");
Matcher m = p.matcher(OMIMdisease);
if (m.find()) abbreviation = m.group(3);</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">OMIMdisease</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">abbreviation</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="AddToBioRDFRepository">
    <s:description>Carefully set the iteration strategy taking into account how this workflow receives its input from workflows it may be used in.
In the default case we expect the input of the workflow of this subworkflow to have been tabular (a cross product was set for iteration).</s:description>
    <s:defaults>
      <s:default name="alt_short_name" />
      <s:default name="alt_full_name" />
      <s:default name="alt_abbreviation" />
    </s:defaults>
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:a7c6b8a8-5d6f-4b2e-8c0a-7c5b54666742" author="" title="ProteinDiscoveredDiseases_to_rdf" />
        <s:processor name="DiscoveredDiseaseRDFdoc">
          <s:defaults>
            <s:default name="alt_full_name" />
            <s:default name="alt_abbreviation" />
            <s:default name="alt_short_name" />
          </s:defaults>
          <s:beanshell>
            <s:scriptvalue>/*
Variables (all a Plain Text):
workflowURI
associatedProtein
disease_id
full_name
abbreviation
short_name
alt_full_nam
alt_abbreviation
alt_short_name

RDFformat
rdf_document
data_URI
*/

// http://rdf.adaptivedisclosure.org/~marco/BioAID/Preliminary/Workflows/BeanshellScrtips/DiscoveredDiseaseRDFdoc.java
// D://Marco/adaptivedisclosure.org/public_html/BioAID/Preliminary/Workflows/BeanshellScrtips/DiscoveredDiseaseRDFdoc.java

// Comment: a lot of URIs (namespaces of ontology elements) are hard-coded here; I would like to find ways to make it less so
// 		perhaps by asking a user to select the right elements from a list which may have been compiled from a search in the ontology on keyword or label value

// Notation
String RDFformat = "rdfxml";

//data or base URI
data_URI = "http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredDiseases.owl";

//Concepts
String discdisCon = "http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredDiseases.owl#DiscoveredDisease";

//Properties
String hasDiscStatProp = "disc:discoveredThroughProcedure";
String assocproteinProp = "edis:associatedWith";
String abbrevProp = "edis:abbreviation";
String fullnameProp = "edis:full_name";
String shortnameProp = "edis:short_name";

//Individuals
String diseaseInd = "http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredDiseases.owl#" + disease_id;
String discoveryInd = "http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredDiseases.owl#" + workflowURI;
String assocProteinInd = "http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredDiseases.owl#" + associatedProtein;

//Relations (rdfxml):
String rdf_doc;
String oftypestring = " rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\"";
String oftypeURI = " rdf:datatype=\"http://www.w3.org/2001/XMLSchema#anyURI\"";

//header
rdf_doc = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n";
rdf_doc = rdf_doc + "&lt;rdf:RDF\n	xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n	xmlns:edis=\"http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Proto-ontology/EnzymeDisease.owl#\"\n	xmlns:disc=\"http://rdf.adaptivedisclosure.org/owl/BioAID/myModel/Enriched-ontology/DiscoveredEntities.owl#\"\n	xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"&gt;\n";

//body
rdf_doc = rdf_doc + "&lt;rdf:Description rdf:about=\"" + diseaseInd + "\"&gt;\n";
rdf_doc = rdf_doc + "	&lt;rdf:type rdf:resource=\"" + discdisCon + "\"/&gt;\n";
rdf_doc = rdf_doc + "	&lt;rdfs:label " + oftypeURI + "&gt;" + disease_id + "&lt;/rdfs:label&gt;\n";
rdf_doc = rdf_doc + "	&lt;" + hasDiscStatProp + " rdf:resource=\"" + discoveryInd + "\"/&gt;\n";
rdf_doc = rdf_doc + "	&lt;" + assocproteinProp + " rdf:resource=\"" + assocProteinInd + "\"/&gt;\n";
if (abbreviation.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + abbrevProp + oftypestring + "&gt;" + abbreviation + "&lt;/" + abbrevProp + "&gt;\n"; }
if (full_name.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + fullnameProp + oftypestring + "&gt;" + full_name + "&lt;/" + fullnameProp + "&gt;\n"; }
if (short_name.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + shortnameProp + oftypestring + "&gt;" + short_name + "&lt;/" + shortnameProp + "&gt;\n"; }
if (alt_abbreviation.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + abbrevProp + oftypestring + "&gt;" + alt_abbreviation + "&lt;/" + abbrevProp + "&gt;\n"; }
if (alt_full_name.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + fullnameProp + oftypestring + "&gt;" + alt_full_name + "&lt;/" + fullnameProp + "&gt;\n"; }
if (alt_short_name.length()&gt;0) 
	{ rdf_doc = rdf_doc + "	&lt;" + shortnameProp + oftypestring + "&gt;" + alt_short_name + "&lt;/" + shortnameProp + "&gt;\n"; }

//footer
rdf_doc = rdf_doc + "&lt;/rdf:Description&gt;\n&lt;/rdf:RDF&gt;\n";
	
rdf_document = rdf_doc;</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">workflowURI</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">disease_id</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">full_name</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">abbreviation</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">short_name</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">alt_full_name</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">alt_abbreviation</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">alt_short_name</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">associatedProtein</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/plain'">RDFformat</s:beanshelloutput>
              <s:beanshelloutput s:syntactictype="'text/plain'">rdf_document</s:beanshelloutput>
              <s:beanshelloutput s:syntactictype="'text/plain'">data_URI</s:beanshelloutput>
            </s:beanshelloutputlist>
            <s:dependencies s:classloader="iteration" />
          </s:beanshell>
          <s:iterationstrategy>
            <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
              <i:iterator name="workflowURI" />
              <i:iterator name="associatedEnzyme" />
              <i:iterator name="disease_id" />
              <i:iterator name="full_name" />
              <i:iterator name="abbreviation" />
              <i:iterator name="short_name" />
              <i:iterator name="alt_full_name" />
              <i:iterator name="alt_abbreviation" />
              <i:iterator name="alt_short_name" />
              <i:iterator name="enriched_ontologyURI" />
              <i:iterator name="rdf_header" />
              <i:iterator name="rdf_footer" />
            </i:dot>
          </s:iterationstrategy>
        </s:processor>
        <s:processor name="AddToBioRepository">
          <s:workflow>
            <s:scufl version="0.2" log="0">
              <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:1f4a075e-9b2b-419c-a22d-4d9dd71925e5" author="" title="AddRDF_to_AIDA_biorepository" />
              <s:processor name="addRdf">
                <s:arbitrarywsdl>
                  <s:wsdl>http://ws.adaptivedisclosure.org/axis/services/RepositoryWS?wsdl</s:wsdl>
                  <s:operation>addRdf</s:operation>
                </s:arbitrarywsdl>
              </s:processor>
              <s:processor name="AIDA_bio_repository">
                <s:workflow>
                  <s:xscufllocation>http://rdf.adaptivedisclosure.org/~marco/BioAID/Public/Workflows/UtilityWorkflows/AIDA_rdf_bio_repository_MR1_demo.xml</s:xscufllocation>
                </s:workflow>
              </s:processor>
              <s:link source="AIDA_bio_repository:password" sink="addRdf:password" />
              <s:link source="AIDA_bio_repository:repository" sink="addRdf:repository" />
              <s:link source="AIDA_bio_repository:username" sink="addRdf:username" />
              <s:link source="data" sink="addRdf:data" />
              <s:link source="data_uri" sink="addRdf:data_uri" />
              <s:link source="rdf_format" sink="addRdf:rdf_format" />
              <s:link source="AIDA_bio_repository:server_url" sink="addRdf:server_url" />
              <s:source name="rdf_format" />
              <s:source name="data" />
              <s:source name="data_uri" />
            </s:scufl>
          </s:workflow>
        </s:processor>
        <s:link source="abbreviation" sink="DiscoveredDiseaseRDFdoc:abbreviation" />
        <s:link source="alt_abbreviation" sink="DiscoveredDiseaseRDFdoc:alt_abbreviation" />
        <s:link source="alt_full_name" sink="DiscoveredDiseaseRDFdoc:alt_full_name" />
        <s:link source="alt_short_name" sink="DiscoveredDiseaseRDFdoc:alt_short_name" />
        <s:link source="diseaseID" sink="DiscoveredDiseaseRDFdoc:disease_id" />
        <s:link source="full_name" sink="DiscoveredDiseaseRDFdoc:full_name" />
        <s:link source="short_name" sink="DiscoveredDiseaseRDFdoc:short_name" />
        <s:link source="workflowURI" sink="DiscoveredDiseaseRDFdoc:workflowURI" />
        <s:link source="DiscoveredDiseaseRDFdoc:RDFformat" sink="AddToBioRepository:rdf_format" />
        <s:link source="DiscoveredDiseaseRDFdoc:data_URI" sink="AddToBioRepository:data_uri" />
        <s:link source="DiscoveredDiseaseRDFdoc:rdf_document" sink="AddToBioRepository:data" />
        <s:link source="associatedProtein" sink="DiscoveredDiseaseRDFdoc:associatedProtein" />
        <s:link source="DiscoveredDiseaseRDFdoc:rdf_document" sink="OMIMdiseaseRDFdoc" />
        <s:source name="short_name">
          <s:metadata>
            <s:description>Example: APNEA</s:description>
          </s:metadata>
        </s:source>
        <s:source name="full_name">
          <s:metadata>
            <s:description>Example: APNEA, OBSTRUCTIVE SLEEP</s:description>
          </s:metadata>
        </s:source>
        <s:source name="abbreviation">
          <s:metadata>
            <s:description>Example: APNEA</s:description>
          </s:metadata>
        </s:source>
        <s:source name="alt_short_name">
          <s:metadata>
            <s:description>If none exists define this input with nothing (zero length string)</s:description>
          </s:metadata>
        </s:source>
        <s:source name="alt_full_name">
          <s:metadata>
            <s:description>If none exists define this input with nothing (zero length string)</s:description>
          </s:metadata>
        </s:source>
        <s:source name="alt_abbreviation">
          <s:metadata>
            <s:description>If none exists define this input with nothing (zero length string)</s:description>
          </s:metadata>
        </s:source>
        <s:source name="workflowURI">
          <s:metadata>
            <s:description>Example:
http://ws.adaptivedisclosure.org/workflows/BioAID/BioAID_EnrichOntology_MR1.xml</s:description>
          </s:metadata>
        </s:source>
        <s:source name="associatedProtein">
          <s:metadata>
            <s:description>Example: EZH2</s:description>
          </s:metadata>
        </s:source>
        <s:source name="diseaseID">
          <s:metadata>
            <s:description>For instance an OMIM id or the abbreviation of the disease.</s:description>
          </s:metadata>
        </s:source>
        <s:sink name="OMIMdiseaseRDFdoc" />
      </s:scufl>
    </s:workflow>
    <s:iterationstrategy>
      <i:cross xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
        <i:cross>
          <i:dot>
            <i:iterator name="diseaseID" />
            <i:iterator name="alt_abbreviation" />
            <i:iterator name="alt_full_name" />
            <i:iterator name="alt_short_name" />
            <i:iterator name="short_name" />
            <i:iterator name="abbreviation" />
            <i:iterator name="full_name" />
          </i:dot>
          <i:iterator name="associatedProtein" />
        </i:cross>
        <i:iterator name="workflowURI" />
      </i:cross>
    </s:iterationstrategy>
  </s:processor>
  <s:processor name="OMIM_URL_stub" boring="true">
    <s:stringconstant>http&amp;#58;//www.ncbi.nlm.nih.gov/entrez/dispomim.cgi?id=</s:stringconstant>
  </s:processor>
  <s:processor name="Concatenate_two_strings">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringConcat</s:local>
  </s:processor>
  <s:link source="OMIM_disease" sink="DefineAbbreviation:OMIMdisease" />
  <s:link source="OMIM_disease" sink="DefineShortname:OMIMdisease" />
  <s:link source="OMIM_disease" sink="ExtractOMIM_id:stringlist" />
  <s:link source="OMIM_disease" sink="ExtractOMIM_name:stringlist" />
  <s:link source="DefineAbbreviation:abbreviation" sink="AddToBioRDFRepository:abbreviation" />
  <s:link source="DefineShortname:shortname" sink="AddToBioRDFRepository:short_name" />
  <s:link source="ExtractOMIM_name:filteredlist" sink="AddToBioRDFRepository:full_name" />
  <s:link source="OMIM_disease" sink="empty_alternative:OMIM_disease" />
  <s:link source="OMIM_regexp:value" sink="ExtractOMIM_id:regex" />
  <s:link source="OMIM_regexp:value" sink="ExtractOMIM_name:regex" />
  <s:link source="workflowURI" sink="AddToBioRDFRepository:workflowURI" />
  <s:link source="ExtractOMIM_id:filteredlist" sink="OMIM_id:string2" />
  <s:link source="empty_alternative:alt_empty" sink="AddToBioRDFRepository:alt_abbreviation" />
  <s:link source="empty_alternative:alt_empty" sink="AddToBioRDFRepository:alt_full_name" />
  <s:link source="empty_alternative:alt_empty" sink="AddToBioRDFRepository:alt_short_name" />
  <s:link source="getUniprotID:getUniprotIDReturn" sink="AddToBioRDFRepository:associatedProtein" />
  <s:link source="query_protein" sink="getUniprotID:term" />
  <s:link source="AddToBioRDFRepository:OMIMdiseaseRDFdoc" sink="OMIMdiseaseRDFdoc" />
  <s:link source="OMIM_id:output" sink="OMIM_id" />
  <s:link source="getUniprotID:getUniprotIDReturn" sink="UniProtID" />
  <s:link source="query_protein" sink="query_prot" />
  <s:link source="Concatenate_two_strings:output" sink="AddToBioRDFRepository:diseaseID" />
  <s:link source="Concatenate_two_strings:output" sink="OMIM_URL" />
  <s:link source="ExtractOMIM_id:filteredlist" sink="Concatenate_two_strings:string2" />
  <s:link source="OMIM_URL_stub:value" sink="Concatenate_two_strings:string1" />
  <s:source name="OMIM_disease" />
  <s:source name="workflowURI" />
  <s:source name="query_protein" />
  <s:sink name="OMIMdiseaseRDFdoc" />
  <s:sink name="UniProtID" />
  <s:sink name="OMIM_id" />
  <s:sink name="query_prot" />
  <s:sink name="OMIM_URL" />
</s:scufl>

