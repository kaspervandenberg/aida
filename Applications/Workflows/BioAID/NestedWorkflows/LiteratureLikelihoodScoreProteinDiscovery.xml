<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:abc3350b-e618-4fdd-8317-cbf5c298804d" author="Marco Roos (for AID)" title="LiteratureLikelihoodScoreProteinDiscovery">This workflow calculates a min log likelihood score for the combination of a discoverd protein and a protein of interest (the query protein). Note that at the moment the total count of medline papers, which is part of the formula, is hard coded and not exact. Given its size this should not matter that much, and certainly not in comparison with other likelihoods calculated using the same value.</s:workflowdescription>
  <s:processor name="Flatten_query_list">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="PubMedTotal" boring="true">
    <s:stringconstant>17000000</s:stringconstant>
  </s:processor>
  <s:processor name="Flatten_discovery_list">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="Flatten_query_discovered_list">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="Ready" boring="true">
    <s:stringconstant>edit me!</s:stringconstant>
  </s:processor>
  <s:processor name="Flatten_query_frequency_list">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="MinLogLikelihood">
    <s:beanshell>
      <s:scriptvalue>/*
Mijn voorstel is een -log likelihood ratio:
-log ( (#QD_expected / #N) / (#QD / #N) )
waarbij
#QD : het gevonden aantal documenten met het Query eiwit Q, en het discovered eiwit D
#QD_expected = (#Q*#D)/#N : het verwachte aantal documenten met Q en D, gebaseerd op de gevonden aantallen #Q en #D

Edgar: De maat die je beschrijft lijkt erg veel op PMI (point-wise mutual information), wellicht dat je daar wat aan hebt. 
*/

/* variables
	query_frequency (#Q)
	discovered_frequency (#D)
	query_discovered_frequency (#QD)
	total_frequency (#N)
return
	minloglikelihood
*/
import java.lang.Math;
// import edu.uah.math.distributions;

double q = (double) Integer.parseInt( query_frequency );
double d = (double) Integer.parseInt( discovered_frequency );
double qd = (double) Integer.parseInt( query_discovered_frequency );
double n = (double) Integer.parseInt( total_frequency );

double qd_expected = (double) ((q*d)/n);

Double mll = (Double) new Double((double) -( ((double) Math.log(qd_expected/n)) - ((double) Math.log(qd/n))));

minloglikelihood = mll.toString();

// minloglikelihood = (String) "test";</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">query_frequency</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">discovered_frequency</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">query_discovered_frequency</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">total_frequency</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">minloglikelihood</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
    <s:iterationstrategy>
      <i:cross xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
        <i:dot>
          <i:iterator name="discovered_frequency" />
          <i:iterator name="query_discovered_frequency" />
          <i:iterator name="query_frequency" />
        </i:dot>
        <i:iterator name="total_frequency" />
      </i:cross>
    </s:iterationstrategy>
  </s:processor>
  <s:processor name="CloneQueries">
    <s:beanshell>
      <s:scriptvalue>import java.util.*;

List newlist = new ArrayList();

for (int i=0; i&lt;((int) Integer.parseInt(copy_number.toString())); i++) {
	newlist.add(input);
}

clones=newlist;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">copy_number</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">clones</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
    <s:iterationstrategy>
      <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
        <i:iterator name="input" />
        <i:iterator name="copy_number" />
      </i:dot>
    </s:iterationstrategy>
  </s:processor>
  <s:processor name="CountListElements">
    <s:beanshell>
      <s:scriptvalue>count = list.size();</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="l('text/xml')">list</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="l('text/plain')">count</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="Flatten_querydiscoveredfrequency">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="Flatten_discovered_frequency_list">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="CloneFrequencies">
    <s:beanshell>
      <s:scriptvalue>import java.util.*;

List newlist = new ArrayList();

for (int i=0; i&lt;((int) Integer.parseInt(copy_number.toString())); i++) {
	newlist.add(input);
}

clones=newlist;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">copy_number</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">clones</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
    <s:iterationstrategy>
      <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
        <i:iterator name="input" />
        <i:iterator name="copy_number" />
      </i:dot>
    </s:iterationstrategy>
  </s:processor>
  <s:processor name="Flatten_mll">
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.FlattenList
      <s:extensions>
        <s:flattenlist s:depth="2" />
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="QueryDiscoveredFrequency">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:abc3350b-e618-4fdd-8317-cbf5c298804d" author="" title="QueryFrequencyInCorpus" />
        <s:processor name="XPath_From_Text">
          <s:local>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</s:local>
        </s:processor>
        <s:processor name="AIDA_search">
          <s:defaults>
            <s:default name="maxHits">1</s:default>
            <s:default name="defaultField">content</s:default>
          </s:defaults>
          <s:arbitrarywsdl>
            <s:wsdl>http://aida.science.uva.nl:9999/axis/services/SearcherWS?wsdl</s:wsdl>
            <s:operation>search</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="DocumentsIndex" boring="true">
          <s:stringconstant>MedLine</s:stringconstant>
        </s:processor>
        <s:processor name="Flatten_list">
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.FlattenList
            <s:extensions>
              <s:flattenlist s:depth="2" />
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="ExtractCountXpath" boring="true">
          <s:stringconstant>./aid:result/@total</s:stringconstant>
        </s:processor>
        <s:processor name="PoiAndDpQuery">
          <s:beanshell>
            <s:scriptvalue>poi_and_dp_query = "(" + poi_query + ") AND (" + dp_query + ")";</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">poi_query</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">dp_query</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/plain'">poi_and_dp_query</s:beanshelloutput>
            </s:beanshelloutputlist>
            <s:dependencies s:classloader="iteration" />
          </s:beanshell>
        </s:processor>
        <s:link source="AIDA_search:searchReturn" sink="XPath_From_Text:xml-text" />
        <s:link source="DocumentsIndex:value" sink="AIDA_search:index" />
        <s:link source="ExtractCountXpath:value" sink="XPath_From_Text:xpath" />
        <s:link source="XPath_From_Text:nodelist" sink="Flatten_list:inputlist" />
        <s:link source="discovered_protein" sink="PoiAndDpQuery:dp_query" />
        <s:link source="query" sink="PoiAndDpQuery:poi_query" />
        <s:link source="PoiAndDpQuery:poi_and_dp_query" sink="AIDA_search:queryString" />
        <s:link source="Flatten_list:outputlist" sink="poidp_count_in_corpus" />
        <s:link source="PoiAndDpQuery:poi_and_dp_query" sink="poi_and_dp_query" />
        <s:source name="query" />
        <s:source name="discovered_protein" />
        <s:sink name="poidp_count_in_corpus" />
        <s:sink name="poi_and_dp_query" />
      </s:scufl>
    </s:workflow>
    <s:iterationstrategy>
      <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">
        <i:iterator name="discovered_protein" />
        <i:iterator name="query" />
      </i:dot>
    </s:iterationstrategy>
  </s:processor>
  <s:processor name="DiscoveredFrequency">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:abc3350b-e618-4fdd-8317-cbf5c298804d" author="" title="QueryFrequencyInCorpus" />
        <s:processor name="DocumentsIndex" boring="true">
          <s:stringconstant>MedLine</s:stringconstant>
        </s:processor>
        <s:processor name="AIDA_search">
          <s:defaults>
            <s:default name="maxHits">1</s:default>
            <s:default name="defaultField">content</s:default>
          </s:defaults>
          <s:arbitrarywsdl>
            <s:wsdl>http://aida.science.uva.nl:9999/axis/services/SearcherWS?wsdl</s:wsdl>
            <s:operation>search</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="Flatten_list">
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.FlattenList
            <s:extensions>
              <s:flattenlist s:depth="2" />
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="RelativeFrequencyPoiInCorpus">
          <s:defaults>
            <s:default name="corpus_total">17000000</s:default>
          </s:defaults>
          <s:beanshell>
            <s:scriptvalue>/* variables
	poi_count_in_corpus
	corpus_total
return
	relative_frequency
*/
import java.lang.Math;

Double rf = new Double(-Math.log((double)(Integer.parseInt( poi_count_in_corpus ) ) / ((double) (Integer.parseInt( corpus_total )))));

relative_frequency = rf.toString();</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">corpus_total</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">poi_count_in_corpus</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/plain'">relative_frequency</s:beanshelloutput>
            </s:beanshelloutputlist>
            <s:dependencies s:classloader="iteration" />
          </s:beanshell>
        </s:processor>
        <s:processor name="XPath_From_Text">
          <s:local>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</s:local>
        </s:processor>
        <s:processor name="ExtractCountXpath" boring="true">
          <s:stringconstant>./aid:result/@total</s:stringconstant>
        </s:processor>
        <s:link source="AIDA_search:searchReturn" sink="XPath_From_Text:xml-text" />
        <s:link source="ExtractCountXpath:value" sink="XPath_From_Text:xpath" />
        <s:link source="Flatten_list:outputlist" sink="RelativeFrequencyPoiInCorpus:poi_count_in_corpus" />
        <s:link source="XPath_From_Text:nodelist" sink="Flatten_list:inputlist" />
        <s:link source="corpus_total_doc_count" sink="RelativeFrequencyPoiInCorpus:corpus_total" />
        <s:link source="DocumentsIndex:value" sink="AIDA_search:index" />
        <s:link source="query" sink="AIDA_search:queryString" />
        <s:link source="Flatten_list:outputlist" sink="poi_count_in_corpus" />
        <s:link source="RelativeFrequencyPoiInCorpus:relative_frequency" sink="min_log_relative_frequency_poi_in_corpus" />
        <s:link source="query" sink="poi_query" />
        <s:source name="query" />
        <s:source name="corpus_total_doc_count" />
        <s:sink name="poi_count_in_corpus" />
        <s:sink name="min_log_relative_frequency_poi_in_corpus" />
        <s:sink name="poi_query" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="QueryFrequency">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:abc3350b-e618-4fdd-8317-cbf5c298804d" author="" title="QueryFrequencyInCorpus" />
        <s:processor name="Flatten_list">
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.FlattenList
            <s:extensions>
              <s:flattenlist s:depth="2" />
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="AIDA_search">
          <s:defaults>
            <s:default name="maxHits">1</s:default>
            <s:default name="defaultField">content</s:default>
          </s:defaults>
          <s:arbitrarywsdl>
            <s:wsdl>http://aida.science.uva.nl:9999/axis/services/SearcherWS?wsdl</s:wsdl>
            <s:operation>search</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="XPath_From_Text">
          <s:local>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</s:local>
        </s:processor>
        <s:processor name="ExtractCountXpath" boring="true">
          <s:stringconstant>./aid:result/@total</s:stringconstant>
        </s:processor>
        <s:processor name="DocumentsIndex" boring="true">
          <s:stringconstant>MedLine</s:stringconstant>
        </s:processor>
        <s:processor name="RelativeFrequencyPoiInCorpus">
          <s:defaults>
            <s:default name="corpus_total">17000000</s:default>
          </s:defaults>
          <s:beanshell>
            <s:scriptvalue>/* variables
	poi_count_in_corpus
	corpus_total
return
	relative_frequency
*/
import java.lang.Math;

Double rf = new Double(-Math.log((double)(Integer.parseInt( poi_count_in_corpus ) ) / ((double) (Integer.parseInt( corpus_total )))));

relative_frequency = rf.toString();</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">corpus_total</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">poi_count_in_corpus</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/plain'">relative_frequency</s:beanshelloutput>
            </s:beanshelloutputlist>
            <s:dependencies s:classloader="iteration" />
          </s:beanshell>
        </s:processor>
        <s:link source="AIDA_search:searchReturn" sink="XPath_From_Text:xml-text" />
        <s:link source="ExtractCountXpath:value" sink="XPath_From_Text:xpath" />
        <s:link source="Flatten_list:outputlist" sink="RelativeFrequencyPoiInCorpus:poi_count_in_corpus" />
        <s:link source="XPath_From_Text:nodelist" sink="Flatten_list:inputlist" />
        <s:link source="corpus_total_doc_count" sink="RelativeFrequencyPoiInCorpus:corpus_total" />
        <s:link source="DocumentsIndex:value" sink="AIDA_search:index" />
        <s:link source="query" sink="AIDA_search:queryString" />
        <s:link source="Flatten_list:outputlist" sink="poi_count_in_corpus" />
        <s:link source="RelativeFrequencyPoiInCorpus:relative_frequency" sink="min_log_relative_frequency_poi_in_corpus" />
        <s:link source="query" sink="poi_query" />
        <s:source name="query" />
        <s:source name="corpus_total_doc_count" />
        <s:sink name="poi_count_in_corpus" />
        <s:sink name="min_log_relative_frequency_poi_in_corpus" />
        <s:sink name="poi_query" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:link source="DiscoveredFrequency:poi_count_in_corpus" sink="Flatten_discovered_frequency_list:inputlist" />
  <s:link source="DiscoveredFrequency:poi_query" sink="Flatten_discovery_list:inputlist" />
  <s:link source="Flatten_discovered_frequency_list:outputlist" sink="MinLogLikelihood:discovered_frequency" />
  <s:link source="Flatten_discovery_list:outputlist" sink="QueryDiscoveredFrequency:discovered_protein" />
  <s:link source="Flatten_query_discovered_list:outputlist" sink="MinLogLikelihood:query_discovered_frequency" />
  <s:link source="PubMedTotal:value" sink="DiscoveredFrequency:corpus_total_doc_count" />
  <s:link source="PubMedTotal:value" sink="MinLogLikelihood:total_frequency" />
  <s:link source="PubMedTotal:value" sink="QueryFrequency:corpus_total_doc_count" />
  <s:link source="QueryDiscoveredFrequency:poidp_count_in_corpus" sink="Flatten_query_discovered_list:inputlist" />
  <s:link source="QueryFrequency:poi_count_in_corpus" sink="Flatten_query_frequency_list:inputlist" />
  <s:link source="discovered_protein" sink="CountListElements:list" />
  <s:link source="CloneFrequencies:clones" sink="MinLogLikelihood:query_frequency" />
  <s:link source="CountListElements:count" sink="CloneFrequencies:copy_number" />
  <s:link source="CountListElements:count" sink="CloneQueries:copy_number" />
  <s:link source="Flatten_discovered_frequency_list:outputlist" sink="discovered_frequency" />
  <s:link source="Flatten_mll:outputlist" sink="min_log_likelihood" />
  <s:link source="Flatten_query_discovered_list:outputlist" sink="Flatten_querydiscoveredfrequency:inputlist" />
  <s:link source="Flatten_query_frequency_list:outputlist" sink="CloneFrequencies:input" />
  <s:link source="Flatten_query_list:outputlist" sink="CloneQueries:input" />
  <s:link source="MinLogLikelihood:minloglikelihood" sink="Flatten_mll:inputlist" />
  <s:link source="QueryFrequency:poi_query" sink="Flatten_query_list:inputlist" />
  <s:link source="discovered_protein" sink="DiscoveredFrequency:query" />
  <s:link source="query" sink="QueryDiscoveredFrequency:query" />
  <s:link source="query" sink="QueryFrequency:query" />
  <s:link source="Flatten_query_frequency_list:outputlist" sink="query_frequency" />
  <s:link source="Flatten_querydiscoveredfrequency:outputlist" sink="query_discovered_frequency" />
  <s:source name="query">
    <s:metadata>
      <s:description>E.g. EZH2</s:description>
    </s:metadata>
  </s:source>
  <s:source name="discovered_protein">
    <s:metadata>
      <s:description>E.g. HDAC1</s:description>
    </s:metadata>
  </s:source>
  <s:sink name="query_frequency" />
  <s:sink name="discovered_frequency" />
  <s:sink name="min_log_likelihood">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/plain</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
  <s:sink name="query_discovered_frequency" />
  <s:coordination name="Ready_BLOCKON_MinLogLikelihood">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>MinLogLikelihood</s:target>
    </s:condition>
    <s:action>
      <s:target>Ready</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
</s:scufl>

