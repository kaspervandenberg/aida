<?xml version="1.0" encoding="UTF-8"?>
<project name="search" default="default" basedir=".">

	<description>Builds, tests, and runs the project search plus some additional tasks. Make sure the proper environment variables are set.</description>
	<import file="nbproject/build-impl.xml"/>

	<!-- These three statements each look for a build.properties file in different locations -->
	<property file="${user.home}/${ant.project.name}-build.properties"/>
	<property file="${user.home}/build.properties"/>
	<property file="build.properties"/>
	<!-- Settings defined below will override those in the the abovefound property files -->
	<!-- If settings below are left empty, the property file will be used -->

	<!-- These settings can/should modified on a per-installation basis -->
	<property name="catalina.home"      value=""/>
	<property name="host.name"          value=""/>
	<property name="manager.username"   value=""/>
	<property name="manager.password"   value=""/>
	<property name="manager.port"       value=""/>

	<property name="sesame.username"    value=""/>
	<property name="sesame.password"    value=""/>
	<property name="sesame.repository"  value=""/>

	<property name="sesame.namespace"  value="http://www.afsg.nl/www_foodontology_nl/data/documenten/Ontology/TNO_FI-Ontology_2007_jan.owl"/>

	<!-- These settings should be left as is -->
	<property name="manager.url"        value="http://${host.name}:${manager.port}/manager"/>
	<property name="axis.admin-service" value="http://${host.name}:${manager.port}/axis/services/AdminService"/>
	<property name="app.name"           value="${ant.project.name}"/>
	<property name="app.path"           value="/${app.name}"/>
	<property name="lib.directory"      value="${basedir}/web/WEB-INF/lib"/>

	<!-- Load environment variables: -->
	<property environment="env"/>

	<path id="cmdLine.classpath">
		<pathelement location="${basedir}/build/web/WEB-INF/classes/"/>
		<fileset dir="${lib.directory}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- If you ever want to recreate/redefine the searcher's output xml -->
	<taskdef name="xmlbean"  classname="org.apache.xmlbeans.impl.tool.XMLBean"
                             classpath="${lib.directory}/xbean.jar:${lib.directory}/jsr173_1.0_api.jar"/>

	<!-- Not needed, we're using hot deployment -->
	<!--
    <taskdef name="deploy"   classname="org.apache.catalina.ant.DeployTask"/>
    <taskdef name="list"     classname="org.apache.catalina.ant.ListTask"/>
    <taskdef name="reload"   classname="org.apache.catalina.ant.ReloadTask"/>
    <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"/>
    -->
	
	<!-- To make sure we replace the proper things before compiling -->
	<target name="-pre-compile" depends="replace"/>

	<!-- Looks through the code and replaces:
				- sesame rep.
				- sesame username
				- sesame pw
				- sesame namespace
				- this machine's hostname 
				- the port number on which Tomcat lives
	 -->
	<target name="replace">

		<!--exec executable="hostname" outputproperty="host.name">
			<arg value="-f"/>
		</exec-->

		<replace dir="web/resources/" value="${sesame.repository}">
			<include name="**/*.js"/>
			<replacetoken>###sesame-repository###</replacetoken>
		</replace>

		<replace dir="web/resources/" value="${sesame.username}">
			<include name="**/*.js"/>
			<replacetoken>###sesame-user###</replacetoken>
		</replace>

		<replace dir="web/resources/" value="${sesame.password}">
			<include name="**/*.js"/>
			<replacetoken>###sesame-password###</replacetoken>
		</replace>

		<replace dir="web/resources/" value="${sesame.namespace}">
			<include name="**/*.js"/>
			<replacetoken>###sesame-namespace###</replacetoken>
		</replace>

		<replace dir="src/" value="${host.name}">
			<include name="**/*.java"/>
			<replacetoken>localhost</replacetoken>
		</replace>

		<replace dir="src/" value="${manager.port}">
			<include name="**/*.java"/>
			<replacetoken>8080</replacetoken>
		</replace>

		<replace dir="web/" value="http://${host.name}:${manager.port}" token="http://localhost:8080">
			<include name="**/*.js"/>
		</replace>

	</target>

	<!-- Override wacky NetBeans target -->
	<target name="run-deploy" depends="init,compile,compile-jsps,-do-compile-single-jsp,dist,install"
        description="Reload application on servlet container">
	</target>
	
	<!-- Sanity checks -->
	<target depends="init, install" if="have.tests" name="-pre-test-run">

		<available property="_indexdir" file="${env.INDEXDIR}" type="dir"/>
		<available property="_testindexdir" file="${env.INDEXDIR}/testindex" type="dir"/>

		<fail message="To succesfully run this test, you first need to run `ant test` in the ../Indexer directory">
			<condition>
				<or>
					<not>
						<isset property="_indexdir" />
					</not>
					<not>
						<isset property="_testindexdir" />
					</not>
				</or>
			</condition>
		</fail>

		<mkdir dir="${build.test.results.dir}"/>
	</target>

	<!-- More sanity checks -->
	<target name="-pre-init">

		<echo message="INDEXDIR:           '${env.INDEXDIR}'" />
		<echo message="manager.port:       '${manager.port}'" />
		<echo message="manager.url:        '${manager.url}'" />
		<echo message="axis.admin-service: '${axis.admin-service}'" />
		<echo message="catalina.home:      '${catalina.home}'" />

		<fail message="You need to define the environment variable INDEXDIR, the directory in which all indexFolders are stored in order to make this work. See the README.txt">
			<condition>
				<or>
					<not>
						<length string="${env.INDEXDIR}" when="greater" trim="true" length="0" />
					</not>
					<not>
						<isset property="env.INDEXDIR"/>
					</not>
				</or>
			</condition>
		</fail>

		<fail message="You need to define catalina.home for deployment onto the Tomcat server">
			<condition>
				<or>
					<not>
						<length string="${catalina.home}" when="greater" trim="true" length="0" />
					</not>
					<not>
						<isset property="catalina.home"/>
					</not>
				</or>
			</condition>
		</fail>

		<fail message="You need to define a manager.port for deployment onto the Tomcat server">
			<condition>
				<or>
					<not>
						<length string="${manager.port}" when="greater" trim="true" length="0" />
					</not>
					<not>
						<isset property="manager.port"/>
					</not>
				</or>
			</condition>
		</fail>

		<fail message="You need to define a manager.url for deployment onto the Tomcat server">
			<condition>
				<or>
					<not>
						<length string="${manager.url}" when="greater" trim="true" length="0" />
					</not>
					<not>
						<isset property="manager.url"/>
					</not>
				</or>
			</condition>
		</fail>

	</target>

	<!-- Overriding NetBeans post-init target by defining task which will be used to
    deploy and undeploy the web service -->
	<target name="-post-init">

		<path id="axis.classpath">
			<fileset dir="${catalina.home}/webapps/axis/WEB-INF/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef resource="axis-tasks.properties" classpathref="axis.classpath" />

		<!-- copy the source files into the WAR tree-->
		<copy todir="${webinf.dir}/src">
			<fileset dir="${src.dir}">
				<filename name="**/*.java"/>
			</fileset>
		</copy>

	</target>

	<!-- XMLBeans target -->
	<target name="compileXMLschema" depends="init">
		<xmlbean schema="web/result.xsd" destfile="${lib.directory}/result.jar"
                classpath="${lib.directory}/xbean.jar:${lib.directory}/jsr173_1.0_api.jar"/>
	</target>

	<target name="install" depends="compile, dist"
        description="Install application to servlet container">

		<!-- copy the required war into Tomcat -->
		<copy file="${dist.war}" todir="${catalina.home}/webapps"/>

		<!-- copy the required libs into axis-->
		<copy todir="${catalina.home}/webapps/axis/WEB-INF/lib">
			<fileset dir="${lib.directory}"/>
		</copy>

		<!-- copy the required files into AXIS -->
		<copy todir="${catalina.home}/webapps/axis/WEB-INF/classes">
			<fileset dir="${build.classes.dir}"/>
			<fileset dir="${lib.directory}">
				<filename name="*.jar"/>
        <not>
          <filename name="axis.jar"/>
        </not>
        <not>
          <filename name="jaxrpc.jar"/>
        </not>
        <not>
          <filename name="servlet-api.jar"/>
        </not>
        <not>
          <filename name="standard.jar"/>
        </not>
			</fileset>
		</copy>

		<!-- deploy the web sevice -->
		<axis-admin port="${manager.port}" hostname="localhost"
            failonerror="true" servletpath="/axis/services/AdminService"
            debug="true" xmlfile="deploy.wsdd" />

		<!-- Copy ${ant.project.name}.xml into Tomcat, to initiate query logging -->
		<copy file="${basedir}/web/WEB-INF/${ant.project.name}.xml" todir="${catalina.home}/conf/Catalina/localhost"/>

		<!-- Copy default stopwords file into IndexDir -->
		<copy file="${basedir}/web/stopwords.txt" todir="${env.INDEXDIR}"/>

		<!--
        Copy the Lucene wordnet index into the proper location
        It's nested (dir below dir), because otherwise it would erroneously get picked up by the listIndexWS
        -->
		<copy todir="${env.INDEXDIR}/wordnet/lucene-wordnet-index">
			<fileset dir="${webinf.dir}/lucene-wordnet-index"/>
		</copy>

		<touch file="${catalina.home}/webapps/axis/WEB-INF/web.xml"/>
		<!--touch file="${catalina.home}/webapps/${ant.project.name}/WEB-INF/web.xml"/-->
	</target>

	<target name="remove" depends="init"
        description="Remove application on servlet container">

		<!-- Proper way of doing things -->
		<!--undeploy url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${app.path}"
        /-->
		<!-- remove the web content -->
		<delete includeEmptyDirs="true">
			<fileset dir="${catalina.home}/webapps/${app.name}">
				<!--present targetdir="${basedir}/web/"/-->
			</fileset>
		</delete>
		<delete>
			<fileset file="${catalina.home}/webapps/${app.name}.war">
			</fileset>
		</delete>

		<axis-admin port="${manager.port}" hostname="localhost"
            failonerror="true" servletpath="/axis/services/AdminService"
            debug="true" xmlfile="undeploy.wsdd" />

		<!-- delete all files from AXIS which also exist in build/ folder -->
		<delete includeEmptyDirs="true">
			<fileset dir="${catalina.home}/webapps/axis/WEB-INF/classes">
				<present targetdir="${build.classes.dir}" />
			</fileset>
		</delete>

		<!-- delete all additionally copied files -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${env.INDEXDIR}/wordnet/lucene-wordnet-index" />
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset file="${env.INDEXDIR}/stopwords.txt" />
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset file="${catalina.home}/conf/Catalina/localhost/${ant.project.name}.xml" />
		</delete>

	</target>

	<!-- Unreplace -->
	<target name="-post-clean">

		<exec executable="hostname" outputproperty="host.name">
			<arg value="-f"/>
		</exec>

		<replace dir="web/" value="###sesame-repository###" token="${sesame.repository}">
			<include name="**/*.js"/>
		</replace>

		<replace dir="web/" value="###sesame-user###" token="${sesame.username}">
			<include name="**/*.js"/>
		</replace>

		<replace dir="web/" value="###sesame-password###" token="${sesame.password}">
			<include name="**/*.js"/>
		</replace>

		<replace dir="web/" value="###sesame-namespace###" token="${sesame.namespace}">
			<include name="**/*.js"/>
		</replace>

		<replace dir="src/" value="localhost" token="${host.name}">
			<include name="**/*.java"/>
		</replace>

		<replace dir="src/" value="8080" token="${manager.port}">
			<include name="**/*.java"/>
		</replace>

		<replace dir="web/" value="8080" token="${manager.port}">
			<include name="**/*.java"/>
		</replace>

		<replace dir="web/" value="http://localhost:8080" token="http://${host.name}:${manager.port}">
			<include name="**/*.js"/>
		</replace>

		<!-- remove the source files from the WAR tree-->
		<delete  includeEmptyDirs="true">
			<fileset dir="${webinf.dir}/src">
				<filename name="**/*.java"/>
			</fileset>
		</delete>

	</target>

	<!-- Synonym for run -->
	<target name="reload" depends="run" description="Synonym for run target"/>

	<!--To build a language model for the spelling checker for a Lucene index: -->
	<target name="createModel" depends="compile" description="Used to create a language model file, to use with the didyoumean Webservice. Syntax: ant createModel -Dindex.location=[PATH_TO_INDEX]">
		<fail unless="index.location">Must identify index location. Use: ant createModel -Dindex.location=[PATH_TO_INDEX] (use quotes if neccesary).</fail>
		<fail unless="index.field">Must identify a field to process. Use: ant createModel -Dindex.field=[LUCENE_FIELD]</fail>

		<echo message="Processing: ${index.location}"/>

		<java classname="org.vle.aid.lucene.tools.cmdLineCreateModel"
            fork="true">
			<classpath refid="cmdLine.classpath"/>
			<arg value="${index.location}"/>
			<arg value="${index.field}"/>
		</java>
	</target>

	<!-- To extract acronyms from a Lucene index: -->
	<target name="updateSynonyms" depends="compile" description="Used to extract acronyms for a given index, to use with the synonym Webservice. Syntax: ant updateSynonyms -Dindex.location=[PATH_TO_INDEX]">
		<fail unless="index.location">Must identify index location. Use: ant updateSynonyms -Dindex.location=[PATH_TO_INDEX] (use quotes if neccesary).</fail>
		<echo message="Processing: ${index.location}"/>
		<java classname="org.vle.aid.lucene.tools.cmdLineUpdateSynonyms"
        fork="true">
			<classpath refid="cmdLine.classpath"/>
			<arg value="${index.location}"/>
		</java>
	</target>
</project>
