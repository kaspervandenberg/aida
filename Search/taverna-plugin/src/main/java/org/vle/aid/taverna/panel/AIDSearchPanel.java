package org.vle.aid.taverna.panel;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.table.TableCellRenderer;

import org.jdesktop.swingx.JXBusyLabel;
import org.jdesktop.swingx.JXGlassBox;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTaskPane;
import org.jdesktop.swingx.JXTaskPaneContainer;
import org.jdesktop.swingx.LinkModel;
import org.jdesktop.swingx.action.LinkModelAction;
import org.jdesktop.swingx.renderer.DefaultTableRenderer;
import org.jdesktop.swingx.renderer.HyperlinkProvider;
import org.json.JSONObject;
import org.lobobrowser.html.gui.HtmlPanel;
import org.vle.aid.taverna.build.AIDBuildTreeTable;
import org.vle.aid.taverna.build.AIDBuildTreeTableModel;
import org.vle.aid.taverna.components.Gui;
import org.vle.aid.taverna.search.AIDHtmlPaneLinkVisitor;
import org.vle.aid.taverna.search.AIDSearchQueryWorker;
import org.vle.aid.taverna.search.AIDSearchResultModel;
import org.vle.aid.taverna.search.AIDSearchResultNavigator;
import org.vle.aid.taverna.search.AIDSearchSettings;

/**
 * 
 * Listens to three source of events
 * <li> {@link TreeModelListener} from changes in {@link AIDBuildTreeTableModel}
 * whenever user add remove modify occurance of concepts. This one includes
 * mouse click on must occur/must not occur, also firing table model structure
 * change.
 * <li> {@link PropertyChangeListener} from changes in {@link AIDSearchSettings}
 * <li> {@link PropertyChangeListener} from changes in
 * {@link AIDSearchResultNavigator}
 * 
 * @author wibisono
 * 
 */
@SuppressWarnings("serial")
public class AIDSearchPanel extends JXTaskPaneContainer implements TreeModelListener, PropertyChangeListener {

    /* Upper part */
    JXTaskPane	       searchResultPane       = null;

    JScrollPane	      searchResultScrollPane = null;

    JXTable		  searchResultTable      = null;

    AIDSearchResultModel     searchTableModel       = null;

    /* Controls in the upper part */
    AIDSearchSettings	searchSettings;

    AIDSearchResultNavigator searchNavigator;

    /* Lower part, original documents */
    JXTaskPane	       documentPane	   = null;

    HtmlPanel		htmlPanel	      = null;

    HyperlinkProvider	provider	       = null;

    AIDHtmlPaneLinkVisitor   linkVisitor	    = null;

    AIDSearchQueryWorker     searchWorker	   = null;

    public AIDSearchPanel() {

	/* Makes the lobobrowser quiet about what they're doing */
	Logger.getLogger("org.lobobrowser").setLevel(Level.SEVERE);

	setupSearchPanel();
	setupDocumentPanel();
	add(searchResultPane, BorderLayout.CENTER);
	add(documentPane, BorderLayout.SOUTH);
	setupListeners();
    }

    /**
     * Make this Search panel listen to property change event generated by
     * the controls in search setting and search navigator.
     */
    private void setupListeners() {
	;
	searchSettings.addPropertyChangeListener(this);
	searchNavigator.addPropertyChangeListener(this);
    }

    private void setupSearchPanel() {
	setupHyperlinkProviderAndSearchTable();

	searchResultPane = new JXTaskPane();
	searchResultPane.setTitle("AID Search Concept");
	searchResultPane.setAnimated(false);

	searchResultScrollPane = new JScrollPane();
	searchResultScrollPane.getViewport().add(searchResultTable);

	searchSettings = new AIDSearchSettings();
	searchNavigator = new AIDSearchResultNavigator(0, 0, 0);

	searchResultPane.setLayout(new BorderLayout());
	searchResultPane.add(searchSettings, BorderLayout.NORTH);
	searchResultPane.add(searchResultScrollPane, BorderLayout.CENTER);
	searchResultPane.add(searchNavigator, BorderLayout.SOUTH);
    }

    /**
     * Setup the hyperlink provider which will trigger user click on search
     * result panel to update original document in the lower part.
     */
    private void setupHyperlinkProviderAndSearchTable() {
	htmlPanel = new HtmlPanel();
	linkVisitor = new AIDHtmlPaneLinkVisitor(htmlPanel);
	provider = new HyperlinkProvider(new LinkModelAction<LinkModel>(linkVisitor), LinkModel.class);

	searchTableModel = new AIDSearchResultModel();
	searchResultTable = new JXTable(searchTableModel);
	searchResultTable.setPreferredScrollableViewportSize(new Dimension(600, 500));
	searchResultTable.setDefaultRenderer(LinkModel.class, new DefaultTableRenderer(provider));

	/* Specialized renderer to make it html */

	searchResultTable.setDefaultRenderer(String.class, new ExcerptRenderer());

	/*
	 * Hard coded hack, i don't know how to set this up properly for the
	 * cells showing excerpts to look nicer
	 */
	searchResultTable.setRowHeight(40);
    }

    private void setupDocumentPanel() {
	documentPane = new JXTaskPane();
	documentPane.setLayout(new BorderLayout());
	documentPane.setTitle("Original document");
	documentPane.add(htmlPanel, BorderLayout.CENTER);
	documentPane.setAnimated(false);

    }

    /**
     * Main update search panel which will build new
     * {@link AIDSearchResultModel} and change aidSearchResultTable
     * 
     * @param queryResult
     */
    public void update(JSONObject queryResult) {
	AIDSearchResultModel newModel = new AIDSearchResultModel(queryResult);
	searchResultTable.setModel(newModel);
	Dimension preferredSize = searchResultTable.getPreferredSize();
	preferredSize.height += 50;
	searchResultScrollPane.setPreferredSize(preferredSize);
	searchResultPane.setExpanded(false);
	searchResultPane.setExpanded(true);
	searchNavigator.update(lastStart, newModel.getHits(), lastQuery + " " + lastBuildQueryString);

    }

    /**
     * Snippet/Excerpt is in HTML format, change the cell renderer for
     * string to display HTML using JTextPane
     * 
     * @author wibisono
     * 
     */
    class ExcerptRenderer extends JTextPane implements TableCellRenderer {

	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row,
		int column) {
	    String text = value.toString();
	    setText(text + "<br>");
	    setContentType("text/html");
	    setBorder(new EmptyBorder(2, 2, 2, 2));
	    return this;
	}

    }

    /**
     * Temporary hack for demo with marco
     */
    String lastBuildQueryString = "";

    String lastIndex	    = "MedLine", lastField = "content", lastQuery = "";

    int    lastStart	    = 1;

    /**
     * Search panel will be listening to {@link AIDBuildTreeTableModel} for
     * their changes. Whenever something happen there, the
     * searchResultTreeTable needs to be updated based on the query. The
     * query can be rebuilt anytime based on the root of the event.
     */

    public void treeNodesChanged(TreeModelEvent event) {
	if (event.getSource() instanceof AIDBuildTreeTable) {
	    AIDBuildTreeTable tree = (AIDBuildTreeTable) event.getSource();
	    AIDBuildTreeTableModel model = (AIDBuildTreeTableModel) tree.getTreeTableModel();
	    lastBuildQueryString = model.getQueryString();
	    AIDSearchQueryWorker worker = new AIDSearchQueryWorker(lastIndex, lastQuery + " " + lastBuildQueryString, lastStart,
		    lastField, 10, this);
	    worker.execute();

	}

    }

    public void treeNodesInserted(TreeModelEvent event) {
	if (event.getSource() instanceof AIDBuildTreeTable) {
	    AIDBuildTreeTable tree = (AIDBuildTreeTable) event.getSource();
	    AIDBuildTreeTableModel model = (AIDBuildTreeTableModel) tree.getTreeTableModel();
	    lastBuildQueryString = model.getQueryString();
	    AIDSearchQueryWorker worker = new AIDSearchQueryWorker(lastIndex, lastQuery + " " + lastBuildQueryString, lastStart,
		    lastField, 10, this);
	    worker.execute();

	}

    }

    public void treeNodesRemoved(TreeModelEvent event) {
	if (event.getSource() instanceof AIDBuildTreeTable) {
	    AIDBuildTreeTable tree = (AIDBuildTreeTable) event.getSource();
	    AIDBuildTreeTableModel model = (AIDBuildTreeTableModel) tree.getTreeTableModel();
	    lastBuildQueryString = model.getQueryString();
	    AIDSearchQueryWorker worker = new AIDSearchQueryWorker(lastIndex, lastQuery + " " + lastBuildQueryString, lastStart,
		    lastField, 10, this);
	    worker.execute();

	}

    }

    public void treeStructureChanged(TreeModelEvent event) {
	if (event.getSource() instanceof AIDBuildTreeTable) {
	    AIDBuildTreeTable tree = (AIDBuildTreeTable) event.getSource();
	    AIDBuildTreeTableModel model = (AIDBuildTreeTableModel) tree.getTreeTableModel();
	    lastBuildQueryString = model.getQueryString();
	    AIDSearchQueryWorker worker = new AIDSearchQueryWorker(lastIndex, lastQuery + " " + lastBuildQueryString, lastStart,
		    lastField, 10, this);
	    worker.execute();

	}

    }

    /**
     * Listening to changes from both {@link AIDSearchSettings} and
     * {@link AIDSearchResultNavigator}
     */
    public void propertyChange(PropertyChangeEvent event) {
	// TODO Auto-generated method stub
	if (event.getPropertyName().equals("QUERY_CHANGED"))
	    lastQuery = event.getNewValue().toString();
	if (event.getPropertyName().equals("INDEX_CHANGED"))
	    lastIndex = event.getNewValue().toString();
	if (event.getPropertyName().equals("FIELD_CHANGED"))
	    lastField = event.getNewValue().toString();
	if (event.getPropertyName().equals("NAVIGATE"))
	    lastStart = 10 * new Integer(event.getNewValue().toString());

	/* lets check first if query string is not empty we launch the worker */
	if (lastQuery.length() == 0 && lastBuildQueryString.length() == 0)
	    return;

	AIDSearchQueryWorker worker = new AIDSearchQueryWorker(lastIndex, lastQuery + " " + lastBuildQueryString, lastStart,
		lastField, 10, this);
	worker.execute();

    }

    
    /**
     * Experimental busy wheel on a glassbox whenever user update search panel, need a way also for html when navigating.
     */
    JXGlassBox  busyBox   = null;
    JXBusyLabel busyLabel = null;
    Container   glassPane = null;

    public void setBusy(boolean busy) {
	if (busy) {
	    setCursor(new Cursor(Cursor.WAIT_CURSOR));
	    if (busyBox == null) {
		busyBox = new JXGlassBox();
		busyLabel = Gui.getBusyLabel();
		busyBox.add(busyLabel);
	    }
	    busyLabel.setBusy(true);
	    busyBox.setVisible(true);

	    Point loc = getLocationOnScreen();
	    glassPane = (Container) getRootPane().getGlassPane();
	    busyBox.showOnGlassPane(glassPane, loc.x + getWidth() / 2, loc.y + getHeight() / 4);

	} else {
	    busyLabel.setBusy(false);
	    busyBox.setVisible(false);
	    glassPane.setVisible(false);
	    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}

    }

}
